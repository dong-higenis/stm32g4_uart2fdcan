
uart2fdcan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  0800a298  0800a298  0000b298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab10  0800ab10  0000ca38  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab10  0800ab10  0000bb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab18  0800ab18  0000ca38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab18  0800ab18  0000bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab1c  0800ab1c  0000bb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ab20  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .non_cache    00000858  200001e0  0800ad00  0000c1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002410  20000a38  0800b558  0000ca38  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002e48  0800b558  0000ce48  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000ca38  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e35  00000000  00000000  0000ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003441  00000000  00000000  0001f89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00022ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9e  00000000  00000000  00023d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bef  00000000  00000000  000249fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171fc  00000000  00000000  000455ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee2c  00000000  00000000  0005c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b615  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005654  00000000  00000000  0011b658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00120cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a38 	.word	0x20000a38
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a27c 	.word	0x0800a27c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a3c 	.word	0x20000a3c
 800021c:	0800a27c 	.word	0x0800a27c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <apInit>:
#include "ap.h"



void apInit (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  cliOpen(HW_UART_CH_DEBUG, 115200);
 8000ff8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f93d 	bl	800127c <cliOpen>
  logBoot(false);
 8001002:	2000      	movs	r0, #0
 8001004:	f001 fa64 	bl	80024d0 <logBoot>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <apMain>:

void apMain (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	static uint8_t ledStep = 0;
	pre_time = millis ();
 8001012:	f000 f84c 	bl	80010ae <millis>
 8001016:	6078      	str	r0, [r7, #4]
	ledOff (_DEF_LED1);
 8001018:	2000      	movs	r0, #0
 800101a:	f001 f9e3 	bl	80023e4 <ledOff>
	ledOff (_DEF_LED2);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 f9e0 	bl	80023e4 <ledOff>
	ledOff (_DEF_LED3);
 8001024:	2002      	movs	r0, #2
 8001026:	f001 f9dd 	bl	80023e4 <ledOff>
	while (1)
	{
		if (millis () - pre_time >= 100)
 800102a:	f000 f840 	bl	80010ae <millis>
 800102e:	4602      	mov	r2, r0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b63      	cmp	r3, #99	@ 0x63
 8001036:	d928      	bls.n	800108a <apMain+0x7e>
		{
			pre_time = millis ();
 8001038:	f000 f839 	bl	80010ae <millis>
 800103c:	6078      	str	r0, [r7, #4]
			switch(ledStep)
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <apMain+0x84>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d00e      	beq.n	8001064 <apMain+0x58>
 8001046:	2b02      	cmp	r3, #2
 8001048:	dc10      	bgt.n	800106c <apMain+0x60>
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <apMain+0x48>
 800104e:	2b01      	cmp	r3, #1
 8001050:	d004      	beq.n	800105c <apMain+0x50>
 8001052:	e00b      	b.n	800106c <apMain+0x60>
			{
			case 0:
				ledToggle (_DEF_LED1);
 8001054:	2000      	movs	r0, #0
 8001056:	f001 f9e5 	bl	8002424 <ledToggle>
				break;
 800105a:	e007      	b.n	800106c <apMain+0x60>
			case 1:
				ledToggle (_DEF_LED2);
 800105c:	2001      	movs	r0, #1
 800105e:	f001 f9e1 	bl	8002424 <ledToggle>
				break;
 8001062:	e003      	b.n	800106c <apMain+0x60>
			case 2:
				ledToggle (_DEF_LED3);
 8001064:	2002      	movs	r0, #2
 8001066:	f001 f9dd 	bl	8002424 <ledToggle>
				break;
 800106a:	bf00      	nop
			}
			ledStep = ((ledStep+1) % 3);
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <apMain+0x84>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <apMain+0x88>)
 8001074:	fb83 3102 	smull	r3, r1, r3, r2
 8001078:	17d3      	asrs	r3, r2, #31
 800107a:	1ac9      	subs	r1, r1, r3
 800107c:	460b      	mov	r3, r1
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	440b      	add	r3, r1
 8001082:	1ad1      	subs	r1, r2, r3
 8001084:	b2ca      	uxtb	r2, r1
 8001086:	4b02      	ldr	r3, [pc, #8]	@ (8001090 <apMain+0x84>)
 8001088:	701a      	strb	r2, [r3, #0]
		}
		cliMain();
 800108a:	f000 f9c9 	bl	8001420 <cliMain>
		if (millis () - pre_time >= 100)
 800108e:	e7cc      	b.n	800102a <apMain+0x1e>
 8001090:	20000a54 	.word	0x20000a54
 8001094:	55555556 	.word	0x55555556

08001098 <delay>:
{
  return true;
}

void delay(uint32_t ms)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f002 fda3 	bl	8003bec <HAL_Delay>
#endif
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <millis>:

uint32_t millis(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010b2:	f002 fd8f 	bl	8003bd4 <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}

080010bc <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80010c8:	2301      	movs	r3, #1
 80010ca:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2201      	movs	r2, #1
 80010e2:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	611a      	str	r2, [r3, #16]

  return ret;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001104:	2301      	movs	r3, #1
 8001106:	77fb      	strb	r3, [r7, #31]


  for (uint32_t i=0; i<length; i++)
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	e041      	b.n	8001192 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d024      	beq.n	8001160 <qbufferRead+0x68>
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d021      	beq.n	8001160 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	68c9      	ldr	r1, [r1, #12]
 8001128:	fb01 f303 	mul.w	r3, r1, r3
 800112c:	4413      	add	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
      for (uint32_t j=0; j<p_node->size; j++)
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e00a      	b.n	800114c <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	441a      	add	r2, r3
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	440b      	add	r3, r1
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	701a      	strb	r2, [r3, #0]
      for (uint32_t j=0; j<p_node->size; j++)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	429a      	cmp	r2, r3
 8001154:	d3ef      	bcc.n	8001136 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d00c      	beq.n	8001186 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	3301      	adds	r3, #1
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	6892      	ldr	r2, [r2, #8]
 8001176:	fbb3 f1f2 	udiv	r1, r3, r2
 800117a:	fb01 f202 	mul.w	r2, r1, r2
 800117e:	1a9a      	subs	r2, r3, r2
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	e002      	b.n	800118c <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8001186:	2300      	movs	r3, #0
 8001188:	77fb      	strb	r3, [r7, #31]
      break;
 800118a:	e006      	b.n	800119a <qbufferRead+0xa2>
  for (uint32_t i=0; i<length; i++)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	3301      	adds	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d3b9      	bcc.n	800110e <qbufferRead+0x16>
    }
  }

  return ret;
 800119a:	7ffb      	ldrb	r3, [r7, #31]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3724      	adds	r7, #36	@ 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6892      	ldr	r2, [r2, #8]
 80011c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80011c8:	fb01 f202 	mul.w	r2, r1, r2
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

  return ret;
 80011d0:	68fb      	ldr	r3, [r7, #12]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <cliInit+0x78>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <cliInit+0x78>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	725a      	strb	r2, [r3, #9]
  cli_node.is_busy = false;
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <cliInit+0x78>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	729a      	strb	r2, [r3, #10]
  cli_node.state   = CLI_RX_IDLE;
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <cliInit+0x78>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <cliInit+0x78>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8001204:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <cliInit+0x78>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <cliInit+0x78>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <cliInit+0x78>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <cliInit+0x78>)
 800121e:	4a0f      	ldr	r2, [pc, #60]	@ (800125c <cliInit+0x7c>)
 8001220:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <cliInit+0x78>)
 8001226:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <cliInit+0x80>)
 8001228:	f8c3 2684 	str.w	r2, [r3, #1668]	@ 0x684
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <cliInit+0x78>)
 800122e:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <cliInit+0x84>)
 8001230:	f8c3 2688 	str.w	r2, [r3, #1672]	@ 0x688
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <cliInit+0x78>)
 8001236:	4a0c      	ldr	r2, [pc, #48]	@ (8001268 <cliInit+0x88>)
 8001238:	f8c3 268c 	str.w	r2, [r3, #1676]	@ 0x68c

  cliLineClean(&cli_node);
 800123c:	4806      	ldr	r0, [pc, #24]	@ (8001258 <cliInit+0x78>)
 800123e:	f000 fb9f 	bl	8001980 <cliLineClean>


  cliAdd("help", cliShowList);
 8001242:	490a      	ldr	r1, [pc, #40]	@ (800126c <cliInit+0x8c>)
 8001244:	480a      	ldr	r0, [pc, #40]	@ (8001270 <cliInit+0x90>)
 8001246:	f000 fe3b 	bl	8001ec0 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800124a:	490a      	ldr	r1, [pc, #40]	@ (8001274 <cliInit+0x94>)
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <cliInit+0x98>)
 800124e:	f000 fe37 	bl	8001ec0 <cliAdd>

  return true;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000a58 	.word	0x20000a58
 800125c:	08001d51 	.word	0x08001d51
 8001260:	08001da1 	.word	0x08001da1
 8001264:	08001df9 	.word	0x08001df9
 8001268:	08001e41 	.word	0x08001e41
 800126c:	08001f51 	.word	0x08001f51
 8001270:	0800a298 	.word	0x0800a298
 8001274:	08001fc1 	.word	0x08001fc1
 8001278:	0800a2a0 	.word	0x0800a2a0

0800127c <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001288:	4a11      	ldr	r2, [pc, #68]	@ (80012d0 <cliOpen+0x54>)
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	7013      	strb	r3, [r2, #0]


  if (cli_node.is_open == false || cli_node.baud != baud)
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <cliOpen+0x54>)
 8001290:	7a1b      	ldrb	r3, [r3, #8]
 8001292:	f083 0301 	eor.w	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <cliOpen+0x2a>
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <cliOpen+0x54>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d00e      	beq.n	80012c4 <cliOpen+0x48>
  {
    if (baud > 0)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <cliOpen+0x48>
    {
      cli_node.baud = baud;
 80012ac:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <cliOpen+0x54>)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	6053      	str	r3, [r2, #4]
      cli_node.is_open = uartOpen(ch, baud);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fb44 	bl	8002944 <uartOpen>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <cliOpen+0x54>)
 80012c2:	721a      	strb	r2, [r3, #8]
    }
  }

  return cli_node.is_open;
 80012c4:	4b02      	ldr	r3, [pc, #8]	@ (80012d0 <cliOpen+0x54>)
 80012c6:	7a1b      	ldrb	r3, [r3, #8]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000a58 	.word	0x20000a58

080012d4 <cliGetPort>:
  }
  return ret;
}

uint8_t cliGetPort(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return cli_node.ch;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <cliGetPort+0x14>)
 80012da:	781b      	ldrb	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000a58 	.word	0x20000a58

080012ec <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80012f4:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <cliShowLog+0xdc>)
 80012f6:	7a5b      	ldrb	r3, [r3, #9]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d061      	beq.n	80013c0 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7ad8      	ldrb	r0, [r3, #11]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001306:	461a      	mov	r2, r3
 8001308:	4930      	ldr	r1, [pc, #192]	@ (80013cc <cliShowLog+0xe0>)
 800130a:	f001 fd93 	bl	8002e34 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7ad8      	ldrb	r0, [r3, #11]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001318:	461a      	mov	r2, r3
 800131a:	492d      	ldr	r1, [pc, #180]	@ (80013d0 <cliShowLog+0xe4>)
 800131c:	f001 fd8a 	bl	8002e34 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7ad8      	ldrb	r0, [r3, #11]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 800132a:	461a      	mov	r2, r3
 800132c:	4929      	ldr	r1, [pc, #164]	@ (80013d4 <cliShowLog+0xe8>)
 800132e:	f001 fd81 	bl	8002e34 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	7ad8      	ldrb	r0, [r3, #11]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800133c:	461a      	mov	r2, r3
 800133e:	4926      	ldr	r1, [pc, #152]	@ (80013d8 <cliShowLog+0xec>)
 8001340:	f001 fd78 	bl	8002e34 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7ad8      	ldrb	r0, [r3, #11]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 800134e:	461a      	mov	r2, r3
 8001350:	4922      	ldr	r1, [pc, #136]	@ (80013dc <cliShowLog+0xf0>)
 8001352:	f001 fd6f 	bl	8002e34 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7ad8      	ldrb	r0, [r3, #11]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001360:	461a      	mov	r2, r3
 8001362:	491f      	ldr	r1, [pc, #124]	@ (80013e0 <cliShowLog+0xf4>)
 8001364:	f001 fd66 	bl	8002e34 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7ad8      	ldrb	r0, [r3, #11]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001372:	461a      	mov	r2, r3
 8001374:	491b      	ldr	r1, [pc, #108]	@ (80013e4 <cliShowLog+0xf8>)
 8001376:	f001 fd5d 	bl	8002e34 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	e012      	b.n	80013a6 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7ad8      	ldrb	r0, [r3, #11]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4613      	mov	r3, r2
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	4413      	add	r3, r2
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4913      	ldr	r1, [pc, #76]	@ (80013e8 <cliShowLog+0xfc>)
 800139c:	f001 fd4a 	bl	8002e34 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80013ac:	461a      	mov	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4293      	cmp	r3, r2
 80013b2:	dbe5      	blt.n	8001380 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7adb      	ldrb	r3, [r3, #11]
 80013b8:	490c      	ldr	r1, [pc, #48]	@ (80013ec <cliShowLog+0x100>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 fd3a 	bl	8002e34 <uartPrintf>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000a58 	.word	0x20000a58
 80013cc:	0800a2a4 	.word	0x0800a2a4
 80013d0:	0800a2b4 	.word	0x0800a2b4
 80013d4:	0800a2c4 	.word	0x0800a2c4
 80013d8:	0800a2d4 	.word	0x0800a2d4
 80013dc:	0800a2e4 	.word	0x0800a2e4
 80013e0:	0800a2f4 	.word	0x0800a2f4
 80013e4:	0800a304 	.word	0x0800a304
 80013e8:	0800a314 	.word	0x0800a314
 80013ec:	0800a324 	.word	0x0800a324

080013f0 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4906      	ldr	r1, [pc, #24]	@ (8001418 <cliShowPrompt+0x28>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fd18 	bl	8002e34 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4904      	ldr	r1, [pc, #16]	@ (800141c <cliShowPrompt+0x2c>)
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fd12 	bl	8002e34 <uartPrintf>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	0800a328 	.word	0x0800a328
 800141c:	0800a32c 	.word	0x0800a32c

08001420 <cliMain>:

bool cliMain(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001424:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <cliMain+0x40>)
 8001426:	7a1b      	ldrb	r3, [r3, #8]
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <cliMain+0x16>
  {
    return false;
 8001432:	2300      	movs	r3, #0
 8001434:	e012      	b.n	800145c <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <cliMain+0x40>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fc36 	bl	8002cac <uartAvailable>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <cliMain+0x40>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fc74 	bl	8002d38 <uartRead>
 8001450:	4603      	mov	r3, r0
 8001452:	4619      	mov	r1, r3
 8001454:	4802      	ldr	r0, [pc, #8]	@ (8001460 <cliMain+0x40>)
 8001456:	f000 f831 	bl	80014bc <cliUpdate>
  }

  return true;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000a58 	.word	0x20000a58

08001464 <cliAvailable>:

uint32_t cliAvailable(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  return uartAvailable(cli_node.ch);
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <cliAvailable+0x14>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fc1d 	bl	8002cac <uartAvailable>
 8001472:	4603      	mov	r3, r0
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000a58 	.word	0x20000a58

0800147c <cliRead>:

uint8_t cliRead(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  return uartRead(cli_node.ch);
 8001480:	4b03      	ldr	r3, [pc, #12]	@ (8001490 <cliRead+0x14>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f001 fc57 	bl	8002d38 <uartRead>
 800148a:	4603      	mov	r3, r0
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000a58 	.word	0x20000a58

08001494 <cliWrite>:

uint32_t cliWrite(uint8_t *p_data, uint32_t length)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  return uartWrite(cli_node.ch, p_data, length);
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <cliWrite+0x24>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fc80 	bl	8002dac <uartWrite>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000a58 	.word	0x20000a58

080014bc <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	@ 0x30
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80014d4:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7c1b      	ldrb	r3, [r3, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 816d 	bne.w	80017ba <cliUpdate+0x2fe>
  {
    switch(rx_data)
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80014e4:	d02a      	beq.n	800153c <cliUpdate+0x80>
 80014e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80014e8:	f300 80da 	bgt.w	80016a0 <cliUpdate+0x1e4>
 80014ec:	2b1b      	cmp	r3, #27
 80014ee:	d021      	beq.n	8001534 <cliUpdate+0x78>
 80014f0:	2b1b      	cmp	r3, #27
 80014f2:	f300 80d5 	bgt.w	80016a0 <cliUpdate+0x1e4>
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d062      	beq.n	80015c0 <cliUpdate+0x104>
 80014fa:	2b0d      	cmp	r3, #13
 80014fc:	f040 80d0 	bne.w	80016a0 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fa52 	bl	80019b4 <cliLineAdd>
          cliRunCmd(p_cli);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb1d 	bl	8001b50 <cliRunCmd>
        }

        line->count = 0;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff5f 	bl	80013f0 <cliShowPrompt>
        break;
 8001532:	e142      	b.n	80017ba <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	741a      	strb	r2, [r3, #16]
        break;
 800153a:	e13e      	b.n	80017ba <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001548:	429a      	cmp	r2, r3
 800154a:	f080 8131 	bcs.w	80017b0 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800155e:	2301      	movs	r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001562:	e013      	b.n	800158c <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800156a:	461a      	mov	r2, r3
 800156c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800156e:	441a      	add	r2, r3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001576:	4619      	mov	r1, r3
 8001578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157a:	440b      	add	r3, r1
 800157c:	3b01      	subs	r3, #1
 800157e:	69f9      	ldr	r1, [r7, #28]
 8001580:	5c89      	ldrb	r1, [r1, r2]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001588:	3301      	adds	r3, #1
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800158c:	7efb      	ldrb	r3, [r7, #27]
 800158e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001590:	429a      	cmp	r2, r3
 8001592:	dbe7      	blt.n	8001564 <cliUpdate+0xa8>
          }

          line->count--;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800159a:	3b01      	subs	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015aa:	461a      	mov	r2, r3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2100      	movs	r1, #0
 80015b0:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	498d      	ldr	r1, [pc, #564]	@ (80017ec <cliUpdate+0x330>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 fc3b 	bl	8002e34 <uartPrintf>
        }
        break;
 80015be:	e0f7      	b.n	80017b0 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d055      	beq.n	8001676 <cliUpdate+0x1ba>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d050      	beq.n	8001676 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d10e      	bne.n	8001602 <cliUpdate+0x146>
          {
            line->count--;
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015fa:	461a      	mov	r2, r3
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800160e:	429a      	cmp	r2, r3
 8001610:	d231      	bcs.n	8001676 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001626:	e013      	b.n	8001650 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800162e:	461a      	mov	r2, r3
 8001630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001632:	441a      	add	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800163a:	4619      	mov	r1, r3
 800163c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163e:	440b      	add	r3, r1
 8001640:	3b01      	subs	r3, #1
 8001642:	69f9      	ldr	r1, [r7, #28]
 8001644:	5c89      	ldrb	r1, [r1, r2]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800164a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164c:	3301      	adds	r3, #1
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001650:	7ebb      	ldrb	r3, [r7, #26]
 8001652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001654:	429a      	cmp	r2, r3
 8001656:	dbe7      	blt.n	8001628 <cliUpdate+0x16c>
            }

            line->count--;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800165e:	3b01      	subs	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800166e:	461a      	mov	r2, r3
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8099 	beq.w	80017b4 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001688:	3b01      	subs	r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4956      	ldr	r1, [pc, #344]	@ (80017f0 <cliUpdate+0x334>)
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fbcb 	bl	8002e34 <uartPrintf>
        }
        break;
 800169e:	e089      	b.n	80017b4 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016a6:	3301      	adds	r3, #1
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80016ae:	4293      	cmp	r3, r2
 80016b0:	f280 8082 	bge.w	80017b8 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d124      	bne.n	800170e <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	1cf9      	adds	r1, r7, #3
 80016ca:	2201      	movs	r2, #1
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fb6d 	bl	8002dac <uartWrite>

            line->buf[line->cursor] = rx_data;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d8:	461a      	mov	r2, r3
 80016da:	78f9      	ldrb	r1, [r7, #3]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	5499      	strb	r1, [r3, r2]
            line->count++;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f6:	3301      	adds	r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001706:	461a      	mov	r2, r3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2100      	movs	r1, #0
 800170c:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800171a:	429a      	cmp	r2, r3
 800171c:	d24c      	bcs.n	80017b8 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
 8001732:	e013      	b.n	800175c <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800173a:	461a      	mov	r2, r3
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001748:	4619      	mov	r1, r3
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	1acb      	subs	r3, r1, r3
 800174e:	69f9      	ldr	r1, [r7, #28]
 8001750:	5c89      	ldrb	r1, [r1, r2]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	3301      	adds	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
 800175c:	7e7b      	ldrb	r3, [r7, #25]
 800175e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001760:	429a      	cmp	r2, r3
 8001762:	dbe7      	blt.n	8001734 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800176a:	461a      	mov	r2, r3
 800176c:	78f9      	ldrb	r1, [r7, #3]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001778:	3301      	adds	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001788:	3301      	adds	r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001798:	461a      	mov	r2, r3
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	4913      	ldr	r1, [pc, #76]	@ (80017f4 <cliUpdate+0x338>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fb43 	bl	8002e34 <uartPrintf>
          }
        }
        break;
 80017ae:	e003      	b.n	80017b8 <cliUpdate+0x2fc>
        break;
 80017b0:	bf00      	nop
 80017b2:	e002      	b.n	80017ba <cliUpdate+0x2fe>
        break;
 80017b4:	bf00      	nop
 80017b6:	e000      	b.n	80017ba <cliUpdate+0x2fe>
        break;
 80017b8:	bf00      	nop
    }
  }

  switch(p_cli->state)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7c1b      	ldrb	r3, [r3, #16]
 80017be:	3b01      	subs	r3, #1
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	f200 80d0 	bhi.w	8001966 <cliUpdate+0x4aa>
 80017c6:	a201      	add	r2, pc, #4	@ (adr r2, 80017cc <cliUpdate+0x310>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017e5 	.word	0x080017e5
 80017d4:	080017f9 	.word	0x080017f9
 80017d8:	0800195d 	.word	0x0800195d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	741a      	strb	r2, [r3, #16]
      break;
 80017e2:	e0c0      	b.n	8001966 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2203      	movs	r2, #3
 80017e8:	741a      	strb	r2, [r3, #16]
      break;
 80017ea:	e0bc      	b.n	8001966 <cliUpdate+0x4aa>
 80017ec:	0800a334 	.word	0x0800a334
 80017f0:	0800a33c 	.word	0x0800a33c
 80017f4:	0800a344 	.word	0x0800a344

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	2b44      	cmp	r3, #68	@ 0x44
 8001802:	d11a      	bne.n	800183a <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800180a:	2b00      	cmp	r3, #0
 800180c:	d015      	beq.n	800183a <cliUpdate+0x37e>
        {
          line->cursor--;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001814:	3b01      	subs	r3, #1
 8001816:	b2da      	uxtb	r2, r3
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 800181e:	231b      	movs	r3, #27
 8001820:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001822:	235b      	movs	r3, #91	@ 0x5b
 8001824:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f107 010c 	add.w	r1, r7, #12
 8001832:	2203      	movs	r2, #3
 8001834:	4618      	mov	r0, r3
 8001836:	f001 fab9 	bl	8002dac <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	2b43      	cmp	r3, #67	@ 0x43
 800183e:	d11d      	bne.n	800187c <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800184c:	429a      	cmp	r2, r3
 800184e:	d215      	bcs.n	800187c <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001856:	3301      	adds	r3, #1
 8001858:	b2da      	uxtb	r2, r3
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 8001860:	231b      	movs	r3, #27
 8001862:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001864:	235b      	movs	r3, #91	@ 0x5b
 8001866:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f107 010c 	add.w	r1, r7, #12
 8001874:	2203      	movs	r2, #3
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fa98 	bl	8002dac <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	2b41      	cmp	r3, #65	@ 0x41
 8001880:	d10c      	bne.n	800189c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001882:	2101      	movs	r1, #1
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f8d9 	bl	8001a3c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f001 facc 	bl	8002e34 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	2b42      	cmp	r3, #66	@ 0x42
 80018a0:	d10c      	bne.n	80018bc <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 80018a2:	2100      	movs	r1, #0
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f8c9 	bl	8001a3c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781a      	ldrb	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80018b4:	4619      	mov	r1, r3
 80018b6:	4610      	mov	r0, r2
 80018b8:	f001 fabc 	bl	8002e34 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	2b31      	cmp	r3, #49	@ 0x31
 80018c0:	d10f      	bne.n	80018e2 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7818      	ldrb	r0, [r3, #0]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018cc:	461a      	mov	r2, r3
 80018ce:	492a      	ldr	r1, [pc, #168]	@ (8001978 <cliUpdate+0x4bc>)
 80018d0:	f001 fab0 	bl	8002e34 <uartPrintf>
        line->cursor = 0;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2204      	movs	r2, #4
 80018e0:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	2b34      	cmp	r3, #52	@ 0x34
 80018e6:	d13d      	bne.n	8001964 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d20f      	bcs.n	8001918 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018fe:	461a      	mov	r2, r3
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	8afa      	ldrh	r2, [r7, #22]
 8001910:	491a      	ldr	r1, [pc, #104]	@ (800197c <cliUpdate+0x4c0>)
 8001912:	4618      	mov	r0, r3
 8001914:	f001 fa8e 	bl	8002e34 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001924:	429a      	cmp	r2, r3
 8001926:	d90f      	bls.n	8001948 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800192e:	461a      	mov	r2, r3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	8afa      	ldrh	r2, [r7, #22]
 8001940:	490d      	ldr	r1, [pc, #52]	@ (8001978 <cliUpdate+0x4bc>)
 8001942:	4618      	mov	r0, r3
 8001944:	f001 fa76 	bl	8002e34 <uartPrintf>
        }
        line->cursor = line->count;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2204      	movs	r2, #4
 8001958:	741a      	strb	r2, [r3, #16]
      }
      break;
 800195a:	e003      	b.n	8001964 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	741a      	strb	r2, [r3, #16]
      break;
 8001962:	e000      	b.n	8001966 <cliUpdate+0x4aa>
      break;
 8001964:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fcc0 	bl	80012ec <cliShowLog>

  return ret;
 800196c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001970:	4618      	mov	r0, r3
 8001972:	3730      	adds	r7, #48	@ 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	0800a350 	.word	0x0800a350
 800197c:	0800a358 	.word	0x0800a358

08001980 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
  p_cli->line.cursor  = 0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	223f      	movs	r2, #63	@ 0x3f
 800199c:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
  p_cli->line.buf[0]  = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80019c2:	461a      	mov	r2, r3
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	015b      	lsls	r3, r3, #5
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4610      	mov	r0, r2
 80019da:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80019de:	2243      	movs	r2, #67	@ 0x43
 80019e0:	4619      	mov	r1, r3
 80019e2:	f006 fc48 	bl	8008276 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d807      	bhi.n	8001a00 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001a06:	b25a      	sxtb	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001a14:	3301      	adds	r3, #1
 8001a16:	425a      	negs	r2, r3
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	f002 0207 	and.w	r2, r2, #7
 8001a20:	bf58      	it	pl
 8001a22:	4253      	negpl	r3, r2
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d076      	beq.n	8001b40 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7818      	ldrb	r0, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001a66:	461a      	mov	r2, r3
 8001a68:	4937      	ldr	r1, [pc, #220]	@ (8001b48 <cliLineChange+0x10c>)
 8001a6a:	f001 f9e3 	bl	8002e34 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7818      	ldrb	r0, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001a82:	461a      	mov	r2, r3
 8001a84:	4931      	ldr	r1, [pc, #196]	@ (8001b4c <cliLineChange+0x110>)
 8001a86:	f001 f9d5 	bl	8002e34 <uartPrintf>
  }


  if (key_up == true)
 8001a8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d125      	bne.n	8001ade <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001aa2:	b25a      	sxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001ab8:	4413      	add	r3, r2
 8001aba:	3b01      	subs	r3, #1
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001ac2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ac6:	fb01 f202 	mul.w	r2, r1, r2
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e013      	b.n	8001b06 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001aec:	fb93 f1f2 	sdiv	r1, r3, r2
 8001af0:	fb01 f202 	mul.w	r2, r1, r2
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	b25a      	sxtb	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b04:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	015b      	lsls	r3, r3, #5
 8001b10:	4413      	add	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	4403      	add	r3, r0
 8001b18:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001b1c:	f501 736c 	add.w	r3, r1, #944	@ 0x3b0
 8001b20:	4611      	mov	r1, r2
 8001b22:	2243      	movs	r2, #67	@ 0x43
 8001b24:	4618      	mov	r0, r3
 8001b26:	f006 fba6 	bl	8008276 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 23f2 	ldrb.w	r2, [r3, #1010]	@ 0x3f2
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1

  p_cli->hist_line_new = false;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001b3e:	e000      	b.n	8001b42 <cliLineChange+0x106>
    return;
 8001b40:	bf00      	nop
}
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	0800a350 	.word	0x0800a350
 8001b4c:	0800a360 	.word	0x0800a360

08001b50 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f857 	bl	8001c10 <cliParseArgs>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d04b      	beq.n	8001c00 <cliRunCmd+0xb0>
  {
    cliPrintf("\r\n");
 8001b68:	4828      	ldr	r0, [pc, #160]	@ (8001c0c <cliRunCmd+0xbc>)
 8001b6a:	f000 f899 	bl	8001ca0 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f8b7 	bl	8001ce8 <cliToUpper>

    p_cli->is_busy = true;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	729a      	strb	r2, [r3, #10]
    for (int i=0; i<p_cli->cmd_count; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e032      	b.n	8001bec <cliRunCmd+0x9c>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe fb3e 	bl	8000220 <strcmp>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d11d      	bne.n	8001be6 <cliRunCmd+0x96>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8a3 2678 	strh.w	r2, [r3, #1656]	@ 0x678
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	f502 62cf 	add.w	r2, r2, #1656	@ 0x678
 8001be0:	4610      	mov	r0, r2
 8001be2:	4798      	blx	r3
        break;
 8001be4:	e009      	b.n	8001bfa <cliRunCmd+0xaa>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3301      	adds	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	dbc5      	blt.n	8001b86 <cliRunCmd+0x36>
      }
    }
    p_cli->is_busy = false;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	729a      	strb	r2, [r3, #10]
  }

  return ret;
 8001c00:	7afb      	ldrb	r3, [r7, #11]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	0800a368 	.word	0x0800a368

08001c10 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001c2e:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001c36:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001c38:	8afb      	ldrh	r3, [r7, #22]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001c44:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <cliParseArgs+0x8c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f107 0208 	add.w	r2, r7, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6938      	ldr	r0, [r7, #16]
 8001c50:	f006 fa92 	bl	8008178 <strtok_r>
 8001c54:	61b8      	str	r0, [r7, #24]
 8001c56:	e010      	b.n	8001c7a <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001c58:	8afb      	ldrh	r3, [r7, #22]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	82fa      	strh	r2, [r7, #22]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <cliParseArgs+0x8c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f107 0208 	add.w	r2, r7, #8
 8001c70:	4619      	mov	r1, r3
 8001c72:	2000      	movs	r0, #0
 8001c74:	f006 fa80 	bl	8008178 <strtok_r>
 8001c78:	61b8      	str	r0, [r7, #24]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1eb      	bne.n	8001c58 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	8afa      	ldrh	r2, [r7, #22]
 8001c84:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001c88:	8afb      	ldrh	r3, [r7, #22]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <cliParseArgs+0x82>
  {
    ret = true;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <cliPrintf>:
  
  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8001ca0:	b40f      	push	{r0, r1, r2, r3}
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <cliPrintf+0x44>)
 8001cb0:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f103 0011 	add.w	r0, r3, #17
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cc0:	f006 fa0a 	bl	80080d8 <vsniprintf>
 8001cc4:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	7818      	ldrb	r0, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3311      	adds	r3, #17
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f001 f86b 	bl	8002dac <uartWrite>
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ce0:	b004      	add	sp, #16
 8001ce2:	4770      	bx	lr
 8001ce4:	20000a58 	.word	0x20000a58

08001ce8 <cliToUpper>:
  
  uartWrite(p_cli->ch, &data, 1);
}

void cliToUpper(char *str)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	81fb      	strh	r3, [r7, #14]
 8001cf4:	e018      	b.n	8001d28 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001cf6:	89fb      	ldrh	r3, [r7, #14]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001d00:	7b7b      	ldrb	r3, [r7, #13]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d014      	beq.n	8001d30 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001d06:	7b7b      	ldrb	r3, [r7, #13]
 8001d08:	2b60      	cmp	r3, #96	@ 0x60
 8001d0a:	d905      	bls.n	8001d18 <cliToUpper+0x30>
 8001d0c:	7b7b      	ldrb	r3, [r7, #13]
 8001d0e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001d10:	d802      	bhi.n	8001d18 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001d12:	7b7b      	ldrb	r3, [r7, #13]
 8001d14:	3b20      	subs	r3, #32
 8001d16:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	7b7a      	ldrb	r2, [r7, #13]
 8001d20:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	3301      	adds	r3, #1
 8001d26:	81fb      	strh	r3, [r7, #14]
 8001d28:	89fb      	ldrh	r3, [r7, #14]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	d9e3      	bls.n	8001cf6 <cliToUpper+0xe>
 8001d2e:	e000      	b.n	8001d32 <cliToUpper+0x4a>
      break;
 8001d30:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d105      	bne.n	8001d44 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
  }
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <cliArgsGetData+0x4c>)
 8001d60:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d301      	bcc.n	8001d74 <cliArgsGetData+0x24>
  {
    return 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e00e      	b.n	8001d92 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f006 f838 	bl	8007dfc <strtoul>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001d90:	68fb      	ldr	r3, [r7, #12]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000a58 	.word	0x20000a58

08001da0 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001db0:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <cliArgsGetFloat+0x54>)
 8001db2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d302      	bcc.n	8001dc8 <cliArgsGetFloat+0x28>
  {
    return 0;
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	e00d      	b.n	8001de4 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f005 ff3d 	bl	8007c58 <strtof>
 8001dde:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000a58 	.word	0x20000a58

08001df8 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <cliArgsGetStr+0x44>)
 8001e08:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d301      	bcc.n	8001e1c <cliArgsGetStr+0x24>
  {
    return 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e008      	b.n	8001e2e <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]

  return ret;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000a58 	.word	0x20000a58

08001e40 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, const char *p_str)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <cliArgsIsStr+0x50>)
 8001e52:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d301      	bcc.n	8001e66 <cliArgsIsStr+0x26>
  {
    return 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e010      	b.n	8001e88 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	6838      	ldr	r0, [r7, #0]
 8001e78:	f7fe f9d2 	bl	8000220 <strcmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <cliArgsIsStr+0x46>
  {
    ret = true;
 8001e82:	2301      	movs	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000a58 	.word	0x20000a58

08001e94 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <cliKeepLoop+0x28>)
 8001e9c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 ff02 	bl	8002cac <uartAvailable>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <cliKeepLoop+0x1e>
  {
    return true;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8001eb2:	2300      	movs	r3, #0
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000a58 	.word	0x20000a58

08001ec0 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <cliAdd+0x8c>)
 8001ed0:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001ed8:	2b1f      	cmp	r3, #31
 8001eda:	d901      	bls.n	8001ee0 <cliAdd+0x20>
  {
    return false;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e030      	b.n	8001f42 <cliAdd+0x82>
  }

  index = p_cli->cmd_count;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001ee6:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001ee8:	89fa      	ldrh	r2, [r7, #14]
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f006 f9b2 	bl	8008266 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001f02:	89fa      	ldrh	r2, [r7, #14]
 8001f04:	6939      	ldr	r1, [r7, #16]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001f18:	89fa      	ldrh	r2, [r7, #14]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fedc 	bl	8001ce8 <cliToUpper>

  p_cli->cmd_count++;
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001f36:	3301      	adds	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f8a3 23f4 	strh.w	r2, [r3, #1012]	@ 0x3f4

  return ret;
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000a58 	.word	0x20000a58

08001f50 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8001f58:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <cliShowList+0x60>)
 8001f5a:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8001f5c:	4815      	ldr	r0, [pc, #84]	@ (8001fb4 <cliShowList+0x64>)
 8001f5e:	f7ff fe9f 	bl	8001ca0 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8001f62:	4815      	ldr	r0, [pc, #84]	@ (8001fb8 <cliShowList+0x68>)
 8001f64:	f7ff fe9c 	bl	8001ca0 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e011      	b.n	8001f92 <cliShowList+0x42>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fe8d 	bl	8001ca0 <cliPrintf>
    cliPrintf("\r\n");
 8001f86:	480b      	ldr	r0, [pc, #44]	@ (8001fb4 <cliShowList+0x64>)
 8001f88:	f7ff fe8a 	bl	8001ca0 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	dbe6      	blt.n	8001f6e <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8001fa0:	4806      	ldr	r0, [pc, #24]	@ (8001fbc <cliShowList+0x6c>)
 8001fa2:	f7ff fe7d 	bl	8001ca0 <cliPrintf>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000a58 	.word	0x20000a58
 8001fb4:	0800a368 	.word	0x0800a368
 8001fb8:	0800a36c 	.word	0x0800a36c
 8001fbc:	0800a38c 	.word	0x0800a38c

08001fc0 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	@ 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8001fc8:	2310      	movs	r3, #16
 8001fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8001fe0:	4842      	ldr	r0, [pc, #264]	@ (80020ec <cliMemoryDump+0x12c>)
 8001fe2:	f7ff fe5d 	bl	8001ca0 <cliPrintf>
 8001fe6:	e07d      	b.n	80020e4 <cliMemoryDump+0x124>
    return;
  }

  if(argc > 1)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	dd09      	ble.n	8002002 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f005 feff 	bl	8007dfc <strtoul>
 8001ffe:	4603      	mov	r3, r0
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f005 fef6 	bl	8007dfc <strtoul>
 8002010:	4603      	mov	r3, r0
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002018:	4835      	ldr	r0, [pc, #212]	@ (80020f0 <cliMemoryDump+0x130>)
 800201a:	f7ff fe41 	bl	8001ca0 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800201e:	2300      	movs	r3, #0
 8002020:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002022:	e05b      	b.n	80020dc <cliMemoryDump+0x11c>
  {
    if((idx%4) == 0)
 8002024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d104      	bne.n	8002038 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	4619      	mov	r1, r3
 8002032:	4830      	ldr	r0, [pc, #192]	@ (80020f4 <cliMemoryDump+0x134>)
 8002034:	f7ff fe34 	bl	8001ca0 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	482e      	ldr	r0, [pc, #184]	@ (80020f8 <cliMemoryDump+0x138>)
 8002040:	f7ff fe2e 	bl	8001ca0 <cliPrintf>

    if ((idx%4) == 3)
 8002044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002046:	425a      	negs	r2, r3
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	bf58      	it	pl
 8002052:	4253      	negpl	r3, r2
 8002054:	2b03      	cmp	r3, #3
 8002056:	d13b      	bne.n	80020d0 <cliMemoryDump+0x110>
    {
      cliPrintf ("  |");
 8002058:	4828      	ldr	r0, [pc, #160]	@ (80020fc <cliMemoryDump+0x13c>)
 800205a:	f7ff fe21 	bl	8001ca0 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
 8002062:	e02c      	b.n	80020be <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e01d      	b.n	80020ac <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002070:	f107 020c 	add.w	r2, r7, #12
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b1f      	cmp	r3, #31
 800207c:	d910      	bls.n	80020a0 <cliMemoryDump+0xe0>
 800207e:	f107 020c 	add.w	r2, r7, #12
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b7e      	cmp	r3, #126	@ 0x7e
 800208a:	d809      	bhi.n	80020a0 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800208c:	f107 020c 	add.w	r2, r7, #12
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	4819      	ldr	r0, [pc, #100]	@ (8002100 <cliMemoryDump+0x140>)
 800209a:	f7ff fe01 	bl	8001ca0 <cliPrintf>
 800209e:	e002      	b.n	80020a6 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80020a0:	4818      	ldr	r0, [pc, #96]	@ (8002104 <cliMemoryDump+0x144>)
 80020a2:	f7ff fdfd 	bl	8001ca0 <cliPrintf>
        for (i=0;i<4;i++)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	ddde      	ble.n	8002070 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	3304      	adds	r3, #4
 80020b6:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	3301      	adds	r3, #1
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	ddcf      	ble.n	8002064 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80020c4:	4810      	ldr	r0, [pc, #64]	@ (8002108 <cliMemoryDump+0x148>)
 80020c6:	f7ff fdeb 	bl	8001ca0 <cliPrintf>
      delay(1);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f7fe ffe4 	bl	8001098 <delay>
    }
    addr++;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	3304      	adds	r3, #4
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 80020d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d8:	3301      	adds	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e0:	429a      	cmp	r2, r3
 80020e2:	db9f      	blt.n	8002024 <cliMemoryDump+0x64>
  }
}
 80020e4:	3730      	adds	r7, #48	@ 0x30
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	0800a3ac 	.word	0x0800a3ac
 80020f0:	0800a3c0 	.word	0x0800a3c0
 80020f4:	0800a3c8 	.word	0x0800a3c8
 80020f8:	0800a3d4 	.word	0x0800a3d4
 80020fc:	0800a3dc 	.word	0x0800a3dc
 8002100:	0800a3e0 	.word	0x0800a3e0
 8002104:	0800a3e4 	.word	0x0800a3e4
 8002108:	0800a3e8 	.word	0x0800a3e8

0800210c <gpioInit>:
#endif



bool gpioInit(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
  bool ret = true;
 8002112:	2301      	movs	r3, #1
 8002114:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8002116:	4904      	ldr	r1, [pc, #16]	@ (8002128 <gpioInit+0x1c>)
 8002118:	4804      	ldr	r0, [pc, #16]	@ (800212c <gpioInit+0x20>)
 800211a:	f7ff fed1 	bl	8001ec0 <cliAdd>
#endif

  return ret;
 800211e:	79fb      	ldrb	r3, [r7, #7]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	08002211 	.word	0x08002211
 800212c:	0800a410 	.word	0x0800a410

08002130 <gpioPinWrite>:

  return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	460a      	mov	r2, r1
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	4613      	mov	r3, r2
 800213e:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d82e      	bhi.n	80021a4 <gpioPinWrite+0x74>
  {
    return;
  }

  if (value)
 8002146:	79bb      	ldrb	r3, [r7, #6]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <gpioPinWrite+0x48>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <gpioPinWrite+0x7c>)
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <gpioPinWrite+0x7c>)
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b299      	uxth	r1, r3
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	4a11      	ldr	r2, [pc, #68]	@ (80021ac <gpioPinWrite+0x7c>)
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	4413      	add	r3, r2
 800216c:	3309      	adds	r3, #9
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	f002 fda1 	bl	8004cb8 <HAL_GPIO_WritePin>
 8002176:	e016      	b.n	80021a6 <gpioPinWrite+0x76>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	4a0c      	ldr	r2, [pc, #48]	@ (80021ac <gpioPinWrite+0x7c>)
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4413      	add	r3, r2
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <gpioPinWrite+0x7c>)
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	4413      	add	r3, r2
 800218a:	3304      	adds	r3, #4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b299      	uxth	r1, r3
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	4a06      	ldr	r2, [pc, #24]	@ (80021ac <gpioPinWrite+0x7c>)
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	330a      	adds	r3, #10
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	f002 fd8b 	bl	8004cb8 <HAL_GPIO_WritePin>
 80021a2:	e000      	b.n	80021a6 <gpioPinWrite+0x76>
    return;
 80021a4:	bf00      	nop
  }
}
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	0800a6a0 	.word	0x0800a6a0

080021b0 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <gpioPinRead+0x18>
  {
    return false;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e01c      	b.n	8002202 <gpioPinRead+0x52>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	4a10      	ldr	r2, [pc, #64]	@ (800220c <gpioPinRead+0x5c>)
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	4413      	add	r3, r2
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	490d      	ldr	r1, [pc, #52]	@ (800220c <gpioPinRead+0x5c>)
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	440b      	add	r3, r1
 80021da:	3304      	adds	r3, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f002 fd50 	bl	8004c88 <HAL_GPIO_ReadPin>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4619      	mov	r1, r3
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4a07      	ldr	r2, [pc, #28]	@ (800220c <gpioPinRead+0x5c>)
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4413      	add	r3, r2
 80021f4:	3309      	adds	r3, #9
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4299      	cmp	r1, r3
 80021fa:	d101      	bne.n	8002200 <gpioPinRead+0x50>
  {
    ret = true;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	0800a6a0 	.word	0x0800a6a0

08002210 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002218:	2300      	movs	r3, #0
 800221a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "info") == true)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d123      	bne.n	800226c <cliGpio+0x5c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	495c      	ldr	r1, [pc, #368]	@ (800239c <cliGpio+0x18c>)
 800222a:	2000      	movs	r0, #0
 800222c:	4798      	blx	r3
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <cliGpio+0x5c>
  {
    for (int i=0; i<GPIO_MAX_CH; i++)
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e013      	b.n	8002262 <cliGpio+0x52>
    {
      cliPrintf("%d %-16s - %d\n", i, gpio_tbl[i].p_name, gpioPinRead(i));
 800223a:	4a59      	ldr	r2, [pc, #356]	@ (80023a0 <cliGpio+0x190>)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4413      	add	r3, r2
 8002242:	330c      	adds	r3, #12
 8002244:	681c      	ldr	r4, [r3, #0]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ffb0 	bl	80021b0 <gpioPinRead>
 8002250:	4603      	mov	r3, r0
 8002252:	4622      	mov	r2, r4
 8002254:	6939      	ldr	r1, [r7, #16]
 8002256:	4853      	ldr	r0, [pc, #332]	@ (80023a4 <cliGpio+0x194>)
 8002258:	f7ff fd22 	bl	8001ca0 <cliPrintf>
    for (int i=0; i<GPIO_MAX_CH; i++)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	3301      	adds	r3, #1
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b02      	cmp	r3, #2
 8002266:	dde8      	ble.n	800223a <cliGpio+0x2a>
    }
    ret = true;
 8002268:	2301      	movs	r3, #1
 800226a:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 1 && args->isStr(0, "show") == true)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d128      	bne.n	80022c6 <cliGpio+0xb6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	494b      	ldr	r1, [pc, #300]	@ (80023a8 <cliGpio+0x198>)
 800227a:	2000      	movs	r0, #0
 800227c:	4798      	blx	r3
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <cliGpio+0xb6>
  {
    while(cliKeepLoop())
 8002284:	e018      	b.n	80022b8 <cliGpio+0xa8>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e00c      	b.n	80022a6 <cliGpio+0x96>
      {
        cliPrintf("%d", gpioPinRead(i));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff8d 	bl	80021b0 <gpioPinRead>
 8002296:	4603      	mov	r3, r0
 8002298:	4619      	mov	r1, r3
 800229a:	4844      	ldr	r0, [pc, #272]	@ (80023ac <cliGpio+0x19c>)
 800229c:	f7ff fd00 	bl	8001ca0 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3301      	adds	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	ddef      	ble.n	800228c <cliGpio+0x7c>
      }
      cliPrintf("\n");
 80022ac:	4840      	ldr	r0, [pc, #256]	@ (80023b0 <cliGpio+0x1a0>)
 80022ae:	f7ff fcf7 	bl	8001ca0 <cliPrintf>
      delay(100);
 80022b2:	2064      	movs	r0, #100	@ 0x64
 80022b4:	f7fe fef0 	bl	8001098 <delay>
    while(cliKeepLoop())
 80022b8:	f7ff fdec 	bl	8001e94 <cliKeepLoop>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e1      	bne.n	8002286 <cliGpio+0x76>
    }
    ret = true;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d123      	bne.n	8002316 <cliGpio+0x106>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4938      	ldr	r1, [pc, #224]	@ (80023b4 <cliGpio+0x1a4>)
 80022d4:	2000      	movs	r0, #0
 80022d6:	4798      	blx	r3
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01b      	beq.n	8002316 <cliGpio+0x106>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2001      	movs	r0, #1
 80022e4:	4798      	blx	r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	72fb      	strb	r3, [r7, #11]

    while(cliKeepLoop())
 80022ea:	e00d      	b.n	8002308 <cliGpio+0xf8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80022ec:	7afc      	ldrb	r4, [r7, #11]
 80022ee:	7afb      	ldrb	r3, [r7, #11]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <gpioPinRead>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4621      	mov	r1, r4
 80022fc:	482e      	ldr	r0, [pc, #184]	@ (80023b8 <cliGpio+0x1a8>)
 80022fe:	f7ff fccf 	bl	8001ca0 <cliPrintf>
      delay(100);
 8002302:	2064      	movs	r0, #100	@ 0x64
 8002304:	f7fe fec8 	bl	8001098 <delay>
    while(cliKeepLoop())
 8002308:	f7ff fdc4 	bl	8001e94 <cliKeepLoop>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ec      	bne.n	80022ec <cliGpio+0xdc>
    }

    ret = true;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d126      	bne.n	800236c <cliGpio+0x15c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	4926      	ldr	r1, [pc, #152]	@ (80023bc <cliGpio+0x1ac>)
 8002324:	2000      	movs	r0, #0
 8002326:	4798      	blx	r3
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01e      	beq.n	800236c <cliGpio+0x15c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2001      	movs	r0, #1
 8002334:	4798      	blx	r3
 8002336:	4603      	mov	r3, r0
 8002338:	72bb      	strb	r3, [r7, #10]
    data = (uint8_t)args->getData(2);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2002      	movs	r0, #2
 8002340:	4798      	blx	r3
 8002342:	4603      	mov	r3, r0
 8002344:	727b      	strb	r3, [r7, #9]

    gpioPinWrite(ch, data);
 8002346:	7a7b      	ldrb	r3, [r7, #9]
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2da      	uxtb	r2, r3
 8002352:	7abb      	ldrb	r3, [r7, #10]
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff feea 	bl	8002130 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 800235c:	7abb      	ldrb	r3, [r7, #10]
 800235e:	7a7a      	ldrb	r2, [r7, #9]
 8002360:	4619      	mov	r1, r3
 8002362:	4817      	ldr	r0, [pc, #92]	@ (80023c0 <cliGpio+0x1b0>)
 8002364:	f7ff fc9c 	bl	8001ca0 <cliPrintf>
    ret = true;
 8002368:	2301      	movs	r3, #1
 800236a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	f083 0301 	eor.w	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <cliGpio+0x184>
  {
    cliPrintf("gpio info\n");
 8002378:	4812      	ldr	r0, [pc, #72]	@ (80023c4 <cliGpio+0x1b4>)
 800237a:	f7ff fc91 	bl	8001ca0 <cliPrintf>
    cliPrintf("gpio show\n");
 800237e:	4812      	ldr	r0, [pc, #72]	@ (80023c8 <cliGpio+0x1b8>)
 8002380:	f7ff fc8e 	bl	8001ca0 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8002384:	2102      	movs	r1, #2
 8002386:	4811      	ldr	r0, [pc, #68]	@ (80023cc <cliGpio+0x1bc>)
 8002388:	f7ff fc8a 	bl	8001ca0 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 800238c:	2102      	movs	r1, #2
 800238e:	4810      	ldr	r0, [pc, #64]	@ (80023d0 <cliGpio+0x1c0>)
 8002390:	f7ff fc86 	bl	8001ca0 <cliPrintf>
  }
}
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}
 800239c:	0800a418 	.word	0x0800a418
 80023a0:	0800a6a0 	.word	0x0800a6a0
 80023a4:	0800a420 	.word	0x0800a420
 80023a8:	0800a430 	.word	0x0800a430
 80023ac:	0800a438 	.word	0x0800a438
 80023b0:	0800a43c 	.word	0x0800a43c
 80023b4:	0800a440 	.word	0x0800a440
 80023b8:	0800a448 	.word	0x0800a448
 80023bc:	0800a45c 	.word	0x0800a45c
 80023c0:	0800a464 	.word	0x0800a464
 80023c4:	0800a478 	.word	0x0800a478
 80023c8:	0800a484 	.word	0x0800a484
 80023cc:	0800a490 	.word	0x0800a490
 80023d0:	0800a4a4 	.word	0x0800a4a4

080023d4 <ledInit>:
};



bool ledInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return true;
 80023d8:	2301      	movs	r3, #1
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d811      	bhi.n	8002418 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <ledOff+0x3c>)
 80023f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	4a08      	ldr	r2, [pc, #32]	@ (8002420 <ledOff+0x3c>)
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	8899      	ldrh	r1, [r3, #4]
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	4a05      	ldr	r2, [pc, #20]	@ (8002420 <ledOff+0x3c>)
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4413      	add	r3, r2
 800240e:	79db      	ldrb	r3, [r3, #7]
 8002410:	461a      	mov	r2, r3
 8002412:	f002 fc51 	bl	8004cb8 <HAL_GPIO_WritePin>
 8002416:	e000      	b.n	800241a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8002418:	bf00      	nop
}
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	0800a6d0 	.word	0x0800a6d0

08002424 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d80d      	bhi.n	8002450 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <ledToggle+0x34>)
 8002438:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	4906      	ldr	r1, [pc, #24]	@ (8002458 <ledToggle+0x34>)
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	889b      	ldrh	r3, [r3, #4]
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f002 fc4d 	bl	8004ce8 <HAL_GPIO_TogglePin>
 800244e:	e000      	b.n	8002452 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002450:	bf00      	nop
}
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	0800a6d0 	.word	0x0800a6d0

0800245c <logInit>:




bool logInit(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
#ifdef _USE_HW_RTOS
  mutex_lock = xSemaphoreCreateMutex();
#endif

  log_buf_boot.line_index     = 0;
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <logInit+0x58>)
 8002462:	2200      	movs	r2, #0
 8002464:	801a      	strh	r2, [r3, #0]
  log_buf_boot.buf_length     = 0;
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <logInit+0x58>)
 8002468:	2200      	movs	r2, #0
 800246a:	805a      	strh	r2, [r3, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <logInit+0x58>)
 800246e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002472:	809a      	strh	r2, [r3, #4]
  log_buf_boot.buf_index      = 0;
 8002474:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <logInit+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	80da      	strh	r2, [r3, #6]
  log_buf_boot.buf            = buf_boot;
 800247a:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <logInit+0x58>)
 800247c:	4a0e      	ldr	r2, [pc, #56]	@ (80024b8 <logInit+0x5c>)
 800247e:	609a      	str	r2, [r3, #8]


  log_buf_list.line_index     = 0;
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <logInit+0x60>)
 8002482:	2200      	movs	r2, #0
 8002484:	801a      	strh	r2, [r3, #0]
  log_buf_list.buf_length     = 0;
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <logInit+0x60>)
 8002488:	2200      	movs	r2, #0
 800248a:	805a      	strh	r2, [r3, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <logInit+0x60>)
 800248e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002492:	809a      	strh	r2, [r3, #4]
  log_buf_list.buf_index      = 0;
 8002494:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <logInit+0x60>)
 8002496:	2200      	movs	r2, #0
 8002498:	80da      	strh	r2, [r3, #6]
  log_buf_list.buf            = buf_list;
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <logInit+0x60>)
 800249c:	4a08      	ldr	r2, [pc, #32]	@ (80024c0 <logInit+0x64>)
 800249e:	609a      	str	r2, [r3, #8]


  is_init = true;
 80024a0:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <logInit+0x68>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("log", cliCmd);
 80024a6:	4908      	ldr	r1, [pc, #32]	@ (80024c8 <logInit+0x6c>)
 80024a8:	4808      	ldr	r0, [pc, #32]	@ (80024cc <logInit+0x70>)
 80024aa:	f7ff fd09 	bl	8001ec0 <cliAdd>
#endif

  return true;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200010e8 	.word	0x200010e8
 80024b8:	20001100 	.word	0x20001100
 80024bc:	200010f4 	.word	0x200010f4
 80024c0:	20001900 	.word	0x20001900
 80024c4:	20002900 	.word	0x20002900
 80024c8:	080026a1 	.word	0x080026a1
 80024cc:	0800a4c0 	.word	0x0800a4c0

080024d0 <logBoot>:
{
  is_enable = false;
}

void logBoot(uint8_t enable)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  is_boot_log = enable;
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <logBoot+0x28>)
 80024e8:	701a      	strb	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000004 	.word	0x20000004

080024fc <logOpen>:

bool logOpen(uint8_t ch, uint32_t baud)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  log_ch   = ch;
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <logOpen+0x3c>)
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	7013      	strb	r3, [r2, #0]
  log_baud = baud;
 800250e:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <logOpen+0x40>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6013      	str	r3, [r2, #0]
  is_open  = true;
 8002514:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <logOpen+0x44>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]

  is_open = uartOpen(ch, baud);
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fa10 	bl	8002944 <uartOpen>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <logOpen+0x44>)
 800252a:	701a      	strb	r2, [r3, #0]

  return is_open;
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <logOpen+0x44>)
 800252e:	781b      	ldrb	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20002902 	.word	0x20002902
 800253c:	20000008 	.word	0x20000008
 8002540:	20002901 	.word	0x20002901

08002544 <logBufPrintf>:

bool logBufPrintf(log_buf_t *p_log, char *p_data, uint32_t length)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t buf_last;
  uint8_t *p_buf;
  int buf_len;


  buf_last = p_log->buf_index + length + 8;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88db      	ldrh	r3, [r3, #6]
 8002554:	461a      	mov	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	3308      	adds	r3, #8
 800255c:	61fb      	str	r3, [r7, #28]
  if (buf_last > p_log->buf_length_max)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	889b      	ldrh	r3, [r3, #4]
 8002562:	461a      	mov	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4293      	cmp	r3, r2
 8002568:	d911      	bls.n	800258e <logBufPrintf+0x4a>
  {
    p_log->buf_index = 0;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	80da      	strh	r2, [r3, #6]
    buf_last = p_log->buf_index + length + 8;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88db      	ldrh	r3, [r3, #6]
 8002574:	461a      	mov	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	3308      	adds	r3, #8
 800257c:	61fb      	str	r3, [r7, #28]

    if (buf_last > p_log->buf_length_max)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	889b      	ldrh	r3, [r3, #4]
 8002582:	461a      	mov	r2, r3
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <logBufPrintf+0x4a>
    {
      return false;
 800258a:	2300      	movs	r3, #0
 800258c:	e033      	b.n	80025f6 <logBufPrintf+0xb2>
    }
  }

  p_buf = &p_log->buf[p_log->buf_index];
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	88d2      	ldrh	r2, [r2, #6]
 8002596:	4413      	add	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]

  buf_len = snprintf((char *)p_buf, length + 8, "%04X\t%s", p_log->line_index, p_data);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f103 0108 	add.w	r1, r3, #8
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	4a14      	ldr	r2, [pc, #80]	@ (8002600 <logBufPrintf+0xbc>)
 80025ae:	69b8      	ldr	r0, [r7, #24]
 80025b0:	f005 fcf0 	bl	8007f94 <sniprintf>
 80025b4:	6178      	str	r0, [r7, #20]
  p_log->line_index++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	801a      	strh	r2, [r3, #0]
  p_log->buf_index += buf_len;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	88da      	ldrh	r2, [r3, #6]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	80da      	strh	r2, [r3, #6]


  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	885b      	ldrh	r3, [r3, #2]
 80025d6:	461a      	mov	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4413      	add	r3, r2
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	8892      	ldrh	r2, [r2, #4]
 80025e0:	4293      	cmp	r3, r2
 80025e2:	dc07      	bgt.n	80025f4 <logBufPrintf+0xb0>
  {
    p_log->buf_length += buf_len;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	885a      	ldrh	r2, [r3, #2]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	805a      	strh	r2, [r3, #2]
  }

  return true;
 80025f4:	2301      	movs	r3, #1
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	0800a4c4 	.word	0x0800a4c4

08002604 <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 8002604:	b40f      	push	{r0, r1, r2, r3}
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 800260c:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <logPrintf+0x7c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d12a      	bne.n	8002670 <logPrintf+0x6c>


  va_start(args, fmt);
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002628:	4816      	ldr	r0, [pc, #88]	@ (8002684 <logPrintf+0x80>)
 800262a:	f005 fd55 	bl	80080d8 <vsniprintf>
 800262e:	6078      	str	r0, [r7, #4]

  if (is_open == true && is_enable == true)
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <logPrintf+0x84>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <logPrintf+0x4a>
 8002638:	4b14      	ldr	r3, [pc, #80]	@ (800268c <logPrintf+0x88>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <logPrintf+0x4a>
  {
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <logPrintf+0x8c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	490f      	ldr	r1, [pc, #60]	@ (8002684 <logPrintf+0x80>)
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fbaf 	bl	8002dac <uartWrite>
  }

  if (is_boot_log)
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <logPrintf+0x90>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <logPrintf+0x5e>
  {
    logBufPrintf(&log_buf_boot, print_buf, len);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	461a      	mov	r2, r3
 800265a:	490a      	ldr	r1, [pc, #40]	@ (8002684 <logPrintf+0x80>)
 800265c:	480e      	ldr	r0, [pc, #56]	@ (8002698 <logPrintf+0x94>)
 800265e:	f7ff ff71 	bl	8002544 <logBufPrintf>
  }
  logBufPrintf(&log_buf_list, print_buf, len);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	461a      	mov	r2, r3
 8002666:	4907      	ldr	r1, [pc, #28]	@ (8002684 <logPrintf+0x80>)
 8002668:	480c      	ldr	r0, [pc, #48]	@ (800269c <logPrintf+0x98>)
 800266a:	f7ff ff6b 	bl	8002544 <logBufPrintf>
 800266e:	e000      	b.n	8002672 <logPrintf+0x6e>
  if (is_init != true) return;
 8002670:	bf00      	nop
  va_end(args);

#ifdef _USE_HW_RTOS
  unLock();
#endif
}
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800267a:	b004      	add	sp, #16
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20002900 	.word	0x20002900
 8002684:	20002904 	.word	0x20002904
 8002688:	20002901 	.word	0x20002901
 800268c:	20000005 	.word	0x20000005
 8002690:	20002902 	.word	0x20002902
 8002694:	20000004 	.word	0x20000004
 8002698:	200010e8 	.word	0x200010e8
 800269c:	200010f4 	.word	0x200010f4

080026a0 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80026a8:	2300      	movs	r3, #0
 80026aa:	77fb      	strb	r3, [r7, #31]



  if (args->argc == 1 && args->isStr(0, "info"))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d124      	bne.n	80026fe <cliCmd+0x5e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	494c      	ldr	r1, [pc, #304]	@ (80027ec <cliCmd+0x14c>)
 80026ba:	2000      	movs	r0, #0
 80026bc:	4798      	blx	r3
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <cliCmd+0x5e>
  {
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 80026c4:	4b4a      	ldr	r3, [pc, #296]	@ (80027f0 <cliCmd+0x150>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	484a      	ldr	r0, [pc, #296]	@ (80027f4 <cliCmd+0x154>)
 80026cc:	f7ff fae8 	bl	8001ca0 <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 80026d0:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <cliCmd+0x150>)
 80026d2:	885b      	ldrh	r3, [r3, #2]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4848      	ldr	r0, [pc, #288]	@ (80027f8 <cliCmd+0x158>)
 80026d8:	f7ff fae2 	bl	8001ca0 <cliPrintf>
    cliPrintf("\n");
 80026dc:	4847      	ldr	r0, [pc, #284]	@ (80027fc <cliCmd+0x15c>)
 80026de:	f7ff fadf 	bl	8001ca0 <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 80026e2:	4b47      	ldr	r3, [pc, #284]	@ (8002800 <cliCmd+0x160>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	4846      	ldr	r0, [pc, #280]	@ (8002804 <cliCmd+0x164>)
 80026ea:	f7ff fad9 	bl	8001ca0 <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 80026ee:	4b44      	ldr	r3, [pc, #272]	@ (8002800 <cliCmd+0x160>)
 80026f0:	885b      	ldrh	r3, [r3, #2]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4844      	ldr	r0, [pc, #272]	@ (8002808 <cliCmd+0x168>)
 80026f6:	f7ff fad3 	bl	8001ca0 <cliPrintf>

    ret = true;
 80026fa:	2301      	movs	r3, #1
 80026fc:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d12d      	bne.n	8002762 <cliCmd+0xc2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4940      	ldr	r1, [pc, #256]	@ (800280c <cliCmd+0x16c>)
 800270c:	2000      	movs	r0, #0
 800270e:	4798      	blx	r3
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d025      	beq.n	8002762 <cliCmd+0xc2>
  {
    uint32_t index = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]

    while(cliKeepLoop())
 800271a:	e019      	b.n	8002750 <cliCmd+0xb0>
    {
      uint32_t buf_len;

      buf_len = log_buf_boot.buf_length - index;
 800271c:	4b34      	ldr	r3, [pc, #208]	@ (80027f0 <cliCmd+0x150>)
 800271e:	885b      	ldrh	r3, [r3, #2]
 8002720:	461a      	mov	r2, r3
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
      if (buf_len == 0)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <cliCmd+0xbc>
      {
        break;
      }
      if (buf_len > 64)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b40      	cmp	r3, #64	@ 0x40
 8002732:	d901      	bls.n	8002738 <cliCmd+0x98>
      {
        buf_len = 64;
 8002734:	2340      	movs	r3, #64	@ 0x40
 8002736:	617b      	str	r3, [r7, #20]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 8002738:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <cliCmd+0x150>)
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	6979      	ldr	r1, [r7, #20]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fea6 	bl	8001494 <cliWrite>
      index += buf_len;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	4413      	add	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
    while(cliKeepLoop())
 8002750:	f7ff fba0 	bl	8001e94 <cliKeepLoop>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1e0      	bne.n	800271c <cliCmd+0x7c>
 800275a:	e000      	b.n	800275e <cliCmd+0xbe>
        break;
 800275c:	bf00      	nop

      #ifdef _USE_HW_RTOS
      unLock();
      #endif
    }
    ret = true;
 800275e:	2301      	movs	r3, #1
 8002760:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d12d      	bne.n	80027c6 <cliCmd+0x126>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	4928      	ldr	r1, [pc, #160]	@ (8002810 <cliCmd+0x170>)
 8002770:	2000      	movs	r0, #0
 8002772:	4798      	blx	r3
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d025      	beq.n	80027c6 <cliCmd+0x126>
  {
    uint32_t index = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]

    while(cliKeepLoop())
 800277e:	e019      	b.n	80027b4 <cliCmd+0x114>
    {
      uint32_t buf_len;

      buf_len = log_buf_list.buf_length - index;
 8002780:	4b1f      	ldr	r3, [pc, #124]	@ (8002800 <cliCmd+0x160>)
 8002782:	885b      	ldrh	r3, [r3, #2]
 8002784:	461a      	mov	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	60fb      	str	r3, [r7, #12]
      if (buf_len == 0)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d016      	beq.n	80027c0 <cliCmd+0x120>
      {
        break;
      }
      if (buf_len > 64)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b40      	cmp	r3, #64	@ 0x40
 8002796:	d901      	bls.n	800279c <cliCmd+0xfc>
      {
        buf_len = 64;
 8002798:	2340      	movs	r3, #64	@ 0x40
 800279a:	60fb      	str	r3, [r7, #12]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 800279c:	4b18      	ldr	r3, [pc, #96]	@ (8002800 <cliCmd+0x160>)
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	68f9      	ldr	r1, [r7, #12]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fe74 	bl	8001494 <cliWrite>
      index += buf_len;
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4413      	add	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
    while(cliKeepLoop())
 80027b4:	f7ff fb6e 	bl	8001e94 <cliKeepLoop>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1e0      	bne.n	8002780 <cliCmd+0xe0>
 80027be:	e000      	b.n	80027c2 <cliCmd+0x122>
        break;
 80027c0:	bf00      	nop
      #ifdef _USE_HW_RTOS
      unLock();
      #endif

    }
    ret = true;
 80027c2:	2301      	movs	r3, #1
 80027c4:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 80027c6:	7ffb      	ldrb	r3, [r7, #31]
 80027c8:	f083 0301 	eor.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <cliCmd+0x144>
  {
    cliPrintf("log info\n");
 80027d2:	4810      	ldr	r0, [pc, #64]	@ (8002814 <cliCmd+0x174>)
 80027d4:	f7ff fa64 	bl	8001ca0 <cliPrintf>
    cliPrintf("log boot\n");
 80027d8:	480f      	ldr	r0, [pc, #60]	@ (8002818 <cliCmd+0x178>)
 80027da:	f7ff fa61 	bl	8001ca0 <cliPrintf>
    cliPrintf("log list\n");
 80027de:	480f      	ldr	r0, [pc, #60]	@ (800281c <cliCmd+0x17c>)
 80027e0:	f7ff fa5e 	bl	8001ca0 <cliPrintf>
  }
}
 80027e4:	bf00      	nop
 80027e6:	3720      	adds	r7, #32
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	0800a4cc 	.word	0x0800a4cc
 80027f0:	200010e8 	.word	0x200010e8
 80027f4:	0800a4d4 	.word	0x0800a4d4
 80027f8:	0800a4e8 	.word	0x0800a4e8
 80027fc:	0800a4fc 	.word	0x0800a4fc
 8002800:	200010f4 	.word	0x200010f4
 8002804:	0800a500 	.word	0x0800a500
 8002808:	0800a514 	.word	0x0800a514
 800280c:	0800a528 	.word	0x0800a528
 8002810:	0800a530 	.word	0x0800a530
 8002814:	0800a538 	.word	0x0800a538
 8002818:	0800a544 	.word	0x0800a544
 800281c:	0800a550 	.word	0x0800a550

08002820 <swtimerInit>:
//-- External Functions
//


bool swtimerInit(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 8002826:	4b20      	ldr	r3, [pc, #128]	@ (80028a8 <swtimerInit+0x88>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <swtimerInit+0x12>
  {
    return false;  // 이미 한번 실행했다면 정지.
 800282e:	2300      	movs	r3, #0
 8002830:	e033      	b.n	800289a <swtimerInit+0x7a>
  }


  // 구조체 초기화
  for(i=0; i<HW_SWTIMER_MAX_CH; i++)
 8002832:	2300      	movs	r3, #0
 8002834:	71fb      	strb	r3, [r7, #7]
 8002836:	e029      	b.n	800288c <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 8002838:	79fa      	ldrb	r2, [r7, #7]
 800283a:	491c      	ldr	r1, [pc, #112]	@ (80028ac <swtimerInit+0x8c>)
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 800284a:	79fa      	ldrb	r2, [r7, #7]
 800284c:	4917      	ldr	r1, [pc, #92]	@ (80028ac <swtimerInit+0x8c>)
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3304      	adds	r3, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 800285e:	79fa      	ldrb	r2, [r7, #7]
 8002860:	4912      	ldr	r1, [pc, #72]	@ (80028ac <swtimerInit+0x8c>)
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	3308      	adds	r3, #8
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct    = NULL;
 8002872:	79fa      	ldrb	r2, [r7, #7]
 8002874:	490d      	ldr	r1, [pc, #52]	@ (80028ac <swtimerInit+0x8c>)
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	330c      	adds	r3, #12
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
  for(i=0; i<HW_SWTIMER_MAX_CH; i++)
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	3301      	adds	r3, #1
 800288a:	71fb      	strb	r3, [r7, #7]
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2b07      	cmp	r3, #7
 8002890:	d9d2      	bls.n	8002838 <swtimerInit+0x18>
  }

  excute = 1;
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <swtimerInit+0x88>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]

  return true;
 8002898:	2301      	movs	r3, #1
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20002aa4 	.word	0x20002aa4
 80028ac:	20002a04 	.word	0x20002a04

080028b0 <uartInit>:
    {"USART1 DEBUG ", USART1, &huart1, &hdma_usart1_rx, NULL, false},
    {"USART2 RS232 ", USART2, &huart2, &hdma_usart2_rx, NULL, false},
  };

bool uartInit(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	e02c      	b.n	8002916 <uartInit+0x66>
  {
    uart_tbl[i].is_open = false;
 80028bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002934 <uartInit+0x84>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].baud = 115200;
 80028ce:	4a19      	ldr	r2, [pc, #100]	@ (8002934 <uartInit+0x84>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3304      	adds	r3, #4
 80028de:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028e2:	601a      	str	r2, [r3, #0]
    uart_tbl[i].rx_cnt = 0;
 80028e4:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <uartInit+0x84>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
    uart_tbl[i].tx_cnt = 0;    
 80028fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002934 <uartInit+0x84>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3301      	adds	r3, #1
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b01      	cmp	r3, #1
 800291a:	ddcf      	ble.n	80028bc <uartInit+0xc>
  }

  is_init = true;
 800291c:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <uartInit+0x88>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("uart", cliUart);
 8002922:	4906      	ldr	r1, [pc, #24]	@ (800293c <uartInit+0x8c>)
 8002924:	4806      	ldr	r0, [pc, #24]	@ (8002940 <uartInit+0x90>)
 8002926:	f7ff facb 	bl	8001ec0 <cliAdd>
#endif

  return true;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200001e0 	.word	0x200001e0
 8002938:	20002aa5 	.word	0x20002aa5
 800293c:	08002ee5 	.word	0x08002ee5
 8002940:	0800a57c 	.word	0x0800a57c

08002944 <uartOpen>:
{
  return is_init;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef ret_hal;


  if (ch >= UART_MAX_CH) return false;
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d901      	bls.n	800295e <uartOpen+0x1a>
 800295a:	2300      	movs	r3, #0
 800295c:	e1a0      	b.n	8002ca0 <uartOpen+0x35c>

  if (uart_tbl[ch].is_open == true && uart_tbl[ch].baud == baud)
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4a93      	ldr	r2, [pc, #588]	@ (8002bb0 <uartOpen+0x26c>)
 8002962:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00d      	beq.n	800298e <uartOpen+0x4a>
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	4a8e      	ldr	r2, [pc, #568]	@ (8002bb0 <uartOpen+0x26c>)
 8002976:	f240 412c 	movw	r1, #1068	@ 0x42c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d101      	bne.n	800298e <uartOpen+0x4a>
  {
    return true;
 800298a:	2301      	movs	r3, #1
 800298c:	e188      	b.n	8002ca0 <uartOpen+0x35c>
  }


  switch(ch)
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	2b01      	cmp	r3, #1
 8002992:	dc02      	bgt.n	800299a <uartOpen+0x56>
 8002994:	2b00      	cmp	r3, #0
 8002996:	da02      	bge.n	800299e <uartOpen+0x5a>
 8002998:	e181      	b.n	8002c9e <uartOpen+0x35a>
 800299a:	2b02      	cmp	r3, #2
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
      }
      break;

		case _DEF_UART3:
			break;
 800299c:	e17f      	b.n	8002c9e <uartOpen+0x35a>
      uart_tbl[ch].baud      = baud;
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	4a83      	ldr	r2, [pc, #524]	@ (8002bb0 <uartOpen+0x26c>)
 80029a2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_huart   = uart_hw_tbl[ch].p_huart;
 80029b2:	79fa      	ldrb	r2, [r7, #7]
 80029b4:	79f9      	ldrb	r1, [r7, #7]
 80029b6:	487f      	ldr	r0, [pc, #508]	@ (8002bb4 <uartOpen+0x270>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4403      	add	r3, r0
 80029c2:	3308      	adds	r3, #8
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	487a      	ldr	r0, [pc, #488]	@ (8002bb0 <uartOpen+0x26c>)
 80029c8:	f240 432c 	movw	r3, #1068	@ 0x42c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4403      	add	r3, r0
 80029d2:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80029d6:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_hdma_rx = uart_hw_tbl[ch].p_hdma_rx;
 80029d8:	79fa      	ldrb	r2, [r7, #7]
 80029da:	79f9      	ldrb	r1, [r7, #7]
 80029dc:	4875      	ldr	r0, [pc, #468]	@ (8002bb4 <uartOpen+0x270>)
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4403      	add	r3, r0
 80029e8:	330c      	adds	r3, #12
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4870      	ldr	r0, [pc, #448]	@ (8002bb0 <uartOpen+0x26c>)
 80029ee:	f240 432c 	movw	r3, #1068	@ 0x42c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4403      	add	r3, r0
 80029f8:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 80029fc:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;    
 80029fe:	79fa      	ldrb	r2, [r7, #7]
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	496b      	ldr	r1, [pc, #428]	@ (8002bb0 <uartOpen+0x26c>)
 8002a04:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002a08:	fb00 f303 	mul.w	r3, r0, r3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	4867      	ldr	r0, [pc, #412]	@ (8002bb4 <uartOpen+0x270>)
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4403      	add	r3, r0
 8002a20:	3304      	adds	r3, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	600b      	str	r3, [r1, #0]
      uart_tbl[ch].p_huart->Init.BaudRate       = baud;
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4a61      	ldr	r2, [pc, #388]	@ (8002bb0 <uartOpen+0x26c>)
 8002a2a:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength     = UART_WORDLENGTH_8B;
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	4a5b      	ldr	r2, [pc, #364]	@ (8002bb0 <uartOpen+0x26c>)
 8002a42:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
      uart_tbl[ch].p_huart->Init.StopBits       = UART_STOPBITS_1;
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	4a55      	ldr	r2, [pc, #340]	@ (8002bb0 <uartOpen+0x26c>)
 8002a5a:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
      uart_tbl[ch].p_huart->Init.Parity         = UART_PARITY_NONE;
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4a4f      	ldr	r2, [pc, #316]	@ (8002bb0 <uartOpen+0x26c>)
 8002a72:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
      uart_tbl[ch].p_huart->Init.Mode           = UART_MODE_TX_RX;
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	4a49      	ldr	r2, [pc, #292]	@ (8002bb0 <uartOpen+0x26c>)
 8002a8a:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	615a      	str	r2, [r3, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4a43      	ldr	r2, [pc, #268]	@ (8002bb0 <uartOpen+0x26c>)
 8002aa2:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	619a      	str	r2, [r3, #24]
      uart_tbl[ch].p_huart->Init.OverSampling   = UART_OVERSAMPLING_16;
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	4a3d      	ldr	r2, [pc, #244]	@ (8002bb0 <uartOpen+0x26c>)
 8002aba:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	4a37      	ldr	r2, [pc, #220]	@ (8002bb0 <uartOpen+0x26c>)
 8002ad2:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	621a      	str	r2, [r3, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	@ (8002bb0 <uartOpen+0x26c>)
 8002aea:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb0 <uartOpen+0x26c>)
 8002b02:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	629a      	str	r2, [r3, #40]	@ 0x28
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002b24:	4a22      	ldr	r2, [pc, #136]	@ (8002bb0 <uartOpen+0x26c>)
 8002b26:	1898      	adds	r0, r3, r2
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	3308      	adds	r3, #8
 8002b34:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb0 <uartOpen+0x26c>)
 8002b36:	4413      	add	r3, r2
 8002b38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7fe fabd 	bl	80010bc <qbufferCreate>
      __HAL_RCC_DMA1_CLK_ENABLE();
 8002b42:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <uartOpen+0x274>)
 8002b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b46:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <uartOpen+0x274>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <uartOpen+0x274>)
 8002b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	@ (8002bb0 <uartOpen+0x26c>)
 8002b5e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 f8f6 	bl	8005d60 <HAL_UART_DeInit>
      if (uart_hw_tbl[ch].is_rs485 == true)
 8002b74:	79fa      	ldrb	r2, [r7, #7]
 8002b76:	490f      	ldr	r1, [pc, #60]	@ (8002bb4 <uartOpen+0x270>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	3314      	adds	r3, #20
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d018      	beq.n	8002bbc <uartOpen+0x278>
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <uartOpen+0x26c>)
 8002b8e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f004 f8e8 	bl	8006d78 <HAL_RS485Ex_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73bb      	strb	r3, [r7, #14]
 8002bac:	e015      	b.n	8002bda <uartOpen+0x296>
 8002bae:	bf00      	nop
 8002bb0:	200001e0 	.word	0x200001e0
 8002bb4:	0800a6e8 	.word	0x0800a6e8
 8002bb8:	40021000 	.word	0x40021000
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca8 <uartOpen+0x364>)
 8002bc0:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 f875 	bl	8005cc0 <HAL_UART_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	73bb      	strb	r3, [r7, #14]
      if (ret_hal == HAL_OK)
 8002bda:	7bbb      	ldrb	r3, [r7, #14]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d15d      	bne.n	8002c9c <uartOpen+0x358>
        ret = true;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
        uart_tbl[ch].is_open = true;
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <uartOpen+0x364>)
 8002be8:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca8 <uartOpen+0x364>)
 8002bfa:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	3308      	adds	r3, #8
 8002c16:	4a24      	ldr	r2, [pc, #144]	@ (8002ca8 <uartOpen+0x364>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f003 f96c 	bl	8005efc <HAL_UART_Receive_DMA>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <uartOpen+0x2ea>
          ret = false;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <uartOpen+0x364>)
 8002c32:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8002c40:	6819      	ldr	r1, [r3, #0]
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <uartOpen+0x364>)
 8002c46:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002c4a:	fb00 f303 	mul.w	r3, r0, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	1a8a      	subs	r2, r1, r2
 8002c62:	4911      	ldr	r1, [pc, #68]	@ (8002ca8 <uartOpen+0x364>)
 8002c64:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002c68:	fb00 f303 	mul.w	r3, r0, r3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002c72:	601a      	str	r2, [r3, #0]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8002c74:	79fa      	ldrb	r2, [r7, #7]
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	490b      	ldr	r1, [pc, #44]	@ (8002ca8 <uartOpen+0x364>)
 8002c7a:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002c7e:	fb00 f202 	mul.w	r2, r0, r2
 8002c82:	440a      	add	r2, r1
 8002c84:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	4907      	ldr	r1, [pc, #28]	@ (8002ca8 <uartOpen+0x364>)
 8002c8c:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002c90:	fb00 f303 	mul.w	r3, r0, r3
 8002c94:	440b      	add	r3, r1
 8002c96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c9a:	601a      	str	r2, [r3, #0]
      break;
 8002c9c:	bf00      	nop
  }

  return ret;
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200001e0 	.word	0x200001e0

08002cac <uartAvailable>:

  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]


  switch(ch)
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	dc02      	bgt.n	8002cc6 <uartAvailable+0x1a>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da02      	bge.n	8002cca <uartAvailable+0x1e>
 8002cc4:	e030      	b.n	8002d28 <uartAvailable+0x7c>
 8002cc6:	2b02      	cmp	r3, #2
		}
		break;

    case _DEF_UART3:

      break;
 8002cc8:	e02e      	b.n	8002d28 <uartAvailable+0x7c>
			uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <uartAvailable+0x88>)
 8002cce:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	4a14      	ldr	r2, [pc, #80]	@ (8002d34 <uartAvailable+0x88>)
 8002ce2:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	1a8a      	subs	r2, r1, r2
 8002cfa:	490e      	ldr	r1, [pc, #56]	@ (8002d34 <uartAvailable+0x88>)
 8002cfc:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002d00:	fb00 f303 	mul.w	r3, r0, r3
 8002d04:	440b      	add	r3, r1
 8002d06:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002d0a:	601a      	str	r2, [r3, #0]
			ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002d1a:	4a06      	ldr	r2, [pc, #24]	@ (8002d34 <uartAvailable+0x88>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fa42 	bl	80011a8 <qbufferAvailable>
 8002d24:	60f8      	str	r0, [r7, #12]
		break;
 8002d26:	bf00      	nop
  }

  return ret;
 8002d28:	68fb      	ldr	r3, [r7, #12]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200001e0 	.word	0x200001e0

08002d38 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	dc02      	bgt.n	8002d52 <uartRead+0x1a>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	da02      	bge.n	8002d56 <uartRead+0x1e>
 8002d50:	e011      	b.n	8002d76 <uartRead+0x3e>
 8002d52:	2b02      	cmp	r3, #2
    case _DEF_UART1:
    case _DEF_UART2:
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
      break;
    case _DEF_UART3:
      break;
 8002d54:	e00f      	b.n	8002d76 <uartRead+0x3e>
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002d64:	4a10      	ldr	r2, [pc, #64]	@ (8002da8 <uartRead+0x70>)
 8002d66:	4413      	add	r3, r2
 8002d68:	f107 010f 	add.w	r1, r7, #15
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe f9c2 	bl	80010f8 <qbufferRead>
      break;
 8002d74:	bf00      	nop
  }
  uart_tbl[ch].rx_cnt++;
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	490b      	ldr	r1, [pc, #44]	@ (8002da8 <uartRead+0x70>)
 8002d7a:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002d7e:	fb03 f202 	mul.w	r2, r3, r2
 8002d82:	440a      	add	r2, r1
 8002d84:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	3201      	adds	r2, #1
 8002d8c:	4906      	ldr	r1, [pc, #24]	@ (8002da8 <uartRead+0x70>)
 8002d8e:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002d92:	fb00 f303 	mul.w	r3, r0, r3
 8002d96:	440b      	add	r3, r1
 8002d98:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002d9c:	601a      	str	r2, [r3, #0]

  return ret;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200001e0 	.word	0x200001e0

08002dac <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]


  switch(ch)
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	dc02      	bgt.n	8002dca <uartWrite+0x1e>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	da02      	bge.n	8002dce <uartWrite+0x22>
 8002dc8:	e017      	b.n	8002dfa <uartWrite+0x4e>
 8002dca:	2b02      	cmp	r3, #2
				ret = length;
			}
    	break;
    case _DEF_UART3:

      break;
 8002dcc:	e015      	b.n	8002dfa <uartWrite+0x4e>
    	if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	4a17      	ldr	r2, [pc, #92]	@ (8002e30 <uartWrite+0x84>)
 8002dd2:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	2364      	movs	r3, #100	@ 0x64
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	f002 fff8 	bl	8005dde <HAL_UART_Transmit>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <uartWrite+0x4c>
				ret = length;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	617b      	str	r3, [r7, #20]
    	break;
 8002df8:	bf00      	nop
  }
  uart_tbl[ch].tx_cnt += ret;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8002e30 <uartWrite+0x84>)
 8002dfe:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	440a      	add	r2, r1
 8002e14:	4906      	ldr	r1, [pc, #24]	@ (8002e30 <uartWrite+0x84>)
 8002e16:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8002e24:	601a      	str	r2, [r3, #0]

  return ret;
 8002e26:	697b      	ldr	r3, [r7, #20]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200001e0 	.word	0x200001e0

08002e34 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8002e34:	b40e      	push	{r1, r2, r3}
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b0c7      	sub	sp, #284	@ 0x11c
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e42:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002e46:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002e48:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002e4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e54:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8002e56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e5e:	f107 0010 	add.w	r0, r7, #16
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002e68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e6c:	f005 f934 	bl	80080d8 <vsniprintf>
 8002e70:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8002e74:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002e78:	f107 0110 	add.w	r1, r7, #16
 8002e7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002e80:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff ff90 	bl	8002dac <uartWrite>
 8002e8c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8002e90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ea0:	b003      	add	sp, #12
 8002ea2:	4770      	bx	lr

08002ea4 <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]


  if (ch >= UART_MAX_CH) return 0;
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d901      	bls.n	8002ebc <uartGetBaud+0x18>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e00a      	b.n	8002ed2 <uartGetBaud+0x2e>
  if (ch == HW_UART_CH_USB)
    ret = cdcGetBaud();
  else
    ret = uart_tbl[ch].baud;
  #else
  ret = uart_tbl[ch].baud;
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	4a08      	ldr	r2, [pc, #32]	@ (8002ee0 <uartGetBaud+0x3c>)
 8002ec0:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]
  #endif
  
  return ret;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	200001e0 	.word	0x200001e0

08002ee4 <cliUart>:
  return uart_tbl[ch].tx_cnt;
}

#ifdef _USE_HW_CLI
void cliUart(cli_args_t *args)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002eec:	2300      	movs	r3, #0
 8002eee:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "info"))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d127      	bne.n	8002f48 <cliUart+0x64>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	494d      	ldr	r1, [pc, #308]	@ (8003034 <cliUart+0x150>)
 8002efe:	2000      	movs	r0, #0
 8002f00:	4798      	blx	r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01f      	beq.n	8002f48 <cliUart+0x64>
  {
    for (int i=0; i<UART_MAX_CH; i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e017      	b.n	8002f3e <cliUart+0x5a>
    {
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1c5c      	adds	r4, r3, #1
 8002f12:	4949      	ldr	r1, [pc, #292]	@ (8003038 <cliUart+0x154>)
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	681d      	ldr	r5, [r3, #0]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ffbc 	bl	8002ea4 <uartGetBaud>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	462a      	mov	r2, r5
 8002f30:	4621      	mov	r1, r4
 8002f32:	4842      	ldr	r0, [pc, #264]	@ (800303c <cliUart+0x158>)
 8002f34:	f7fe feb4 	bl	8001ca0 <cliPrintf>
    for (int i=0; i<UART_MAX_CH; i++)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	dde4      	ble.n	8002f0e <cliUart+0x2a>
    }
    ret = true;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "test"))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d15f      	bne.n	8003010 <cliUart+0x12c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	493a      	ldr	r1, [pc, #232]	@ (8003040 <cliUart+0x15c>)
 8002f56:	2000      	movs	r0, #0
 8002f58:	4798      	blx	r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d057      	beq.n	8003010 <cliUart+0x12c>
  {
    uint8_t uart_ch;

    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2001      	movs	r0, #1
 8002f66:	4798      	blx	r3
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dd11      	ble.n	8002f92 <cliUart+0xae>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2001      	movs	r0, #1
 8002f74:	4798      	blx	r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	dc08      	bgt.n	8002f8e <cliUart+0xaa>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2001      	movs	r0, #1
 8002f82:	4798      	blx	r3
 8002f84:	4603      	mov	r3, r0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e002      	b.n	8002f94 <cliUart+0xb0>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <cliUart+0xb0>
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]

    if (uart_ch != cliGetPort())
 8002f96:	f7fe f99d 	bl	80012d4 <cliGetPort>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d02e      	beq.n	8003002 <cliUart+0x11e>
    {
      uint8_t rx_data;

      while(1)
      {
        if (uartAvailable(uart_ch) > 0)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fe80 	bl	8002cac <uartAvailable>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00c      	beq.n	8002fcc <cliUart+0xe8>
        {
          rx_data = uartRead(uart_ch);
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff febf 	bl	8002d38 <uartRead>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73bb      	strb	r3, [r7, #14]
          cliPrintf("<- _DEF_UART%d RX : 0x%X\n", uart_ch + 1, rx_data);
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	7bba      	ldrb	r2, [r7, #14]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	481f      	ldr	r0, [pc, #124]	@ (8003044 <cliUart+0x160>)
 8002fc8:	f7fe fe6a 	bl	8001ca0 <cliPrintf>
        }

        if (cliAvailable() > 0)
 8002fcc:	f7fe fa4a 	bl	8001464 <cliAvailable>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0e6      	beq.n	8002fa4 <cliUart+0xc0>
        {
          rx_data = cliRead();
 8002fd6:	f7fe fa51 	bl	800147c <cliRead>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	73bb      	strb	r3, [r7, #14]
          if (rx_data == 'q')
 8002fde:	7bbb      	ldrb	r3, [r7, #14]
 8002fe0:	2b71      	cmp	r3, #113	@ 0x71
 8002fe2:	d012      	beq.n	800300a <cliUart+0x126>
          {
            break;
          }
          else
          {
            uartWrite(uart_ch, &rx_data, 1);
 8002fe4:	f107 010e 	add.w	r1, r7, #14
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2201      	movs	r2, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fedd 	bl	8002dac <uartWrite>
            cliPrintf("-> _DEF_UART%d TX : 0x%X\n", uart_ch + 1, rx_data);            
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	7bba      	ldrb	r2, [r7, #14]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4813      	ldr	r0, [pc, #76]	@ (8003048 <cliUart+0x164>)
 8002ffc:	f7fe fe50 	bl	8001ca0 <cliPrintf>
        if (uartAvailable(uart_ch) > 0)
 8003000:	e7d0      	b.n	8002fa4 <cliUart+0xc0>
        }
      }
    }
    else
    {
      cliPrintf("This is cliPort\n");
 8003002:	4812      	ldr	r0, [pc, #72]	@ (800304c <cliUart+0x168>)
 8003004:	f7fe fe4c 	bl	8001ca0 <cliPrintf>
 8003008:	e000      	b.n	800300c <cliUart+0x128>
            break;
 800300a:	bf00      	nop
    }
    ret = true;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
  }

  if (ret == false)
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	f083 0301 	eor.w	r3, r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <cliUart+0x146>
  {
    cliPrintf("uart info\n");
 800301c:	480c      	ldr	r0, [pc, #48]	@ (8003050 <cliUart+0x16c>)
 800301e:	f7fe fe3f 	bl	8001ca0 <cliPrintf>
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
 8003022:	2102      	movs	r1, #2
 8003024:	480b      	ldr	r0, [pc, #44]	@ (8003054 <cliUart+0x170>)
 8003026:	f7fe fe3b 	bl	8001ca0 <cliPrintf>
  }
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bdb0      	pop	{r4, r5, r7, pc}
 8003032:	bf00      	nop
 8003034:	0800a584 	.word	0x0800a584
 8003038:	0800a6e8 	.word	0x0800a6e8
 800303c:	0800a58c 	.word	0x0800a58c
 8003040:	0800a5a8 	.word	0x0800a5a8
 8003044:	0800a5b0 	.word	0x0800a5b0
 8003048:	0800a5cc 	.word	0x0800a5cc
 800304c:	0800a5e8 	.word	0x0800a5e8
 8003050:	0800a5fc 	.word	0x0800a5fc
 8003054:	0800a608 	.word	0x0800a608

08003058 <hwInit>:




bool hwInit(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
	cliInit();
 800305e:	f7fe f8bf 	bl	80011e0 <cliInit>
	logInit();
 8003062:	f7ff f9fb 	bl	800245c <logInit>
	swtimerInit();
 8003066:	f7ff fbdb 	bl	8002820 <swtimerInit>
	gpioInit();
 800306a:	f7ff f84f 	bl	800210c <gpioInit>
	ledInit();
 800306e:	f7ff f9b1 	bl	80023d4 <ledInit>
	uartInit();
 8003072:	f7ff fc1d 	bl	80028b0 <uartInit>
	for (int i=0; i<HW_UART_MAX_CH; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	e009      	b.n	8003090 <hwInit+0x38>
	{
		uartOpen(i, 115200);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fc5d 	bl	8002944 <uartOpen>
	for (int i=0; i<HW_UART_MAX_CH; i++)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3301      	adds	r3, #1
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	ddf2      	ble.n	800307c <hwInit+0x24>
	}
	logOpen(HW_UART_CH_DEBUG, 115200);
 8003096:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800309a:	2000      	movs	r0, #0
 800309c:	f7ff fa2e 	bl	80024fc <logOpen>
	logPrintf("\r\n[ Firmware Begin... ]\r\n");
 80030a0:	480f      	ldr	r0, [pc, #60]	@ (80030e0 <hwInit+0x88>)
 80030a2:	f7ff faaf 	bl	8002604 <logPrintf>
	logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 80030a6:	490f      	ldr	r1, [pc, #60]	@ (80030e4 <hwInit+0x8c>)
 80030a8:	480f      	ldr	r0, [pc, #60]	@ (80030e8 <hwInit+0x90>)
 80030aa:	f7ff faab 	bl	8002604 <logPrintf>
	logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 80030ae:	490f      	ldr	r1, [pc, #60]	@ (80030ec <hwInit+0x94>)
 80030b0:	480f      	ldr	r0, [pc, #60]	@ (80030f0 <hwInit+0x98>)
 80030b2:	f7ff faa7 	bl	8002604 <logPrintf>
	logPrintf("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq()/1000000);
 80030b6:	f002 fb33 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a0d      	ldr	r2, [pc, #52]	@ (80030f4 <hwInit+0x9c>)
 80030be:	fb82 1203 	smull	r1, r2, r2, r3
 80030c2:	1492      	asrs	r2, r2, #18
 80030c4:	17db      	asrs	r3, r3, #31
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	4619      	mov	r1, r3
 80030ca:	480b      	ldr	r0, [pc, #44]	@ (80030f8 <hwInit+0xa0>)
 80030cc:	f7ff fa9a 	bl	8002604 <logPrintf>
	logPrintf("\n");
 80030d0:	480a      	ldr	r0, [pc, #40]	@ (80030fc <hwInit+0xa4>)
 80030d2:	f7ff fa97 	bl	8002604 <logPrintf>

  return true;
 80030d6:	2301      	movs	r3, #1
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	0800a61c 	.word	0x0800a61c
 80030e4:	0800a638 	.word	0x0800a638
 80030e8:	0800a644 	.word	0x0800a644
 80030ec:	0800a65c 	.word	0x0800a65c
 80030f0:	0800a668 	.word	0x0800a668
 80030f4:	431bde83 	.word	0x431bde83
 80030f8:	0800a680 	.word	0x0800a680
 80030fc:	0800a69c 	.word	0x0800a69c

08003100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003104:	f000 fd01 	bl	8003b0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003108:	f000 f812 	bl	8003130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800310c:	f000 f96a 	bl	80033e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003110:	f000 f936 	bl	8003380 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003114:	f000 f856 	bl	80031c4 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8003118:	f000 f89a 	bl	8003250 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800311c:	f000 f8e4 	bl	80032e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  hwInit();
 8003120:	f7ff ff9a 	bl	8003058 <hwInit>
  apInit();
 8003124:	f7fd ff66 	bl	8000ff4 <apInit>
  apMain();
 8003128:	f7fd ff70 	bl	800100c <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800312c:	bf00      	nop
 800312e:	e7fd      	b.n	800312c <main+0x2c>

08003130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b094      	sub	sp, #80	@ 0x50
 8003134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003136:	f107 0318 	add.w	r3, r7, #24
 800313a:	2238      	movs	r2, #56	@ 0x38
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f004 ffd8 	bl	80080f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003152:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003156:	f001 fde1 	bl	8004d1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800315a:	2301      	movs	r3, #1
 800315c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800315e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003162:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003164:	2302      	movs	r3, #2
 8003166:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003168:	2303      	movs	r3, #3
 800316a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800316c:	2302      	movs	r3, #2
 800316e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8003170:	234b      	movs	r3, #75	@ 0x4b
 8003172:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003174:	2302      	movs	r3, #2
 8003176:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003178:	2302      	movs	r3, #2
 800317a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800317c:	2302      	movs	r3, #2
 800317e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003180:	f107 0318 	add.w	r3, r7, #24
 8003184:	4618      	mov	r0, r3
 8003186:	f001 fe7d 	bl	8004e84 <HAL_RCC_OscConfig>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003190:	f000 f98a 	bl	80034a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003194:	230f      	movs	r3, #15
 8003196:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003198:	2303      	movs	r3, #3
 800319a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031a0:	2300      	movs	r3, #0
 80031a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	2104      	movs	r1, #4
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 f97b 	bl	80054a8 <HAL_RCC_ClockConfig>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80031b8:	f000 f976 	bl	80034a8 <Error_Handler>
  }
}
 80031bc:	bf00      	nop
 80031be:	3750      	adds	r7, #80	@ 0x50
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80031c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031ca:	4a20      	ldr	r2, [pc, #128]	@ (800324c <MX_FDCAN1_Init+0x88>)
 80031cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80031ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80031d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031dc:	2200      	movs	r2, #0
 80031de:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80031e0:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80031e6:	4b18      	ldr	r3, [pc, #96]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80031ec:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031f4:	2210      	movs	r2, #16
 80031f6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80031f8:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80031fe:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 8003200:	2202      	movs	r2, #2
 8003202:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003204:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 8003206:	2202      	movs	r2, #2
 8003208:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800320a:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 800320c:	2201      	movs	r2, #1
 800320e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8003210:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 8003212:	2201      	movs	r2, #1
 8003214:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 8003218:	2201      	movs	r2, #1
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 800321e:	2201      	movs	r2, #1
 8003220:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 8003224:	2200      	movs	r2, #0
 8003226:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003228:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 800322a:	2200      	movs	r2, #0
 800322c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 8003230:	2200      	movs	r2, #0
 8003232:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	@ (8003248 <MX_FDCAN1_Init+0x84>)
 8003236:	f001 f913 	bl	8004460 <HAL_FDCAN_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003240:	f000 f932 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20002aa8 	.word	0x20002aa8
 800324c:	40006400 	.word	0x40006400

08003250 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003254:	4b22      	ldr	r3, [pc, #136]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 8003256:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <MX_USART1_UART_Init+0x94>)
 8003258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800325a:	4b21      	ldr	r3, [pc, #132]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 800325c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003262:	4b1f      	ldr	r3, [pc, #124]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003268:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800326e:	4b1c      	ldr	r3, [pc, #112]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003274:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 8003276:	220c      	movs	r2, #12
 8003278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327a:	4b19      	ldr	r3, [pc, #100]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003280:	4b17      	ldr	r3, [pc, #92]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003286:	4b16      	ldr	r3, [pc, #88]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800328c:	4b14      	ldr	r3, [pc, #80]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003292:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 8003294:	2200      	movs	r2, #0
 8003296:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003298:	4811      	ldr	r0, [pc, #68]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 800329a:	f002 fd11 	bl	8005cc0 <HAL_UART_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80032a4:	f000 f900 	bl	80034a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032a8:	2100      	movs	r1, #0
 80032aa:	480d      	ldr	r0, [pc, #52]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 80032ac:	f003 fe06 	bl	8006ebc <HAL_UARTEx_SetTxFifoThreshold>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80032b6:	f000 f8f7 	bl	80034a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ba:	2100      	movs	r1, #0
 80032bc:	4808      	ldr	r0, [pc, #32]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 80032be:	f003 fe3b 	bl	8006f38 <HAL_UARTEx_SetRxFifoThreshold>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80032c8:	f000 f8ee 	bl	80034a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80032cc:	4804      	ldr	r0, [pc, #16]	@ (80032e0 <MX_USART1_UART_Init+0x90>)
 80032ce:	f003 fdbc 	bl	8006e4a <HAL_UARTEx_DisableFifoMode>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80032d8:	f000 f8e6 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20002b0c 	.word	0x20002b0c
 80032e4:	40013800 	.word	0x40013800

080032e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032ec:	4b22      	ldr	r3, [pc, #136]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 80032ee:	4a23      	ldr	r2, [pc, #140]	@ (800337c <MX_USART2_UART_Init+0x94>)
 80032f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032f2:	4b21      	ldr	r3, [pc, #132]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 80032f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003300:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003306:	4b1c      	ldr	r3, [pc, #112]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800330c:	4b1a      	ldr	r3, [pc, #104]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 800330e:	220c      	movs	r2, #12
 8003310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003312:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003318:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800331e:	4b16      	ldr	r3, [pc, #88]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003320:	2200      	movs	r2, #0
 8003322:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003324:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003326:	2200      	movs	r2, #0
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800332a:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 800332c:	2200      	movs	r2, #0
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003330:	4811      	ldr	r0, [pc, #68]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003332:	f002 fcc5 	bl	8005cc0 <HAL_UART_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800333c:	f000 f8b4 	bl	80034a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003340:	2100      	movs	r1, #0
 8003342:	480d      	ldr	r0, [pc, #52]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003344:	f003 fdba 	bl	8006ebc <HAL_UARTEx_SetTxFifoThreshold>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800334e:	f000 f8ab 	bl	80034a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003352:	2100      	movs	r1, #0
 8003354:	4808      	ldr	r0, [pc, #32]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003356:	f003 fdef 	bl	8006f38 <HAL_UARTEx_SetRxFifoThreshold>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003360:	f000 f8a2 	bl	80034a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003364:	4804      	ldr	r0, [pc, #16]	@ (8003378 <MX_USART2_UART_Init+0x90>)
 8003366:	f003 fd70 	bl	8006e4a <HAL_UARTEx_DisableFifoMode>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003370:	f000 f89a 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20002ba0 	.word	0x20002ba0
 800337c:	40004400 	.word	0x40004400

08003380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003386:	4b16      	ldr	r3, [pc, #88]	@ (80033e0 <MX_DMA_Init+0x60>)
 8003388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338a:	4a15      	ldr	r2, [pc, #84]	@ (80033e0 <MX_DMA_Init+0x60>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6493      	str	r3, [r2, #72]	@ 0x48
 8003392:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <MX_DMA_Init+0x60>)
 8003394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800339e:	4b10      	ldr	r3, [pc, #64]	@ (80033e0 <MX_DMA_Init+0x60>)
 80033a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a2:	4a0f      	ldr	r2, [pc, #60]	@ (80033e0 <MX_DMA_Init+0x60>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80033aa:	4b0d      	ldr	r3, [pc, #52]	@ (80033e0 <MX_DMA_Init+0x60>)
 80033ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2100      	movs	r1, #0
 80033ba:	200b      	movs	r0, #11
 80033bc:	f000 fd13 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80033c0:	200b      	movs	r0, #11
 80033c2:	f000 fd2a 	bl	8003e1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	200c      	movs	r0, #12
 80033cc:	f000 fd0b 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80033d0:	200c      	movs	r0, #12
 80033d2:	f000 fd22 	bl	8003e1a <HAL_NVIC_EnableIRQ>

}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000

080033e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033fa:	4b29      	ldr	r3, [pc, #164]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fe:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 8003400:	f043 0320 	orr.w	r3, r3, #32
 8003404:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003406:	4b26      	ldr	r3, [pc, #152]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	4b23      	ldr	r3, [pc, #140]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003416:	4a22      	ldr	r2, [pc, #136]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800341e:	4b20      	ldr	r3, [pc, #128]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	4b1d      	ldr	r3, [pc, #116]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003436:	4b1a      	ldr	r3, [pc, #104]	@ (80034a0 <MX_GPIO_Init+0xbc>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003442:	2200      	movs	r2, #0
 8003444:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800344c:	f001 fc34 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	2170      	movs	r1, #112	@ 0x70
 8003454:	4813      	ldr	r0, [pc, #76]	@ (80034a4 <MX_GPIO_Init+0xc0>)
 8003456:	f001 fc2f 	bl	8004cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800345a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800345e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003460:	2301      	movs	r3, #1
 8003462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	4619      	mov	r1, r3
 8003472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003476:	f001 f9a3 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800347a:	2370      	movs	r3, #112	@ 0x70
 800347c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347e:	2301      	movs	r3, #1
 8003480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	f107 030c 	add.w	r3, r7, #12
 800348e:	4619      	mov	r1, r3
 8003490:	4804      	ldr	r0, [pc, #16]	@ (80034a4 <MX_GPIO_Init+0xc0>)
 8003492:	f001 f995 	bl	80047c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003496:	bf00      	nop
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	48000400 	.word	0x48000400

080034a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ac:	b672      	cpsid	i
}
 80034ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <Error_Handler+0x8>

080034b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_MspInit+0x44>)
 80034bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034be:	4a0e      	ldr	r2, [pc, #56]	@ (80034f8 <HAL_MspInit+0x44>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80034c6:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_MspInit+0x44>)
 80034c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_MspInit+0x44>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d6:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <HAL_MspInit+0x44>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_MspInit+0x44>)
 80034e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80034ea:	f001 fcbb 	bl	8004e64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000

080034fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b09a      	sub	sp, #104	@ 0x68
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003514:	f107 0310 	add.w	r3, r7, #16
 8003518:	2244      	movs	r2, #68	@ 0x44
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f004 fde9 	bl	80080f4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a20      	ldr	r2, [pc, #128]	@ (80035a8 <HAL_FDCAN_MspInit+0xac>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d139      	bne.n	80035a0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800352c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003530:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003532:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003536:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f002 f9cf 	bl	80058e0 <HAL_RCCEx_PeriphCLKConfig>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003548:	f7ff ffae 	bl	80034a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800354c:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <HAL_FDCAN_MspInit+0xb0>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	4a16      	ldr	r2, [pc, #88]	@ (80035ac <HAL_FDCAN_MspInit+0xb0>)
 8003552:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003556:	6593      	str	r3, [r2, #88]	@ 0x58
 8003558:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <HAL_FDCAN_MspInit+0xb0>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_FDCAN_MspInit+0xb0>)
 8003566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003568:	4a10      	ldr	r2, [pc, #64]	@ (80035ac <HAL_FDCAN_MspInit+0xb0>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003570:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <HAL_FDCAN_MspInit+0xb0>)
 8003572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800357c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003580:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358a:	2300      	movs	r3, #0
 800358c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800358e:	2309      	movs	r3, #9
 8003590:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003592:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003596:	4619      	mov	r1, r3
 8003598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800359c:	f001 f910 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3768      	adds	r7, #104	@ 0x68
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40006400 	.word	0x40006400
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b09e      	sub	sp, #120	@ 0x78
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035c8:	f107 0320 	add.w	r3, r7, #32
 80035cc:	2244      	movs	r2, #68	@ 0x44
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f004 fd8f 	bl	80080f4 <memset>
  if(huart->Instance==USART1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7f      	ldr	r2, [pc, #508]	@ (80037d8 <HAL_UART_MspInit+0x228>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d174      	bne.n	80036ca <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035e0:	2301      	movs	r3, #1
 80035e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035e8:	f107 0320 	add.w	r3, r7, #32
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 f977 	bl	80058e0 <HAL_RCCEx_PeriphCLKConfig>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035f8:	f7ff ff56 	bl	80034a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035fc:	4b77      	ldr	r3, [pc, #476]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	4a76      	ldr	r2, [pc, #472]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 8003602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003606:	6613      	str	r3, [r2, #96]	@ 0x60
 8003608:	4b74      	ldr	r3, [pc, #464]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 800360a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003614:	4b71      	ldr	r3, [pc, #452]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 8003616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003618:	4a70      	ldr	r2, [pc, #448]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003620:	4b6e      	ldr	r3, [pc, #440]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 8003622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800362c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003630:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800363e:	2307      	movs	r3, #7
 8003640:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003646:	4619      	mov	r1, r3
 8003648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800364c:	f001 f8b8 	bl	80047c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003654:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800365a:	2301      	movs	r3, #1
 800365c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365e:	2300      	movs	r3, #0
 8003660:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003662:	2307      	movs	r3, #7
 8003664:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003666:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800366a:	4619      	mov	r1, r3
 800366c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003670:	f001 f8a6 	bl	80047c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003674:	4b5a      	ldr	r3, [pc, #360]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 8003676:	4a5b      	ldr	r2, [pc, #364]	@ (80037e4 <HAL_UART_MspInit+0x234>)
 8003678:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800367a:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 800367c:	2218      	movs	r2, #24
 800367e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003680:	4b57      	ldr	r3, [pc, #348]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003686:	4b56      	ldr	r3, [pc, #344]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 8003688:	2200      	movs	r2, #0
 800368a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800368c:	4b54      	ldr	r3, [pc, #336]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 800368e:	2280      	movs	r2, #128	@ 0x80
 8003690:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003692:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003698:	4b51      	ldr	r3, [pc, #324]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 800369a:	2200      	movs	r2, #0
 800369c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800369e:	4b50      	ldr	r3, [pc, #320]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 80036a0:	2220      	movs	r2, #32
 80036a2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036a4:	4b4e      	ldr	r3, [pc, #312]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80036aa:	484d      	ldr	r0, [pc, #308]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 80036ac:	f000 fbd0 	bl	8003e50 <HAL_DMA_Init>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80036b6:	f7ff fef7 	bl	80034a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a48      	ldr	r2, [pc, #288]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 80036be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80036c2:	4a47      	ldr	r2, [pc, #284]	@ (80037e0 <HAL_UART_MspInit+0x230>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036c8:	e082      	b.n	80037d0 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a46      	ldr	r2, [pc, #280]	@ (80037e8 <HAL_UART_MspInit+0x238>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d17d      	bne.n	80037d0 <HAL_UART_MspInit+0x220>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036d4:	2302      	movs	r3, #2
 80036d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036d8:	2300      	movs	r3, #0
 80036da:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036dc:	f107 0320 	add.w	r3, r7, #32
 80036e0:	4618      	mov	r0, r3
 80036e2:	f002 f8fd 	bl	80058e0 <HAL_RCCEx_PeriphCLKConfig>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_UART_MspInit+0x140>
      Error_Handler();
 80036ec:	f7ff fedc 	bl	80034a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036f0:	4b3a      	ldr	r3, [pc, #232]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	4a39      	ldr	r2, [pc, #228]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80036fc:	4b37      	ldr	r3, [pc, #220]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003708:	4b34      	ldr	r3, [pc, #208]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 800370a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370c:	4a33      	ldr	r2, [pc, #204]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003714:	4b31      	ldr	r3, [pc, #196]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 8003716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003720:	4b2e      	ldr	r3, [pc, #184]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 8003722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003724:	4a2d      	ldr	r2, [pc, #180]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800372c:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <HAL_UART_MspInit+0x22c>)
 800372e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800373c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003742:	2301      	movs	r3, #1
 8003744:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	2300      	movs	r3, #0
 8003748:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800374a:	2307      	movs	r3, #7
 800374c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003752:	4619      	mov	r1, r3
 8003754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003758:	f001 f832 	bl	80047c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800375c:	2308      	movs	r3, #8
 800375e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	2300      	movs	r3, #0
 800376a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800376c:	2307      	movs	r3, #7
 800376e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003770:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003774:	4619      	mov	r1, r3
 8003776:	481d      	ldr	r0, [pc, #116]	@ (80037ec <HAL_UART_MspInit+0x23c>)
 8003778:	f001 f822 	bl	80047c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800377c:	4b1c      	ldr	r3, [pc, #112]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 800377e:	4a1d      	ldr	r2, [pc, #116]	@ (80037f4 <HAL_UART_MspInit+0x244>)
 8003780:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003782:	4b1b      	ldr	r3, [pc, #108]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 8003784:	221a      	movs	r2, #26
 8003786:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800378e:	4b18      	ldr	r3, [pc, #96]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003794:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 8003796:	2280      	movs	r2, #128	@ 0x80
 8003798:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800379a:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 800379c:	2200      	movs	r2, #0
 800379e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037a0:	4b13      	ldr	r3, [pc, #76]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80037a6:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 80037a8:	2220      	movs	r2, #32
 80037aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ac:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037b2:	480f      	ldr	r0, [pc, #60]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 80037b4:	f000 fb4c 	bl	8003e50 <HAL_DMA_Init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_UART_MspInit+0x212>
      Error_Handler();
 80037be:	f7ff fe73 	bl	80034a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 80037c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_UART_MspInit+0x240>)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80037d0:	bf00      	nop
 80037d2:	3778      	adds	r7, #120	@ 0x78
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40021000 	.word	0x40021000
 80037e0:	20002c34 	.word	0x20002c34
 80037e4:	40020008 	.word	0x40020008
 80037e8:	40004400 	.word	0x40004400
 80037ec:	48000400 	.word	0x48000400
 80037f0:	20002c94 	.word	0x20002c94
 80037f4:	4002001c 	.word	0x4002001c

080037f8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1a      	ldr	r2, [pc, #104]	@ (8003870 <HAL_UART_MspDeInit+0x78>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d112      	bne.n	8003830 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800380a:	4b1a      	ldr	r3, [pc, #104]	@ (8003874 <HAL_UART_MspDeInit+0x7c>)
 800380c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380e:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <HAL_UART_MspDeInit+0x7c>)
 8003810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003814:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003816:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800381a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800381e:	f001 f951 	bl	8004ac4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fbb9 	bl	8003fa0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800382e:	e01a      	b.n	8003866 <HAL_UART_MspDeInit+0x6e>
  else if(huart->Instance==USART2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a10      	ldr	r2, [pc, #64]	@ (8003878 <HAL_UART_MspDeInit+0x80>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d115      	bne.n	8003866 <HAL_UART_MspDeInit+0x6e>
    __HAL_RCC_USART2_CLK_DISABLE();
 800383a:	4b0e      	ldr	r3, [pc, #56]	@ (8003874 <HAL_UART_MspDeInit+0x7c>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	4a0d      	ldr	r2, [pc, #52]	@ (8003874 <HAL_UART_MspDeInit+0x7c>)
 8003840:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003844:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8003846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800384a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800384e:	f001 f939 	bl	8004ac4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8003852:	2108      	movs	r1, #8
 8003854:	4809      	ldr	r0, [pc, #36]	@ (800387c <HAL_UART_MspDeInit+0x84>)
 8003856:	f001 f935 	bl	8004ac4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb9d 	bl	8003fa0 <HAL_DMA_DeInit>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40013800 	.word	0x40013800
 8003874:	40021000 	.word	0x40021000
 8003878:	40004400 	.word	0x40004400
 800387c:	48000400 	.word	0x48000400

08003880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <NMI_Handler+0x4>

08003888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800388c:	bf00      	nop
 800388e:	e7fd      	b.n	800388c <HardFault_Handler+0x4>

08003890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003894:	bf00      	nop
 8003896:	e7fd      	b.n	8003894 <MemManage_Handler+0x4>

08003898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800389c:	bf00      	nop
 800389e:	e7fd      	b.n	800389c <BusFault_Handler+0x4>

080038a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <UsageFault_Handler+0x4>

080038a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038d6:	f000 f96b 	bl	8003bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038e4:	4802      	ldr	r0, [pc, #8]	@ (80038f0 <DMA1_Channel1_IRQHandler+0x10>)
 80038e6:	f000 fc6c 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20002c34 	.word	0x20002c34

080038f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80038f8:	4802      	ldr	r0, [pc, #8]	@ (8003904 <DMA1_Channel2_IRQHandler+0x10>)
 80038fa:	f000 fc62 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20002c94 	.word	0x20002c94

08003908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return 1;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_kill>:

int _kill(int pid, int sig)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003922:	f004 fc73 	bl	800820c <__errno>
 8003926:	4603      	mov	r3, r0
 8003928:	2216      	movs	r2, #22
 800392a:	601a      	str	r2, [r3, #0]
  return -1;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <_exit>:

void _exit (int status)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003940:	f04f 31ff 	mov.w	r1, #4294967295
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ffe7 	bl	8003918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <_exit+0x12>

0800394e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e00a      	b.n	8003976 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003960:	f3af 8000 	nop.w
 8003964:	4601      	mov	r1, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	60ba      	str	r2, [r7, #8]
 800396c:	b2ca      	uxtb	r2, r1
 800396e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	429a      	cmp	r2, r3
 800397c:	dbf0      	blt.n	8003960 <_read+0x12>
  }

  return len;
 800397e:	687b      	ldr	r3, [r7, #4]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e009      	b.n	80039ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	60ba      	str	r2, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3301      	adds	r3, #1
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	dbf1      	blt.n	800399a <_write+0x12>
  }
  return len;
 80039b6:	687b      	ldr	r3, [r7, #4]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_close>:

int _close(int file)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039e8:	605a      	str	r2, [r3, #4]
  return 0;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <_isatty>:

int _isatty(int file)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a00:	2301      	movs	r3, #1
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a30:	4a14      	ldr	r2, [pc, #80]	@ (8003a84 <_sbrk+0x5c>)
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <_sbrk+0x60>)
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a3c:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <_sbrk+0x64>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <_sbrk+0x64>)
 8003a46:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <_sbrk+0x68>)
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <_sbrk+0x64>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d207      	bcs.n	8003a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a58:	f004 fbd8 	bl	800820c <__errno>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	220c      	movs	r2, #12
 8003a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	e009      	b.n	8003a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <_sbrk+0x64>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6e:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <_sbrk+0x64>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	4a05      	ldr	r2, [pc, #20]	@ (8003a8c <_sbrk+0x64>)
 8003a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20008000 	.word	0x20008000
 8003a88:	00000400 	.word	0x00000400
 8003a8c:	20002cf4 	.word	0x20002cf4
 8003a90:	20002e48 	.word	0x20002e48

08003a94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <SystemInit+0x20>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9e:	4a05      	ldr	r2, [pc, #20]	@ (8003ab4 <SystemInit+0x20>)
 8003aa0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ab8:	480d      	ldr	r0, [pc, #52]	@ (8003af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003aba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003abc:	f7ff ffea 	bl	8003a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ac0:	480c      	ldr	r0, [pc, #48]	@ (8003af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ac2:	490d      	ldr	r1, [pc, #52]	@ (8003af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8003afc <LoopForever+0xe>)
  movs r3, #0
 8003ac6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ac8:	e002      	b.n	8003ad0 <LoopCopyDataInit>

08003aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ace:	3304      	adds	r3, #4

08003ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ad4:	d3f9      	bcc.n	8003aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ad8:	4c0a      	ldr	r4, [pc, #40]	@ (8003b04 <LoopForever+0x16>)
  movs r3, #0
 8003ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003adc:	e001      	b.n	8003ae2 <LoopFillZerobss>

08003ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae0:	3204      	adds	r2, #4

08003ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ae4:	d3fb      	bcc.n	8003ade <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003ae6:	f004 fb97 	bl	8008218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aea:	f7ff fb09 	bl	8003100 <main>

08003aee <LoopForever>:

LoopForever:
    b LoopForever
 8003aee:	e7fe      	b.n	8003aee <LoopForever>
  ldr   r0, =_estack
 8003af0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003afc:	0800ab20 	.word	0x0800ab20
  ldr r2, =_sbss
 8003b00:	20000a38 	.word	0x20000a38
  ldr r4, =_ebss
 8003b04:	20002e48 	.word	0x20002e48

08003b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b08:	e7fe      	b.n	8003b08 <ADC1_2_IRQHandler>

08003b0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b14:	2003      	movs	r0, #3
 8003b16:	f000 f95b 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b1a:	200f      	movs	r0, #15
 8003b1c:	f000 f80e 	bl	8003b3c <HAL_InitTick>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	71fb      	strb	r3, [r7, #7]
 8003b2a:	e001      	b.n	8003b30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b2c:	f7ff fcc2 	bl	80034b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b30:	79fb      	ldrb	r3, [r7, #7]

}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003b48:	4b16      	ldr	r3, [pc, #88]	@ (8003ba4 <HAL_InitTick+0x68>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d022      	beq.n	8003b96 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003b50:	4b15      	ldr	r3, [pc, #84]	@ (8003ba8 <HAL_InitTick+0x6c>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <HAL_InitTick+0x68>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f966 	bl	8003e36 <HAL_SYSTICK_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10f      	bne.n	8003b90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d809      	bhi.n	8003b8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b76:	2200      	movs	r2, #0
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7e:	f000 f932 	bl	8003de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b82:	4a0a      	ldr	r2, [pc, #40]	@ (8003bac <HAL_InitTick+0x70>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	e007      	b.n	8003b9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
 8003b8e:	e004      	b.n	8003b9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
 8003b94:	e001      	b.n	8003b9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20000014 	.word	0x20000014
 8003ba8:	2000000c 	.word	0x2000000c
 8003bac:	20000010 	.word	0x20000010

08003bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb4:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_IncTick+0x1c>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <HAL_IncTick+0x20>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	4a03      	ldr	r2, [pc, #12]	@ (8003bcc <HAL_IncTick+0x1c>)
 8003bc0:	6013      	str	r3, [r2, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20002cf8 	.word	0x20002cf8
 8003bd0:	20000014 	.word	0x20000014

08003bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <HAL_GetTick+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20002cf8 	.word	0x20002cf8

08003bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf4:	f7ff ffee 	bl	8003bd4 <HAL_GetTick>
 8003bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d004      	beq.n	8003c10 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c06:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <HAL_Delay+0x40>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c10:	bf00      	nop
 8003c12:	f7ff ffdf 	bl	8003bd4 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d8f7      	bhi.n	8003c12 <HAL_Delay+0x26>
  {
  }
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000014 	.word	0x20000014

08003c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c62:	4a04      	ldr	r2, [pc, #16]	@ (8003c74 <__NVIC_SetPriorityGrouping+0x44>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	60d3      	str	r3, [r2, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <__NVIC_GetPriorityGrouping+0x18>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 0307 	and.w	r3, r3, #7
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	db0b      	blt.n	8003cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	f003 021f 	and.w	r2, r3, #31
 8003cac:	4907      	ldr	r1, [pc, #28]	@ (8003ccc <__NVIC_EnableIRQ+0x38>)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	e000e100 	.word	0xe000e100

08003cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	6039      	str	r1, [r7, #0]
 8003cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	db0a      	blt.n	8003cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	490c      	ldr	r1, [pc, #48]	@ (8003d1c <__NVIC_SetPriority+0x4c>)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	0112      	lsls	r2, r2, #4
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf8:	e00a      	b.n	8003d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	4908      	ldr	r1, [pc, #32]	@ (8003d20 <__NVIC_SetPriority+0x50>)
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	3b04      	subs	r3, #4
 8003d08:	0112      	lsls	r2, r2, #4
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	761a      	strb	r2, [r3, #24]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000e100 	.word	0xe000e100
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	@ 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	f1c3 0307 	rsb	r3, r3, #7
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	bf28      	it	cs
 8003d42:	2304      	movcs	r3, #4
 8003d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d902      	bls.n	8003d54 <NVIC_EncodePriority+0x30>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	3b03      	subs	r3, #3
 8003d52:	e000      	b.n	8003d56 <NVIC_EncodePriority+0x32>
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43da      	mvns	r2, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	401a      	ands	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43d9      	mvns	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	4313      	orrs	r3, r2
         );
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	@ 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d9c:	d301      	bcc.n	8003da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e00f      	b.n	8003dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <SysTick_Config+0x40>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003daa:	210f      	movs	r1, #15
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	f7ff ff8e 	bl	8003cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db4:	4b05      	ldr	r3, [pc, #20]	@ (8003dcc <SysTick_Config+0x40>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dba:	4b04      	ldr	r3, [pc, #16]	@ (8003dcc <SysTick_Config+0x40>)
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	e000e010 	.word	0xe000e010

08003dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff29 	bl	8003c30 <__NVIC_SetPriorityGrouping>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003df4:	f7ff ff40 	bl	8003c78 <__NVIC_GetPriorityGrouping>
 8003df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6978      	ldr	r0, [r7, #20]
 8003e00:	f7ff ff90 	bl	8003d24 <NVIC_EncodePriority>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff5f 	bl	8003cd0 <__NVIC_SetPriority>
}
 8003e12:	bf00      	nop
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff33 	bl	8003c94 <__NVIC_EnableIRQ>
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ffa4 	bl	8003d8c <SysTick_Config>
 8003e44:	4603      	mov	r3, r0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e08d      	b.n	8003f7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	4b47      	ldr	r3, [pc, #284]	@ (8003f88 <HAL_DMA_Init+0x138>)
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d80f      	bhi.n	8003e8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b45      	ldr	r3, [pc, #276]	@ (8003f8c <HAL_DMA_Init+0x13c>)
 8003e76:	4413      	add	r3, r2
 8003e78:	4a45      	ldr	r2, [pc, #276]	@ (8003f90 <HAL_DMA_Init+0x140>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	009a      	lsls	r2, r3, #2
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a42      	ldr	r2, [pc, #264]	@ (8003f94 <HAL_DMA_Init+0x144>)
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e8c:	e00e      	b.n	8003eac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b40      	ldr	r3, [pc, #256]	@ (8003f98 <HAL_DMA_Init+0x148>)
 8003e96:	4413      	add	r3, r2
 8003e98:	4a3d      	ldr	r2, [pc, #244]	@ (8003f90 <HAL_DMA_Init+0x140>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	009a      	lsls	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8003f9c <HAL_DMA_Init+0x14c>)
 8003eaa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa4c 	bl	800439c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f0c:	d102      	bne.n	8003f14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d010      	beq.n	8003f54 <HAL_DMA_Init+0x104>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d80c      	bhi.n	8003f54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa6c 	bl	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	e008      	b.n	8003f66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40020407 	.word	0x40020407
 8003f8c:	bffdfff8 	.word	0xbffdfff8
 8003f90:	cccccccd 	.word	0xcccccccd
 8003f94:	40020000 	.word	0x40020000
 8003f98:	bffdfbf8 	.word	0xbffdfbf8
 8003f9c:	40020400 	.word	0x40020400

08003fa0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07b      	b.n	80040aa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80040b4 <HAL_DMA_DeInit+0x114>)
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d80f      	bhi.n	8003fee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b38      	ldr	r3, [pc, #224]	@ (80040b8 <HAL_DMA_DeInit+0x118>)
 8003fd6:	4413      	add	r3, r2
 8003fd8:	4a38      	ldr	r2, [pc, #224]	@ (80040bc <HAL_DMA_DeInit+0x11c>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	009a      	lsls	r2, r3, #2
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a35      	ldr	r2, [pc, #212]	@ (80040c0 <HAL_DMA_DeInit+0x120>)
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fec:	e00e      	b.n	800400c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b33      	ldr	r3, [pc, #204]	@ (80040c4 <HAL_DMA_DeInit+0x124>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	4a30      	ldr	r2, [pc, #192]	@ (80040bc <HAL_DMA_DeInit+0x11c>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	009a      	lsls	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2f      	ldr	r2, [pc, #188]	@ (80040c8 <HAL_DMA_DeInit+0x128>)
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	f003 021f 	and.w	r2, r3, #31
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f202 	lsl.w	r2, r1, r2
 8004026:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f9b7 	bl	800439c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800403e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00f      	beq.n	8004068 <HAL_DMA_DeInit+0xc8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d80b      	bhi.n	8004068 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f9e1 	bl	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004066:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40020407 	.word	0x40020407
 80040b8:	bffdfff8 	.word	0xbffdfff8
 80040bc:	cccccccd 	.word	0xcccccccd
 80040c0:	40020000 	.word	0x40020000
 80040c4:	bffdfbf8 	.word	0xbffdfbf8
 80040c8:	40020400 	.word	0x40020400

080040cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Start_IT+0x20>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e066      	b.n	80041ba <HAL_DMA_Start_IT+0xee>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d155      	bne.n	80041ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f8fb 	bl	8004320 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 020e 	orr.w	r2, r2, #14
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e00f      	b.n	8004164 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0204 	bic.w	r2, r2, #4
 8004152:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 020a 	orr.w	r2, r2, #10
 8004162:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004180:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004198:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e005      	b.n	80041b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
 80041b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2204      	movs	r2, #4
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d026      	beq.n	800423c <HAL_DMA_IRQHandler+0x7a>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d021      	beq.n	800423c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0204 	bic.w	r2, r2, #4
 8004214:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f003 021f 	and.w	r2, r3, #31
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	2104      	movs	r1, #4
 8004224:	fa01 f202 	lsl.w	r2, r1, r2
 8004228:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	2b00      	cmp	r3, #0
 8004230:	d071      	beq.n	8004316 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800423a:	e06c      	b.n	8004316 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2202      	movs	r2, #2
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02e      	beq.n	80042ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d029      	beq.n	80042ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020a 	bic.w	r2, r2, #10
 8004276:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	2102      	movs	r1, #2
 800428e:	fa01 f202 	lsl.w	r2, r1, r2
 8004292:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d038      	beq.n	8004316 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042ac:	e033      	b.n	8004316 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2208      	movs	r2, #8
 80042b8:	409a      	lsls	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d02a      	beq.n	8004318 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d025      	beq.n	8004318 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 020e 	bic.w	r2, r2, #14
 80042da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f202 	lsl.w	r2, r1, r2
 80042ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004316:	bf00      	nop
 8004318:	bf00      	nop
}
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004336:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004348:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	f003 021f 	and.w	r2, r3, #31
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f202 	lsl.w	r2, r1, r2
 800435c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b10      	cmp	r3, #16
 800436c:	d108      	bne.n	8004380 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800437e:	e007      	b.n	8004390 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b16      	ldr	r3, [pc, #88]	@ (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d802      	bhi.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043b0:	4b15      	ldr	r3, [pc, #84]	@ (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e001      	b.n	80043ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80043b6:	4b15      	ldr	r3, [pc, #84]	@ (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043b8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	3b08      	subs	r3, #8
 80043c6:	4a12      	ldr	r2, [pc, #72]	@ (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	009a      	lsls	r2, r3, #2
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004414 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2201      	movs	r2, #1
 80043f0:	409a      	lsls	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40020407 	.word	0x40020407
 8004408:	40020800 	.word	0x40020800
 800440c:	40020820 	.word	0x40020820
 8004410:	cccccccd 	.word	0xcccccccd
 8004414:	40020880 	.word	0x40020880

08004418 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	461a      	mov	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a08      	ldr	r2, [pc, #32]	@ (800445c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800443a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3b01      	subs	r3, #1
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2201      	movs	r2, #1
 8004446:	409a      	lsls	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	1000823f 	.word	0x1000823f
 800445c:	40020940 	.word	0x40020940

08004460 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e147      	b.n	8004702 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff f838 	bl	80034fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0210 	bic.w	r2, r2, #16
 800449a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800449c:	f7ff fb9a 	bl	8003bd4 <HAL_GetTick>
 80044a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044a2:	e012      	b.n	80044ca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044a4:	f7ff fb96 	bl	8003bd4 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b0a      	cmp	r3, #10
 80044b0:	d90b      	bls.n	80044ca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2203      	movs	r2, #3
 80044c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e11b      	b.n	8004702 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d0e5      	beq.n	80044a4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e8:	f7ff fb74 	bl	8003bd4 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80044ee:	e012      	b.n	8004516 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80044f0:	f7ff fb70 	bl	8003bd4 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b0a      	cmp	r3, #10
 80044fc:	d90b      	bls.n	8004516 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e0f5      	b.n	8004702 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0e5      	beq.n	80044f0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0202 	orr.w	r2, r2, #2
 8004532:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a74      	ldr	r2, [pc, #464]	@ (800470c <HAL_FDCAN_Init+0x2ac>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d103      	bne.n	8004546 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800453e:	4a74      	ldr	r2, [pc, #464]	@ (8004710 <HAL_FDCAN_Init+0x2b0>)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7c1b      	ldrb	r3, [r3, #16]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d108      	bne.n	8004560 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800455c:	619a      	str	r2, [r3, #24]
 800455e:	e007      	b.n	8004570 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800456e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7c5b      	ldrb	r3, [r3, #17]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d108      	bne.n	800458a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004586:	619a      	str	r2, [r3, #24]
 8004588:	e007      	b.n	800459a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699a      	ldr	r2, [r3, #24]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004598:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7c9b      	ldrb	r3, [r3, #18]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d108      	bne.n	80045b4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045b0:	619a      	str	r2, [r3, #24]
 80045b2:	e007      	b.n	80045c4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045c2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80045e8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0210 	bic.w	r2, r2, #16
 80045f8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d108      	bne.n	8004614 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0204 	orr.w	r2, r2, #4
 8004610:	619a      	str	r2, [r3, #24]
 8004612:	e02c      	b.n	800466e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d028      	beq.n	800466e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d01c      	beq.n	800465e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004632:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0210 	orr.w	r2, r2, #16
 8004642:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d110      	bne.n	800466e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0220 	orr.w	r2, r2, #32
 800465a:	619a      	str	r2, [r3, #24]
 800465c:	e007      	b.n	800466e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	3b01      	subs	r3, #1
 8004674:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	3b01      	subs	r3, #1
 800467c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800467e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004686:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	3b01      	subs	r3, #1
 8004690:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004696:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004698:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a2:	d115      	bne.n	80046d0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	3b01      	subs	r3, #1
 80046b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b8:	3b01      	subs	r3, #1
 80046ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80046bc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	3b01      	subs	r3, #1
 80046c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80046cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80046ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f814 	bl	8004714 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40006400 	.word	0x40006400
 8004710:	40006500 	.word	0x40006500

08004714 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800471c:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800471e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800472e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004736:	041a      	lsls	r2, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004754:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	061a      	lsls	r2, r3, #24
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e005      	b.n	80047a2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3304      	adds	r3, #4
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3f3      	bcc.n	8004796 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	4000a400 	.word	0x4000a400

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ce:	e15a      	b.n	8004a86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 814c 	beq.w	8004a80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d005      	beq.n	8004800 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d130      	bne.n	8004862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004836:	2201      	movs	r2, #1
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0201 	and.w	r2, r3, #1
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d017      	beq.n	800489e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d123      	bne.n	80048f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	08da      	lsrs	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3208      	adds	r2, #8
 80048b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	220f      	movs	r2, #15
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	08da      	lsrs	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3208      	adds	r2, #8
 80048ec:	6939      	ldr	r1, [r7, #16]
 80048ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80a6 	beq.w	8004a80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004934:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa4 <HAL_GPIO_Init+0x2e4>)
 8004936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004938:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa4 <HAL_GPIO_Init+0x2e4>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004940:	4b58      	ldr	r3, [pc, #352]	@ (8004aa4 <HAL_GPIO_Init+0x2e4>)
 8004942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800494c:	4a56      	ldr	r2, [pc, #344]	@ (8004aa8 <HAL_GPIO_Init+0x2e8>)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	3302      	adds	r3, #2
 8004954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	220f      	movs	r2, #15
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004976:	d01f      	beq.n	80049b8 <HAL_GPIO_Init+0x1f8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a4c      	ldr	r2, [pc, #304]	@ (8004aac <HAL_GPIO_Init+0x2ec>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d019      	beq.n	80049b4 <HAL_GPIO_Init+0x1f4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab0 <HAL_GPIO_Init+0x2f0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_GPIO_Init+0x1f0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a4a      	ldr	r2, [pc, #296]	@ (8004ab4 <HAL_GPIO_Init+0x2f4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00d      	beq.n	80049ac <HAL_GPIO_Init+0x1ec>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a49      	ldr	r2, [pc, #292]	@ (8004ab8 <HAL_GPIO_Init+0x2f8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <HAL_GPIO_Init+0x1e8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a48      	ldr	r2, [pc, #288]	@ (8004abc <HAL_GPIO_Init+0x2fc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_GPIO_Init+0x1e4>
 80049a0:	2305      	movs	r3, #5
 80049a2:	e00a      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049a4:	2306      	movs	r3, #6
 80049a6:	e008      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049a8:	2304      	movs	r3, #4
 80049aa:	e006      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049ac:	2303      	movs	r3, #3
 80049ae:	e004      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e002      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049b8:	2300      	movs	r3, #0
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	f002 0203 	and.w	r2, r2, #3
 80049c0:	0092      	lsls	r2, r2, #2
 80049c2:	4093      	lsls	r3, r2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049ca:	4937      	ldr	r1, [pc, #220]	@ (8004aa8 <HAL_GPIO_Init+0x2e8>)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	3302      	adds	r3, #2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049d8:	4b39      	ldr	r3, [pc, #228]	@ (8004ac0 <HAL_GPIO_Init+0x300>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049fc:	4a30      	ldr	r2, [pc, #192]	@ (8004ac0 <HAL_GPIO_Init+0x300>)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a26:	4a26      	ldr	r2, [pc, #152]	@ (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a2c:	4b24      	ldr	r3, [pc, #144]	@ (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a50:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4013      	ands	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a7a:	4a11      	ldr	r2, [pc, #68]	@ (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3301      	adds	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f ae9d 	bne.w	80047d0 <HAL_GPIO_Init+0x10>
  }
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	48000400 	.word	0x48000400
 8004ab0:	48000800 	.word	0x48000800
 8004ab4:	48000c00 	.word	0x48000c00
 8004ab8:	48001000 	.word	0x48001000
 8004abc:	48001400 	.word	0x48001400
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8004ad2:	e0bd      	b.n	8004c50 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80b0 	beq.w	8004c4a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8004aea:	4a60      	ldr	r2, [pc, #384]	@ (8004c6c <HAL_GPIO_DeInit+0x1a8>)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	3302      	adds	r3, #2
 8004af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	220f      	movs	r2, #15
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b12:	d01f      	beq.n	8004b54 <HAL_GPIO_DeInit+0x90>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a56      	ldr	r2, [pc, #344]	@ (8004c70 <HAL_GPIO_DeInit+0x1ac>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d019      	beq.n	8004b50 <HAL_GPIO_DeInit+0x8c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a55      	ldr	r2, [pc, #340]	@ (8004c74 <HAL_GPIO_DeInit+0x1b0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d013      	beq.n	8004b4c <HAL_GPIO_DeInit+0x88>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a54      	ldr	r2, [pc, #336]	@ (8004c78 <HAL_GPIO_DeInit+0x1b4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00d      	beq.n	8004b48 <HAL_GPIO_DeInit+0x84>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a53      	ldr	r2, [pc, #332]	@ (8004c7c <HAL_GPIO_DeInit+0x1b8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d007      	beq.n	8004b44 <HAL_GPIO_DeInit+0x80>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a52      	ldr	r2, [pc, #328]	@ (8004c80 <HAL_GPIO_DeInit+0x1bc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d101      	bne.n	8004b40 <HAL_GPIO_DeInit+0x7c>
 8004b3c:	2305      	movs	r3, #5
 8004b3e:	e00a      	b.n	8004b56 <HAL_GPIO_DeInit+0x92>
 8004b40:	2306      	movs	r3, #6
 8004b42:	e008      	b.n	8004b56 <HAL_GPIO_DeInit+0x92>
 8004b44:	2304      	movs	r3, #4
 8004b46:	e006      	b.n	8004b56 <HAL_GPIO_DeInit+0x92>
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e004      	b.n	8004b56 <HAL_GPIO_DeInit+0x92>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e002      	b.n	8004b56 <HAL_GPIO_DeInit+0x92>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <HAL_GPIO_DeInit+0x92>
 8004b54:	2300      	movs	r3, #0
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	f002 0203 	and.w	r2, r2, #3
 8004b5c:	0092      	lsls	r2, r2, #2
 8004b5e:	4093      	lsls	r3, r2
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d132      	bne.n	8004bcc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <HAL_GPIO_DeInit+0x1c0>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	4945      	ldr	r1, [pc, #276]	@ (8004c84 <HAL_GPIO_DeInit+0x1c0>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004b74:	4b43      	ldr	r3, [pc, #268]	@ (8004c84 <HAL_GPIO_DeInit+0x1c0>)
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	4941      	ldr	r1, [pc, #260]	@ (8004c84 <HAL_GPIO_DeInit+0x1c0>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004b82:	4b40      	ldr	r3, [pc, #256]	@ (8004c84 <HAL_GPIO_DeInit+0x1c0>)
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	493e      	ldr	r1, [pc, #248]	@ (8004c84 <HAL_GPIO_DeInit+0x1c0>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004b90:	4b3c      	ldr	r3, [pc, #240]	@ (8004c84 <HAL_GPIO_DeInit+0x1c0>)
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	493a      	ldr	r1, [pc, #232]	@ (8004c84 <HAL_GPIO_DeInit+0x1c0>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004bae:	4a2f      	ldr	r2, [pc, #188]	@ (8004c6c <HAL_GPIO_DeInit+0x1a8>)
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	482b      	ldr	r0, [pc, #172]	@ (8004c6c <HAL_GPIO_DeInit+0x1a8>)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	2103      	movs	r1, #3
 8004bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	08da      	lsrs	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3208      	adds	r2, #8
 8004be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	220f      	movs	r2, #15
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	08d2      	lsrs	r2, r2, #3
 8004c00:	4019      	ands	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3208      	adds	r2, #8
 8004c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	2103      	movs	r1, #3
 8004c14:	fa01 f303 	lsl.w	r3, r1, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	2101      	movs	r1, #1
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	401a      	ands	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2103      	movs	r1, #3
 8004c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	401a      	ands	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f47f af3b 	bne.w	8004ad4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	48000400 	.word	0x48000400
 8004c74:	48000800 	.word	0x48000800
 8004c78:	48000c00 	.word	0x48000c00
 8004c7c:	48001000 	.word	0x48001000
 8004c80:	48001400 	.word	0x48001400
 8004c84:	40010400 	.word	0x40010400

08004c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	73fb      	strb	r3, [r7, #15]
 8004ca4:	e001      	b.n	8004caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cc8:	787b      	ldrb	r3, [r7, #1]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cd4:	e002      	b.n	8004cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cd6:	887a      	ldrh	r2, [r7, #2]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	041a      	lsls	r2, r3, #16
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	43d9      	mvns	r1, r3
 8004d06:	887b      	ldrh	r3, [r7, #2]
 8004d08:	400b      	ands	r3, r1
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	619a      	str	r2, [r3, #24]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d141      	bne.n	8004dae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d36:	d131      	bne.n	8004d9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d38:	4b47      	ldr	r3, [pc, #284]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d3e:	4a46      	ldr	r2, [pc, #280]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d48:	4b43      	ldr	r3, [pc, #268]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d50:	4a41      	ldr	r2, [pc, #260]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d58:	4b40      	ldr	r3, [pc, #256]	@ (8004e5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2232      	movs	r2, #50	@ 0x32
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	4a3f      	ldr	r2, [pc, #252]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	0c9b      	lsrs	r3, r3, #18
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d6e:	e002      	b.n	8004d76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d76:	4b38      	ldr	r3, [pc, #224]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d82:	d102      	bne.n	8004d8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f2      	bne.n	8004d70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d8a:	4b33      	ldr	r3, [pc, #204]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d96:	d158      	bne.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e057      	b.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004dac:	e04d      	b.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db4:	d141      	bne.n	8004e3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004db6:	4b28      	ldr	r3, [pc, #160]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc2:	d131      	bne.n	8004e28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dc4:	4b24      	ldr	r3, [pc, #144]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dca:	4a23      	ldr	r2, [pc, #140]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dd4:	4b20      	ldr	r3, [pc, #128]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004de2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2232      	movs	r2, #50	@ 0x32
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	4a1c      	ldr	r2, [pc, #112]	@ (8004e60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004df0:	fba2 2303 	umull	r2, r3, r2, r3
 8004df4:	0c9b      	lsrs	r3, r3, #18
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dfa:	e002      	b.n	8004e02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e02:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0e:	d102      	bne.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f2      	bne.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d112      	bne.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e011      	b.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e28:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e38:	e007      	b.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e3a:	4b07      	ldr	r3, [pc, #28]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e42:	4a05      	ldr	r2, [pc, #20]	@ (8004e58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	2000000c 	.word	0x2000000c
 8004e60:	431bde83 	.word	0x431bde83

08004e64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e72:	6093      	str	r3, [r2, #8]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40007000 	.word	0x40007000

08004e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e2fe      	b.n	8005494 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d075      	beq.n	8004f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea2:	4b97      	ldr	r3, [pc, #604]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eac:	4b94      	ldr	r3, [pc, #592]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x3e>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d002      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x44>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	4b8d      	ldr	r3, [pc, #564]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x108>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d157      	bne.n	8004f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e2d9      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x74>
 8004eea:	4b85      	ldr	r3, [pc, #532]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a84      	ldr	r2, [pc, #528]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e01d      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x98>
 8004f02:	4b7f      	ldr	r3, [pc, #508]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7e      	ldr	r2, [pc, #504]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7b      	ldr	r2, [pc, #492]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	4b78      	ldr	r3, [pc, #480]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a77      	ldr	r2, [pc, #476]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b75      	ldr	r3, [pc, #468]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a74      	ldr	r2, [pc, #464]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d013      	beq.n	8004f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fe4a 	bl	8003bd4 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fe fe46 	bl	8003bd4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	@ 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e29e      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f56:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0xc0>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fe fe36 	bl	8003bd4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fe fe32 	bl	8003bd4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e28a      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f7e:	4b60      	ldr	r3, [pc, #384]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0xe8>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d075      	beq.n	8005086 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	4b59      	ldr	r3, [pc, #356]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa4:	4b56      	ldr	r3, [pc, #344]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_OscConfig+0x136>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d002      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x13c>
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d11f      	bne.n	8005000 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x154>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e25d      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd8:	4b49      	ldr	r3, [pc, #292]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	061b      	lsls	r3, r3, #24
 8004fe6:	4946      	ldr	r1, [pc, #280]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fec:	4b45      	ldr	r3, [pc, #276]	@ (8005104 <HAL_RCC_OscConfig+0x280>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe fda3 	bl	8003b3c <HAL_InitTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d043      	beq.n	8005084 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e249      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b3d      	ldr	r3, [pc, #244]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a3c      	ldr	r2, [pc, #240]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800500e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fe fdde 	bl	8003bd4 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501c:	f7fe fdda 	bl	8003bd4 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e232      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800502e:	4b34      	ldr	r3, [pc, #208]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503a:	4b31      	ldr	r3, [pc, #196]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	492d      	ldr	r1, [pc, #180]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
 800504e:	e01a      	b.n	8005086 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005050:	4b2b      	ldr	r3, [pc, #172]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a2a      	ldr	r2, [pc, #168]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8005056:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800505a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fe fdba 	bl	8003bd4 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005064:	f7fe fdb6 	bl	8003bd4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e20e      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005076:	4b22      	ldr	r3, [pc, #136]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x1e0>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d041      	beq.n	8005116 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01c      	beq.n	80050d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b19      	ldr	r3, [pc, #100]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 800509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a0:	4a17      	ldr	r2, [pc, #92]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050aa:	f7fe fd93 	bl	8003bd4 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b2:	f7fe fd8f 	bl	8003bd4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e1e7      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 80050c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0ef      	beq.n	80050b2 <HAL_RCC_OscConfig+0x22e>
 80050d2:	e020      	b.n	8005116 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050da:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <HAL_RCC_OscConfig+0x27c>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e4:	f7fe fd76 	bl	8003bd4 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050ea:	e00d      	b.n	8005108 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ec:	f7fe fd72 	bl	8003bd4 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d906      	bls.n	8005108 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e1ca      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
 80050fe:	bf00      	nop
 8005100:	40021000 	.word	0x40021000
 8005104:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005108:	4b8c      	ldr	r3, [pc, #560]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800510a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1ea      	bne.n	80050ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80a6 	beq.w	8005270 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005124:	2300      	movs	r3, #0
 8005126:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005128:	4b84      	ldr	r3, [pc, #528]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_OscConfig+0x2b4>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x2b6>
 8005138:	2300      	movs	r3, #0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513e:	4b7f      	ldr	r3, [pc, #508]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005142:	4a7e      	ldr	r2, [pc, #504]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005148:	6593      	str	r3, [r2, #88]	@ 0x58
 800514a:	4b7c      	ldr	r3, [pc, #496]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800514c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005156:	2301      	movs	r3, #1
 8005158:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800515a:	4b79      	ldr	r3, [pc, #484]	@ (8005340 <HAL_RCC_OscConfig+0x4bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d118      	bne.n	8005198 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005166:	4b76      	ldr	r3, [pc, #472]	@ (8005340 <HAL_RCC_OscConfig+0x4bc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a75      	ldr	r2, [pc, #468]	@ (8005340 <HAL_RCC_OscConfig+0x4bc>)
 800516c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005172:	f7fe fd2f 	bl	8003bd4 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517a:	f7fe fd2b 	bl	8003bd4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e183      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800518c:	4b6c      	ldr	r3, [pc, #432]	@ (8005340 <HAL_RCC_OscConfig+0x4bc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d108      	bne.n	80051b2 <HAL_RCC_OscConfig+0x32e>
 80051a0:	4b66      	ldr	r3, [pc, #408]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a6:	4a65      	ldr	r2, [pc, #404]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051b0:	e024      	b.n	80051fc <HAL_RCC_OscConfig+0x378>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d110      	bne.n	80051dc <HAL_RCC_OscConfig+0x358>
 80051ba:	4b60      	ldr	r3, [pc, #384]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c0:	4a5e      	ldr	r2, [pc, #376]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051c2:	f043 0304 	orr.w	r3, r3, #4
 80051c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051ca:	4b5c      	ldr	r3, [pc, #368]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	4a5a      	ldr	r2, [pc, #360]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051da:	e00f      	b.n	80051fc <HAL_RCC_OscConfig+0x378>
 80051dc:	4b57      	ldr	r3, [pc, #348]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e2:	4a56      	ldr	r2, [pc, #344]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80051ec:	4b53      	ldr	r3, [pc, #332]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f2:	4a52      	ldr	r2, [pc, #328]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d016      	beq.n	8005232 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fe fce6 	bl	8003bd4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520a:	e00a      	b.n	8005222 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fe fce2 	bl	8003bd4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e138      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005222:	4b46      	ldr	r3, [pc, #280]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0ed      	beq.n	800520c <HAL_RCC_OscConfig+0x388>
 8005230:	e015      	b.n	800525e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005232:	f7fe fccf 	bl	8003bd4 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005238:	e00a      	b.n	8005250 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523a:	f7fe fccb 	bl	8003bd4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e121      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005250:	4b3a      	ldr	r3, [pc, #232]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ed      	bne.n	800523a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800525e:	7ffb      	ldrb	r3, [r7, #31]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005264:	4b35      	ldr	r3, [pc, #212]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005268:	4a34      	ldr	r2, [pc, #208]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800526a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800526e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d03c      	beq.n	80052f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01c      	beq.n	80052be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005284:	4b2d      	ldr	r3, [pc, #180]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800528a:	4a2c      	ldr	r2, [pc, #176]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fe fc9e 	bl	8003bd4 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800529c:	f7fe fc9a 	bl	8003bd4 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e0f2      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052ae:	4b23      	ldr	r3, [pc, #140]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0ef      	beq.n	800529c <HAL_RCC_OscConfig+0x418>
 80052bc:	e01b      	b.n	80052f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052be:	4b1f      	ldr	r3, [pc, #124]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80052c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052c4:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80052c6:	f023 0301 	bic.w	r3, r3, #1
 80052ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ce:	f7fe fc81 	bl	8003bd4 <HAL_GetTick>
 80052d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052d6:	f7fe fc7d 	bl	8003bd4 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e0d5      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052e8:	4b14      	ldr	r3, [pc, #80]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 80052ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ef      	bne.n	80052d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80c9 	beq.w	8005492 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005300:	4b0e      	ldr	r3, [pc, #56]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 030c 	and.w	r3, r3, #12
 8005308:	2b0c      	cmp	r3, #12
 800530a:	f000 8083 	beq.w	8005414 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d15e      	bne.n	80053d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005316:	4b09      	ldr	r3, [pc, #36]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a08      	ldr	r2, [pc, #32]	@ (800533c <HAL_RCC_OscConfig+0x4b8>)
 800531c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fe fc57 	bl	8003bd4 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005328:	e00c      	b.n	8005344 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532a:	f7fe fc53 	bl	8003bd4 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d905      	bls.n	8005344 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e0ab      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
 800533c:	40021000 	.word	0x40021000
 8005340:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005344:	4b55      	ldr	r3, [pc, #340]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ec      	bne.n	800532a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005350:	4b52      	ldr	r3, [pc, #328]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	4b52      	ldr	r3, [pc, #328]	@ (80054a0 <HAL_RCC_OscConfig+0x61c>)
 8005356:	4013      	ands	r3, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6a11      	ldr	r1, [r2, #32]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005360:	3a01      	subs	r2, #1
 8005362:	0112      	lsls	r2, r2, #4
 8005364:	4311      	orrs	r1, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800536a:	0212      	lsls	r2, r2, #8
 800536c:	4311      	orrs	r1, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005372:	0852      	lsrs	r2, r2, #1
 8005374:	3a01      	subs	r2, #1
 8005376:	0552      	lsls	r2, r2, #21
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800537e:	0852      	lsrs	r2, r2, #1
 8005380:	3a01      	subs	r2, #1
 8005382:	0652      	lsls	r2, r2, #25
 8005384:	4311      	orrs	r1, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800538a:	06d2      	lsls	r2, r2, #27
 800538c:	430a      	orrs	r2, r1
 800538e:	4943      	ldr	r1, [pc, #268]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005390:	4313      	orrs	r3, r2
 8005392:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005394:	4b41      	ldr	r3, [pc, #260]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a40      	ldr	r2, [pc, #256]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 800539a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800539e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053a0:	4b3e      	ldr	r3, [pc, #248]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4a3d      	ldr	r2, [pc, #244]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fe fc12 	bl	8003bd4 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b4:	f7fe fc0e 	bl	8003bd4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e066      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c6:	4b35      	ldr	r3, [pc, #212]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x530>
 80053d2:	e05e      	b.n	8005492 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d4:	4b31      	ldr	r3, [pc, #196]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a30      	ldr	r2, [pc, #192]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7fe fbf8 	bl	8003bd4 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fe fbf4 	bl	8003bd4 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e04c      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fa:	4b28      	ldr	r3, [pc, #160]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005406:	4b25      	ldr	r3, [pc, #148]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	4924      	ldr	r1, [pc, #144]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 800540c:	4b25      	ldr	r3, [pc, #148]	@ (80054a4 <HAL_RCC_OscConfig+0x620>)
 800540e:	4013      	ands	r3, r2
 8005410:	60cb      	str	r3, [r1, #12]
 8005412:	e03e      	b.n	8005492 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e039      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005420:	4b1e      	ldr	r3, [pc, #120]	@ (800549c <HAL_RCC_OscConfig+0x618>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f003 0203 	and.w	r2, r3, #3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	429a      	cmp	r2, r3
 8005432:	d12c      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	3b01      	subs	r3, #1
 8005440:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005442:	429a      	cmp	r2, r3
 8005444:	d123      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005450:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d11b      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005460:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d113      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	3b01      	subs	r3, #1
 8005474:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d109      	bne.n	800548e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	3b01      	subs	r3, #1
 8005488:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d001      	beq.n	8005492 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	019f800c 	.word	0x019f800c
 80054a4:	feeefffc 	.word	0xfeeefffc

080054a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e11e      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054c0:	4b91      	ldr	r3, [pc, #580]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d910      	bls.n	80054f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 020f 	bic.w	r2, r3, #15
 80054d6:	498c      	ldr	r1, [pc, #560]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	4313      	orrs	r3, r2
 80054dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	4b8a      	ldr	r3, [pc, #552]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e106      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d073      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d129      	bne.n	8005558 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005504:	4b81      	ldr	r3, [pc, #516]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0f4      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005514:	f000 f99e 	bl	8005854 <RCC_GetSysClockFreqFromPLLSource>
 8005518:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4a7c      	ldr	r2, [pc, #496]	@ (8005710 <HAL_RCC_ClockConfig+0x268>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d93f      	bls.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005522:	4b7a      	ldr	r3, [pc, #488]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005536:	2b00      	cmp	r3, #0
 8005538:	d033      	beq.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800553e:	2b00      	cmp	r3, #0
 8005540:	d12f      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005542:	4b72      	ldr	r3, [pc, #456]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554a:	4a70      	ldr	r2, [pc, #448]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 800554c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005550:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005552:	2380      	movs	r3, #128	@ 0x80
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e024      	b.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d107      	bne.n	8005570 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005560:	4b6a      	ldr	r3, [pc, #424]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0c6      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005570:	4b66      	ldr	r3, [pc, #408]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0be      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005580:	f000 f8ce 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 8005584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4a61      	ldr	r2, [pc, #388]	@ (8005710 <HAL_RCC_ClockConfig+0x268>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d909      	bls.n	80055a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800558e:	4b5f      	ldr	r3, [pc, #380]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005596:	4a5d      	ldr	r2, [pc, #372]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055a2:	4b5a      	ldr	r3, [pc, #360]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f023 0203 	bic.w	r2, r3, #3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4957      	ldr	r1, [pc, #348]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b4:	f7fe fb0e 	bl	8003bd4 <HAL_GetTick>
 80055b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055bc:	f7fe fb0a 	bl	8003bd4 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e095      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d2:	4b4e      	ldr	r3, [pc, #312]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 020c 	and.w	r2, r3, #12
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d1eb      	bne.n	80055bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d023      	beq.n	8005638 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055fc:	4b43      	ldr	r3, [pc, #268]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a42      	ldr	r2, [pc, #264]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005602:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005606:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005614:	4b3d      	ldr	r3, [pc, #244]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800561c:	4a3b      	ldr	r2, [pc, #236]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 800561e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005622:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005624:	4b39      	ldr	r3, [pc, #228]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4936      	ldr	r1, [pc, #216]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
 8005636:	e008      	b.n	800564a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b80      	cmp	r3, #128	@ 0x80
 800563c:	d105      	bne.n	800564a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800563e:	4b33      	ldr	r3, [pc, #204]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	4a32      	ldr	r2, [pc, #200]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 8005644:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005648:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800564a:	4b2f      	ldr	r3, [pc, #188]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	429a      	cmp	r2, r3
 8005656:	d21d      	bcs.n	8005694 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005658:	4b2b      	ldr	r3, [pc, #172]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 020f 	bic.w	r2, r3, #15
 8005660:	4929      	ldr	r1, [pc, #164]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005668:	f7fe fab4 	bl	8003bd4 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	e00a      	b.n	8005686 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005670:	f7fe fab0 	bl	8003bd4 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e03b      	b.n	80056fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005686:	4b20      	ldr	r3, [pc, #128]	@ (8005708 <HAL_RCC_ClockConfig+0x260>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d1ed      	bne.n	8005670 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a0:	4b1a      	ldr	r3, [pc, #104]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4917      	ldr	r1, [pc, #92]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056be:	4b13      	ldr	r3, [pc, #76]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	490f      	ldr	r1, [pc, #60]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056d2:	f000 f825 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80056d6:	4602      	mov	r2, r0
 80056d8:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <HAL_RCC_ClockConfig+0x264>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	490c      	ldr	r1, [pc, #48]	@ (8005714 <HAL_RCC_ClockConfig+0x26c>)
 80056e4:	5ccb      	ldrb	r3, [r1, r3]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	fa22 f303 	lsr.w	r3, r2, r3
 80056ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005718 <HAL_RCC_ClockConfig+0x270>)
 80056f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056f2:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <HAL_RCC_ClockConfig+0x274>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe fa20 	bl	8003b3c <HAL_InitTick>
 80056fc:	4603      	mov	r3, r0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40022000 	.word	0x40022000
 800570c:	40021000 	.word	0x40021000
 8005710:	04c4b400 	.word	0x04c4b400
 8005714:	0800a718 	.word	0x0800a718
 8005718:	2000000c 	.word	0x2000000c
 800571c:	20000010 	.word	0x20000010

08005720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005726:	4b2c      	ldr	r3, [pc, #176]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b04      	cmp	r3, #4
 8005730:	d102      	bne.n	8005738 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005732:	4b2a      	ldr	r3, [pc, #168]	@ (80057dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	e047      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005738:	4b27      	ldr	r3, [pc, #156]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 030c 	and.w	r3, r3, #12
 8005740:	2b08      	cmp	r3, #8
 8005742:	d102      	bne.n	800574a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005744:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	e03e      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800574a:	4b23      	ldr	r3, [pc, #140]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d136      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005756:	4b20      	ldr	r3, [pc, #128]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005760:	4b1d      	ldr	r3, [pc, #116]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	3301      	adds	r3, #1
 800576c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d10c      	bne.n	800578e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005774:	4a1a      	ldr	r2, [pc, #104]	@ (80057e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	4a16      	ldr	r2, [pc, #88]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800577e:	68d2      	ldr	r2, [r2, #12]
 8005780:	0a12      	lsrs	r2, r2, #8
 8005782:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	617b      	str	r3, [r7, #20]
      break;
 800578c:	e00c      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800578e:	4a13      	ldr	r2, [pc, #76]	@ (80057dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	4a10      	ldr	r2, [pc, #64]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005798:	68d2      	ldr	r2, [r2, #12]
 800579a:	0a12      	lsrs	r2, r2, #8
 800579c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	617b      	str	r3, [r7, #20]
      break;
 80057a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	0e5b      	lsrs	r3, r3, #25
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	3301      	adds	r3, #1
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e001      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057c8:	693b      	ldr	r3, [r7, #16]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
 80057dc:	00f42400 	.word	0x00f42400
 80057e0:	007a1200 	.word	0x007a1200

080057e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e8:	4b03      	ldr	r3, [pc, #12]	@ (80057f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ea:	681b      	ldr	r3, [r3, #0]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2000000c 	.word	0x2000000c

080057fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005800:	f7ff fff0 	bl	80057e4 <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4904      	ldr	r1, [pc, #16]	@ (8005824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	f003 031f 	and.w	r3, r3, #31
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40021000 	.word	0x40021000
 8005824:	0800a728 	.word	0x0800a728

08005828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800582c:	f7ff ffda 	bl	80057e4 <HAL_RCC_GetHCLKFreq>
 8005830:	4602      	mov	r2, r0
 8005832:	4b06      	ldr	r3, [pc, #24]	@ (800584c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	0adb      	lsrs	r3, r3, #11
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4904      	ldr	r1, [pc, #16]	@ (8005850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800583e:	5ccb      	ldrb	r3, [r1, r3]
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40021000 	.word	0x40021000
 8005850:	0800a728 	.word	0x0800a728

08005854 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800585a:	4b1e      	ldr	r3, [pc, #120]	@ (80058d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005864:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	3301      	adds	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d10c      	bne.n	8005892 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005878:	4a17      	ldr	r2, [pc, #92]	@ (80058d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005880:	4a14      	ldr	r2, [pc, #80]	@ (80058d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005882:	68d2      	ldr	r2, [r2, #12]
 8005884:	0a12      	lsrs	r2, r2, #8
 8005886:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	617b      	str	r3, [r7, #20]
    break;
 8005890:	e00c      	b.n	80058ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005892:	4a12      	ldr	r2, [pc, #72]	@ (80058dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	4a0e      	ldr	r2, [pc, #56]	@ (80058d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800589c:	68d2      	ldr	r2, [r2, #12]
 800589e:	0a12      	lsrs	r2, r2, #8
 80058a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058a4:	fb02 f303 	mul.w	r3, r2, r3
 80058a8:	617b      	str	r3, [r7, #20]
    break;
 80058aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058ac:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	0e5b      	lsrs	r3, r3, #25
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	3301      	adds	r3, #1
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80058c6:	687b      	ldr	r3, [r7, #4]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	40021000 	.word	0x40021000
 80058d8:	007a1200 	.word	0x007a1200
 80058dc:	00f42400 	.word	0x00f42400

080058e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058e8:	2300      	movs	r3, #0
 80058ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058ec:	2300      	movs	r3, #0
 80058ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8098 	beq.w	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058fe:	2300      	movs	r3, #0
 8005900:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005902:	4b43      	ldr	r3, [pc, #268]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800590e:	4b40      	ldr	r3, [pc, #256]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005912:	4a3f      	ldr	r2, [pc, #252]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005918:	6593      	str	r3, [r2, #88]	@ 0x58
 800591a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800591c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005922:	60bb      	str	r3, [r7, #8]
 8005924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005926:	2301      	movs	r3, #1
 8005928:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800592a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a39      	ldr	r2, [pc, #228]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005936:	f7fe f94d 	bl	8003bd4 <HAL_GetTick>
 800593a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800593c:	e009      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593e:	f7fe f949 	bl	8003bd4 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d902      	bls.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	74fb      	strb	r3, [r7, #19]
        break;
 8005950:	e005      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005952:	4b30      	ldr	r3, [pc, #192]	@ (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0ef      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800595e:	7cfb      	ldrb	r3, [r7, #19]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d159      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005964:	4b2a      	ldr	r3, [pc, #168]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01e      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	429a      	cmp	r2, r3
 800597e:	d019      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005980:	4b23      	ldr	r3, [pc, #140]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800598a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800598c:	4b20      	ldr	r3, [pc, #128]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005992:	4a1f      	ldr	r2, [pc, #124]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800599c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059ac:	4a18      	ldr	r2, [pc, #96]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fe f909 	bl	8003bd4 <HAL_GetTick>
 80059c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c4:	e00b      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c6:	f7fe f905 	bl	8003bd4 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d902      	bls.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	74fb      	strb	r3, [r7, #19]
            break;
 80059dc:	e006      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059de:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0ec      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059ec:	7cfb      	ldrb	r3, [r7, #19]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10b      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059f2:	4b07      	ldr	r3, [pc, #28]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a00:	4903      	ldr	r1, [pc, #12]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a08:	e008      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	74bb      	strb	r3, [r7, #18]
 8005a0e:	e005      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a10:	40021000 	.word	0x40021000
 8005a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a18:	7cfb      	ldrb	r3, [r7, #19]
 8005a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a1c:	7c7b      	ldrb	r3, [r7, #17]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d105      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a22:	4ba6      	ldr	r3, [pc, #664]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a26:	4aa5      	ldr	r2, [pc, #660]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a40:	f023 0203 	bic.w	r2, r3, #3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	499c      	ldr	r1, [pc, #624]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a5c:	4b97      	ldr	r3, [pc, #604]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a62:	f023 020c 	bic.w	r2, r3, #12
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	4994      	ldr	r1, [pc, #592]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	498b      	ldr	r1, [pc, #556]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005aa0:	4b86      	ldr	r3, [pc, #536]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	4983      	ldr	r1, [pc, #524]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ac2:	4b7e      	ldr	r3, [pc, #504]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	497a      	ldr	r1, [pc, #488]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae4:	4b75      	ldr	r3, [pc, #468]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	4972      	ldr	r1, [pc, #456]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b06:	4b6d      	ldr	r3, [pc, #436]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	4969      	ldr	r1, [pc, #420]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b28:	4b64      	ldr	r3, [pc, #400]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	4961      	ldr	r1, [pc, #388]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	4958      	ldr	r1, [pc, #352]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d015      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b6c:	4b53      	ldr	r3, [pc, #332]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7a:	4950      	ldr	r1, [pc, #320]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b8a:	d105      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a4a      	ldr	r2, [pc, #296]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d015      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ba4:	4b45      	ldr	r3, [pc, #276]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005baa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	4942      	ldr	r1, [pc, #264]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bc2:	d105      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bc4:	4b3d      	ldr	r3, [pc, #244]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d015      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bdc:	4b37      	ldr	r3, [pc, #220]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bea:	4934      	ldr	r1, [pc, #208]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bfa:	d105      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4a2e      	ldr	r2, [pc, #184]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d015      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c14:	4b29      	ldr	r3, [pc, #164]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c22:	4926      	ldr	r1, [pc, #152]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c32:	d105      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c34:	4b21      	ldr	r3, [pc, #132]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4a20      	ldr	r2, [pc, #128]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d015      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5a:	4918      	ldr	r1, [pc, #96]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c6a:	d105      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c6c:	4b13      	ldr	r3, [pc, #76]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4a12      	ldr	r2, [pc, #72]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d015      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c84:	4b0d      	ldr	r3, [pc, #52]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c92:	490a      	ldr	r1, [pc, #40]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ca2:	d105      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ca4:	4b05      	ldr	r3, [pc, #20]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4a04      	ldr	r2, [pc, #16]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005cb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40021000 	.word	0x40021000

08005cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e042      	b.n	8005d58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fd fc63 	bl	80035b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2224      	movs	r2, #36	@ 0x24
 8005cee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0201 	bic.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fc38 	bl	8006580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f969 	bl	8005fe8 <UART_SetConfig>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e01b      	b.n	8005d58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fcb7 	bl	80066c4 <UART_CheckIdleState>
 8005d56:	4603      	mov	r3, r0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e031      	b.n	8005dd6 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	@ 0x24
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2200      	movs	r2, #0
 8005d98:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fd fd28 	bl	80037f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b08a      	sub	sp, #40	@ 0x28
 8005de2:	af02      	add	r7, sp, #8
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	603b      	str	r3, [r7, #0]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d17b      	bne.n	8005ef0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_UART_Transmit+0x26>
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e074      	b.n	8005ef2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2221      	movs	r2, #33	@ 0x21
 8005e14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e18:	f7fd fedc 	bl	8003bd4 <HAL_GetTick>
 8005e1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	88fa      	ldrh	r2, [r7, #6]
 8005e2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e36:	d108      	bne.n	8005e4a <HAL_UART_Transmit+0x6c>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d104      	bne.n	8005e4a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	e003      	b.n	8005e52 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e52:	e030      	b.n	8005eb6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2180      	movs	r1, #128	@ 0x80
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fcda 	bl	8006818 <UART_WaitOnFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e03d      	b.n	8005ef2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	3302      	adds	r3, #2
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	e007      	b.n	8005ea4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1c8      	bne.n	8005e54 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2140      	movs	r1, #64	@ 0x40
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fca3 	bl	8006818 <UART_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e006      	b.n	8005ef2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	@ 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d137      	bne.n	8005f84 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_UART_Receive_DMA+0x24>
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e030      	b.n	8005f86 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a18      	ldr	r2, [pc, #96]	@ (8005f90 <HAL_UART_Receive_DMA+0x94>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d01f      	beq.n	8005f74 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f60:	623b      	str	r3, [r7, #32]
 8005f62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	69f9      	ldr	r1, [r7, #28]
 8005f66:	6a3a      	ldr	r2, [r7, #32]
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e6      	bne.n	8005f42 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	461a      	mov	r2, r3
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fcba 	bl	80068f4 <UART_Start_Receive_DMA>
 8005f80:	4603      	mov	r3, r0
 8005f82:	e000      	b.n	8005f86 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f84:	2302      	movs	r3, #2
  }
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3728      	adds	r7, #40	@ 0x28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40008000 	.word	0x40008000

08005f94 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fec:	b08c      	sub	sp, #48	@ 0x30
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	431a      	orrs	r2, r3
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	431a      	orrs	r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	4313      	orrs	r3, r2
 800600e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4bab      	ldr	r3, [pc, #684]	@ (80062c4 <UART_SetConfig+0x2dc>)
 8006018:	4013      	ands	r3, r2
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006020:	430b      	orrs	r3, r1
 8006022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4aa0      	ldr	r2, [pc, #640]	@ (80062c8 <UART_SetConfig+0x2e0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006050:	4313      	orrs	r3, r2
 8006052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800605e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	6812      	ldr	r2, [r2, #0]
 8006066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006068:	430b      	orrs	r3, r1
 800606a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006072:	f023 010f 	bic.w	r1, r3, #15
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a91      	ldr	r2, [pc, #580]	@ (80062cc <UART_SetConfig+0x2e4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d125      	bne.n	80060d8 <UART_SetConfig+0xf0>
 800608c:	4b90      	ldr	r3, [pc, #576]	@ (80062d0 <UART_SetConfig+0x2e8>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b03      	cmp	r3, #3
 8006098:	d81a      	bhi.n	80060d0 <UART_SetConfig+0xe8>
 800609a:	a201      	add	r2, pc, #4	@ (adr r2, 80060a0 <UART_SetConfig+0xb8>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060c1 	.word	0x080060c1
 80060a8:	080060b9 	.word	0x080060b9
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b6:	e0d6      	b.n	8006266 <UART_SetConfig+0x27e>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060be:	e0d2      	b.n	8006266 <UART_SetConfig+0x27e>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c6:	e0ce      	b.n	8006266 <UART_SetConfig+0x27e>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ce:	e0ca      	b.n	8006266 <UART_SetConfig+0x27e>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d6:	e0c6      	b.n	8006266 <UART_SetConfig+0x27e>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a7d      	ldr	r2, [pc, #500]	@ (80062d4 <UART_SetConfig+0x2ec>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d138      	bne.n	8006154 <UART_SetConfig+0x16c>
 80060e2:	4b7b      	ldr	r3, [pc, #492]	@ (80062d0 <UART_SetConfig+0x2e8>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d82d      	bhi.n	800614c <UART_SetConfig+0x164>
 80060f0:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <UART_SetConfig+0x110>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	0800612d 	.word	0x0800612d
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	0800614d 	.word	0x0800614d
 8006104:	0800614d 	.word	0x0800614d
 8006108:	0800613d 	.word	0x0800613d
 800610c:	0800614d 	.word	0x0800614d
 8006110:	0800614d 	.word	0x0800614d
 8006114:	0800614d 	.word	0x0800614d
 8006118:	08006135 	.word	0x08006135
 800611c:	0800614d 	.word	0x0800614d
 8006120:	0800614d 	.word	0x0800614d
 8006124:	0800614d 	.word	0x0800614d
 8006128:	08006145 	.word	0x08006145
 800612c:	2300      	movs	r3, #0
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006132:	e098      	b.n	8006266 <UART_SetConfig+0x27e>
 8006134:	2302      	movs	r3, #2
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613a:	e094      	b.n	8006266 <UART_SetConfig+0x27e>
 800613c:	2304      	movs	r3, #4
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006142:	e090      	b.n	8006266 <UART_SetConfig+0x27e>
 8006144:	2308      	movs	r3, #8
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614a:	e08c      	b.n	8006266 <UART_SetConfig+0x27e>
 800614c:	2310      	movs	r3, #16
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006152:	e088      	b.n	8006266 <UART_SetConfig+0x27e>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a5f      	ldr	r2, [pc, #380]	@ (80062d8 <UART_SetConfig+0x2f0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d125      	bne.n	80061aa <UART_SetConfig+0x1c2>
 800615e:	4b5c      	ldr	r3, [pc, #368]	@ (80062d0 <UART_SetConfig+0x2e8>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006164:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006168:	2b30      	cmp	r3, #48	@ 0x30
 800616a:	d016      	beq.n	800619a <UART_SetConfig+0x1b2>
 800616c:	2b30      	cmp	r3, #48	@ 0x30
 800616e:	d818      	bhi.n	80061a2 <UART_SetConfig+0x1ba>
 8006170:	2b20      	cmp	r3, #32
 8006172:	d00a      	beq.n	800618a <UART_SetConfig+0x1a2>
 8006174:	2b20      	cmp	r3, #32
 8006176:	d814      	bhi.n	80061a2 <UART_SetConfig+0x1ba>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <UART_SetConfig+0x19a>
 800617c:	2b10      	cmp	r3, #16
 800617e:	d008      	beq.n	8006192 <UART_SetConfig+0x1aa>
 8006180:	e00f      	b.n	80061a2 <UART_SetConfig+0x1ba>
 8006182:	2300      	movs	r3, #0
 8006184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006188:	e06d      	b.n	8006266 <UART_SetConfig+0x27e>
 800618a:	2302      	movs	r3, #2
 800618c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006190:	e069      	b.n	8006266 <UART_SetConfig+0x27e>
 8006192:	2304      	movs	r3, #4
 8006194:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006198:	e065      	b.n	8006266 <UART_SetConfig+0x27e>
 800619a:	2308      	movs	r3, #8
 800619c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a0:	e061      	b.n	8006266 <UART_SetConfig+0x27e>
 80061a2:	2310      	movs	r3, #16
 80061a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a8:	e05d      	b.n	8006266 <UART_SetConfig+0x27e>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a4b      	ldr	r2, [pc, #300]	@ (80062dc <UART_SetConfig+0x2f4>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d125      	bne.n	8006200 <UART_SetConfig+0x218>
 80061b4:	4b46      	ldr	r3, [pc, #280]	@ (80062d0 <UART_SetConfig+0x2e8>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061be:	2bc0      	cmp	r3, #192	@ 0xc0
 80061c0:	d016      	beq.n	80061f0 <UART_SetConfig+0x208>
 80061c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061c4:	d818      	bhi.n	80061f8 <UART_SetConfig+0x210>
 80061c6:	2b80      	cmp	r3, #128	@ 0x80
 80061c8:	d00a      	beq.n	80061e0 <UART_SetConfig+0x1f8>
 80061ca:	2b80      	cmp	r3, #128	@ 0x80
 80061cc:	d814      	bhi.n	80061f8 <UART_SetConfig+0x210>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <UART_SetConfig+0x1f0>
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d008      	beq.n	80061e8 <UART_SetConfig+0x200>
 80061d6:	e00f      	b.n	80061f8 <UART_SetConfig+0x210>
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061de:	e042      	b.n	8006266 <UART_SetConfig+0x27e>
 80061e0:	2302      	movs	r3, #2
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e6:	e03e      	b.n	8006266 <UART_SetConfig+0x27e>
 80061e8:	2304      	movs	r3, #4
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ee:	e03a      	b.n	8006266 <UART_SetConfig+0x27e>
 80061f0:	2308      	movs	r3, #8
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f6:	e036      	b.n	8006266 <UART_SetConfig+0x27e>
 80061f8:	2310      	movs	r3, #16
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061fe:	e032      	b.n	8006266 <UART_SetConfig+0x27e>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a30      	ldr	r2, [pc, #192]	@ (80062c8 <UART_SetConfig+0x2e0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d12a      	bne.n	8006260 <UART_SetConfig+0x278>
 800620a:	4b31      	ldr	r3, [pc, #196]	@ (80062d0 <UART_SetConfig+0x2e8>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006214:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006218:	d01a      	beq.n	8006250 <UART_SetConfig+0x268>
 800621a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800621e:	d81b      	bhi.n	8006258 <UART_SetConfig+0x270>
 8006220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006224:	d00c      	beq.n	8006240 <UART_SetConfig+0x258>
 8006226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800622a:	d815      	bhi.n	8006258 <UART_SetConfig+0x270>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <UART_SetConfig+0x250>
 8006230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006234:	d008      	beq.n	8006248 <UART_SetConfig+0x260>
 8006236:	e00f      	b.n	8006258 <UART_SetConfig+0x270>
 8006238:	2300      	movs	r3, #0
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623e:	e012      	b.n	8006266 <UART_SetConfig+0x27e>
 8006240:	2302      	movs	r3, #2
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006246:	e00e      	b.n	8006266 <UART_SetConfig+0x27e>
 8006248:	2304      	movs	r3, #4
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624e:	e00a      	b.n	8006266 <UART_SetConfig+0x27e>
 8006250:	2308      	movs	r3, #8
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006256:	e006      	b.n	8006266 <UART_SetConfig+0x27e>
 8006258:	2310      	movs	r3, #16
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e002      	b.n	8006266 <UART_SetConfig+0x27e>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a17      	ldr	r2, [pc, #92]	@ (80062c8 <UART_SetConfig+0x2e0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	f040 80a8 	bne.w	80063c2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006272:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006276:	2b08      	cmp	r3, #8
 8006278:	d834      	bhi.n	80062e4 <UART_SetConfig+0x2fc>
 800627a:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <UART_SetConfig+0x298>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062e5 	.word	0x080062e5
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062e5 	.word	0x080062e5
 8006290:	080062b3 	.word	0x080062b3
 8006294:	080062e5 	.word	0x080062e5
 8006298:	080062e5 	.word	0x080062e5
 800629c:	080062e5 	.word	0x080062e5
 80062a0:	080062bb 	.word	0x080062bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a4:	f7ff faaa 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 80062a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062aa:	e021      	b.n	80062f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062ac:	4b0c      	ldr	r3, [pc, #48]	@ (80062e0 <UART_SetConfig+0x2f8>)
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062b0:	e01e      	b.n	80062f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b2:	f7ff fa35 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80062b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80062b8:	e01a      	b.n	80062f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062c0:	e016      	b.n	80062f0 <UART_SetConfig+0x308>
 80062c2:	bf00      	nop
 80062c4:	cfff69f3 	.word	0xcfff69f3
 80062c8:	40008000 	.word	0x40008000
 80062cc:	40013800 	.word	0x40013800
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40004400 	.word	0x40004400
 80062d8:	40004800 	.word	0x40004800
 80062dc:	40004c00 	.word	0x40004c00
 80062e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 812a 	beq.w	800654c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	4a9e      	ldr	r2, [pc, #632]	@ (8006578 <UART_SetConfig+0x590>)
 80062fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006302:	461a      	mov	r2, r3
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	fbb3 f3f2 	udiv	r3, r3, r2
 800630a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	429a      	cmp	r2, r3
 800631a:	d305      	bcc.n	8006328 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	429a      	cmp	r2, r3
 8006326:	d903      	bls.n	8006330 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800632e:	e10d      	b.n	800654c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	2200      	movs	r2, #0
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	60fa      	str	r2, [r7, #12]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633c:	4a8e      	ldr	r2, [pc, #568]	@ (8006578 <UART_SetConfig+0x590>)
 800633e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006342:	b29b      	uxth	r3, r3
 8006344:	2200      	movs	r2, #0
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800634e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006352:	f7fa fca1 	bl	8000c98 <__aeabi_uldivmod>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	020b      	lsls	r3, r1, #8
 8006368:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800636c:	0202      	lsls	r2, r0, #8
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	6849      	ldr	r1, [r1, #4]
 8006372:	0849      	lsrs	r1, r1, #1
 8006374:	2000      	movs	r0, #0
 8006376:	460c      	mov	r4, r1
 8006378:	4605      	mov	r5, r0
 800637a:	eb12 0804 	adds.w	r8, r2, r4
 800637e:	eb43 0905 	adc.w	r9, r3, r5
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	469a      	mov	sl, r3
 800638a:	4693      	mov	fp, r2
 800638c:	4652      	mov	r2, sl
 800638e:	465b      	mov	r3, fp
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7fa fc80 	bl	8000c98 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4613      	mov	r3, r2
 800639e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063a6:	d308      	bcc.n	80063ba <UART_SetConfig+0x3d2>
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ae:	d204      	bcs.n	80063ba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	60da      	str	r2, [r3, #12]
 80063b8:	e0c8      	b.n	800654c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063c0:	e0c4      	b.n	800654c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ca:	d167      	bne.n	800649c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80063cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d828      	bhi.n	8006426 <UART_SetConfig+0x43e>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <UART_SetConfig+0x3f4>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006401 	.word	0x08006401
 80063e0:	08006409 	.word	0x08006409
 80063e4:	08006411 	.word	0x08006411
 80063e8:	08006427 	.word	0x08006427
 80063ec:	08006417 	.word	0x08006417
 80063f0:	08006427 	.word	0x08006427
 80063f4:	08006427 	.word	0x08006427
 80063f8:	08006427 	.word	0x08006427
 80063fc:	0800641f 	.word	0x0800641f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006400:	f7ff f9fc 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 8006404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006406:	e014      	b.n	8006432 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006408:	f7ff fa0e 	bl	8005828 <HAL_RCC_GetPCLK2Freq>
 800640c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800640e:	e010      	b.n	8006432 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006410:	4b5a      	ldr	r3, [pc, #360]	@ (800657c <UART_SetConfig+0x594>)
 8006412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006414:	e00d      	b.n	8006432 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006416:	f7ff f983 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 800641a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800641c:	e009      	b.n	8006432 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800641e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006424:	e005      	b.n	8006432 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8089 	beq.w	800654c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643e:	4a4e      	ldr	r2, [pc, #312]	@ (8006578 <UART_SetConfig+0x590>)
 8006440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006444:	461a      	mov	r2, r3
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	fbb3 f3f2 	udiv	r3, r3, r2
 800644c:	005a      	lsls	r2, r3, #1
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	085b      	lsrs	r3, r3, #1
 8006454:	441a      	add	r2, r3
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	fbb2 f3f3 	udiv	r3, r2, r3
 800645e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2b0f      	cmp	r3, #15
 8006464:	d916      	bls.n	8006494 <UART_SetConfig+0x4ac>
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800646c:	d212      	bcs.n	8006494 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	b29b      	uxth	r3, r3
 8006472:	f023 030f 	bic.w	r3, r3, #15
 8006476:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	b29b      	uxth	r3, r3
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	b29a      	uxth	r2, r3
 8006484:	8bfb      	ldrh	r3, [r7, #30]
 8006486:	4313      	orrs	r3, r2
 8006488:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	8bfa      	ldrh	r2, [r7, #30]
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	e05b      	b.n	800654c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800649a:	e057      	b.n	800654c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800649c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d828      	bhi.n	80064f6 <UART_SetConfig+0x50e>
 80064a4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <UART_SetConfig+0x4c4>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064d9 	.word	0x080064d9
 80064b4:	080064e1 	.word	0x080064e1
 80064b8:	080064f7 	.word	0x080064f7
 80064bc:	080064e7 	.word	0x080064e7
 80064c0:	080064f7 	.word	0x080064f7
 80064c4:	080064f7 	.word	0x080064f7
 80064c8:	080064f7 	.word	0x080064f7
 80064cc:	080064ef 	.word	0x080064ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d0:	f7ff f994 	bl	80057fc <HAL_RCC_GetPCLK1Freq>
 80064d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064d6:	e014      	b.n	8006502 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d8:	f7ff f9a6 	bl	8005828 <HAL_RCC_GetPCLK2Freq>
 80064dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064de:	e010      	b.n	8006502 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e0:	4b26      	ldr	r3, [pc, #152]	@ (800657c <UART_SetConfig+0x594>)
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064e4:	e00d      	b.n	8006502 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e6:	f7ff f91b 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80064ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064ec:	e009      	b.n	8006502 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064f4:	e005      	b.n	8006502 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006500:	bf00      	nop
    }

    if (pclk != 0U)
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d021      	beq.n	800654c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	4a1a      	ldr	r2, [pc, #104]	@ (8006578 <UART_SetConfig+0x590>)
 800650e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006512:	461a      	mov	r2, r3
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	fbb3 f2f2 	udiv	r2, r3, r2
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	441a      	add	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	fbb2 f3f3 	udiv	r3, r2, r3
 800652a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	2b0f      	cmp	r3, #15
 8006530:	d909      	bls.n	8006546 <UART_SetConfig+0x55e>
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006538:	d205      	bcs.n	8006546 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	b29a      	uxth	r2, r3
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60da      	str	r2, [r3, #12]
 8006544:	e002      	b.n	800654c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2201      	movs	r2, #1
 8006550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2201      	movs	r2, #1
 8006558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2200      	movs	r2, #0
 8006560:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2200      	movs	r2, #0
 8006566:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006568:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800656c:	4618      	mov	r0, r3
 800656e:	3730      	adds	r7, #48	@ 0x30
 8006570:	46bd      	mov	sp, r7
 8006572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006576:	bf00      	nop
 8006578:	0800a730 	.word	0x0800a730
 800657c:	00f42400 	.word	0x00f42400

08006580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	430a      	orrs	r2, r1
 800660e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01a      	beq.n	8006696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800667e:	d10a      	bne.n	8006696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
  }
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b098      	sub	sp, #96	@ 0x60
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d4:	f7fd fa7e 	bl	8003bd4 <HAL_GetTick>
 80066d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d12f      	bne.n	8006748 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f0:	2200      	movs	r2, #0
 80066f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f88e 	bl	8006818 <UART_WaitOnFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d022      	beq.n	8006748 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006716:	653b      	str	r3, [r7, #80]	@ 0x50
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006720:	647b      	str	r3, [r7, #68]	@ 0x44
 8006722:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800672e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e6      	bne.n	8006702 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e063      	b.n	8006810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d149      	bne.n	80067ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006756:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800675e:	2200      	movs	r2, #0
 8006760:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f857 	bl	8006818 <UART_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d03c      	beq.n	80067ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	623b      	str	r3, [r7, #32]
   return(result);
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006790:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e6      	bne.n	8006770 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3308      	adds	r3, #8
 80067a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3308      	adds	r3, #8
 80067c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067c2:	61fa      	str	r2, [r7, #28]
 80067c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	69b9      	ldr	r1, [r7, #24]
 80067c8:	69fa      	ldr	r2, [r7, #28]
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	617b      	str	r3, [r7, #20]
   return(result);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1e5      	bne.n	80067a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e012      	b.n	8006810 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3758      	adds	r7, #88	@ 0x58
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006828:	e04f      	b.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d04b      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006832:	f7fd f9cf 	bl	8003bd4 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	429a      	cmp	r2, r3
 8006840:	d302      	bcc.n	8006848 <UART_WaitOnFlagUntilTimeout+0x30>
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e04e      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d037      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b80      	cmp	r3, #128	@ 0x80
 800685e:	d034      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b40      	cmp	r3, #64	@ 0x40
 8006864:	d031      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b08      	cmp	r3, #8
 8006872:	d110      	bne.n	8006896 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2208      	movs	r2, #8
 800687a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f920 	bl	8006ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2208      	movs	r2, #8
 8006886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e029      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068a4:	d111      	bne.n	80068ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f906 	bl	8006ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e00f      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4013      	ands	r3, r2
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	bf0c      	ite	eq
 80068da:	2301      	moveq	r3, #1
 80068dc:	2300      	movne	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d0a0      	beq.n	800682a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b096      	sub	sp, #88	@ 0x58
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	88fa      	ldrh	r2, [r7, #6]
 800690c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2222      	movs	r2, #34	@ 0x22
 800691c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006926:	2b00      	cmp	r3, #0
 8006928:	d02d      	beq.n	8006986 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006930:	4a40      	ldr	r2, [pc, #256]	@ (8006a34 <UART_Start_Receive_DMA+0x140>)
 8006932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800693a:	4a3f      	ldr	r2, [pc, #252]	@ (8006a38 <UART_Start_Receive_DMA+0x144>)
 800693c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006944:	4a3d      	ldr	r2, [pc, #244]	@ (8006a3c <UART_Start_Receive_DMA+0x148>)
 8006946:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694e:	2200      	movs	r2, #0
 8006950:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3324      	adds	r3, #36	@ 0x24
 800695e:	4619      	mov	r1, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006964:	461a      	mov	r2, r3
 8006966:	88fb      	ldrh	r3, [r7, #6]
 8006968:	f7fd fbb0 	bl	80040cc <HAL_DMA_Start_IT>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2210      	movs	r2, #16
 8006976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e051      	b.n	8006a2a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d018      	beq.n	80069c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80069ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e6      	bne.n	800698e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	f043 0301 	orr.w	r3, r3, #1
 80069d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80069e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e5      	bne.n	80069c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	613b      	str	r3, [r7, #16]
   return(result);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a14:	623a      	str	r2, [r7, #32]
 8006a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	69f9      	ldr	r1, [r7, #28]
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e5      	bne.n	80069f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3758      	adds	r7, #88	@ 0x58
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	08006b8f 	.word	0x08006b8f
 8006a38:	08006cbb 	.word	0x08006cbb
 8006a3c:	08006cf9 	.word	0x08006cf9

08006a40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b08f      	sub	sp, #60	@ 0x3c
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a68:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e6      	bne.n	8006a48 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9a:	61ba      	str	r2, [r7, #24]
 8006a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6979      	ldr	r1, [r7, #20]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e5      	bne.n	8006a7a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006ab6:	bf00      	nop
 8006ab8:	373c      	adds	r7, #60	@ 0x3c
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b095      	sub	sp, #84	@ 0x54
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e6      	bne.n	8006aca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e3      	bne.n	8006afc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d118      	bne.n	8006b6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f023 0310 	bic.w	r3, r3, #16
 8006b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6979      	ldr	r1, [r7, #20]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	613b      	str	r3, [r7, #16]
   return(result);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e6      	bne.n	8006b3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b82:	bf00      	nop
 8006b84:	3754      	adds	r7, #84	@ 0x54
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b09c      	sub	sp, #112	@ 0x70
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d171      	bne.n	8006c8e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bd2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e6      	bne.n	8006bb2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3308      	adds	r3, #8
 8006bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
 8006bfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3308      	adds	r3, #8
 8006c02:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c04:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c06:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e5      	bne.n	8006be4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	623b      	str	r3, [r7, #32]
   return(result);
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3308      	adds	r3, #8
 8006c36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c38:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e5      	bne.n	8006c18 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d118      	bne.n	8006c8e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f023 0310 	bic.w	r3, r3, #16
 8006c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	69b9      	ldr	r1, [r7, #24]
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	617b      	str	r3, [r7, #20]
   return(result);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e6      	bne.n	8006c5c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c90:	2200      	movs	r2, #0
 8006c92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d107      	bne.n	8006cac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ca6:	f7ff f993 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006caa:	e002      	b.n	8006cb2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006cac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006cae:	f7ff f971 	bl	8005f94 <HAL_UART_RxCpltCallback>
}
 8006cb2:	bf00      	nop
 8006cb4:	3770      	adds	r7, #112	@ 0x70
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d109      	bne.n	8006cea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cdc:	085b      	lsrs	r3, r3, #1
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff f974 	bl	8005fd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ce8:	e002      	b.n	8006cf0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff f95c 	bl	8005fa8 <HAL_UART_RxHalfCpltCallback>
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d20:	2b80      	cmp	r3, #128	@ 0x80
 8006d22:	d109      	bne.n	8006d38 <UART_DMAError+0x40>
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2b21      	cmp	r3, #33	@ 0x21
 8006d28:	d106      	bne.n	8006d38 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006d32:	6978      	ldr	r0, [r7, #20]
 8006d34:	f7ff fe84 	bl	8006a40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d42:	2b40      	cmp	r3, #64	@ 0x40
 8006d44:	d109      	bne.n	8006d5a <UART_DMAError+0x62>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b22      	cmp	r3, #34	@ 0x22
 8006d4a:	d106      	bne.n	8006d5a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006d54:	6978      	ldr	r0, [r7, #20]
 8006d56:	f7ff feb4 	bl	8006ac2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d60:	f043 0210 	orr.w	r2, r3, #16
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d6a:	6978      	ldr	r0, [r7, #20]
 8006d6c:	f7ff f926 	bl	8005fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d70:	bf00      	nop
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e058      	b.n	8006e42 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f7fc fc04 	bl	80035b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2224      	movs	r2, #36	@ 0x24
 8006dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0201 	bic.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff fbd9 	bl	8006580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff f90a 	bl	8005fe8 <UART_SetConfig>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e031      	b.n	8006e42 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dec:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	055b      	lsls	r3, r3, #21
 8006e06:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	041b      	lsls	r3, r3, #16
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8006e1c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	6812      	ldr	r2, [r2, #0]
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	430b      	orrs	r3, r1
 8006e28:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fc42 	bl	80066c4 <UART_CheckIdleState>
 8006e40:	4603      	mov	r3, r0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e027      	b.n	8006eb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2224      	movs	r2, #36	@ 0x24
 8006e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0201 	bic.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006e8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e02d      	b.n	8006f30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	@ 0x24
 8006ee0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0201 	bic.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f84f 	bl	8006fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e02d      	b.n	8006fac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2224      	movs	r2, #36	@ 0x24
 8006f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f811 	bl	8006fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d108      	bne.n	8006fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006fd4:	e031      	b.n	800703a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006fd6:	2308      	movs	r3, #8
 8006fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006fda:	2308      	movs	r3, #8
 8006fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	0e5b      	lsrs	r3, r3, #25
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 0307 	and.w	r3, r3, #7
 8006fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	0f5b      	lsrs	r3, r3, #29
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	7b3a      	ldrb	r2, [r7, #12]
 8007002:	4911      	ldr	r1, [pc, #68]	@ (8007048 <UARTEx_SetNbDataToProcess+0x94>)
 8007004:	5c8a      	ldrb	r2, [r1, r2]
 8007006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800700a:	7b3a      	ldrb	r2, [r7, #12]
 800700c:	490f      	ldr	r1, [pc, #60]	@ (800704c <UARTEx_SetNbDataToProcess+0x98>)
 800700e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007010:	fb93 f3f2 	sdiv	r3, r3, r2
 8007014:	b29a      	uxth	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	7b7a      	ldrb	r2, [r7, #13]
 8007020:	4909      	ldr	r1, [pc, #36]	@ (8007048 <UARTEx_SetNbDataToProcess+0x94>)
 8007022:	5c8a      	ldrb	r2, [r1, r2]
 8007024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007028:	7b7a      	ldrb	r2, [r7, #13]
 800702a:	4908      	ldr	r1, [pc, #32]	@ (800704c <UARTEx_SetNbDataToProcess+0x98>)
 800702c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800702e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007032:	b29a      	uxth	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800703a:	bf00      	nop
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	0800a748 	.word	0x0800a748
 800704c:	0800a750 	.word	0x0800a750

08007050 <sulp>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	460d      	mov	r5, r1
 8007056:	ec45 4b10 	vmov	d0, r4, r5
 800705a:	4616      	mov	r6, r2
 800705c:	f002 f8e2 	bl	8009224 <__ulp>
 8007060:	ec51 0b10 	vmov	r0, r1, d0
 8007064:	b17e      	cbz	r6, 8007086 <sulp+0x36>
 8007066:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800706a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800706e:	2b00      	cmp	r3, #0
 8007070:	dd09      	ble.n	8007086 <sulp+0x36>
 8007072:	051b      	lsls	r3, r3, #20
 8007074:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007078:	2400      	movs	r4, #0
 800707a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800707e:	4622      	mov	r2, r4
 8007080:	462b      	mov	r3, r5
 8007082:	f7f9 fae9 	bl	8000658 <__aeabi_dmul>
 8007086:	ec41 0b10 	vmov	d0, r0, r1
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	0000      	movs	r0, r0
	...

08007090 <_strtod_l>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	b09f      	sub	sp, #124	@ 0x7c
 8007096:	460c      	mov	r4, r1
 8007098:	9217      	str	r2, [sp, #92]	@ 0x5c
 800709a:	2200      	movs	r2, #0
 800709c:	921a      	str	r2, [sp, #104]	@ 0x68
 800709e:	9005      	str	r0, [sp, #20]
 80070a0:	f04f 0a00 	mov.w	sl, #0
 80070a4:	f04f 0b00 	mov.w	fp, #0
 80070a8:	460a      	mov	r2, r1
 80070aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80070ac:	7811      	ldrb	r1, [r2, #0]
 80070ae:	292b      	cmp	r1, #43	@ 0x2b
 80070b0:	d04a      	beq.n	8007148 <_strtod_l+0xb8>
 80070b2:	d838      	bhi.n	8007126 <_strtod_l+0x96>
 80070b4:	290d      	cmp	r1, #13
 80070b6:	d832      	bhi.n	800711e <_strtod_l+0x8e>
 80070b8:	2908      	cmp	r1, #8
 80070ba:	d832      	bhi.n	8007122 <_strtod_l+0x92>
 80070bc:	2900      	cmp	r1, #0
 80070be:	d03b      	beq.n	8007138 <_strtod_l+0xa8>
 80070c0:	2200      	movs	r2, #0
 80070c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80070c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80070c6:	782a      	ldrb	r2, [r5, #0]
 80070c8:	2a30      	cmp	r2, #48	@ 0x30
 80070ca:	f040 80b3 	bne.w	8007234 <_strtod_l+0x1a4>
 80070ce:	786a      	ldrb	r2, [r5, #1]
 80070d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070d4:	2a58      	cmp	r2, #88	@ 0x58
 80070d6:	d16e      	bne.n	80071b6 <_strtod_l+0x126>
 80070d8:	9302      	str	r3, [sp, #8]
 80070da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	ab1a      	add	r3, sp, #104	@ 0x68
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	4a8e      	ldr	r2, [pc, #568]	@ (800731c <_strtod_l+0x28c>)
 80070e4:	9805      	ldr	r0, [sp, #20]
 80070e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80070e8:	a919      	add	r1, sp, #100	@ 0x64
 80070ea:	f001 f995 	bl	8008418 <__gethex>
 80070ee:	f010 060f 	ands.w	r6, r0, #15
 80070f2:	4604      	mov	r4, r0
 80070f4:	d005      	beq.n	8007102 <_strtod_l+0x72>
 80070f6:	2e06      	cmp	r6, #6
 80070f8:	d128      	bne.n	800714c <_strtod_l+0xbc>
 80070fa:	3501      	adds	r5, #1
 80070fc:	2300      	movs	r3, #0
 80070fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8007100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007102:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007104:	2b00      	cmp	r3, #0
 8007106:	f040 858e 	bne.w	8007c26 <_strtod_l+0xb96>
 800710a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800710c:	b1cb      	cbz	r3, 8007142 <_strtod_l+0xb2>
 800710e:	4652      	mov	r2, sl
 8007110:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007114:	ec43 2b10 	vmov	d0, r2, r3
 8007118:	b01f      	add	sp, #124	@ 0x7c
 800711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711e:	2920      	cmp	r1, #32
 8007120:	d1ce      	bne.n	80070c0 <_strtod_l+0x30>
 8007122:	3201      	adds	r2, #1
 8007124:	e7c1      	b.n	80070aa <_strtod_l+0x1a>
 8007126:	292d      	cmp	r1, #45	@ 0x2d
 8007128:	d1ca      	bne.n	80070c0 <_strtod_l+0x30>
 800712a:	2101      	movs	r1, #1
 800712c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800712e:	1c51      	adds	r1, r2, #1
 8007130:	9119      	str	r1, [sp, #100]	@ 0x64
 8007132:	7852      	ldrb	r2, [r2, #1]
 8007134:	2a00      	cmp	r2, #0
 8007136:	d1c5      	bne.n	80070c4 <_strtod_l+0x34>
 8007138:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800713a:	9419      	str	r4, [sp, #100]	@ 0x64
 800713c:	2b00      	cmp	r3, #0
 800713e:	f040 8570 	bne.w	8007c22 <_strtod_l+0xb92>
 8007142:	4652      	mov	r2, sl
 8007144:	465b      	mov	r3, fp
 8007146:	e7e5      	b.n	8007114 <_strtod_l+0x84>
 8007148:	2100      	movs	r1, #0
 800714a:	e7ef      	b.n	800712c <_strtod_l+0x9c>
 800714c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800714e:	b13a      	cbz	r2, 8007160 <_strtod_l+0xd0>
 8007150:	2135      	movs	r1, #53	@ 0x35
 8007152:	a81c      	add	r0, sp, #112	@ 0x70
 8007154:	f002 f960 	bl	8009418 <__copybits>
 8007158:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800715a:	9805      	ldr	r0, [sp, #20]
 800715c:	f001 fd2e 	bl	8008bbc <_Bfree>
 8007160:	3e01      	subs	r6, #1
 8007162:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007164:	2e04      	cmp	r6, #4
 8007166:	d806      	bhi.n	8007176 <_strtod_l+0xe6>
 8007168:	e8df f006 	tbb	[pc, r6]
 800716c:	201d0314 	.word	0x201d0314
 8007170:	14          	.byte	0x14
 8007171:	00          	.byte	0x00
 8007172:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007176:	05e1      	lsls	r1, r4, #23
 8007178:	bf48      	it	mi
 800717a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800717e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007182:	0d1b      	lsrs	r3, r3, #20
 8007184:	051b      	lsls	r3, r3, #20
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1bb      	bne.n	8007102 <_strtod_l+0x72>
 800718a:	f001 f83f 	bl	800820c <__errno>
 800718e:	2322      	movs	r3, #34	@ 0x22
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	e7b6      	b.n	8007102 <_strtod_l+0x72>
 8007194:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007198:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800719c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80071a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80071a4:	e7e7      	b.n	8007176 <_strtod_l+0xe6>
 80071a6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007324 <_strtod_l+0x294>
 80071aa:	e7e4      	b.n	8007176 <_strtod_l+0xe6>
 80071ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80071b0:	f04f 3aff 	mov.w	sl, #4294967295
 80071b4:	e7df      	b.n	8007176 <_strtod_l+0xe6>
 80071b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b30      	cmp	r3, #48	@ 0x30
 80071c0:	d0f9      	beq.n	80071b6 <_strtod_l+0x126>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d09d      	beq.n	8007102 <_strtod_l+0x72>
 80071c6:	2301      	movs	r3, #1
 80071c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80071ce:	2300      	movs	r3, #0
 80071d0:	9308      	str	r3, [sp, #32]
 80071d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80071d4:	461f      	mov	r7, r3
 80071d6:	220a      	movs	r2, #10
 80071d8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80071da:	7805      	ldrb	r5, [r0, #0]
 80071dc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80071e0:	b2d9      	uxtb	r1, r3
 80071e2:	2909      	cmp	r1, #9
 80071e4:	d928      	bls.n	8007238 <_strtod_l+0x1a8>
 80071e6:	494e      	ldr	r1, [pc, #312]	@ (8007320 <_strtod_l+0x290>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	f000 ff8b 	bl	8008104 <strncmp>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d032      	beq.n	8007258 <_strtod_l+0x1c8>
 80071f2:	2000      	movs	r0, #0
 80071f4:	462a      	mov	r2, r5
 80071f6:	4681      	mov	r9, r0
 80071f8:	463d      	mov	r5, r7
 80071fa:	4603      	mov	r3, r0
 80071fc:	2a65      	cmp	r2, #101	@ 0x65
 80071fe:	d001      	beq.n	8007204 <_strtod_l+0x174>
 8007200:	2a45      	cmp	r2, #69	@ 0x45
 8007202:	d114      	bne.n	800722e <_strtod_l+0x19e>
 8007204:	b91d      	cbnz	r5, 800720e <_strtod_l+0x17e>
 8007206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007208:	4302      	orrs	r2, r0
 800720a:	d095      	beq.n	8007138 <_strtod_l+0xa8>
 800720c:	2500      	movs	r5, #0
 800720e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007210:	1c62      	adds	r2, r4, #1
 8007212:	9219      	str	r2, [sp, #100]	@ 0x64
 8007214:	7862      	ldrb	r2, [r4, #1]
 8007216:	2a2b      	cmp	r2, #43	@ 0x2b
 8007218:	d077      	beq.n	800730a <_strtod_l+0x27a>
 800721a:	2a2d      	cmp	r2, #45	@ 0x2d
 800721c:	d07b      	beq.n	8007316 <_strtod_l+0x286>
 800721e:	f04f 0c00 	mov.w	ip, #0
 8007222:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007226:	2909      	cmp	r1, #9
 8007228:	f240 8082 	bls.w	8007330 <_strtod_l+0x2a0>
 800722c:	9419      	str	r4, [sp, #100]	@ 0x64
 800722e:	f04f 0800 	mov.w	r8, #0
 8007232:	e0a2      	b.n	800737a <_strtod_l+0x2ea>
 8007234:	2300      	movs	r3, #0
 8007236:	e7c7      	b.n	80071c8 <_strtod_l+0x138>
 8007238:	2f08      	cmp	r7, #8
 800723a:	bfd5      	itete	le
 800723c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800723e:	9908      	ldrgt	r1, [sp, #32]
 8007240:	fb02 3301 	mlale	r3, r2, r1, r3
 8007244:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007248:	f100 0001 	add.w	r0, r0, #1
 800724c:	bfd4      	ite	le
 800724e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007250:	9308      	strgt	r3, [sp, #32]
 8007252:	3701      	adds	r7, #1
 8007254:	9019      	str	r0, [sp, #100]	@ 0x64
 8007256:	e7bf      	b.n	80071d8 <_strtod_l+0x148>
 8007258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	9219      	str	r2, [sp, #100]	@ 0x64
 800725e:	785a      	ldrb	r2, [r3, #1]
 8007260:	b37f      	cbz	r7, 80072c2 <_strtod_l+0x232>
 8007262:	4681      	mov	r9, r0
 8007264:	463d      	mov	r5, r7
 8007266:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800726a:	2b09      	cmp	r3, #9
 800726c:	d912      	bls.n	8007294 <_strtod_l+0x204>
 800726e:	2301      	movs	r3, #1
 8007270:	e7c4      	b.n	80071fc <_strtod_l+0x16c>
 8007272:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	9219      	str	r2, [sp, #100]	@ 0x64
 8007278:	785a      	ldrb	r2, [r3, #1]
 800727a:	3001      	adds	r0, #1
 800727c:	2a30      	cmp	r2, #48	@ 0x30
 800727e:	d0f8      	beq.n	8007272 <_strtod_l+0x1e2>
 8007280:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007284:	2b08      	cmp	r3, #8
 8007286:	f200 84d3 	bhi.w	8007c30 <_strtod_l+0xba0>
 800728a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800728c:	930c      	str	r3, [sp, #48]	@ 0x30
 800728e:	4681      	mov	r9, r0
 8007290:	2000      	movs	r0, #0
 8007292:	4605      	mov	r5, r0
 8007294:	3a30      	subs	r2, #48	@ 0x30
 8007296:	f100 0301 	add.w	r3, r0, #1
 800729a:	d02a      	beq.n	80072f2 <_strtod_l+0x262>
 800729c:	4499      	add	r9, r3
 800729e:	eb00 0c05 	add.w	ip, r0, r5
 80072a2:	462b      	mov	r3, r5
 80072a4:	210a      	movs	r1, #10
 80072a6:	4563      	cmp	r3, ip
 80072a8:	d10d      	bne.n	80072c6 <_strtod_l+0x236>
 80072aa:	1c69      	adds	r1, r5, #1
 80072ac:	4401      	add	r1, r0
 80072ae:	4428      	add	r0, r5
 80072b0:	2808      	cmp	r0, #8
 80072b2:	dc16      	bgt.n	80072e2 <_strtod_l+0x252>
 80072b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072b6:	230a      	movs	r3, #10
 80072b8:	fb03 2300 	mla	r3, r3, r0, r2
 80072bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80072be:	2300      	movs	r3, #0
 80072c0:	e018      	b.n	80072f4 <_strtod_l+0x264>
 80072c2:	4638      	mov	r0, r7
 80072c4:	e7da      	b.n	800727c <_strtod_l+0x1ec>
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	f103 0301 	add.w	r3, r3, #1
 80072cc:	dc03      	bgt.n	80072d6 <_strtod_l+0x246>
 80072ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80072d0:	434e      	muls	r6, r1
 80072d2:	960a      	str	r6, [sp, #40]	@ 0x28
 80072d4:	e7e7      	b.n	80072a6 <_strtod_l+0x216>
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	bfde      	ittt	le
 80072da:	9e08      	ldrle	r6, [sp, #32]
 80072dc:	434e      	mulle	r6, r1
 80072de:	9608      	strle	r6, [sp, #32]
 80072e0:	e7e1      	b.n	80072a6 <_strtod_l+0x216>
 80072e2:	280f      	cmp	r0, #15
 80072e4:	dceb      	bgt.n	80072be <_strtod_l+0x22e>
 80072e6:	9808      	ldr	r0, [sp, #32]
 80072e8:	230a      	movs	r3, #10
 80072ea:	fb03 2300 	mla	r3, r3, r0, r2
 80072ee:	9308      	str	r3, [sp, #32]
 80072f0:	e7e5      	b.n	80072be <_strtod_l+0x22e>
 80072f2:	4629      	mov	r1, r5
 80072f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072f6:	1c50      	adds	r0, r2, #1
 80072f8:	9019      	str	r0, [sp, #100]	@ 0x64
 80072fa:	7852      	ldrb	r2, [r2, #1]
 80072fc:	4618      	mov	r0, r3
 80072fe:	460d      	mov	r5, r1
 8007300:	e7b1      	b.n	8007266 <_strtod_l+0x1d6>
 8007302:	f04f 0900 	mov.w	r9, #0
 8007306:	2301      	movs	r3, #1
 8007308:	e77d      	b.n	8007206 <_strtod_l+0x176>
 800730a:	f04f 0c00 	mov.w	ip, #0
 800730e:	1ca2      	adds	r2, r4, #2
 8007310:	9219      	str	r2, [sp, #100]	@ 0x64
 8007312:	78a2      	ldrb	r2, [r4, #2]
 8007314:	e785      	b.n	8007222 <_strtod_l+0x192>
 8007316:	f04f 0c01 	mov.w	ip, #1
 800731a:	e7f8      	b.n	800730e <_strtod_l+0x27e>
 800731c:	0800a77c 	.word	0x0800a77c
 8007320:	0800a758 	.word	0x0800a758
 8007324:	7ff00000 	.word	0x7ff00000
 8007328:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800732a:	1c51      	adds	r1, r2, #1
 800732c:	9119      	str	r1, [sp, #100]	@ 0x64
 800732e:	7852      	ldrb	r2, [r2, #1]
 8007330:	2a30      	cmp	r2, #48	@ 0x30
 8007332:	d0f9      	beq.n	8007328 <_strtod_l+0x298>
 8007334:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007338:	2908      	cmp	r1, #8
 800733a:	f63f af78 	bhi.w	800722e <_strtod_l+0x19e>
 800733e:	3a30      	subs	r2, #48	@ 0x30
 8007340:	920e      	str	r2, [sp, #56]	@ 0x38
 8007342:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007344:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007346:	f04f 080a 	mov.w	r8, #10
 800734a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800734c:	1c56      	adds	r6, r2, #1
 800734e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007350:	7852      	ldrb	r2, [r2, #1]
 8007352:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007356:	f1be 0f09 	cmp.w	lr, #9
 800735a:	d939      	bls.n	80073d0 <_strtod_l+0x340>
 800735c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800735e:	1a76      	subs	r6, r6, r1
 8007360:	2e08      	cmp	r6, #8
 8007362:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007366:	dc03      	bgt.n	8007370 <_strtod_l+0x2e0>
 8007368:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800736a:	4588      	cmp	r8, r1
 800736c:	bfa8      	it	ge
 800736e:	4688      	movge	r8, r1
 8007370:	f1bc 0f00 	cmp.w	ip, #0
 8007374:	d001      	beq.n	800737a <_strtod_l+0x2ea>
 8007376:	f1c8 0800 	rsb	r8, r8, #0
 800737a:	2d00      	cmp	r5, #0
 800737c:	d14e      	bne.n	800741c <_strtod_l+0x38c>
 800737e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007380:	4308      	orrs	r0, r1
 8007382:	f47f aebe 	bne.w	8007102 <_strtod_l+0x72>
 8007386:	2b00      	cmp	r3, #0
 8007388:	f47f aed6 	bne.w	8007138 <_strtod_l+0xa8>
 800738c:	2a69      	cmp	r2, #105	@ 0x69
 800738e:	d028      	beq.n	80073e2 <_strtod_l+0x352>
 8007390:	dc25      	bgt.n	80073de <_strtod_l+0x34e>
 8007392:	2a49      	cmp	r2, #73	@ 0x49
 8007394:	d025      	beq.n	80073e2 <_strtod_l+0x352>
 8007396:	2a4e      	cmp	r2, #78	@ 0x4e
 8007398:	f47f aece 	bne.w	8007138 <_strtod_l+0xa8>
 800739c:	499b      	ldr	r1, [pc, #620]	@ (800760c <_strtod_l+0x57c>)
 800739e:	a819      	add	r0, sp, #100	@ 0x64
 80073a0:	f001 fa5c 	bl	800885c <__match>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f43f aec7 	beq.w	8007138 <_strtod_l+0xa8>
 80073aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b28      	cmp	r3, #40	@ 0x28
 80073b0:	d12e      	bne.n	8007410 <_strtod_l+0x380>
 80073b2:	4997      	ldr	r1, [pc, #604]	@ (8007610 <_strtod_l+0x580>)
 80073b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80073b6:	a819      	add	r0, sp, #100	@ 0x64
 80073b8:	f001 fa64 	bl	8008884 <__hexnan>
 80073bc:	2805      	cmp	r0, #5
 80073be:	d127      	bne.n	8007410 <_strtod_l+0x380>
 80073c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80073c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80073ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80073ce:	e698      	b.n	8007102 <_strtod_l+0x72>
 80073d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073d2:	fb08 2101 	mla	r1, r8, r1, r2
 80073d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80073da:	920e      	str	r2, [sp, #56]	@ 0x38
 80073dc:	e7b5      	b.n	800734a <_strtod_l+0x2ba>
 80073de:	2a6e      	cmp	r2, #110	@ 0x6e
 80073e0:	e7da      	b.n	8007398 <_strtod_l+0x308>
 80073e2:	498c      	ldr	r1, [pc, #560]	@ (8007614 <_strtod_l+0x584>)
 80073e4:	a819      	add	r0, sp, #100	@ 0x64
 80073e6:	f001 fa39 	bl	800885c <__match>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	f43f aea4 	beq.w	8007138 <_strtod_l+0xa8>
 80073f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073f2:	4989      	ldr	r1, [pc, #548]	@ (8007618 <_strtod_l+0x588>)
 80073f4:	3b01      	subs	r3, #1
 80073f6:	a819      	add	r0, sp, #100	@ 0x64
 80073f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80073fa:	f001 fa2f 	bl	800885c <__match>
 80073fe:	b910      	cbnz	r0, 8007406 <_strtod_l+0x376>
 8007400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007402:	3301      	adds	r3, #1
 8007404:	9319      	str	r3, [sp, #100]	@ 0x64
 8007406:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007628 <_strtod_l+0x598>
 800740a:	f04f 0a00 	mov.w	sl, #0
 800740e:	e678      	b.n	8007102 <_strtod_l+0x72>
 8007410:	4882      	ldr	r0, [pc, #520]	@ (800761c <_strtod_l+0x58c>)
 8007412:	f000 ff41 	bl	8008298 <nan>
 8007416:	ec5b ab10 	vmov	sl, fp, d0
 800741a:	e672      	b.n	8007102 <_strtod_l+0x72>
 800741c:	eba8 0309 	sub.w	r3, r8, r9
 8007420:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007422:	9309      	str	r3, [sp, #36]	@ 0x24
 8007424:	2f00      	cmp	r7, #0
 8007426:	bf08      	it	eq
 8007428:	462f      	moveq	r7, r5
 800742a:	2d10      	cmp	r5, #16
 800742c:	462c      	mov	r4, r5
 800742e:	bfa8      	it	ge
 8007430:	2410      	movge	r4, #16
 8007432:	f7f9 f897 	bl	8000564 <__aeabi_ui2d>
 8007436:	2d09      	cmp	r5, #9
 8007438:	4682      	mov	sl, r0
 800743a:	468b      	mov	fp, r1
 800743c:	dc13      	bgt.n	8007466 <_strtod_l+0x3d6>
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	2b00      	cmp	r3, #0
 8007442:	f43f ae5e 	beq.w	8007102 <_strtod_l+0x72>
 8007446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007448:	dd78      	ble.n	800753c <_strtod_l+0x4ac>
 800744a:	2b16      	cmp	r3, #22
 800744c:	dc5f      	bgt.n	800750e <_strtod_l+0x47e>
 800744e:	4974      	ldr	r1, [pc, #464]	@ (8007620 <_strtod_l+0x590>)
 8007450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007458:	4652      	mov	r2, sl
 800745a:	465b      	mov	r3, fp
 800745c:	f7f9 f8fc 	bl	8000658 <__aeabi_dmul>
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	e64d      	b.n	8007102 <_strtod_l+0x72>
 8007466:	4b6e      	ldr	r3, [pc, #440]	@ (8007620 <_strtod_l+0x590>)
 8007468:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800746c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007470:	f7f9 f8f2 	bl	8000658 <__aeabi_dmul>
 8007474:	4682      	mov	sl, r0
 8007476:	9808      	ldr	r0, [sp, #32]
 8007478:	468b      	mov	fp, r1
 800747a:	f7f9 f873 	bl	8000564 <__aeabi_ui2d>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4650      	mov	r0, sl
 8007484:	4659      	mov	r1, fp
 8007486:	f7f8 ff31 	bl	80002ec <__adddf3>
 800748a:	2d0f      	cmp	r5, #15
 800748c:	4682      	mov	sl, r0
 800748e:	468b      	mov	fp, r1
 8007490:	ddd5      	ble.n	800743e <_strtod_l+0x3ae>
 8007492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007494:	1b2c      	subs	r4, r5, r4
 8007496:	441c      	add	r4, r3
 8007498:	2c00      	cmp	r4, #0
 800749a:	f340 8096 	ble.w	80075ca <_strtod_l+0x53a>
 800749e:	f014 030f 	ands.w	r3, r4, #15
 80074a2:	d00a      	beq.n	80074ba <_strtod_l+0x42a>
 80074a4:	495e      	ldr	r1, [pc, #376]	@ (8007620 <_strtod_l+0x590>)
 80074a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074aa:	4652      	mov	r2, sl
 80074ac:	465b      	mov	r3, fp
 80074ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b2:	f7f9 f8d1 	bl	8000658 <__aeabi_dmul>
 80074b6:	4682      	mov	sl, r0
 80074b8:	468b      	mov	fp, r1
 80074ba:	f034 040f 	bics.w	r4, r4, #15
 80074be:	d073      	beq.n	80075a8 <_strtod_l+0x518>
 80074c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80074c4:	dd48      	ble.n	8007558 <_strtod_l+0x4c8>
 80074c6:	2400      	movs	r4, #0
 80074c8:	46a0      	mov	r8, r4
 80074ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80074cc:	46a1      	mov	r9, r4
 80074ce:	9a05      	ldr	r2, [sp, #20]
 80074d0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007628 <_strtod_l+0x598>
 80074d4:	2322      	movs	r3, #34	@ 0x22
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	f04f 0a00 	mov.w	sl, #0
 80074dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f43f ae0f 	beq.w	8007102 <_strtod_l+0x72>
 80074e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074e6:	9805      	ldr	r0, [sp, #20]
 80074e8:	f001 fb68 	bl	8008bbc <_Bfree>
 80074ec:	9805      	ldr	r0, [sp, #20]
 80074ee:	4649      	mov	r1, r9
 80074f0:	f001 fb64 	bl	8008bbc <_Bfree>
 80074f4:	9805      	ldr	r0, [sp, #20]
 80074f6:	4641      	mov	r1, r8
 80074f8:	f001 fb60 	bl	8008bbc <_Bfree>
 80074fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074fe:	9805      	ldr	r0, [sp, #20]
 8007500:	f001 fb5c 	bl	8008bbc <_Bfree>
 8007504:	9805      	ldr	r0, [sp, #20]
 8007506:	4621      	mov	r1, r4
 8007508:	f001 fb58 	bl	8008bbc <_Bfree>
 800750c:	e5f9      	b.n	8007102 <_strtod_l+0x72>
 800750e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007510:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007514:	4293      	cmp	r3, r2
 8007516:	dbbc      	blt.n	8007492 <_strtod_l+0x402>
 8007518:	4c41      	ldr	r4, [pc, #260]	@ (8007620 <_strtod_l+0x590>)
 800751a:	f1c5 050f 	rsb	r5, r5, #15
 800751e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007522:	4652      	mov	r2, sl
 8007524:	465b      	mov	r3, fp
 8007526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800752a:	f7f9 f895 	bl	8000658 <__aeabi_dmul>
 800752e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007530:	1b5d      	subs	r5, r3, r5
 8007532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007536:	e9d4 2300 	ldrd	r2, r3, [r4]
 800753a:	e78f      	b.n	800745c <_strtod_l+0x3cc>
 800753c:	3316      	adds	r3, #22
 800753e:	dba8      	blt.n	8007492 <_strtod_l+0x402>
 8007540:	4b37      	ldr	r3, [pc, #220]	@ (8007620 <_strtod_l+0x590>)
 8007542:	eba9 0808 	sub.w	r8, r9, r8
 8007546:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800754a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800754e:	4650      	mov	r0, sl
 8007550:	4659      	mov	r1, fp
 8007552:	f7f9 f9ab 	bl	80008ac <__aeabi_ddiv>
 8007556:	e783      	b.n	8007460 <_strtod_l+0x3d0>
 8007558:	4b32      	ldr	r3, [pc, #200]	@ (8007624 <_strtod_l+0x594>)
 800755a:	9308      	str	r3, [sp, #32]
 800755c:	2300      	movs	r3, #0
 800755e:	1124      	asrs	r4, r4, #4
 8007560:	4650      	mov	r0, sl
 8007562:	4659      	mov	r1, fp
 8007564:	461e      	mov	r6, r3
 8007566:	2c01      	cmp	r4, #1
 8007568:	dc21      	bgt.n	80075ae <_strtod_l+0x51e>
 800756a:	b10b      	cbz	r3, 8007570 <_strtod_l+0x4e0>
 800756c:	4682      	mov	sl, r0
 800756e:	468b      	mov	fp, r1
 8007570:	492c      	ldr	r1, [pc, #176]	@ (8007624 <_strtod_l+0x594>)
 8007572:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007576:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800757a:	4652      	mov	r2, sl
 800757c:	465b      	mov	r3, fp
 800757e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007582:	f7f9 f869 	bl	8000658 <__aeabi_dmul>
 8007586:	4b28      	ldr	r3, [pc, #160]	@ (8007628 <_strtod_l+0x598>)
 8007588:	460a      	mov	r2, r1
 800758a:	400b      	ands	r3, r1
 800758c:	4927      	ldr	r1, [pc, #156]	@ (800762c <_strtod_l+0x59c>)
 800758e:	428b      	cmp	r3, r1
 8007590:	4682      	mov	sl, r0
 8007592:	d898      	bhi.n	80074c6 <_strtod_l+0x436>
 8007594:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007598:	428b      	cmp	r3, r1
 800759a:	bf86      	itte	hi
 800759c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007630 <_strtod_l+0x5a0>
 80075a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80075a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80075a8:	2300      	movs	r3, #0
 80075aa:	9308      	str	r3, [sp, #32]
 80075ac:	e07a      	b.n	80076a4 <_strtod_l+0x614>
 80075ae:	07e2      	lsls	r2, r4, #31
 80075b0:	d505      	bpl.n	80075be <_strtod_l+0x52e>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f7f9 f84e 	bl	8000658 <__aeabi_dmul>
 80075bc:	2301      	movs	r3, #1
 80075be:	9a08      	ldr	r2, [sp, #32]
 80075c0:	3208      	adds	r2, #8
 80075c2:	3601      	adds	r6, #1
 80075c4:	1064      	asrs	r4, r4, #1
 80075c6:	9208      	str	r2, [sp, #32]
 80075c8:	e7cd      	b.n	8007566 <_strtod_l+0x4d6>
 80075ca:	d0ed      	beq.n	80075a8 <_strtod_l+0x518>
 80075cc:	4264      	negs	r4, r4
 80075ce:	f014 020f 	ands.w	r2, r4, #15
 80075d2:	d00a      	beq.n	80075ea <_strtod_l+0x55a>
 80075d4:	4b12      	ldr	r3, [pc, #72]	@ (8007620 <_strtod_l+0x590>)
 80075d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075da:	4650      	mov	r0, sl
 80075dc:	4659      	mov	r1, fp
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f9 f963 	bl	80008ac <__aeabi_ddiv>
 80075e6:	4682      	mov	sl, r0
 80075e8:	468b      	mov	fp, r1
 80075ea:	1124      	asrs	r4, r4, #4
 80075ec:	d0dc      	beq.n	80075a8 <_strtod_l+0x518>
 80075ee:	2c1f      	cmp	r4, #31
 80075f0:	dd20      	ble.n	8007634 <_strtod_l+0x5a4>
 80075f2:	2400      	movs	r4, #0
 80075f4:	46a0      	mov	r8, r4
 80075f6:	940a      	str	r4, [sp, #40]	@ 0x28
 80075f8:	46a1      	mov	r9, r4
 80075fa:	9a05      	ldr	r2, [sp, #20]
 80075fc:	2322      	movs	r3, #34	@ 0x22
 80075fe:	f04f 0a00 	mov.w	sl, #0
 8007602:	f04f 0b00 	mov.w	fp, #0
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	e768      	b.n	80074dc <_strtod_l+0x44c>
 800760a:	bf00      	nop
 800760c:	0800a763 	.word	0x0800a763
 8007610:	0800a768 	.word	0x0800a768
 8007614:	0800a75a 	.word	0x0800a75a
 8007618:	0800a75d 	.word	0x0800a75d
 800761c:	0800ab0e 	.word	0x0800ab0e
 8007620:	0800a9d8 	.word	0x0800a9d8
 8007624:	0800a9b0 	.word	0x0800a9b0
 8007628:	7ff00000 	.word	0x7ff00000
 800762c:	7ca00000 	.word	0x7ca00000
 8007630:	7fefffff 	.word	0x7fefffff
 8007634:	f014 0310 	ands.w	r3, r4, #16
 8007638:	bf18      	it	ne
 800763a:	236a      	movne	r3, #106	@ 0x6a
 800763c:	4ea9      	ldr	r6, [pc, #676]	@ (80078e4 <_strtod_l+0x854>)
 800763e:	9308      	str	r3, [sp, #32]
 8007640:	4650      	mov	r0, sl
 8007642:	4659      	mov	r1, fp
 8007644:	2300      	movs	r3, #0
 8007646:	07e2      	lsls	r2, r4, #31
 8007648:	d504      	bpl.n	8007654 <_strtod_l+0x5c4>
 800764a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800764e:	f7f9 f803 	bl	8000658 <__aeabi_dmul>
 8007652:	2301      	movs	r3, #1
 8007654:	1064      	asrs	r4, r4, #1
 8007656:	f106 0608 	add.w	r6, r6, #8
 800765a:	d1f4      	bne.n	8007646 <_strtod_l+0x5b6>
 800765c:	b10b      	cbz	r3, 8007662 <_strtod_l+0x5d2>
 800765e:	4682      	mov	sl, r0
 8007660:	468b      	mov	fp, r1
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	b1b3      	cbz	r3, 8007694 <_strtod_l+0x604>
 8007666:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800766a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800766e:	2b00      	cmp	r3, #0
 8007670:	4659      	mov	r1, fp
 8007672:	dd0f      	ble.n	8007694 <_strtod_l+0x604>
 8007674:	2b1f      	cmp	r3, #31
 8007676:	dd55      	ble.n	8007724 <_strtod_l+0x694>
 8007678:	2b34      	cmp	r3, #52	@ 0x34
 800767a:	bfde      	ittt	le
 800767c:	f04f 33ff 	movle.w	r3, #4294967295
 8007680:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007684:	4093      	lslle	r3, r2
 8007686:	f04f 0a00 	mov.w	sl, #0
 800768a:	bfcc      	ite	gt
 800768c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007690:	ea03 0b01 	andle.w	fp, r3, r1
 8007694:	2200      	movs	r2, #0
 8007696:	2300      	movs	r3, #0
 8007698:	4650      	mov	r0, sl
 800769a:	4659      	mov	r1, fp
 800769c:	f7f9 fa44 	bl	8000b28 <__aeabi_dcmpeq>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d1a6      	bne.n	80075f2 <_strtod_l+0x562>
 80076a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80076aa:	9805      	ldr	r0, [sp, #20]
 80076ac:	462b      	mov	r3, r5
 80076ae:	463a      	mov	r2, r7
 80076b0:	f001 faec 	bl	8008c8c <__s2b>
 80076b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80076b6:	2800      	cmp	r0, #0
 80076b8:	f43f af05 	beq.w	80074c6 <_strtod_l+0x436>
 80076bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076be:	2a00      	cmp	r2, #0
 80076c0:	eba9 0308 	sub.w	r3, r9, r8
 80076c4:	bfa8      	it	ge
 80076c6:	2300      	movge	r3, #0
 80076c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80076ca:	2400      	movs	r4, #0
 80076cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076d0:	9316      	str	r3, [sp, #88]	@ 0x58
 80076d2:	46a0      	mov	r8, r4
 80076d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076d6:	9805      	ldr	r0, [sp, #20]
 80076d8:	6859      	ldr	r1, [r3, #4]
 80076da:	f001 fa2f 	bl	8008b3c <_Balloc>
 80076de:	4681      	mov	r9, r0
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f43f aef4 	beq.w	80074ce <_strtod_l+0x43e>
 80076e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	3202      	adds	r2, #2
 80076ec:	f103 010c 	add.w	r1, r3, #12
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	300c      	adds	r0, #12
 80076f4:	f000 fdbf 	bl	8008276 <memcpy>
 80076f8:	ec4b ab10 	vmov	d0, sl, fp
 80076fc:	9805      	ldr	r0, [sp, #20]
 80076fe:	aa1c      	add	r2, sp, #112	@ 0x70
 8007700:	a91b      	add	r1, sp, #108	@ 0x6c
 8007702:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007706:	f001 fdfd 	bl	8009304 <__d2b>
 800770a:	901a      	str	r0, [sp, #104]	@ 0x68
 800770c:	2800      	cmp	r0, #0
 800770e:	f43f aede 	beq.w	80074ce <_strtod_l+0x43e>
 8007712:	9805      	ldr	r0, [sp, #20]
 8007714:	2101      	movs	r1, #1
 8007716:	f001 fb4f 	bl	8008db8 <__i2b>
 800771a:	4680      	mov	r8, r0
 800771c:	b948      	cbnz	r0, 8007732 <_strtod_l+0x6a2>
 800771e:	f04f 0800 	mov.w	r8, #0
 8007722:	e6d4      	b.n	80074ce <_strtod_l+0x43e>
 8007724:	f04f 32ff 	mov.w	r2, #4294967295
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	ea03 0a0a 	and.w	sl, r3, sl
 8007730:	e7b0      	b.n	8007694 <_strtod_l+0x604>
 8007732:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007734:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007736:	2d00      	cmp	r5, #0
 8007738:	bfab      	itete	ge
 800773a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800773c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800773e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007740:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007742:	bfac      	ite	ge
 8007744:	18ef      	addge	r7, r5, r3
 8007746:	1b5e      	sublt	r6, r3, r5
 8007748:	9b08      	ldr	r3, [sp, #32]
 800774a:	1aed      	subs	r5, r5, r3
 800774c:	4415      	add	r5, r2
 800774e:	4b66      	ldr	r3, [pc, #408]	@ (80078e8 <_strtod_l+0x858>)
 8007750:	3d01      	subs	r5, #1
 8007752:	429d      	cmp	r5, r3
 8007754:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007758:	da50      	bge.n	80077fc <_strtod_l+0x76c>
 800775a:	1b5b      	subs	r3, r3, r5
 800775c:	2b1f      	cmp	r3, #31
 800775e:	eba2 0203 	sub.w	r2, r2, r3
 8007762:	f04f 0101 	mov.w	r1, #1
 8007766:	dc3d      	bgt.n	80077e4 <_strtod_l+0x754>
 8007768:	fa01 f303 	lsl.w	r3, r1, r3
 800776c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800776e:	2300      	movs	r3, #0
 8007770:	9310      	str	r3, [sp, #64]	@ 0x40
 8007772:	18bd      	adds	r5, r7, r2
 8007774:	9b08      	ldr	r3, [sp, #32]
 8007776:	42af      	cmp	r7, r5
 8007778:	4416      	add	r6, r2
 800777a:	441e      	add	r6, r3
 800777c:	463b      	mov	r3, r7
 800777e:	bfa8      	it	ge
 8007780:	462b      	movge	r3, r5
 8007782:	42b3      	cmp	r3, r6
 8007784:	bfa8      	it	ge
 8007786:	4633      	movge	r3, r6
 8007788:	2b00      	cmp	r3, #0
 800778a:	bfc2      	ittt	gt
 800778c:	1aed      	subgt	r5, r5, r3
 800778e:	1af6      	subgt	r6, r6, r3
 8007790:	1aff      	subgt	r7, r7, r3
 8007792:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007794:	2b00      	cmp	r3, #0
 8007796:	dd16      	ble.n	80077c6 <_strtod_l+0x736>
 8007798:	4641      	mov	r1, r8
 800779a:	9805      	ldr	r0, [sp, #20]
 800779c:	461a      	mov	r2, r3
 800779e:	f001 fbcb 	bl	8008f38 <__pow5mult>
 80077a2:	4680      	mov	r8, r0
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d0ba      	beq.n	800771e <_strtod_l+0x68e>
 80077a8:	4601      	mov	r1, r0
 80077aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80077ac:	9805      	ldr	r0, [sp, #20]
 80077ae:	f001 fb19 	bl	8008de4 <__multiply>
 80077b2:	900e      	str	r0, [sp, #56]	@ 0x38
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f43f ae8a 	beq.w	80074ce <_strtod_l+0x43e>
 80077ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077bc:	9805      	ldr	r0, [sp, #20]
 80077be:	f001 f9fd 	bl	8008bbc <_Bfree>
 80077c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	dc1d      	bgt.n	8007806 <_strtod_l+0x776>
 80077ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dd23      	ble.n	8007818 <_strtod_l+0x788>
 80077d0:	4649      	mov	r1, r9
 80077d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80077d4:	9805      	ldr	r0, [sp, #20]
 80077d6:	f001 fbaf 	bl	8008f38 <__pow5mult>
 80077da:	4681      	mov	r9, r0
 80077dc:	b9e0      	cbnz	r0, 8007818 <_strtod_l+0x788>
 80077de:	f04f 0900 	mov.w	r9, #0
 80077e2:	e674      	b.n	80074ce <_strtod_l+0x43e>
 80077e4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80077e8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80077ec:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80077f0:	35e2      	adds	r5, #226	@ 0xe2
 80077f2:	fa01 f305 	lsl.w	r3, r1, r5
 80077f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80077f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80077fa:	e7ba      	b.n	8007772 <_strtod_l+0x6e2>
 80077fc:	2300      	movs	r3, #0
 80077fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007800:	2301      	movs	r3, #1
 8007802:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007804:	e7b5      	b.n	8007772 <_strtod_l+0x6e2>
 8007806:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007808:	9805      	ldr	r0, [sp, #20]
 800780a:	462a      	mov	r2, r5
 800780c:	f001 fbee 	bl	8008fec <__lshift>
 8007810:	901a      	str	r0, [sp, #104]	@ 0x68
 8007812:	2800      	cmp	r0, #0
 8007814:	d1d9      	bne.n	80077ca <_strtod_l+0x73a>
 8007816:	e65a      	b.n	80074ce <_strtod_l+0x43e>
 8007818:	2e00      	cmp	r6, #0
 800781a:	dd07      	ble.n	800782c <_strtod_l+0x79c>
 800781c:	4649      	mov	r1, r9
 800781e:	9805      	ldr	r0, [sp, #20]
 8007820:	4632      	mov	r2, r6
 8007822:	f001 fbe3 	bl	8008fec <__lshift>
 8007826:	4681      	mov	r9, r0
 8007828:	2800      	cmp	r0, #0
 800782a:	d0d8      	beq.n	80077de <_strtod_l+0x74e>
 800782c:	2f00      	cmp	r7, #0
 800782e:	dd08      	ble.n	8007842 <_strtod_l+0x7b2>
 8007830:	4641      	mov	r1, r8
 8007832:	9805      	ldr	r0, [sp, #20]
 8007834:	463a      	mov	r2, r7
 8007836:	f001 fbd9 	bl	8008fec <__lshift>
 800783a:	4680      	mov	r8, r0
 800783c:	2800      	cmp	r0, #0
 800783e:	f43f ae46 	beq.w	80074ce <_strtod_l+0x43e>
 8007842:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007844:	9805      	ldr	r0, [sp, #20]
 8007846:	464a      	mov	r2, r9
 8007848:	f001 fc58 	bl	80090fc <__mdiff>
 800784c:	4604      	mov	r4, r0
 800784e:	2800      	cmp	r0, #0
 8007850:	f43f ae3d 	beq.w	80074ce <_strtod_l+0x43e>
 8007854:	68c3      	ldr	r3, [r0, #12]
 8007856:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007858:	2300      	movs	r3, #0
 800785a:	60c3      	str	r3, [r0, #12]
 800785c:	4641      	mov	r1, r8
 800785e:	f001 fc31 	bl	80090c4 <__mcmp>
 8007862:	2800      	cmp	r0, #0
 8007864:	da46      	bge.n	80078f4 <_strtod_l+0x864>
 8007866:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007868:	ea53 030a 	orrs.w	r3, r3, sl
 800786c:	d16c      	bne.n	8007948 <_strtod_l+0x8b8>
 800786e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007872:	2b00      	cmp	r3, #0
 8007874:	d168      	bne.n	8007948 <_strtod_l+0x8b8>
 8007876:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800787a:	0d1b      	lsrs	r3, r3, #20
 800787c:	051b      	lsls	r3, r3, #20
 800787e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007882:	d961      	bls.n	8007948 <_strtod_l+0x8b8>
 8007884:	6963      	ldr	r3, [r4, #20]
 8007886:	b913      	cbnz	r3, 800788e <_strtod_l+0x7fe>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	2b01      	cmp	r3, #1
 800788c:	dd5c      	ble.n	8007948 <_strtod_l+0x8b8>
 800788e:	4621      	mov	r1, r4
 8007890:	2201      	movs	r2, #1
 8007892:	9805      	ldr	r0, [sp, #20]
 8007894:	f001 fbaa 	bl	8008fec <__lshift>
 8007898:	4641      	mov	r1, r8
 800789a:	4604      	mov	r4, r0
 800789c:	f001 fc12 	bl	80090c4 <__mcmp>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	dd51      	ble.n	8007948 <_strtod_l+0x8b8>
 80078a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078a8:	9a08      	ldr	r2, [sp, #32]
 80078aa:	0d1b      	lsrs	r3, r3, #20
 80078ac:	051b      	lsls	r3, r3, #20
 80078ae:	2a00      	cmp	r2, #0
 80078b0:	d06b      	beq.n	800798a <_strtod_l+0x8fa>
 80078b2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078b6:	d868      	bhi.n	800798a <_strtod_l+0x8fa>
 80078b8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80078bc:	f67f ae9d 	bls.w	80075fa <_strtod_l+0x56a>
 80078c0:	4b0a      	ldr	r3, [pc, #40]	@ (80078ec <_strtod_l+0x85c>)
 80078c2:	4650      	mov	r0, sl
 80078c4:	4659      	mov	r1, fp
 80078c6:	2200      	movs	r2, #0
 80078c8:	f7f8 fec6 	bl	8000658 <__aeabi_dmul>
 80078cc:	4b08      	ldr	r3, [pc, #32]	@ (80078f0 <_strtod_l+0x860>)
 80078ce:	400b      	ands	r3, r1
 80078d0:	4682      	mov	sl, r0
 80078d2:	468b      	mov	fp, r1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f47f ae05 	bne.w	80074e4 <_strtod_l+0x454>
 80078da:	9a05      	ldr	r2, [sp, #20]
 80078dc:	2322      	movs	r3, #34	@ 0x22
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	e600      	b.n	80074e4 <_strtod_l+0x454>
 80078e2:	bf00      	nop
 80078e4:	0800a790 	.word	0x0800a790
 80078e8:	fffffc02 	.word	0xfffffc02
 80078ec:	39500000 	.word	0x39500000
 80078f0:	7ff00000 	.word	0x7ff00000
 80078f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078f8:	d165      	bne.n	80079c6 <_strtod_l+0x936>
 80078fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007900:	b35a      	cbz	r2, 800795a <_strtod_l+0x8ca>
 8007902:	4a9f      	ldr	r2, [pc, #636]	@ (8007b80 <_strtod_l+0xaf0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d12b      	bne.n	8007960 <_strtod_l+0x8d0>
 8007908:	9b08      	ldr	r3, [sp, #32]
 800790a:	4651      	mov	r1, sl
 800790c:	b303      	cbz	r3, 8007950 <_strtod_l+0x8c0>
 800790e:	4b9d      	ldr	r3, [pc, #628]	@ (8007b84 <_strtod_l+0xaf4>)
 8007910:	465a      	mov	r2, fp
 8007912:	4013      	ands	r3, r2
 8007914:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	d81b      	bhi.n	8007956 <_strtod_l+0x8c6>
 800791e:	0d1b      	lsrs	r3, r3, #20
 8007920:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	4299      	cmp	r1, r3
 800792a:	d119      	bne.n	8007960 <_strtod_l+0x8d0>
 800792c:	4b96      	ldr	r3, [pc, #600]	@ (8007b88 <_strtod_l+0xaf8>)
 800792e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007930:	429a      	cmp	r2, r3
 8007932:	d102      	bne.n	800793a <_strtod_l+0x8aa>
 8007934:	3101      	adds	r1, #1
 8007936:	f43f adca 	beq.w	80074ce <_strtod_l+0x43e>
 800793a:	4b92      	ldr	r3, [pc, #584]	@ (8007b84 <_strtod_l+0xaf4>)
 800793c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800793e:	401a      	ands	r2, r3
 8007940:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007944:	f04f 0a00 	mov.w	sl, #0
 8007948:	9b08      	ldr	r3, [sp, #32]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1b8      	bne.n	80078c0 <_strtod_l+0x830>
 800794e:	e5c9      	b.n	80074e4 <_strtod_l+0x454>
 8007950:	f04f 33ff 	mov.w	r3, #4294967295
 8007954:	e7e8      	b.n	8007928 <_strtod_l+0x898>
 8007956:	4613      	mov	r3, r2
 8007958:	e7e6      	b.n	8007928 <_strtod_l+0x898>
 800795a:	ea53 030a 	orrs.w	r3, r3, sl
 800795e:	d0a1      	beq.n	80078a4 <_strtod_l+0x814>
 8007960:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007962:	b1db      	cbz	r3, 800799c <_strtod_l+0x90c>
 8007964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007966:	4213      	tst	r3, r2
 8007968:	d0ee      	beq.n	8007948 <_strtod_l+0x8b8>
 800796a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800796c:	9a08      	ldr	r2, [sp, #32]
 800796e:	4650      	mov	r0, sl
 8007970:	4659      	mov	r1, fp
 8007972:	b1bb      	cbz	r3, 80079a4 <_strtod_l+0x914>
 8007974:	f7ff fb6c 	bl	8007050 <sulp>
 8007978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800797c:	ec53 2b10 	vmov	r2, r3, d0
 8007980:	f7f8 fcb4 	bl	80002ec <__adddf3>
 8007984:	4682      	mov	sl, r0
 8007986:	468b      	mov	fp, r1
 8007988:	e7de      	b.n	8007948 <_strtod_l+0x8b8>
 800798a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800798e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007992:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007996:	f04f 3aff 	mov.w	sl, #4294967295
 800799a:	e7d5      	b.n	8007948 <_strtod_l+0x8b8>
 800799c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800799e:	ea13 0f0a 	tst.w	r3, sl
 80079a2:	e7e1      	b.n	8007968 <_strtod_l+0x8d8>
 80079a4:	f7ff fb54 	bl	8007050 <sulp>
 80079a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ac:	ec53 2b10 	vmov	r2, r3, d0
 80079b0:	f7f8 fc9a 	bl	80002e8 <__aeabi_dsub>
 80079b4:	2200      	movs	r2, #0
 80079b6:	2300      	movs	r3, #0
 80079b8:	4682      	mov	sl, r0
 80079ba:	468b      	mov	fp, r1
 80079bc:	f7f9 f8b4 	bl	8000b28 <__aeabi_dcmpeq>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d0c1      	beq.n	8007948 <_strtod_l+0x8b8>
 80079c4:	e619      	b.n	80075fa <_strtod_l+0x56a>
 80079c6:	4641      	mov	r1, r8
 80079c8:	4620      	mov	r0, r4
 80079ca:	f001 fcf3 	bl	80093b4 <__ratio>
 80079ce:	ec57 6b10 	vmov	r6, r7, d0
 80079d2:	2200      	movs	r2, #0
 80079d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f9 f8b8 	bl	8000b50 <__aeabi_dcmple>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d06f      	beq.n	8007ac4 <_strtod_l+0xa34>
 80079e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d17a      	bne.n	8007ae0 <_strtod_l+0xa50>
 80079ea:	f1ba 0f00 	cmp.w	sl, #0
 80079ee:	d158      	bne.n	8007aa2 <_strtod_l+0xa12>
 80079f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d15a      	bne.n	8007ab0 <_strtod_l+0xa20>
 80079fa:	4b64      	ldr	r3, [pc, #400]	@ (8007b8c <_strtod_l+0xafc>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	4630      	mov	r0, r6
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f9 f89b 	bl	8000b3c <__aeabi_dcmplt>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d159      	bne.n	8007abe <_strtod_l+0xa2e>
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	4b60      	ldr	r3, [pc, #384]	@ (8007b90 <_strtod_l+0xb00>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	f7f8 fe21 	bl	8000658 <__aeabi_dmul>
 8007a16:	4606      	mov	r6, r0
 8007a18:	460f      	mov	r7, r1
 8007a1a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007a1e:	9606      	str	r6, [sp, #24]
 8007a20:	9307      	str	r3, [sp, #28]
 8007a22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a26:	4d57      	ldr	r5, [pc, #348]	@ (8007b84 <_strtod_l+0xaf4>)
 8007a28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a2e:	401d      	ands	r5, r3
 8007a30:	4b58      	ldr	r3, [pc, #352]	@ (8007b94 <_strtod_l+0xb04>)
 8007a32:	429d      	cmp	r5, r3
 8007a34:	f040 80b2 	bne.w	8007b9c <_strtod_l+0xb0c>
 8007a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a3a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007a3e:	ec4b ab10 	vmov	d0, sl, fp
 8007a42:	f001 fbef 	bl	8009224 <__ulp>
 8007a46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a4a:	ec51 0b10 	vmov	r0, r1, d0
 8007a4e:	f7f8 fe03 	bl	8000658 <__aeabi_dmul>
 8007a52:	4652      	mov	r2, sl
 8007a54:	465b      	mov	r3, fp
 8007a56:	f7f8 fc49 	bl	80002ec <__adddf3>
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4949      	ldr	r1, [pc, #292]	@ (8007b84 <_strtod_l+0xaf4>)
 8007a5e:	4a4e      	ldr	r2, [pc, #312]	@ (8007b98 <_strtod_l+0xb08>)
 8007a60:	4019      	ands	r1, r3
 8007a62:	4291      	cmp	r1, r2
 8007a64:	4682      	mov	sl, r0
 8007a66:	d942      	bls.n	8007aee <_strtod_l+0xa5e>
 8007a68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a6a:	4b47      	ldr	r3, [pc, #284]	@ (8007b88 <_strtod_l+0xaf8>)
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d103      	bne.n	8007a78 <_strtod_l+0x9e8>
 8007a70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a72:	3301      	adds	r3, #1
 8007a74:	f43f ad2b 	beq.w	80074ce <_strtod_l+0x43e>
 8007a78:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007b88 <_strtod_l+0xaf8>
 8007a7c:	f04f 3aff 	mov.w	sl, #4294967295
 8007a80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a82:	9805      	ldr	r0, [sp, #20]
 8007a84:	f001 f89a 	bl	8008bbc <_Bfree>
 8007a88:	9805      	ldr	r0, [sp, #20]
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	f001 f896 	bl	8008bbc <_Bfree>
 8007a90:	9805      	ldr	r0, [sp, #20]
 8007a92:	4641      	mov	r1, r8
 8007a94:	f001 f892 	bl	8008bbc <_Bfree>
 8007a98:	9805      	ldr	r0, [sp, #20]
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	f001 f88e 	bl	8008bbc <_Bfree>
 8007aa0:	e618      	b.n	80076d4 <_strtod_l+0x644>
 8007aa2:	f1ba 0f01 	cmp.w	sl, #1
 8007aa6:	d103      	bne.n	8007ab0 <_strtod_l+0xa20>
 8007aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f43f ada5 	beq.w	80075fa <_strtod_l+0x56a>
 8007ab0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007b60 <_strtod_l+0xad0>
 8007ab4:	4f35      	ldr	r7, [pc, #212]	@ (8007b8c <_strtod_l+0xafc>)
 8007ab6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007aba:	2600      	movs	r6, #0
 8007abc:	e7b1      	b.n	8007a22 <_strtod_l+0x992>
 8007abe:	4f34      	ldr	r7, [pc, #208]	@ (8007b90 <_strtod_l+0xb00>)
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	e7aa      	b.n	8007a1a <_strtod_l+0x98a>
 8007ac4:	4b32      	ldr	r3, [pc, #200]	@ (8007b90 <_strtod_l+0xb00>)
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	4639      	mov	r1, r7
 8007aca:	2200      	movs	r2, #0
 8007acc:	f7f8 fdc4 	bl	8000658 <__aeabi_dmul>
 8007ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	460f      	mov	r7, r1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d09f      	beq.n	8007a1a <_strtod_l+0x98a>
 8007ada:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007ade:	e7a0      	b.n	8007a22 <_strtod_l+0x992>
 8007ae0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007b68 <_strtod_l+0xad8>
 8007ae4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ae8:	ec57 6b17 	vmov	r6, r7, d7
 8007aec:	e799      	b.n	8007a22 <_strtod_l+0x992>
 8007aee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007af2:	9b08      	ldr	r3, [sp, #32]
 8007af4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1c1      	bne.n	8007a80 <_strtod_l+0x9f0>
 8007afc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b00:	0d1b      	lsrs	r3, r3, #20
 8007b02:	051b      	lsls	r3, r3, #20
 8007b04:	429d      	cmp	r5, r3
 8007b06:	d1bb      	bne.n	8007a80 <_strtod_l+0x9f0>
 8007b08:	4630      	mov	r0, r6
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	f7f9 f8dc 	bl	8000cc8 <__aeabi_d2lz>
 8007b10:	f7f8 fd74 	bl	80005fc <__aeabi_l2d>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4630      	mov	r0, r6
 8007b1a:	4639      	mov	r1, r7
 8007b1c:	f7f8 fbe4 	bl	80002e8 <__aeabi_dsub>
 8007b20:	460b      	mov	r3, r1
 8007b22:	4602      	mov	r2, r0
 8007b24:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b28:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007b2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b2e:	ea46 060a 	orr.w	r6, r6, sl
 8007b32:	431e      	orrs	r6, r3
 8007b34:	d06f      	beq.n	8007c16 <_strtod_l+0xb86>
 8007b36:	a30e      	add	r3, pc, #56	@ (adr r3, 8007b70 <_strtod_l+0xae0>)
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f7f8 fffe 	bl	8000b3c <__aeabi_dcmplt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f47f accf 	bne.w	80074e4 <_strtod_l+0x454>
 8007b46:	a30c      	add	r3, pc, #48	@ (adr r3, 8007b78 <_strtod_l+0xae8>)
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b50:	f7f9 f812 	bl	8000b78 <__aeabi_dcmpgt>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d093      	beq.n	8007a80 <_strtod_l+0x9f0>
 8007b58:	e4c4      	b.n	80074e4 <_strtod_l+0x454>
 8007b5a:	bf00      	nop
 8007b5c:	f3af 8000 	nop.w
 8007b60:	00000000 	.word	0x00000000
 8007b64:	bff00000 	.word	0xbff00000
 8007b68:	00000000 	.word	0x00000000
 8007b6c:	3ff00000 	.word	0x3ff00000
 8007b70:	94a03595 	.word	0x94a03595
 8007b74:	3fdfffff 	.word	0x3fdfffff
 8007b78:	35afe535 	.word	0x35afe535
 8007b7c:	3fe00000 	.word	0x3fe00000
 8007b80:	000fffff 	.word	0x000fffff
 8007b84:	7ff00000 	.word	0x7ff00000
 8007b88:	7fefffff 	.word	0x7fefffff
 8007b8c:	3ff00000 	.word	0x3ff00000
 8007b90:	3fe00000 	.word	0x3fe00000
 8007b94:	7fe00000 	.word	0x7fe00000
 8007b98:	7c9fffff 	.word	0x7c9fffff
 8007b9c:	9b08      	ldr	r3, [sp, #32]
 8007b9e:	b323      	cbz	r3, 8007bea <_strtod_l+0xb5a>
 8007ba0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007ba4:	d821      	bhi.n	8007bea <_strtod_l+0xb5a>
 8007ba6:	a328      	add	r3, pc, #160	@ (adr r3, 8007c48 <_strtod_l+0xbb8>)
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	4630      	mov	r0, r6
 8007bae:	4639      	mov	r1, r7
 8007bb0:	f7f8 ffce 	bl	8000b50 <__aeabi_dcmple>
 8007bb4:	b1a0      	cbz	r0, 8007be0 <_strtod_l+0xb50>
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f7f8 fffd 	bl	8000bb8 <__aeabi_d2uiz>
 8007bbe:	2801      	cmp	r0, #1
 8007bc0:	bf38      	it	cc
 8007bc2:	2001      	movcc	r0, #1
 8007bc4:	f7f8 fcce 	bl	8000564 <__aeabi_ui2d>
 8007bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	b9fb      	cbnz	r3, 8007c10 <_strtod_l+0xb80>
 8007bd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007bd4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007bd6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bd8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007bdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007be0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007be2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007be6:	1b5b      	subs	r3, r3, r5
 8007be8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007bea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007bee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007bf2:	f001 fb17 	bl	8009224 <__ulp>
 8007bf6:	4650      	mov	r0, sl
 8007bf8:	ec53 2b10 	vmov	r2, r3, d0
 8007bfc:	4659      	mov	r1, fp
 8007bfe:	f7f8 fd2b 	bl	8000658 <__aeabi_dmul>
 8007c02:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c06:	f7f8 fb71 	bl	80002ec <__adddf3>
 8007c0a:	4682      	mov	sl, r0
 8007c0c:	468b      	mov	fp, r1
 8007c0e:	e770      	b.n	8007af2 <_strtod_l+0xa62>
 8007c10:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007c14:	e7e0      	b.n	8007bd8 <_strtod_l+0xb48>
 8007c16:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c50 <_strtod_l+0xbc0>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 ff8e 	bl	8000b3c <__aeabi_dcmplt>
 8007c20:	e798      	b.n	8007b54 <_strtod_l+0xac4>
 8007c22:	2300      	movs	r3, #0
 8007c24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c26:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	f7ff ba6d 	b.w	800710a <_strtod_l+0x7a>
 8007c30:	2a65      	cmp	r2, #101	@ 0x65
 8007c32:	f43f ab66 	beq.w	8007302 <_strtod_l+0x272>
 8007c36:	2a45      	cmp	r2, #69	@ 0x45
 8007c38:	f43f ab63 	beq.w	8007302 <_strtod_l+0x272>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f7ff bb9e 	b.w	800737e <_strtod_l+0x2ee>
 8007c42:	bf00      	nop
 8007c44:	f3af 8000 	nop.w
 8007c48:	ffc00000 	.word	0xffc00000
 8007c4c:	41dfffff 	.word	0x41dfffff
 8007c50:	94a03595 	.word	0x94a03595
 8007c54:	3fcfffff 	.word	0x3fcfffff

08007c58 <strtof>:
 8007c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8007d1c <strtof+0xc4>
 8007c60:	4b29      	ldr	r3, [pc, #164]	@ (8007d08 <strtof+0xb0>)
 8007c62:	460a      	mov	r2, r1
 8007c64:	ed2d 8b02 	vpush	{d8}
 8007c68:	4601      	mov	r1, r0
 8007c6a:	f8d8 0000 	ldr.w	r0, [r8]
 8007c6e:	f7ff fa0f 	bl	8007090 <_strtod_l>
 8007c72:	ec55 4b10 	vmov	r4, r5, d0
 8007c76:	4622      	mov	r2, r4
 8007c78:	462b      	mov	r3, r5
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7f8 ff85 	bl	8000b8c <__aeabi_dcmpun>
 8007c82:	b190      	cbz	r0, 8007caa <strtof+0x52>
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	4821      	ldr	r0, [pc, #132]	@ (8007d0c <strtof+0xb4>)
 8007c88:	da09      	bge.n	8007c9e <strtof+0x46>
 8007c8a:	f000 fb0d 	bl	80082a8 <nanf>
 8007c8e:	eeb1 8a40 	vneg.f32	s16, s0
 8007c92:	eeb0 0a48 	vmov.f32	s0, s16
 8007c96:	ecbd 8b02 	vpop	{d8}
 8007c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c9e:	ecbd 8b02 	vpop	{d8}
 8007ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca6:	f000 baff 	b.w	80082a8 <nanf>
 8007caa:	4620      	mov	r0, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	f7f8 ffa3 	bl	8000bf8 <__aeabi_d2f>
 8007cb2:	ee08 0a10 	vmov	s16, r0
 8007cb6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8007d10 <strtof+0xb8>
 8007cba:	eeb0 7ac8 	vabs.f32	s14, s16
 8007cbe:	eeb4 7a67 	vcmp.f32	s14, s15
 8007cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc6:	dd11      	ble.n	8007cec <strtof+0x94>
 8007cc8:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8007ccc:	4b11      	ldr	r3, [pc, #68]	@ (8007d14 <strtof+0xbc>)
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 ff59 	bl	8000b8c <__aeabi_dcmpun>
 8007cda:	b980      	cbnz	r0, 8007cfe <strtof+0xa6>
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d14 <strtof+0xbc>)
 8007cde:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	f7f8 ff33 	bl	8000b50 <__aeabi_dcmple>
 8007cea:	b940      	cbnz	r0, 8007cfe <strtof+0xa6>
 8007cec:	ee18 3a10 	vmov	r3, s16
 8007cf0:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007cf4:	d1cd      	bne.n	8007c92 <strtof+0x3a>
 8007cf6:	4b08      	ldr	r3, [pc, #32]	@ (8007d18 <strtof+0xc0>)
 8007cf8:	402b      	ands	r3, r5
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0c9      	beq.n	8007c92 <strtof+0x3a>
 8007cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007d02:	2222      	movs	r2, #34	@ 0x22
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	e7c4      	b.n	8007c92 <strtof+0x3a>
 8007d08:	20000024 	.word	0x20000024
 8007d0c:	0800ab0e 	.word	0x0800ab0e
 8007d10:	7f7fffff 	.word	0x7f7fffff
 8007d14:	7fefffff 	.word	0x7fefffff
 8007d18:	7ff00000 	.word	0x7ff00000
 8007d1c:	20000190 	.word	0x20000190

08007d20 <_strtoul_l.constprop.0>:
 8007d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d24:	4e34      	ldr	r6, [pc, #208]	@ (8007df8 <_strtoul_l.constprop.0+0xd8>)
 8007d26:	4686      	mov	lr, r0
 8007d28:	460d      	mov	r5, r1
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d30:	5d37      	ldrb	r7, [r6, r4]
 8007d32:	f017 0708 	ands.w	r7, r7, #8
 8007d36:	d1f8      	bne.n	8007d2a <_strtoul_l.constprop.0+0xa>
 8007d38:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d3a:	d12f      	bne.n	8007d9c <_strtoul_l.constprop.0+0x7c>
 8007d3c:	782c      	ldrb	r4, [r5, #0]
 8007d3e:	2701      	movs	r7, #1
 8007d40:	1c85      	adds	r5, r0, #2
 8007d42:	f033 0010 	bics.w	r0, r3, #16
 8007d46:	d109      	bne.n	8007d5c <_strtoul_l.constprop.0+0x3c>
 8007d48:	2c30      	cmp	r4, #48	@ 0x30
 8007d4a:	d12c      	bne.n	8007da6 <_strtoul_l.constprop.0+0x86>
 8007d4c:	7828      	ldrb	r0, [r5, #0]
 8007d4e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007d52:	2858      	cmp	r0, #88	@ 0x58
 8007d54:	d127      	bne.n	8007da6 <_strtoul_l.constprop.0+0x86>
 8007d56:	786c      	ldrb	r4, [r5, #1]
 8007d58:	2310      	movs	r3, #16
 8007d5a:	3502      	adds	r5, #2
 8007d5c:	f04f 38ff 	mov.w	r8, #4294967295
 8007d60:	2600      	movs	r6, #0
 8007d62:	fbb8 f8f3 	udiv	r8, r8, r3
 8007d66:	fb03 f908 	mul.w	r9, r3, r8
 8007d6a:	ea6f 0909 	mvn.w	r9, r9
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007d74:	f1bc 0f09 	cmp.w	ip, #9
 8007d78:	d81c      	bhi.n	8007db4 <_strtoul_l.constprop.0+0x94>
 8007d7a:	4664      	mov	r4, ip
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	dd2a      	ble.n	8007dd6 <_strtoul_l.constprop.0+0xb6>
 8007d80:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007d84:	d007      	beq.n	8007d96 <_strtoul_l.constprop.0+0x76>
 8007d86:	4580      	cmp	r8, r0
 8007d88:	d322      	bcc.n	8007dd0 <_strtoul_l.constprop.0+0xb0>
 8007d8a:	d101      	bne.n	8007d90 <_strtoul_l.constprop.0+0x70>
 8007d8c:	45a1      	cmp	r9, r4
 8007d8e:	db1f      	blt.n	8007dd0 <_strtoul_l.constprop.0+0xb0>
 8007d90:	fb00 4003 	mla	r0, r0, r3, r4
 8007d94:	2601      	movs	r6, #1
 8007d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d9a:	e7e9      	b.n	8007d70 <_strtoul_l.constprop.0+0x50>
 8007d9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d9e:	bf04      	itt	eq
 8007da0:	782c      	ldrbeq	r4, [r5, #0]
 8007da2:	1c85      	addeq	r5, r0, #2
 8007da4:	e7cd      	b.n	8007d42 <_strtoul_l.constprop.0+0x22>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1d8      	bne.n	8007d5c <_strtoul_l.constprop.0+0x3c>
 8007daa:	2c30      	cmp	r4, #48	@ 0x30
 8007dac:	bf0c      	ite	eq
 8007dae:	2308      	moveq	r3, #8
 8007db0:	230a      	movne	r3, #10
 8007db2:	e7d3      	b.n	8007d5c <_strtoul_l.constprop.0+0x3c>
 8007db4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007db8:	f1bc 0f19 	cmp.w	ip, #25
 8007dbc:	d801      	bhi.n	8007dc2 <_strtoul_l.constprop.0+0xa2>
 8007dbe:	3c37      	subs	r4, #55	@ 0x37
 8007dc0:	e7dc      	b.n	8007d7c <_strtoul_l.constprop.0+0x5c>
 8007dc2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007dc6:	f1bc 0f19 	cmp.w	ip, #25
 8007dca:	d804      	bhi.n	8007dd6 <_strtoul_l.constprop.0+0xb6>
 8007dcc:	3c57      	subs	r4, #87	@ 0x57
 8007dce:	e7d5      	b.n	8007d7c <_strtoul_l.constprop.0+0x5c>
 8007dd0:	f04f 36ff 	mov.w	r6, #4294967295
 8007dd4:	e7df      	b.n	8007d96 <_strtoul_l.constprop.0+0x76>
 8007dd6:	1c73      	adds	r3, r6, #1
 8007dd8:	d106      	bne.n	8007de8 <_strtoul_l.constprop.0+0xc8>
 8007dda:	2322      	movs	r3, #34	@ 0x22
 8007ddc:	f8ce 3000 	str.w	r3, [lr]
 8007de0:	4630      	mov	r0, r6
 8007de2:	b932      	cbnz	r2, 8007df2 <_strtoul_l.constprop.0+0xd2>
 8007de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007de8:	b107      	cbz	r7, 8007dec <_strtoul_l.constprop.0+0xcc>
 8007dea:	4240      	negs	r0, r0
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	d0f9      	beq.n	8007de4 <_strtoul_l.constprop.0+0xc4>
 8007df0:	b106      	cbz	r6, 8007df4 <_strtoul_l.constprop.0+0xd4>
 8007df2:	1e69      	subs	r1, r5, #1
 8007df4:	6011      	str	r1, [r2, #0]
 8007df6:	e7f5      	b.n	8007de4 <_strtoul_l.constprop.0+0xc4>
 8007df8:	0800a7b9 	.word	0x0800a7b9

08007dfc <strtoul>:
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	460a      	mov	r2, r1
 8007e00:	4601      	mov	r1, r0
 8007e02:	4802      	ldr	r0, [pc, #8]	@ (8007e0c <strtoul+0x10>)
 8007e04:	6800      	ldr	r0, [r0, #0]
 8007e06:	f7ff bf8b 	b.w	8007d20 <_strtoul_l.constprop.0>
 8007e0a:	bf00      	nop
 8007e0c:	20000190 	.word	0x20000190

08007e10 <std>:
 8007e10:	2300      	movs	r3, #0
 8007e12:	b510      	push	{r4, lr}
 8007e14:	4604      	mov	r4, r0
 8007e16:	e9c0 3300 	strd	r3, r3, [r0]
 8007e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e1e:	6083      	str	r3, [r0, #8]
 8007e20:	8181      	strh	r1, [r0, #12]
 8007e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e24:	81c2      	strh	r2, [r0, #14]
 8007e26:	6183      	str	r3, [r0, #24]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	2208      	movs	r2, #8
 8007e2c:	305c      	adds	r0, #92	@ 0x5c
 8007e2e:	f000 f961 	bl	80080f4 <memset>
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <std+0x58>)
 8007e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <std+0x5c>)
 8007e38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e70 <std+0x60>)
 8007e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e74 <std+0x64>)
 8007e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e42:	4b0d      	ldr	r3, [pc, #52]	@ (8007e78 <std+0x68>)
 8007e44:	6224      	str	r4, [r4, #32]
 8007e46:	429c      	cmp	r4, r3
 8007e48:	d006      	beq.n	8007e58 <std+0x48>
 8007e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e4e:	4294      	cmp	r4, r2
 8007e50:	d002      	beq.n	8007e58 <std+0x48>
 8007e52:	33d0      	adds	r3, #208	@ 0xd0
 8007e54:	429c      	cmp	r4, r3
 8007e56:	d105      	bne.n	8007e64 <std+0x54>
 8007e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e60:	f000 b9fe 	b.w	8008260 <__retarget_lock_init_recursive>
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	08007ffd 	.word	0x08007ffd
 8007e6c:	0800801f 	.word	0x0800801f
 8007e70:	08008057 	.word	0x08008057
 8007e74:	0800807b 	.word	0x0800807b
 8007e78:	20002cfc 	.word	0x20002cfc

08007e7c <stdio_exit_handler>:
 8007e7c:	4a02      	ldr	r2, [pc, #8]	@ (8007e88 <stdio_exit_handler+0xc>)
 8007e7e:	4903      	ldr	r1, [pc, #12]	@ (8007e8c <stdio_exit_handler+0x10>)
 8007e80:	4803      	ldr	r0, [pc, #12]	@ (8007e90 <stdio_exit_handler+0x14>)
 8007e82:	f000 b869 	b.w	8007f58 <_fwalk_sglue>
 8007e86:	bf00      	nop
 8007e88:	20000018 	.word	0x20000018
 8007e8c:	08009b8d 	.word	0x08009b8d
 8007e90:	20000194 	.word	0x20000194

08007e94 <cleanup_stdio>:
 8007e94:	6841      	ldr	r1, [r0, #4]
 8007e96:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec8 <cleanup_stdio+0x34>)
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	d001      	beq.n	8007ea4 <cleanup_stdio+0x10>
 8007ea0:	f001 fe74 	bl	8009b8c <_fflush_r>
 8007ea4:	68a1      	ldr	r1, [r4, #8]
 8007ea6:	4b09      	ldr	r3, [pc, #36]	@ (8007ecc <cleanup_stdio+0x38>)
 8007ea8:	4299      	cmp	r1, r3
 8007eaa:	d002      	beq.n	8007eb2 <cleanup_stdio+0x1e>
 8007eac:	4620      	mov	r0, r4
 8007eae:	f001 fe6d 	bl	8009b8c <_fflush_r>
 8007eb2:	68e1      	ldr	r1, [r4, #12]
 8007eb4:	4b06      	ldr	r3, [pc, #24]	@ (8007ed0 <cleanup_stdio+0x3c>)
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	d004      	beq.n	8007ec4 <cleanup_stdio+0x30>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec0:	f001 be64 	b.w	8009b8c <_fflush_r>
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20002cfc 	.word	0x20002cfc
 8007ecc:	20002d64 	.word	0x20002d64
 8007ed0:	20002dcc 	.word	0x20002dcc

08007ed4 <global_stdio_init.part.0>:
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <global_stdio_init.part.0+0x30>)
 8007ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8007f08 <global_stdio_init.part.0+0x34>)
 8007eda:	4a0c      	ldr	r2, [pc, #48]	@ (8007f0c <global_stdio_init.part.0+0x38>)
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2104      	movs	r1, #4
 8007ee4:	f7ff ff94 	bl	8007e10 <std>
 8007ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007eec:	2201      	movs	r2, #1
 8007eee:	2109      	movs	r1, #9
 8007ef0:	f7ff ff8e 	bl	8007e10 <std>
 8007ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ef8:	2202      	movs	r2, #2
 8007efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efe:	2112      	movs	r1, #18
 8007f00:	f7ff bf86 	b.w	8007e10 <std>
 8007f04:	20002e34 	.word	0x20002e34
 8007f08:	20002cfc 	.word	0x20002cfc
 8007f0c:	08007e7d 	.word	0x08007e7d

08007f10 <__sfp_lock_acquire>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__sfp_lock_acquire+0x8>)
 8007f12:	f000 b9a6 	b.w	8008262 <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	20002e3d 	.word	0x20002e3d

08007f1c <__sfp_lock_release>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	@ (8007f24 <__sfp_lock_release+0x8>)
 8007f1e:	f000 b9a1 	b.w	8008264 <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	20002e3d 	.word	0x20002e3d

08007f28 <__sinit>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f7ff fff0 	bl	8007f10 <__sfp_lock_acquire>
 8007f30:	6a23      	ldr	r3, [r4, #32]
 8007f32:	b11b      	cbz	r3, 8007f3c <__sinit+0x14>
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	f7ff bff0 	b.w	8007f1c <__sfp_lock_release>
 8007f3c:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <__sinit+0x28>)
 8007f3e:	6223      	str	r3, [r4, #32]
 8007f40:	4b04      	ldr	r3, [pc, #16]	@ (8007f54 <__sinit+0x2c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1f5      	bne.n	8007f34 <__sinit+0xc>
 8007f48:	f7ff ffc4 	bl	8007ed4 <global_stdio_init.part.0>
 8007f4c:	e7f2      	b.n	8007f34 <__sinit+0xc>
 8007f4e:	bf00      	nop
 8007f50:	08007e95 	.word	0x08007e95
 8007f54:	20002e34 	.word	0x20002e34

08007f58 <_fwalk_sglue>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	4688      	mov	r8, r1
 8007f60:	4614      	mov	r4, r2
 8007f62:	2600      	movs	r6, #0
 8007f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f68:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6c:	d505      	bpl.n	8007f7a <_fwalk_sglue+0x22>
 8007f6e:	6824      	ldr	r4, [r4, #0]
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	d1f7      	bne.n	8007f64 <_fwalk_sglue+0xc>
 8007f74:	4630      	mov	r0, r6
 8007f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d907      	bls.n	8007f90 <_fwalk_sglue+0x38>
 8007f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f84:	3301      	adds	r3, #1
 8007f86:	d003      	beq.n	8007f90 <_fwalk_sglue+0x38>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c0      	blx	r8
 8007f8e:	4306      	orrs	r6, r0
 8007f90:	3568      	adds	r5, #104	@ 0x68
 8007f92:	e7e9      	b.n	8007f68 <_fwalk_sglue+0x10>

08007f94 <sniprintf>:
 8007f94:	b40c      	push	{r2, r3}
 8007f96:	b530      	push	{r4, r5, lr}
 8007f98:	4b17      	ldr	r3, [pc, #92]	@ (8007ff8 <sniprintf+0x64>)
 8007f9a:	1e0c      	subs	r4, r1, #0
 8007f9c:	681d      	ldr	r5, [r3, #0]
 8007f9e:	b09d      	sub	sp, #116	@ 0x74
 8007fa0:	da08      	bge.n	8007fb4 <sniprintf+0x20>
 8007fa2:	238b      	movs	r3, #139	@ 0x8b
 8007fa4:	602b      	str	r3, [r5, #0]
 8007fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007faa:	b01d      	add	sp, #116	@ 0x74
 8007fac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fb0:	b002      	add	sp, #8
 8007fb2:	4770      	bx	lr
 8007fb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007fb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fbc:	bf14      	ite	ne
 8007fbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fc2:	4623      	moveq	r3, r4
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	9307      	str	r3, [sp, #28]
 8007fc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	9006      	str	r0, [sp, #24]
 8007fd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fd4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007fd6:	ab21      	add	r3, sp, #132	@ 0x84
 8007fd8:	a902      	add	r1, sp, #8
 8007fda:	4628      	mov	r0, r5
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	f001 fac7 	bl	8009570 <_svfiprintf_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	bfbc      	itt	lt
 8007fe6:	238b      	movlt	r3, #139	@ 0x8b
 8007fe8:	602b      	strlt	r3, [r5, #0]
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	d0dd      	beq.n	8007faa <sniprintf+0x16>
 8007fee:	9b02      	ldr	r3, [sp, #8]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e7d9      	b.n	8007faa <sniprintf+0x16>
 8007ff6:	bf00      	nop
 8007ff8:	20000190 	.word	0x20000190

08007ffc <__sread>:
 8007ffc:	b510      	push	{r4, lr}
 8007ffe:	460c      	mov	r4, r1
 8008000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008004:	f000 f8de 	bl	80081c4 <_read_r>
 8008008:	2800      	cmp	r0, #0
 800800a:	bfab      	itete	ge
 800800c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800800e:	89a3      	ldrhlt	r3, [r4, #12]
 8008010:	181b      	addge	r3, r3, r0
 8008012:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008016:	bfac      	ite	ge
 8008018:	6563      	strge	r3, [r4, #84]	@ 0x54
 800801a:	81a3      	strhlt	r3, [r4, #12]
 800801c:	bd10      	pop	{r4, pc}

0800801e <__swrite>:
 800801e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008022:	461f      	mov	r7, r3
 8008024:	898b      	ldrh	r3, [r1, #12]
 8008026:	05db      	lsls	r3, r3, #23
 8008028:	4605      	mov	r5, r0
 800802a:	460c      	mov	r4, r1
 800802c:	4616      	mov	r6, r2
 800802e:	d505      	bpl.n	800803c <__swrite+0x1e>
 8008030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008034:	2302      	movs	r3, #2
 8008036:	2200      	movs	r2, #0
 8008038:	f000 f8b2 	bl	80081a0 <_lseek_r>
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008042:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	4632      	mov	r2, r6
 800804a:	463b      	mov	r3, r7
 800804c:	4628      	mov	r0, r5
 800804e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008052:	f000 b8c9 	b.w	80081e8 <_write_r>

08008056 <__sseek>:
 8008056:	b510      	push	{r4, lr}
 8008058:	460c      	mov	r4, r1
 800805a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805e:	f000 f89f 	bl	80081a0 <_lseek_r>
 8008062:	1c43      	adds	r3, r0, #1
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	bf15      	itete	ne
 8008068:	6560      	strne	r0, [r4, #84]	@ 0x54
 800806a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800806e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008072:	81a3      	strheq	r3, [r4, #12]
 8008074:	bf18      	it	ne
 8008076:	81a3      	strhne	r3, [r4, #12]
 8008078:	bd10      	pop	{r4, pc}

0800807a <__sclose>:
 800807a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807e:	f000 b87f 	b.w	8008180 <_close_r>

08008082 <_vsniprintf_r>:
 8008082:	b530      	push	{r4, r5, lr}
 8008084:	4614      	mov	r4, r2
 8008086:	2c00      	cmp	r4, #0
 8008088:	b09b      	sub	sp, #108	@ 0x6c
 800808a:	4605      	mov	r5, r0
 800808c:	461a      	mov	r2, r3
 800808e:	da05      	bge.n	800809c <_vsniprintf_r+0x1a>
 8008090:	238b      	movs	r3, #139	@ 0x8b
 8008092:	6003      	str	r3, [r0, #0]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	b01b      	add	sp, #108	@ 0x6c
 800809a:	bd30      	pop	{r4, r5, pc}
 800809c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80080a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80080a4:	bf14      	ite	ne
 80080a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080aa:	4623      	moveq	r3, r4
 80080ac:	9302      	str	r3, [sp, #8]
 80080ae:	9305      	str	r3, [sp, #20]
 80080b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80080b4:	9100      	str	r1, [sp, #0]
 80080b6:	9104      	str	r1, [sp, #16]
 80080b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80080bc:	4669      	mov	r1, sp
 80080be:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80080c0:	f001 fa56 	bl	8009570 <_svfiprintf_r>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	bfbc      	itt	lt
 80080c8:	238b      	movlt	r3, #139	@ 0x8b
 80080ca:	602b      	strlt	r3, [r5, #0]
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	d0e3      	beq.n	8008098 <_vsniprintf_r+0x16>
 80080d0:	9b00      	ldr	r3, [sp, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	e7df      	b.n	8008098 <_vsniprintf_r+0x16>

080080d8 <vsniprintf>:
 80080d8:	b507      	push	{r0, r1, r2, lr}
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	460a      	mov	r2, r1
 80080e0:	4601      	mov	r1, r0
 80080e2:	4803      	ldr	r0, [pc, #12]	@ (80080f0 <vsniprintf+0x18>)
 80080e4:	6800      	ldr	r0, [r0, #0]
 80080e6:	f7ff ffcc 	bl	8008082 <_vsniprintf_r>
 80080ea:	b003      	add	sp, #12
 80080ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80080f0:	20000190 	.word	0x20000190

080080f4 <memset>:
 80080f4:	4402      	add	r2, r0
 80080f6:	4603      	mov	r3, r0
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d100      	bne.n	80080fe <memset+0xa>
 80080fc:	4770      	bx	lr
 80080fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008102:	e7f9      	b.n	80080f8 <memset+0x4>

08008104 <strncmp>:
 8008104:	b510      	push	{r4, lr}
 8008106:	b16a      	cbz	r2, 8008124 <strncmp+0x20>
 8008108:	3901      	subs	r1, #1
 800810a:	1884      	adds	r4, r0, r2
 800810c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008110:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008114:	429a      	cmp	r2, r3
 8008116:	d103      	bne.n	8008120 <strncmp+0x1c>
 8008118:	42a0      	cmp	r0, r4
 800811a:	d001      	beq.n	8008120 <strncmp+0x1c>
 800811c:	2a00      	cmp	r2, #0
 800811e:	d1f5      	bne.n	800810c <strncmp+0x8>
 8008120:	1ad0      	subs	r0, r2, r3
 8008122:	bd10      	pop	{r4, pc}
 8008124:	4610      	mov	r0, r2
 8008126:	e7fc      	b.n	8008122 <strncmp+0x1e>

08008128 <__strtok_r>:
 8008128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800812a:	4604      	mov	r4, r0
 800812c:	b908      	cbnz	r0, 8008132 <__strtok_r+0xa>
 800812e:	6814      	ldr	r4, [r2, #0]
 8008130:	b144      	cbz	r4, 8008144 <__strtok_r+0x1c>
 8008132:	4620      	mov	r0, r4
 8008134:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008138:	460f      	mov	r7, r1
 800813a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800813e:	b91e      	cbnz	r6, 8008148 <__strtok_r+0x20>
 8008140:	b965      	cbnz	r5, 800815c <__strtok_r+0x34>
 8008142:	6015      	str	r5, [r2, #0]
 8008144:	2000      	movs	r0, #0
 8008146:	e005      	b.n	8008154 <__strtok_r+0x2c>
 8008148:	42b5      	cmp	r5, r6
 800814a:	d1f6      	bne.n	800813a <__strtok_r+0x12>
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f0      	bne.n	8008132 <__strtok_r+0xa>
 8008150:	6014      	str	r4, [r2, #0]
 8008152:	7003      	strb	r3, [r0, #0]
 8008154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008156:	461c      	mov	r4, r3
 8008158:	e00c      	b.n	8008174 <__strtok_r+0x4c>
 800815a:	b915      	cbnz	r5, 8008162 <__strtok_r+0x3a>
 800815c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008160:	460e      	mov	r6, r1
 8008162:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008166:	42ab      	cmp	r3, r5
 8008168:	d1f7      	bne.n	800815a <__strtok_r+0x32>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0f3      	beq.n	8008156 <__strtok_r+0x2e>
 800816e:	2300      	movs	r3, #0
 8008170:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008174:	6014      	str	r4, [r2, #0]
 8008176:	e7ed      	b.n	8008154 <__strtok_r+0x2c>

08008178 <strtok_r>:
 8008178:	2301      	movs	r3, #1
 800817a:	f7ff bfd5 	b.w	8008128 <__strtok_r>
	...

08008180 <_close_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d06      	ldr	r5, [pc, #24]	@ (800819c <_close_r+0x1c>)
 8008184:	2300      	movs	r3, #0
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	602b      	str	r3, [r5, #0]
 800818c:	f7fb fc18 	bl	80039c0 <_close>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d102      	bne.n	800819a <_close_r+0x1a>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b103      	cbz	r3, 800819a <_close_r+0x1a>
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	20002e38 	.word	0x20002e38

080081a0 <_lseek_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4d07      	ldr	r5, [pc, #28]	@ (80081c0 <_lseek_r+0x20>)
 80081a4:	4604      	mov	r4, r0
 80081a6:	4608      	mov	r0, r1
 80081a8:	4611      	mov	r1, r2
 80081aa:	2200      	movs	r2, #0
 80081ac:	602a      	str	r2, [r5, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	f7fb fc2d 	bl	8003a0e <_lseek>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_lseek_r+0x1e>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_lseek_r+0x1e>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	20002e38 	.word	0x20002e38

080081c4 <_read_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d07      	ldr	r5, [pc, #28]	@ (80081e4 <_read_r+0x20>)
 80081c8:	4604      	mov	r4, r0
 80081ca:	4608      	mov	r0, r1
 80081cc:	4611      	mov	r1, r2
 80081ce:	2200      	movs	r2, #0
 80081d0:	602a      	str	r2, [r5, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	f7fb fbbb 	bl	800394e <_read>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_read_r+0x1e>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_read_r+0x1e>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	20002e38 	.word	0x20002e38

080081e8 <_write_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d07      	ldr	r5, [pc, #28]	@ (8008208 <_write_r+0x20>)
 80081ec:	4604      	mov	r4, r0
 80081ee:	4608      	mov	r0, r1
 80081f0:	4611      	mov	r1, r2
 80081f2:	2200      	movs	r2, #0
 80081f4:	602a      	str	r2, [r5, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f7fb fbc6 	bl	8003988 <_write>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	d102      	bne.n	8008206 <_write_r+0x1e>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	b103      	cbz	r3, 8008206 <_write_r+0x1e>
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	bd38      	pop	{r3, r4, r5, pc}
 8008208:	20002e38 	.word	0x20002e38

0800820c <__errno>:
 800820c:	4b01      	ldr	r3, [pc, #4]	@ (8008214 <__errno+0x8>)
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	20000190 	.word	0x20000190

08008218 <__libc_init_array>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4d0d      	ldr	r5, [pc, #52]	@ (8008250 <__libc_init_array+0x38>)
 800821c:	4c0d      	ldr	r4, [pc, #52]	@ (8008254 <__libc_init_array+0x3c>)
 800821e:	1b64      	subs	r4, r4, r5
 8008220:	10a4      	asrs	r4, r4, #2
 8008222:	2600      	movs	r6, #0
 8008224:	42a6      	cmp	r6, r4
 8008226:	d109      	bne.n	800823c <__libc_init_array+0x24>
 8008228:	4d0b      	ldr	r5, [pc, #44]	@ (8008258 <__libc_init_array+0x40>)
 800822a:	4c0c      	ldr	r4, [pc, #48]	@ (800825c <__libc_init_array+0x44>)
 800822c:	f002 f826 	bl	800a27c <_init>
 8008230:	1b64      	subs	r4, r4, r5
 8008232:	10a4      	asrs	r4, r4, #2
 8008234:	2600      	movs	r6, #0
 8008236:	42a6      	cmp	r6, r4
 8008238:	d105      	bne.n	8008246 <__libc_init_array+0x2e>
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008240:	4798      	blx	r3
 8008242:	3601      	adds	r6, #1
 8008244:	e7ee      	b.n	8008224 <__libc_init_array+0xc>
 8008246:	f855 3b04 	ldr.w	r3, [r5], #4
 800824a:	4798      	blx	r3
 800824c:	3601      	adds	r6, #1
 800824e:	e7f2      	b.n	8008236 <__libc_init_array+0x1e>
 8008250:	0800ab18 	.word	0x0800ab18
 8008254:	0800ab18 	.word	0x0800ab18
 8008258:	0800ab18 	.word	0x0800ab18
 800825c:	0800ab1c 	.word	0x0800ab1c

08008260 <__retarget_lock_init_recursive>:
 8008260:	4770      	bx	lr

08008262 <__retarget_lock_acquire_recursive>:
 8008262:	4770      	bx	lr

08008264 <__retarget_lock_release_recursive>:
 8008264:	4770      	bx	lr

08008266 <strcpy>:
 8008266:	4603      	mov	r3, r0
 8008268:	f811 2b01 	ldrb.w	r2, [r1], #1
 800826c:	f803 2b01 	strb.w	r2, [r3], #1
 8008270:	2a00      	cmp	r2, #0
 8008272:	d1f9      	bne.n	8008268 <strcpy+0x2>
 8008274:	4770      	bx	lr

08008276 <memcpy>:
 8008276:	440a      	add	r2, r1
 8008278:	4291      	cmp	r1, r2
 800827a:	f100 33ff 	add.w	r3, r0, #4294967295
 800827e:	d100      	bne.n	8008282 <memcpy+0xc>
 8008280:	4770      	bx	lr
 8008282:	b510      	push	{r4, lr}
 8008284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828c:	4291      	cmp	r1, r2
 800828e:	d1f9      	bne.n	8008284 <memcpy+0xe>
 8008290:	bd10      	pop	{r4, pc}
 8008292:	0000      	movs	r0, r0
 8008294:	0000      	movs	r0, r0
	...

08008298 <nan>:
 8008298:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80082a0 <nan+0x8>
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	00000000 	.word	0x00000000
 80082a4:	7ff80000 	.word	0x7ff80000

080082a8 <nanf>:
 80082a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80082b0 <nanf+0x8>
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	7fc00000 	.word	0x7fc00000

080082b4 <_free_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4605      	mov	r5, r0
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d041      	beq.n	8008340 <_free_r+0x8c>
 80082bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082c0:	1f0c      	subs	r4, r1, #4
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfb8      	it	lt
 80082c6:	18e4      	addlt	r4, r4, r3
 80082c8:	f000 fc2c 	bl	8008b24 <__malloc_lock>
 80082cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008344 <_free_r+0x90>)
 80082ce:	6813      	ldr	r3, [r2, #0]
 80082d0:	b933      	cbnz	r3, 80082e0 <_free_r+0x2c>
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	6014      	str	r4, [r2, #0]
 80082d6:	4628      	mov	r0, r5
 80082d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082dc:	f000 bc28 	b.w	8008b30 <__malloc_unlock>
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d908      	bls.n	80082f6 <_free_r+0x42>
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	1821      	adds	r1, r4, r0
 80082e8:	428b      	cmp	r3, r1
 80082ea:	bf01      	itttt	eq
 80082ec:	6819      	ldreq	r1, [r3, #0]
 80082ee:	685b      	ldreq	r3, [r3, #4]
 80082f0:	1809      	addeq	r1, r1, r0
 80082f2:	6021      	streq	r1, [r4, #0]
 80082f4:	e7ed      	b.n	80082d2 <_free_r+0x1e>
 80082f6:	461a      	mov	r2, r3
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b10b      	cbz	r3, 8008300 <_free_r+0x4c>
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d9fa      	bls.n	80082f6 <_free_r+0x42>
 8008300:	6811      	ldr	r1, [r2, #0]
 8008302:	1850      	adds	r0, r2, r1
 8008304:	42a0      	cmp	r0, r4
 8008306:	d10b      	bne.n	8008320 <_free_r+0x6c>
 8008308:	6820      	ldr	r0, [r4, #0]
 800830a:	4401      	add	r1, r0
 800830c:	1850      	adds	r0, r2, r1
 800830e:	4283      	cmp	r3, r0
 8008310:	6011      	str	r1, [r2, #0]
 8008312:	d1e0      	bne.n	80082d6 <_free_r+0x22>
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	6053      	str	r3, [r2, #4]
 800831a:	4408      	add	r0, r1
 800831c:	6010      	str	r0, [r2, #0]
 800831e:	e7da      	b.n	80082d6 <_free_r+0x22>
 8008320:	d902      	bls.n	8008328 <_free_r+0x74>
 8008322:	230c      	movs	r3, #12
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	e7d6      	b.n	80082d6 <_free_r+0x22>
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	1821      	adds	r1, r4, r0
 800832c:	428b      	cmp	r3, r1
 800832e:	bf04      	itt	eq
 8008330:	6819      	ldreq	r1, [r3, #0]
 8008332:	685b      	ldreq	r3, [r3, #4]
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	bf04      	itt	eq
 8008338:	1809      	addeq	r1, r1, r0
 800833a:	6021      	streq	r1, [r4, #0]
 800833c:	6054      	str	r4, [r2, #4]
 800833e:	e7ca      	b.n	80082d6 <_free_r+0x22>
 8008340:	bd38      	pop	{r3, r4, r5, pc}
 8008342:	bf00      	nop
 8008344:	20002e44 	.word	0x20002e44

08008348 <rshift>:
 8008348:	6903      	ldr	r3, [r0, #16]
 800834a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800834e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008352:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008356:	f100 0414 	add.w	r4, r0, #20
 800835a:	dd45      	ble.n	80083e8 <rshift+0xa0>
 800835c:	f011 011f 	ands.w	r1, r1, #31
 8008360:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008364:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008368:	d10c      	bne.n	8008384 <rshift+0x3c>
 800836a:	f100 0710 	add.w	r7, r0, #16
 800836e:	4629      	mov	r1, r5
 8008370:	42b1      	cmp	r1, r6
 8008372:	d334      	bcc.n	80083de <rshift+0x96>
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	1eea      	subs	r2, r5, #3
 800837a:	4296      	cmp	r6, r2
 800837c:	bf38      	it	cc
 800837e:	2300      	movcc	r3, #0
 8008380:	4423      	add	r3, r4
 8008382:	e015      	b.n	80083b0 <rshift+0x68>
 8008384:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008388:	f1c1 0820 	rsb	r8, r1, #32
 800838c:	40cf      	lsrs	r7, r1
 800838e:	f105 0e04 	add.w	lr, r5, #4
 8008392:	46a1      	mov	r9, r4
 8008394:	4576      	cmp	r6, lr
 8008396:	46f4      	mov	ip, lr
 8008398:	d815      	bhi.n	80083c6 <rshift+0x7e>
 800839a:	1a9a      	subs	r2, r3, r2
 800839c:	0092      	lsls	r2, r2, #2
 800839e:	3a04      	subs	r2, #4
 80083a0:	3501      	adds	r5, #1
 80083a2:	42ae      	cmp	r6, r5
 80083a4:	bf38      	it	cc
 80083a6:	2200      	movcc	r2, #0
 80083a8:	18a3      	adds	r3, r4, r2
 80083aa:	50a7      	str	r7, [r4, r2]
 80083ac:	b107      	cbz	r7, 80083b0 <rshift+0x68>
 80083ae:	3304      	adds	r3, #4
 80083b0:	1b1a      	subs	r2, r3, r4
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80083b8:	bf08      	it	eq
 80083ba:	2300      	moveq	r3, #0
 80083bc:	6102      	str	r2, [r0, #16]
 80083be:	bf08      	it	eq
 80083c0:	6143      	streq	r3, [r0, #20]
 80083c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083c6:	f8dc c000 	ldr.w	ip, [ip]
 80083ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80083ce:	ea4c 0707 	orr.w	r7, ip, r7
 80083d2:	f849 7b04 	str.w	r7, [r9], #4
 80083d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083da:	40cf      	lsrs	r7, r1
 80083dc:	e7da      	b.n	8008394 <rshift+0x4c>
 80083de:	f851 cb04 	ldr.w	ip, [r1], #4
 80083e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80083e6:	e7c3      	b.n	8008370 <rshift+0x28>
 80083e8:	4623      	mov	r3, r4
 80083ea:	e7e1      	b.n	80083b0 <rshift+0x68>

080083ec <__hexdig_fun>:
 80083ec:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80083f0:	2b09      	cmp	r3, #9
 80083f2:	d802      	bhi.n	80083fa <__hexdig_fun+0xe>
 80083f4:	3820      	subs	r0, #32
 80083f6:	b2c0      	uxtb	r0, r0
 80083f8:	4770      	bx	lr
 80083fa:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80083fe:	2b05      	cmp	r3, #5
 8008400:	d801      	bhi.n	8008406 <__hexdig_fun+0x1a>
 8008402:	3847      	subs	r0, #71	@ 0x47
 8008404:	e7f7      	b.n	80083f6 <__hexdig_fun+0xa>
 8008406:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800840a:	2b05      	cmp	r3, #5
 800840c:	d801      	bhi.n	8008412 <__hexdig_fun+0x26>
 800840e:	3827      	subs	r0, #39	@ 0x27
 8008410:	e7f1      	b.n	80083f6 <__hexdig_fun+0xa>
 8008412:	2000      	movs	r0, #0
 8008414:	4770      	bx	lr
	...

08008418 <__gethex>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	b085      	sub	sp, #20
 800841e:	468a      	mov	sl, r1
 8008420:	9302      	str	r3, [sp, #8]
 8008422:	680b      	ldr	r3, [r1, #0]
 8008424:	9001      	str	r0, [sp, #4]
 8008426:	4690      	mov	r8, r2
 8008428:	1c9c      	adds	r4, r3, #2
 800842a:	46a1      	mov	r9, r4
 800842c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008430:	2830      	cmp	r0, #48	@ 0x30
 8008432:	d0fa      	beq.n	800842a <__gethex+0x12>
 8008434:	eba9 0303 	sub.w	r3, r9, r3
 8008438:	f1a3 0b02 	sub.w	fp, r3, #2
 800843c:	f7ff ffd6 	bl	80083ec <__hexdig_fun>
 8008440:	4605      	mov	r5, r0
 8008442:	2800      	cmp	r0, #0
 8008444:	d168      	bne.n	8008518 <__gethex+0x100>
 8008446:	49a0      	ldr	r1, [pc, #640]	@ (80086c8 <__gethex+0x2b0>)
 8008448:	2201      	movs	r2, #1
 800844a:	4648      	mov	r0, r9
 800844c:	f7ff fe5a 	bl	8008104 <strncmp>
 8008450:	4607      	mov	r7, r0
 8008452:	2800      	cmp	r0, #0
 8008454:	d167      	bne.n	8008526 <__gethex+0x10e>
 8008456:	f899 0001 	ldrb.w	r0, [r9, #1]
 800845a:	4626      	mov	r6, r4
 800845c:	f7ff ffc6 	bl	80083ec <__hexdig_fun>
 8008460:	2800      	cmp	r0, #0
 8008462:	d062      	beq.n	800852a <__gethex+0x112>
 8008464:	4623      	mov	r3, r4
 8008466:	7818      	ldrb	r0, [r3, #0]
 8008468:	2830      	cmp	r0, #48	@ 0x30
 800846a:	4699      	mov	r9, r3
 800846c:	f103 0301 	add.w	r3, r3, #1
 8008470:	d0f9      	beq.n	8008466 <__gethex+0x4e>
 8008472:	f7ff ffbb 	bl	80083ec <__hexdig_fun>
 8008476:	fab0 f580 	clz	r5, r0
 800847a:	096d      	lsrs	r5, r5, #5
 800847c:	f04f 0b01 	mov.w	fp, #1
 8008480:	464a      	mov	r2, r9
 8008482:	4616      	mov	r6, r2
 8008484:	3201      	adds	r2, #1
 8008486:	7830      	ldrb	r0, [r6, #0]
 8008488:	f7ff ffb0 	bl	80083ec <__hexdig_fun>
 800848c:	2800      	cmp	r0, #0
 800848e:	d1f8      	bne.n	8008482 <__gethex+0x6a>
 8008490:	498d      	ldr	r1, [pc, #564]	@ (80086c8 <__gethex+0x2b0>)
 8008492:	2201      	movs	r2, #1
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff fe35 	bl	8008104 <strncmp>
 800849a:	2800      	cmp	r0, #0
 800849c:	d13f      	bne.n	800851e <__gethex+0x106>
 800849e:	b944      	cbnz	r4, 80084b2 <__gethex+0x9a>
 80084a0:	1c74      	adds	r4, r6, #1
 80084a2:	4622      	mov	r2, r4
 80084a4:	4616      	mov	r6, r2
 80084a6:	3201      	adds	r2, #1
 80084a8:	7830      	ldrb	r0, [r6, #0]
 80084aa:	f7ff ff9f 	bl	80083ec <__hexdig_fun>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d1f8      	bne.n	80084a4 <__gethex+0x8c>
 80084b2:	1ba4      	subs	r4, r4, r6
 80084b4:	00a7      	lsls	r7, r4, #2
 80084b6:	7833      	ldrb	r3, [r6, #0]
 80084b8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80084bc:	2b50      	cmp	r3, #80	@ 0x50
 80084be:	d13e      	bne.n	800853e <__gethex+0x126>
 80084c0:	7873      	ldrb	r3, [r6, #1]
 80084c2:	2b2b      	cmp	r3, #43	@ 0x2b
 80084c4:	d033      	beq.n	800852e <__gethex+0x116>
 80084c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80084c8:	d034      	beq.n	8008534 <__gethex+0x11c>
 80084ca:	1c71      	adds	r1, r6, #1
 80084cc:	2400      	movs	r4, #0
 80084ce:	7808      	ldrb	r0, [r1, #0]
 80084d0:	f7ff ff8c 	bl	80083ec <__hexdig_fun>
 80084d4:	1e43      	subs	r3, r0, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b18      	cmp	r3, #24
 80084da:	d830      	bhi.n	800853e <__gethex+0x126>
 80084dc:	f1a0 0210 	sub.w	r2, r0, #16
 80084e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084e4:	f7ff ff82 	bl	80083ec <__hexdig_fun>
 80084e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80084ec:	fa5f fc8c 	uxtb.w	ip, ip
 80084f0:	f1bc 0f18 	cmp.w	ip, #24
 80084f4:	f04f 030a 	mov.w	r3, #10
 80084f8:	d91e      	bls.n	8008538 <__gethex+0x120>
 80084fa:	b104      	cbz	r4, 80084fe <__gethex+0xe6>
 80084fc:	4252      	negs	r2, r2
 80084fe:	4417      	add	r7, r2
 8008500:	f8ca 1000 	str.w	r1, [sl]
 8008504:	b1ed      	cbz	r5, 8008542 <__gethex+0x12a>
 8008506:	f1bb 0f00 	cmp.w	fp, #0
 800850a:	bf0c      	ite	eq
 800850c:	2506      	moveq	r5, #6
 800850e:	2500      	movne	r5, #0
 8008510:	4628      	mov	r0, r5
 8008512:	b005      	add	sp, #20
 8008514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008518:	2500      	movs	r5, #0
 800851a:	462c      	mov	r4, r5
 800851c:	e7b0      	b.n	8008480 <__gethex+0x68>
 800851e:	2c00      	cmp	r4, #0
 8008520:	d1c7      	bne.n	80084b2 <__gethex+0x9a>
 8008522:	4627      	mov	r7, r4
 8008524:	e7c7      	b.n	80084b6 <__gethex+0x9e>
 8008526:	464e      	mov	r6, r9
 8008528:	462f      	mov	r7, r5
 800852a:	2501      	movs	r5, #1
 800852c:	e7c3      	b.n	80084b6 <__gethex+0x9e>
 800852e:	2400      	movs	r4, #0
 8008530:	1cb1      	adds	r1, r6, #2
 8008532:	e7cc      	b.n	80084ce <__gethex+0xb6>
 8008534:	2401      	movs	r4, #1
 8008536:	e7fb      	b.n	8008530 <__gethex+0x118>
 8008538:	fb03 0002 	mla	r0, r3, r2, r0
 800853c:	e7ce      	b.n	80084dc <__gethex+0xc4>
 800853e:	4631      	mov	r1, r6
 8008540:	e7de      	b.n	8008500 <__gethex+0xe8>
 8008542:	eba6 0309 	sub.w	r3, r6, r9
 8008546:	3b01      	subs	r3, #1
 8008548:	4629      	mov	r1, r5
 800854a:	2b07      	cmp	r3, #7
 800854c:	dc0a      	bgt.n	8008564 <__gethex+0x14c>
 800854e:	9801      	ldr	r0, [sp, #4]
 8008550:	f000 faf4 	bl	8008b3c <_Balloc>
 8008554:	4604      	mov	r4, r0
 8008556:	b940      	cbnz	r0, 800856a <__gethex+0x152>
 8008558:	4b5c      	ldr	r3, [pc, #368]	@ (80086cc <__gethex+0x2b4>)
 800855a:	4602      	mov	r2, r0
 800855c:	21e4      	movs	r1, #228	@ 0xe4
 800855e:	485c      	ldr	r0, [pc, #368]	@ (80086d0 <__gethex+0x2b8>)
 8008560:	f001 fb66 	bl	8009c30 <__assert_func>
 8008564:	3101      	adds	r1, #1
 8008566:	105b      	asrs	r3, r3, #1
 8008568:	e7ef      	b.n	800854a <__gethex+0x132>
 800856a:	f100 0a14 	add.w	sl, r0, #20
 800856e:	2300      	movs	r3, #0
 8008570:	4655      	mov	r5, sl
 8008572:	469b      	mov	fp, r3
 8008574:	45b1      	cmp	r9, r6
 8008576:	d337      	bcc.n	80085e8 <__gethex+0x1d0>
 8008578:	f845 bb04 	str.w	fp, [r5], #4
 800857c:	eba5 050a 	sub.w	r5, r5, sl
 8008580:	10ad      	asrs	r5, r5, #2
 8008582:	6125      	str	r5, [r4, #16]
 8008584:	4658      	mov	r0, fp
 8008586:	f000 fbcb 	bl	8008d20 <__hi0bits>
 800858a:	016d      	lsls	r5, r5, #5
 800858c:	f8d8 6000 	ldr.w	r6, [r8]
 8008590:	1a2d      	subs	r5, r5, r0
 8008592:	42b5      	cmp	r5, r6
 8008594:	dd54      	ble.n	8008640 <__gethex+0x228>
 8008596:	1bad      	subs	r5, r5, r6
 8008598:	4629      	mov	r1, r5
 800859a:	4620      	mov	r0, r4
 800859c:	f000 ff5f 	bl	800945e <__any_on>
 80085a0:	4681      	mov	r9, r0
 80085a2:	b178      	cbz	r0, 80085c4 <__gethex+0x1ac>
 80085a4:	1e6b      	subs	r3, r5, #1
 80085a6:	1159      	asrs	r1, r3, #5
 80085a8:	f003 021f 	and.w	r2, r3, #31
 80085ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80085b0:	f04f 0901 	mov.w	r9, #1
 80085b4:	fa09 f202 	lsl.w	r2, r9, r2
 80085b8:	420a      	tst	r2, r1
 80085ba:	d003      	beq.n	80085c4 <__gethex+0x1ac>
 80085bc:	454b      	cmp	r3, r9
 80085be:	dc36      	bgt.n	800862e <__gethex+0x216>
 80085c0:	f04f 0902 	mov.w	r9, #2
 80085c4:	4629      	mov	r1, r5
 80085c6:	4620      	mov	r0, r4
 80085c8:	f7ff febe 	bl	8008348 <rshift>
 80085cc:	442f      	add	r7, r5
 80085ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085d2:	42bb      	cmp	r3, r7
 80085d4:	da42      	bge.n	800865c <__gethex+0x244>
 80085d6:	9801      	ldr	r0, [sp, #4]
 80085d8:	4621      	mov	r1, r4
 80085da:	f000 faef 	bl	8008bbc <_Bfree>
 80085de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085e0:	2300      	movs	r3, #0
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	25a3      	movs	r5, #163	@ 0xa3
 80085e6:	e793      	b.n	8008510 <__gethex+0xf8>
 80085e8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80085ec:	2a2e      	cmp	r2, #46	@ 0x2e
 80085ee:	d012      	beq.n	8008616 <__gethex+0x1fe>
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d104      	bne.n	80085fe <__gethex+0x1e6>
 80085f4:	f845 bb04 	str.w	fp, [r5], #4
 80085f8:	f04f 0b00 	mov.w	fp, #0
 80085fc:	465b      	mov	r3, fp
 80085fe:	7830      	ldrb	r0, [r6, #0]
 8008600:	9303      	str	r3, [sp, #12]
 8008602:	f7ff fef3 	bl	80083ec <__hexdig_fun>
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	f000 000f 	and.w	r0, r0, #15
 800860c:	4098      	lsls	r0, r3
 800860e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008612:	3304      	adds	r3, #4
 8008614:	e7ae      	b.n	8008574 <__gethex+0x15c>
 8008616:	45b1      	cmp	r9, r6
 8008618:	d8ea      	bhi.n	80085f0 <__gethex+0x1d8>
 800861a:	492b      	ldr	r1, [pc, #172]	@ (80086c8 <__gethex+0x2b0>)
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	2201      	movs	r2, #1
 8008620:	4630      	mov	r0, r6
 8008622:	f7ff fd6f 	bl	8008104 <strncmp>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	2800      	cmp	r0, #0
 800862a:	d1e1      	bne.n	80085f0 <__gethex+0x1d8>
 800862c:	e7a2      	b.n	8008574 <__gethex+0x15c>
 800862e:	1ea9      	subs	r1, r5, #2
 8008630:	4620      	mov	r0, r4
 8008632:	f000 ff14 	bl	800945e <__any_on>
 8008636:	2800      	cmp	r0, #0
 8008638:	d0c2      	beq.n	80085c0 <__gethex+0x1a8>
 800863a:	f04f 0903 	mov.w	r9, #3
 800863e:	e7c1      	b.n	80085c4 <__gethex+0x1ac>
 8008640:	da09      	bge.n	8008656 <__gethex+0x23e>
 8008642:	1b75      	subs	r5, r6, r5
 8008644:	4621      	mov	r1, r4
 8008646:	9801      	ldr	r0, [sp, #4]
 8008648:	462a      	mov	r2, r5
 800864a:	f000 fccf 	bl	8008fec <__lshift>
 800864e:	1b7f      	subs	r7, r7, r5
 8008650:	4604      	mov	r4, r0
 8008652:	f100 0a14 	add.w	sl, r0, #20
 8008656:	f04f 0900 	mov.w	r9, #0
 800865a:	e7b8      	b.n	80085ce <__gethex+0x1b6>
 800865c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008660:	42bd      	cmp	r5, r7
 8008662:	dd6f      	ble.n	8008744 <__gethex+0x32c>
 8008664:	1bed      	subs	r5, r5, r7
 8008666:	42ae      	cmp	r6, r5
 8008668:	dc34      	bgt.n	80086d4 <__gethex+0x2bc>
 800866a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d022      	beq.n	80086b8 <__gethex+0x2a0>
 8008672:	2b03      	cmp	r3, #3
 8008674:	d024      	beq.n	80086c0 <__gethex+0x2a8>
 8008676:	2b01      	cmp	r3, #1
 8008678:	d115      	bne.n	80086a6 <__gethex+0x28e>
 800867a:	42ae      	cmp	r6, r5
 800867c:	d113      	bne.n	80086a6 <__gethex+0x28e>
 800867e:	2e01      	cmp	r6, #1
 8008680:	d10b      	bne.n	800869a <__gethex+0x282>
 8008682:	9a02      	ldr	r2, [sp, #8]
 8008684:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	2301      	movs	r3, #1
 800868c:	6123      	str	r3, [r4, #16]
 800868e:	f8ca 3000 	str.w	r3, [sl]
 8008692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008694:	2562      	movs	r5, #98	@ 0x62
 8008696:	601c      	str	r4, [r3, #0]
 8008698:	e73a      	b.n	8008510 <__gethex+0xf8>
 800869a:	1e71      	subs	r1, r6, #1
 800869c:	4620      	mov	r0, r4
 800869e:	f000 fede 	bl	800945e <__any_on>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d1ed      	bne.n	8008682 <__gethex+0x26a>
 80086a6:	9801      	ldr	r0, [sp, #4]
 80086a8:	4621      	mov	r1, r4
 80086aa:	f000 fa87 	bl	8008bbc <_Bfree>
 80086ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086b0:	2300      	movs	r3, #0
 80086b2:	6013      	str	r3, [r2, #0]
 80086b4:	2550      	movs	r5, #80	@ 0x50
 80086b6:	e72b      	b.n	8008510 <__gethex+0xf8>
 80086b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1f3      	bne.n	80086a6 <__gethex+0x28e>
 80086be:	e7e0      	b.n	8008682 <__gethex+0x26a>
 80086c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1dd      	bne.n	8008682 <__gethex+0x26a>
 80086c6:	e7ee      	b.n	80086a6 <__gethex+0x28e>
 80086c8:	0800a758 	.word	0x0800a758
 80086cc:	0800a8c1 	.word	0x0800a8c1
 80086d0:	0800a8d2 	.word	0x0800a8d2
 80086d4:	1e6f      	subs	r7, r5, #1
 80086d6:	f1b9 0f00 	cmp.w	r9, #0
 80086da:	d130      	bne.n	800873e <__gethex+0x326>
 80086dc:	b127      	cbz	r7, 80086e8 <__gethex+0x2d0>
 80086de:	4639      	mov	r1, r7
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 febc 	bl	800945e <__any_on>
 80086e6:	4681      	mov	r9, r0
 80086e8:	117a      	asrs	r2, r7, #5
 80086ea:	2301      	movs	r3, #1
 80086ec:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80086f0:	f007 071f 	and.w	r7, r7, #31
 80086f4:	40bb      	lsls	r3, r7
 80086f6:	4213      	tst	r3, r2
 80086f8:	4629      	mov	r1, r5
 80086fa:	4620      	mov	r0, r4
 80086fc:	bf18      	it	ne
 80086fe:	f049 0902 	orrne.w	r9, r9, #2
 8008702:	f7ff fe21 	bl	8008348 <rshift>
 8008706:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800870a:	1b76      	subs	r6, r6, r5
 800870c:	2502      	movs	r5, #2
 800870e:	f1b9 0f00 	cmp.w	r9, #0
 8008712:	d047      	beq.n	80087a4 <__gethex+0x38c>
 8008714:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008718:	2b02      	cmp	r3, #2
 800871a:	d015      	beq.n	8008748 <__gethex+0x330>
 800871c:	2b03      	cmp	r3, #3
 800871e:	d017      	beq.n	8008750 <__gethex+0x338>
 8008720:	2b01      	cmp	r3, #1
 8008722:	d109      	bne.n	8008738 <__gethex+0x320>
 8008724:	f019 0f02 	tst.w	r9, #2
 8008728:	d006      	beq.n	8008738 <__gethex+0x320>
 800872a:	f8da 3000 	ldr.w	r3, [sl]
 800872e:	ea49 0903 	orr.w	r9, r9, r3
 8008732:	f019 0f01 	tst.w	r9, #1
 8008736:	d10e      	bne.n	8008756 <__gethex+0x33e>
 8008738:	f045 0510 	orr.w	r5, r5, #16
 800873c:	e032      	b.n	80087a4 <__gethex+0x38c>
 800873e:	f04f 0901 	mov.w	r9, #1
 8008742:	e7d1      	b.n	80086e8 <__gethex+0x2d0>
 8008744:	2501      	movs	r5, #1
 8008746:	e7e2      	b.n	800870e <__gethex+0x2f6>
 8008748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800874a:	f1c3 0301 	rsb	r3, r3, #1
 800874e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0f0      	beq.n	8008738 <__gethex+0x320>
 8008756:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800875a:	f104 0314 	add.w	r3, r4, #20
 800875e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008762:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008766:	f04f 0c00 	mov.w	ip, #0
 800876a:	4618      	mov	r0, r3
 800876c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008770:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008774:	d01b      	beq.n	80087ae <__gethex+0x396>
 8008776:	3201      	adds	r2, #1
 8008778:	6002      	str	r2, [r0, #0]
 800877a:	2d02      	cmp	r5, #2
 800877c:	f104 0314 	add.w	r3, r4, #20
 8008780:	d13c      	bne.n	80087fc <__gethex+0x3e4>
 8008782:	f8d8 2000 	ldr.w	r2, [r8]
 8008786:	3a01      	subs	r2, #1
 8008788:	42b2      	cmp	r2, r6
 800878a:	d109      	bne.n	80087a0 <__gethex+0x388>
 800878c:	1171      	asrs	r1, r6, #5
 800878e:	2201      	movs	r2, #1
 8008790:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008794:	f006 061f 	and.w	r6, r6, #31
 8008798:	fa02 f606 	lsl.w	r6, r2, r6
 800879c:	421e      	tst	r6, r3
 800879e:	d13a      	bne.n	8008816 <__gethex+0x3fe>
 80087a0:	f045 0520 	orr.w	r5, r5, #32
 80087a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087a6:	601c      	str	r4, [r3, #0]
 80087a8:	9b02      	ldr	r3, [sp, #8]
 80087aa:	601f      	str	r7, [r3, #0]
 80087ac:	e6b0      	b.n	8008510 <__gethex+0xf8>
 80087ae:	4299      	cmp	r1, r3
 80087b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80087b4:	d8d9      	bhi.n	800876a <__gethex+0x352>
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	459b      	cmp	fp, r3
 80087ba:	db17      	blt.n	80087ec <__gethex+0x3d4>
 80087bc:	6861      	ldr	r1, [r4, #4]
 80087be:	9801      	ldr	r0, [sp, #4]
 80087c0:	3101      	adds	r1, #1
 80087c2:	f000 f9bb 	bl	8008b3c <_Balloc>
 80087c6:	4681      	mov	r9, r0
 80087c8:	b918      	cbnz	r0, 80087d2 <__gethex+0x3ba>
 80087ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008834 <__gethex+0x41c>)
 80087cc:	4602      	mov	r2, r0
 80087ce:	2184      	movs	r1, #132	@ 0x84
 80087d0:	e6c5      	b.n	800855e <__gethex+0x146>
 80087d2:	6922      	ldr	r2, [r4, #16]
 80087d4:	3202      	adds	r2, #2
 80087d6:	f104 010c 	add.w	r1, r4, #12
 80087da:	0092      	lsls	r2, r2, #2
 80087dc:	300c      	adds	r0, #12
 80087de:	f7ff fd4a 	bl	8008276 <memcpy>
 80087e2:	4621      	mov	r1, r4
 80087e4:	9801      	ldr	r0, [sp, #4]
 80087e6:	f000 f9e9 	bl	8008bbc <_Bfree>
 80087ea:	464c      	mov	r4, r9
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087f4:	6122      	str	r2, [r4, #16]
 80087f6:	2201      	movs	r2, #1
 80087f8:	615a      	str	r2, [r3, #20]
 80087fa:	e7be      	b.n	800877a <__gethex+0x362>
 80087fc:	6922      	ldr	r2, [r4, #16]
 80087fe:	455a      	cmp	r2, fp
 8008800:	dd0b      	ble.n	800881a <__gethex+0x402>
 8008802:	2101      	movs	r1, #1
 8008804:	4620      	mov	r0, r4
 8008806:	f7ff fd9f 	bl	8008348 <rshift>
 800880a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800880e:	3701      	adds	r7, #1
 8008810:	42bb      	cmp	r3, r7
 8008812:	f6ff aee0 	blt.w	80085d6 <__gethex+0x1be>
 8008816:	2501      	movs	r5, #1
 8008818:	e7c2      	b.n	80087a0 <__gethex+0x388>
 800881a:	f016 061f 	ands.w	r6, r6, #31
 800881e:	d0fa      	beq.n	8008816 <__gethex+0x3fe>
 8008820:	4453      	add	r3, sl
 8008822:	f1c6 0620 	rsb	r6, r6, #32
 8008826:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800882a:	f000 fa79 	bl	8008d20 <__hi0bits>
 800882e:	42b0      	cmp	r0, r6
 8008830:	dbe7      	blt.n	8008802 <__gethex+0x3ea>
 8008832:	e7f0      	b.n	8008816 <__gethex+0x3fe>
 8008834:	0800a8c1 	.word	0x0800a8c1

08008838 <L_shift>:
 8008838:	f1c2 0208 	rsb	r2, r2, #8
 800883c:	0092      	lsls	r2, r2, #2
 800883e:	b570      	push	{r4, r5, r6, lr}
 8008840:	f1c2 0620 	rsb	r6, r2, #32
 8008844:	6843      	ldr	r3, [r0, #4]
 8008846:	6804      	ldr	r4, [r0, #0]
 8008848:	fa03 f506 	lsl.w	r5, r3, r6
 800884c:	432c      	orrs	r4, r5
 800884e:	40d3      	lsrs	r3, r2
 8008850:	6004      	str	r4, [r0, #0]
 8008852:	f840 3f04 	str.w	r3, [r0, #4]!
 8008856:	4288      	cmp	r0, r1
 8008858:	d3f4      	bcc.n	8008844 <L_shift+0xc>
 800885a:	bd70      	pop	{r4, r5, r6, pc}

0800885c <__match>:
 800885c:	b530      	push	{r4, r5, lr}
 800885e:	6803      	ldr	r3, [r0, #0]
 8008860:	3301      	adds	r3, #1
 8008862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008866:	b914      	cbnz	r4, 800886e <__match+0x12>
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	2001      	movs	r0, #1
 800886c:	bd30      	pop	{r4, r5, pc}
 800886e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008872:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008876:	2d19      	cmp	r5, #25
 8008878:	bf98      	it	ls
 800887a:	3220      	addls	r2, #32
 800887c:	42a2      	cmp	r2, r4
 800887e:	d0f0      	beq.n	8008862 <__match+0x6>
 8008880:	2000      	movs	r0, #0
 8008882:	e7f3      	b.n	800886c <__match+0x10>

08008884 <__hexnan>:
 8008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	680b      	ldr	r3, [r1, #0]
 800888a:	6801      	ldr	r1, [r0, #0]
 800888c:	115e      	asrs	r6, r3, #5
 800888e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008892:	f013 031f 	ands.w	r3, r3, #31
 8008896:	b087      	sub	sp, #28
 8008898:	bf18      	it	ne
 800889a:	3604      	addne	r6, #4
 800889c:	2500      	movs	r5, #0
 800889e:	1f37      	subs	r7, r6, #4
 80088a0:	4682      	mov	sl, r0
 80088a2:	4690      	mov	r8, r2
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80088aa:	46b9      	mov	r9, r7
 80088ac:	463c      	mov	r4, r7
 80088ae:	9502      	str	r5, [sp, #8]
 80088b0:	46ab      	mov	fp, r5
 80088b2:	784a      	ldrb	r2, [r1, #1]
 80088b4:	1c4b      	adds	r3, r1, #1
 80088b6:	9303      	str	r3, [sp, #12]
 80088b8:	b342      	cbz	r2, 800890c <__hexnan+0x88>
 80088ba:	4610      	mov	r0, r2
 80088bc:	9105      	str	r1, [sp, #20]
 80088be:	9204      	str	r2, [sp, #16]
 80088c0:	f7ff fd94 	bl	80083ec <__hexdig_fun>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d151      	bne.n	800896c <__hexnan+0xe8>
 80088c8:	9a04      	ldr	r2, [sp, #16]
 80088ca:	9905      	ldr	r1, [sp, #20]
 80088cc:	2a20      	cmp	r2, #32
 80088ce:	d818      	bhi.n	8008902 <__hexnan+0x7e>
 80088d0:	9b02      	ldr	r3, [sp, #8]
 80088d2:	459b      	cmp	fp, r3
 80088d4:	dd13      	ble.n	80088fe <__hexnan+0x7a>
 80088d6:	454c      	cmp	r4, r9
 80088d8:	d206      	bcs.n	80088e8 <__hexnan+0x64>
 80088da:	2d07      	cmp	r5, #7
 80088dc:	dc04      	bgt.n	80088e8 <__hexnan+0x64>
 80088de:	462a      	mov	r2, r5
 80088e0:	4649      	mov	r1, r9
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff ffa8 	bl	8008838 <L_shift>
 80088e8:	4544      	cmp	r4, r8
 80088ea:	d952      	bls.n	8008992 <__hexnan+0x10e>
 80088ec:	2300      	movs	r3, #0
 80088ee:	f1a4 0904 	sub.w	r9, r4, #4
 80088f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80088f6:	f8cd b008 	str.w	fp, [sp, #8]
 80088fa:	464c      	mov	r4, r9
 80088fc:	461d      	mov	r5, r3
 80088fe:	9903      	ldr	r1, [sp, #12]
 8008900:	e7d7      	b.n	80088b2 <__hexnan+0x2e>
 8008902:	2a29      	cmp	r2, #41	@ 0x29
 8008904:	d157      	bne.n	80089b6 <__hexnan+0x132>
 8008906:	3102      	adds	r1, #2
 8008908:	f8ca 1000 	str.w	r1, [sl]
 800890c:	f1bb 0f00 	cmp.w	fp, #0
 8008910:	d051      	beq.n	80089b6 <__hexnan+0x132>
 8008912:	454c      	cmp	r4, r9
 8008914:	d206      	bcs.n	8008924 <__hexnan+0xa0>
 8008916:	2d07      	cmp	r5, #7
 8008918:	dc04      	bgt.n	8008924 <__hexnan+0xa0>
 800891a:	462a      	mov	r2, r5
 800891c:	4649      	mov	r1, r9
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff ff8a 	bl	8008838 <L_shift>
 8008924:	4544      	cmp	r4, r8
 8008926:	d936      	bls.n	8008996 <__hexnan+0x112>
 8008928:	f1a8 0204 	sub.w	r2, r8, #4
 800892c:	4623      	mov	r3, r4
 800892e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008932:	f842 1f04 	str.w	r1, [r2, #4]!
 8008936:	429f      	cmp	r7, r3
 8008938:	d2f9      	bcs.n	800892e <__hexnan+0xaa>
 800893a:	1b3b      	subs	r3, r7, r4
 800893c:	f023 0303 	bic.w	r3, r3, #3
 8008940:	3304      	adds	r3, #4
 8008942:	3401      	adds	r4, #1
 8008944:	3e03      	subs	r6, #3
 8008946:	42b4      	cmp	r4, r6
 8008948:	bf88      	it	hi
 800894a:	2304      	movhi	r3, #4
 800894c:	4443      	add	r3, r8
 800894e:	2200      	movs	r2, #0
 8008950:	f843 2b04 	str.w	r2, [r3], #4
 8008954:	429f      	cmp	r7, r3
 8008956:	d2fb      	bcs.n	8008950 <__hexnan+0xcc>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	b91b      	cbnz	r3, 8008964 <__hexnan+0xe0>
 800895c:	4547      	cmp	r7, r8
 800895e:	d128      	bne.n	80089b2 <__hexnan+0x12e>
 8008960:	2301      	movs	r3, #1
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	2005      	movs	r0, #5
 8008966:	b007      	add	sp, #28
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	3501      	adds	r5, #1
 800896e:	2d08      	cmp	r5, #8
 8008970:	f10b 0b01 	add.w	fp, fp, #1
 8008974:	dd06      	ble.n	8008984 <__hexnan+0x100>
 8008976:	4544      	cmp	r4, r8
 8008978:	d9c1      	bls.n	80088fe <__hexnan+0x7a>
 800897a:	2300      	movs	r3, #0
 800897c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008980:	2501      	movs	r5, #1
 8008982:	3c04      	subs	r4, #4
 8008984:	6822      	ldr	r2, [r4, #0]
 8008986:	f000 000f 	and.w	r0, r0, #15
 800898a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800898e:	6020      	str	r0, [r4, #0]
 8008990:	e7b5      	b.n	80088fe <__hexnan+0x7a>
 8008992:	2508      	movs	r5, #8
 8008994:	e7b3      	b.n	80088fe <__hexnan+0x7a>
 8008996:	9b01      	ldr	r3, [sp, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0dd      	beq.n	8008958 <__hexnan+0xd4>
 800899c:	f1c3 0320 	rsb	r3, r3, #32
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	40da      	lsrs	r2, r3
 80089a6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80089aa:	4013      	ands	r3, r2
 80089ac:	f846 3c04 	str.w	r3, [r6, #-4]
 80089b0:	e7d2      	b.n	8008958 <__hexnan+0xd4>
 80089b2:	3f04      	subs	r7, #4
 80089b4:	e7d0      	b.n	8008958 <__hexnan+0xd4>
 80089b6:	2004      	movs	r0, #4
 80089b8:	e7d5      	b.n	8008966 <__hexnan+0xe2>
	...

080089bc <sbrk_aligned>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4e0f      	ldr	r6, [pc, #60]	@ (80089fc <sbrk_aligned+0x40>)
 80089c0:	460c      	mov	r4, r1
 80089c2:	6831      	ldr	r1, [r6, #0]
 80089c4:	4605      	mov	r5, r0
 80089c6:	b911      	cbnz	r1, 80089ce <sbrk_aligned+0x12>
 80089c8:	f001 f922 	bl	8009c10 <_sbrk_r>
 80089cc:	6030      	str	r0, [r6, #0]
 80089ce:	4621      	mov	r1, r4
 80089d0:	4628      	mov	r0, r5
 80089d2:	f001 f91d 	bl	8009c10 <_sbrk_r>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	d103      	bne.n	80089e2 <sbrk_aligned+0x26>
 80089da:	f04f 34ff 	mov.w	r4, #4294967295
 80089de:	4620      	mov	r0, r4
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
 80089e2:	1cc4      	adds	r4, r0, #3
 80089e4:	f024 0403 	bic.w	r4, r4, #3
 80089e8:	42a0      	cmp	r0, r4
 80089ea:	d0f8      	beq.n	80089de <sbrk_aligned+0x22>
 80089ec:	1a21      	subs	r1, r4, r0
 80089ee:	4628      	mov	r0, r5
 80089f0:	f001 f90e 	bl	8009c10 <_sbrk_r>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d1f2      	bne.n	80089de <sbrk_aligned+0x22>
 80089f8:	e7ef      	b.n	80089da <sbrk_aligned+0x1e>
 80089fa:	bf00      	nop
 80089fc:	20002e40 	.word	0x20002e40

08008a00 <_malloc_r>:
 8008a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	1ccd      	adds	r5, r1, #3
 8008a06:	f025 0503 	bic.w	r5, r5, #3
 8008a0a:	3508      	adds	r5, #8
 8008a0c:	2d0c      	cmp	r5, #12
 8008a0e:	bf38      	it	cc
 8008a10:	250c      	movcc	r5, #12
 8008a12:	2d00      	cmp	r5, #0
 8008a14:	4606      	mov	r6, r0
 8008a16:	db01      	blt.n	8008a1c <_malloc_r+0x1c>
 8008a18:	42a9      	cmp	r1, r5
 8008a1a:	d904      	bls.n	8008a26 <_malloc_r+0x26>
 8008a1c:	230c      	movs	r3, #12
 8008a1e:	6033      	str	r3, [r6, #0]
 8008a20:	2000      	movs	r0, #0
 8008a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008afc <_malloc_r+0xfc>
 8008a2a:	f000 f87b 	bl	8008b24 <__malloc_lock>
 8008a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a32:	461c      	mov	r4, r3
 8008a34:	bb44      	cbnz	r4, 8008a88 <_malloc_r+0x88>
 8008a36:	4629      	mov	r1, r5
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7ff ffbf 	bl	80089bc <sbrk_aligned>
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	4604      	mov	r4, r0
 8008a42:	d158      	bne.n	8008af6 <_malloc_r+0xf6>
 8008a44:	f8d8 4000 	ldr.w	r4, [r8]
 8008a48:	4627      	mov	r7, r4
 8008a4a:	2f00      	cmp	r7, #0
 8008a4c:	d143      	bne.n	8008ad6 <_malloc_r+0xd6>
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	d04b      	beq.n	8008aea <_malloc_r+0xea>
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	4639      	mov	r1, r7
 8008a56:	4630      	mov	r0, r6
 8008a58:	eb04 0903 	add.w	r9, r4, r3
 8008a5c:	f001 f8d8 	bl	8009c10 <_sbrk_r>
 8008a60:	4581      	cmp	r9, r0
 8008a62:	d142      	bne.n	8008aea <_malloc_r+0xea>
 8008a64:	6821      	ldr	r1, [r4, #0]
 8008a66:	1a6d      	subs	r5, r5, r1
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ffa6 	bl	80089bc <sbrk_aligned>
 8008a70:	3001      	adds	r0, #1
 8008a72:	d03a      	beq.n	8008aea <_malloc_r+0xea>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	442b      	add	r3, r5
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	bb62      	cbnz	r2, 8008adc <_malloc_r+0xdc>
 8008a82:	f8c8 7000 	str.w	r7, [r8]
 8008a86:	e00f      	b.n	8008aa8 <_malloc_r+0xa8>
 8008a88:	6822      	ldr	r2, [r4, #0]
 8008a8a:	1b52      	subs	r2, r2, r5
 8008a8c:	d420      	bmi.n	8008ad0 <_malloc_r+0xd0>
 8008a8e:	2a0b      	cmp	r2, #11
 8008a90:	d917      	bls.n	8008ac2 <_malloc_r+0xc2>
 8008a92:	1961      	adds	r1, r4, r5
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	6025      	str	r5, [r4, #0]
 8008a98:	bf18      	it	ne
 8008a9a:	6059      	strne	r1, [r3, #4]
 8008a9c:	6863      	ldr	r3, [r4, #4]
 8008a9e:	bf08      	it	eq
 8008aa0:	f8c8 1000 	streq.w	r1, [r8]
 8008aa4:	5162      	str	r2, [r4, r5]
 8008aa6:	604b      	str	r3, [r1, #4]
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 f841 	bl	8008b30 <__malloc_unlock>
 8008aae:	f104 000b 	add.w	r0, r4, #11
 8008ab2:	1d23      	adds	r3, r4, #4
 8008ab4:	f020 0007 	bic.w	r0, r0, #7
 8008ab8:	1ac2      	subs	r2, r0, r3
 8008aba:	bf1c      	itt	ne
 8008abc:	1a1b      	subne	r3, r3, r0
 8008abe:	50a3      	strne	r3, [r4, r2]
 8008ac0:	e7af      	b.n	8008a22 <_malloc_r+0x22>
 8008ac2:	6862      	ldr	r2, [r4, #4]
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	bf0c      	ite	eq
 8008ac8:	f8c8 2000 	streq.w	r2, [r8]
 8008acc:	605a      	strne	r2, [r3, #4]
 8008ace:	e7eb      	b.n	8008aa8 <_malloc_r+0xa8>
 8008ad0:	4623      	mov	r3, r4
 8008ad2:	6864      	ldr	r4, [r4, #4]
 8008ad4:	e7ae      	b.n	8008a34 <_malloc_r+0x34>
 8008ad6:	463c      	mov	r4, r7
 8008ad8:	687f      	ldr	r7, [r7, #4]
 8008ada:	e7b6      	b.n	8008a4a <_malloc_r+0x4a>
 8008adc:	461a      	mov	r2, r3
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d1fb      	bne.n	8008adc <_malloc_r+0xdc>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	6053      	str	r3, [r2, #4]
 8008ae8:	e7de      	b.n	8008aa8 <_malloc_r+0xa8>
 8008aea:	230c      	movs	r3, #12
 8008aec:	6033      	str	r3, [r6, #0]
 8008aee:	4630      	mov	r0, r6
 8008af0:	f000 f81e 	bl	8008b30 <__malloc_unlock>
 8008af4:	e794      	b.n	8008a20 <_malloc_r+0x20>
 8008af6:	6005      	str	r5, [r0, #0]
 8008af8:	e7d6      	b.n	8008aa8 <_malloc_r+0xa8>
 8008afa:	bf00      	nop
 8008afc:	20002e44 	.word	0x20002e44

08008b00 <__ascii_mbtowc>:
 8008b00:	b082      	sub	sp, #8
 8008b02:	b901      	cbnz	r1, 8008b06 <__ascii_mbtowc+0x6>
 8008b04:	a901      	add	r1, sp, #4
 8008b06:	b142      	cbz	r2, 8008b1a <__ascii_mbtowc+0x1a>
 8008b08:	b14b      	cbz	r3, 8008b1e <__ascii_mbtowc+0x1e>
 8008b0a:	7813      	ldrb	r3, [r2, #0]
 8008b0c:	600b      	str	r3, [r1, #0]
 8008b0e:	7812      	ldrb	r2, [r2, #0]
 8008b10:	1e10      	subs	r0, r2, #0
 8008b12:	bf18      	it	ne
 8008b14:	2001      	movne	r0, #1
 8008b16:	b002      	add	sp, #8
 8008b18:	4770      	bx	lr
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	e7fb      	b.n	8008b16 <__ascii_mbtowc+0x16>
 8008b1e:	f06f 0001 	mvn.w	r0, #1
 8008b22:	e7f8      	b.n	8008b16 <__ascii_mbtowc+0x16>

08008b24 <__malloc_lock>:
 8008b24:	4801      	ldr	r0, [pc, #4]	@ (8008b2c <__malloc_lock+0x8>)
 8008b26:	f7ff bb9c 	b.w	8008262 <__retarget_lock_acquire_recursive>
 8008b2a:	bf00      	nop
 8008b2c:	20002e3c 	.word	0x20002e3c

08008b30 <__malloc_unlock>:
 8008b30:	4801      	ldr	r0, [pc, #4]	@ (8008b38 <__malloc_unlock+0x8>)
 8008b32:	f7ff bb97 	b.w	8008264 <__retarget_lock_release_recursive>
 8008b36:	bf00      	nop
 8008b38:	20002e3c 	.word	0x20002e3c

08008b3c <_Balloc>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	69c6      	ldr	r6, [r0, #28]
 8008b40:	4604      	mov	r4, r0
 8008b42:	460d      	mov	r5, r1
 8008b44:	b976      	cbnz	r6, 8008b64 <_Balloc+0x28>
 8008b46:	2010      	movs	r0, #16
 8008b48:	f001 f8a4 	bl	8009c94 <malloc>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	61e0      	str	r0, [r4, #28]
 8008b50:	b920      	cbnz	r0, 8008b5c <_Balloc+0x20>
 8008b52:	4b18      	ldr	r3, [pc, #96]	@ (8008bb4 <_Balloc+0x78>)
 8008b54:	4818      	ldr	r0, [pc, #96]	@ (8008bb8 <_Balloc+0x7c>)
 8008b56:	216b      	movs	r1, #107	@ 0x6b
 8008b58:	f001 f86a 	bl	8009c30 <__assert_func>
 8008b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b60:	6006      	str	r6, [r0, #0]
 8008b62:	60c6      	str	r6, [r0, #12]
 8008b64:	69e6      	ldr	r6, [r4, #28]
 8008b66:	68f3      	ldr	r3, [r6, #12]
 8008b68:	b183      	cbz	r3, 8008b8c <_Balloc+0x50>
 8008b6a:	69e3      	ldr	r3, [r4, #28]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b72:	b9b8      	cbnz	r0, 8008ba4 <_Balloc+0x68>
 8008b74:	2101      	movs	r1, #1
 8008b76:	fa01 f605 	lsl.w	r6, r1, r5
 8008b7a:	1d72      	adds	r2, r6, #5
 8008b7c:	0092      	lsls	r2, r2, #2
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f001 f874 	bl	8009c6c <_calloc_r>
 8008b84:	b160      	cbz	r0, 8008ba0 <_Balloc+0x64>
 8008b86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b8a:	e00e      	b.n	8008baa <_Balloc+0x6e>
 8008b8c:	2221      	movs	r2, #33	@ 0x21
 8008b8e:	2104      	movs	r1, #4
 8008b90:	4620      	mov	r0, r4
 8008b92:	f001 f86b 	bl	8009c6c <_calloc_r>
 8008b96:	69e3      	ldr	r3, [r4, #28]
 8008b98:	60f0      	str	r0, [r6, #12]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e4      	bne.n	8008b6a <_Balloc+0x2e>
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	6802      	ldr	r2, [r0, #0]
 8008ba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008baa:	2300      	movs	r3, #0
 8008bac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bb0:	e7f7      	b.n	8008ba2 <_Balloc+0x66>
 8008bb2:	bf00      	nop
 8008bb4:	0800a932 	.word	0x0800a932
 8008bb8:	0800a949 	.word	0x0800a949

08008bbc <_Bfree>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	69c6      	ldr	r6, [r0, #28]
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	b976      	cbnz	r6, 8008be4 <_Bfree+0x28>
 8008bc6:	2010      	movs	r0, #16
 8008bc8:	f001 f864 	bl	8009c94 <malloc>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	61e8      	str	r0, [r5, #28]
 8008bd0:	b920      	cbnz	r0, 8008bdc <_Bfree+0x20>
 8008bd2:	4b09      	ldr	r3, [pc, #36]	@ (8008bf8 <_Bfree+0x3c>)
 8008bd4:	4809      	ldr	r0, [pc, #36]	@ (8008bfc <_Bfree+0x40>)
 8008bd6:	218f      	movs	r1, #143	@ 0x8f
 8008bd8:	f001 f82a 	bl	8009c30 <__assert_func>
 8008bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008be0:	6006      	str	r6, [r0, #0]
 8008be2:	60c6      	str	r6, [r0, #12]
 8008be4:	b13c      	cbz	r4, 8008bf6 <_Bfree+0x3a>
 8008be6:	69eb      	ldr	r3, [r5, #28]
 8008be8:	6862      	ldr	r2, [r4, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bf0:	6021      	str	r1, [r4, #0]
 8008bf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	0800a932 	.word	0x0800a932
 8008bfc:	0800a949 	.word	0x0800a949

08008c00 <__multadd>:
 8008c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c04:	690d      	ldr	r5, [r1, #16]
 8008c06:	4607      	mov	r7, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	461e      	mov	r6, r3
 8008c0c:	f101 0c14 	add.w	ip, r1, #20
 8008c10:	2000      	movs	r0, #0
 8008c12:	f8dc 3000 	ldr.w	r3, [ip]
 8008c16:	b299      	uxth	r1, r3
 8008c18:	fb02 6101 	mla	r1, r2, r1, r6
 8008c1c:	0c1e      	lsrs	r6, r3, #16
 8008c1e:	0c0b      	lsrs	r3, r1, #16
 8008c20:	fb02 3306 	mla	r3, r2, r6, r3
 8008c24:	b289      	uxth	r1, r1
 8008c26:	3001      	adds	r0, #1
 8008c28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c2c:	4285      	cmp	r5, r0
 8008c2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c36:	dcec      	bgt.n	8008c12 <__multadd+0x12>
 8008c38:	b30e      	cbz	r6, 8008c7e <__multadd+0x7e>
 8008c3a:	68a3      	ldr	r3, [r4, #8]
 8008c3c:	42ab      	cmp	r3, r5
 8008c3e:	dc19      	bgt.n	8008c74 <__multadd+0x74>
 8008c40:	6861      	ldr	r1, [r4, #4]
 8008c42:	4638      	mov	r0, r7
 8008c44:	3101      	adds	r1, #1
 8008c46:	f7ff ff79 	bl	8008b3c <_Balloc>
 8008c4a:	4680      	mov	r8, r0
 8008c4c:	b928      	cbnz	r0, 8008c5a <__multadd+0x5a>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	4b0c      	ldr	r3, [pc, #48]	@ (8008c84 <__multadd+0x84>)
 8008c52:	480d      	ldr	r0, [pc, #52]	@ (8008c88 <__multadd+0x88>)
 8008c54:	21ba      	movs	r1, #186	@ 0xba
 8008c56:	f000 ffeb 	bl	8009c30 <__assert_func>
 8008c5a:	6922      	ldr	r2, [r4, #16]
 8008c5c:	3202      	adds	r2, #2
 8008c5e:	f104 010c 	add.w	r1, r4, #12
 8008c62:	0092      	lsls	r2, r2, #2
 8008c64:	300c      	adds	r0, #12
 8008c66:	f7ff fb06 	bl	8008276 <memcpy>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff ffa5 	bl	8008bbc <_Bfree>
 8008c72:	4644      	mov	r4, r8
 8008c74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c78:	3501      	adds	r5, #1
 8008c7a:	615e      	str	r6, [r3, #20]
 8008c7c:	6125      	str	r5, [r4, #16]
 8008c7e:	4620      	mov	r0, r4
 8008c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c84:	0800a8c1 	.word	0x0800a8c1
 8008c88:	0800a949 	.word	0x0800a949

08008c8c <__s2b>:
 8008c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c90:	460c      	mov	r4, r1
 8008c92:	4615      	mov	r5, r2
 8008c94:	461f      	mov	r7, r3
 8008c96:	2209      	movs	r2, #9
 8008c98:	3308      	adds	r3, #8
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	db09      	blt.n	8008cbc <__s2b+0x30>
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f7ff ff47 	bl	8008b3c <_Balloc>
 8008cae:	b940      	cbnz	r0, 8008cc2 <__s2b+0x36>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	4b19      	ldr	r3, [pc, #100]	@ (8008d18 <__s2b+0x8c>)
 8008cb4:	4819      	ldr	r0, [pc, #100]	@ (8008d1c <__s2b+0x90>)
 8008cb6:	21d3      	movs	r1, #211	@ 0xd3
 8008cb8:	f000 ffba 	bl	8009c30 <__assert_func>
 8008cbc:	0052      	lsls	r2, r2, #1
 8008cbe:	3101      	adds	r1, #1
 8008cc0:	e7f0      	b.n	8008ca4 <__s2b+0x18>
 8008cc2:	9b08      	ldr	r3, [sp, #32]
 8008cc4:	6143      	str	r3, [r0, #20]
 8008cc6:	2d09      	cmp	r5, #9
 8008cc8:	f04f 0301 	mov.w	r3, #1
 8008ccc:	6103      	str	r3, [r0, #16]
 8008cce:	dd16      	ble.n	8008cfe <__s2b+0x72>
 8008cd0:	f104 0909 	add.w	r9, r4, #9
 8008cd4:	46c8      	mov	r8, r9
 8008cd6:	442c      	add	r4, r5
 8008cd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008cdc:	4601      	mov	r1, r0
 8008cde:	3b30      	subs	r3, #48	@ 0x30
 8008ce0:	220a      	movs	r2, #10
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ff8c 	bl	8008c00 <__multadd>
 8008ce8:	45a0      	cmp	r8, r4
 8008cea:	d1f5      	bne.n	8008cd8 <__s2b+0x4c>
 8008cec:	f1a5 0408 	sub.w	r4, r5, #8
 8008cf0:	444c      	add	r4, r9
 8008cf2:	1b2d      	subs	r5, r5, r4
 8008cf4:	1963      	adds	r3, r4, r5
 8008cf6:	42bb      	cmp	r3, r7
 8008cf8:	db04      	blt.n	8008d04 <__s2b+0x78>
 8008cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cfe:	340a      	adds	r4, #10
 8008d00:	2509      	movs	r5, #9
 8008d02:	e7f6      	b.n	8008cf2 <__s2b+0x66>
 8008d04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d08:	4601      	mov	r1, r0
 8008d0a:	3b30      	subs	r3, #48	@ 0x30
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f7ff ff76 	bl	8008c00 <__multadd>
 8008d14:	e7ee      	b.n	8008cf4 <__s2b+0x68>
 8008d16:	bf00      	nop
 8008d18:	0800a8c1 	.word	0x0800a8c1
 8008d1c:	0800a949 	.word	0x0800a949

08008d20 <__hi0bits>:
 8008d20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d24:	4603      	mov	r3, r0
 8008d26:	bf36      	itet	cc
 8008d28:	0403      	lslcc	r3, r0, #16
 8008d2a:	2000      	movcs	r0, #0
 8008d2c:	2010      	movcc	r0, #16
 8008d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d32:	bf3c      	itt	cc
 8008d34:	021b      	lslcc	r3, r3, #8
 8008d36:	3008      	addcc	r0, #8
 8008d38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d3c:	bf3c      	itt	cc
 8008d3e:	011b      	lslcc	r3, r3, #4
 8008d40:	3004      	addcc	r0, #4
 8008d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d46:	bf3c      	itt	cc
 8008d48:	009b      	lslcc	r3, r3, #2
 8008d4a:	3002      	addcc	r0, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	db05      	blt.n	8008d5c <__hi0bits+0x3c>
 8008d50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d54:	f100 0001 	add.w	r0, r0, #1
 8008d58:	bf08      	it	eq
 8008d5a:	2020      	moveq	r0, #32
 8008d5c:	4770      	bx	lr

08008d5e <__lo0bits>:
 8008d5e:	6803      	ldr	r3, [r0, #0]
 8008d60:	4602      	mov	r2, r0
 8008d62:	f013 0007 	ands.w	r0, r3, #7
 8008d66:	d00b      	beq.n	8008d80 <__lo0bits+0x22>
 8008d68:	07d9      	lsls	r1, r3, #31
 8008d6a:	d421      	bmi.n	8008db0 <__lo0bits+0x52>
 8008d6c:	0798      	lsls	r0, r3, #30
 8008d6e:	bf49      	itett	mi
 8008d70:	085b      	lsrmi	r3, r3, #1
 8008d72:	089b      	lsrpl	r3, r3, #2
 8008d74:	2001      	movmi	r0, #1
 8008d76:	6013      	strmi	r3, [r2, #0]
 8008d78:	bf5c      	itt	pl
 8008d7a:	6013      	strpl	r3, [r2, #0]
 8008d7c:	2002      	movpl	r0, #2
 8008d7e:	4770      	bx	lr
 8008d80:	b299      	uxth	r1, r3
 8008d82:	b909      	cbnz	r1, 8008d88 <__lo0bits+0x2a>
 8008d84:	0c1b      	lsrs	r3, r3, #16
 8008d86:	2010      	movs	r0, #16
 8008d88:	b2d9      	uxtb	r1, r3
 8008d8a:	b909      	cbnz	r1, 8008d90 <__lo0bits+0x32>
 8008d8c:	3008      	adds	r0, #8
 8008d8e:	0a1b      	lsrs	r3, r3, #8
 8008d90:	0719      	lsls	r1, r3, #28
 8008d92:	bf04      	itt	eq
 8008d94:	091b      	lsreq	r3, r3, #4
 8008d96:	3004      	addeq	r0, #4
 8008d98:	0799      	lsls	r1, r3, #30
 8008d9a:	bf04      	itt	eq
 8008d9c:	089b      	lsreq	r3, r3, #2
 8008d9e:	3002      	addeq	r0, #2
 8008da0:	07d9      	lsls	r1, r3, #31
 8008da2:	d403      	bmi.n	8008dac <__lo0bits+0x4e>
 8008da4:	085b      	lsrs	r3, r3, #1
 8008da6:	f100 0001 	add.w	r0, r0, #1
 8008daa:	d003      	beq.n	8008db4 <__lo0bits+0x56>
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	4770      	bx	lr
 8008db0:	2000      	movs	r0, #0
 8008db2:	4770      	bx	lr
 8008db4:	2020      	movs	r0, #32
 8008db6:	4770      	bx	lr

08008db8 <__i2b>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	460c      	mov	r4, r1
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	f7ff febd 	bl	8008b3c <_Balloc>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	b928      	cbnz	r0, 8008dd2 <__i2b+0x1a>
 8008dc6:	4b05      	ldr	r3, [pc, #20]	@ (8008ddc <__i2b+0x24>)
 8008dc8:	4805      	ldr	r0, [pc, #20]	@ (8008de0 <__i2b+0x28>)
 8008dca:	f240 1145 	movw	r1, #325	@ 0x145
 8008dce:	f000 ff2f 	bl	8009c30 <__assert_func>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	6144      	str	r4, [r0, #20]
 8008dd6:	6103      	str	r3, [r0, #16]
 8008dd8:	bd10      	pop	{r4, pc}
 8008dda:	bf00      	nop
 8008ddc:	0800a8c1 	.word	0x0800a8c1
 8008de0:	0800a949 	.word	0x0800a949

08008de4 <__multiply>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	4614      	mov	r4, r2
 8008dea:	690a      	ldr	r2, [r1, #16]
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	bfa8      	it	ge
 8008df2:	4623      	movge	r3, r4
 8008df4:	460f      	mov	r7, r1
 8008df6:	bfa4      	itt	ge
 8008df8:	460c      	movge	r4, r1
 8008dfa:	461f      	movge	r7, r3
 8008dfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e04:	68a3      	ldr	r3, [r4, #8]
 8008e06:	6861      	ldr	r1, [r4, #4]
 8008e08:	eb0a 0609 	add.w	r6, sl, r9
 8008e0c:	42b3      	cmp	r3, r6
 8008e0e:	b085      	sub	sp, #20
 8008e10:	bfb8      	it	lt
 8008e12:	3101      	addlt	r1, #1
 8008e14:	f7ff fe92 	bl	8008b3c <_Balloc>
 8008e18:	b930      	cbnz	r0, 8008e28 <__multiply+0x44>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b44      	ldr	r3, [pc, #272]	@ (8008f30 <__multiply+0x14c>)
 8008e1e:	4845      	ldr	r0, [pc, #276]	@ (8008f34 <__multiply+0x150>)
 8008e20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e24:	f000 ff04 	bl	8009c30 <__assert_func>
 8008e28:	f100 0514 	add.w	r5, r0, #20
 8008e2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e30:	462b      	mov	r3, r5
 8008e32:	2200      	movs	r2, #0
 8008e34:	4543      	cmp	r3, r8
 8008e36:	d321      	bcc.n	8008e7c <__multiply+0x98>
 8008e38:	f107 0114 	add.w	r1, r7, #20
 8008e3c:	f104 0214 	add.w	r2, r4, #20
 8008e40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e48:	9302      	str	r3, [sp, #8]
 8008e4a:	1b13      	subs	r3, r2, r4
 8008e4c:	3b15      	subs	r3, #21
 8008e4e:	f023 0303 	bic.w	r3, r3, #3
 8008e52:	3304      	adds	r3, #4
 8008e54:	f104 0715 	add.w	r7, r4, #21
 8008e58:	42ba      	cmp	r2, r7
 8008e5a:	bf38      	it	cc
 8008e5c:	2304      	movcc	r3, #4
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	9b02      	ldr	r3, [sp, #8]
 8008e62:	9103      	str	r1, [sp, #12]
 8008e64:	428b      	cmp	r3, r1
 8008e66:	d80c      	bhi.n	8008e82 <__multiply+0x9e>
 8008e68:	2e00      	cmp	r6, #0
 8008e6a:	dd03      	ble.n	8008e74 <__multiply+0x90>
 8008e6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d05b      	beq.n	8008f2c <__multiply+0x148>
 8008e74:	6106      	str	r6, [r0, #16]
 8008e76:	b005      	add	sp, #20
 8008e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7c:	f843 2b04 	str.w	r2, [r3], #4
 8008e80:	e7d8      	b.n	8008e34 <__multiply+0x50>
 8008e82:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e86:	f1ba 0f00 	cmp.w	sl, #0
 8008e8a:	d024      	beq.n	8008ed6 <__multiply+0xf2>
 8008e8c:	f104 0e14 	add.w	lr, r4, #20
 8008e90:	46a9      	mov	r9, r5
 8008e92:	f04f 0c00 	mov.w	ip, #0
 8008e96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e9a:	f8d9 3000 	ldr.w	r3, [r9]
 8008e9e:	fa1f fb87 	uxth.w	fp, r7
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ea8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008eac:	f8d9 7000 	ldr.w	r7, [r9]
 8008eb0:	4463      	add	r3, ip
 8008eb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008eb6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008eba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ec4:	4572      	cmp	r2, lr
 8008ec6:	f849 3b04 	str.w	r3, [r9], #4
 8008eca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ece:	d8e2      	bhi.n	8008e96 <__multiply+0xb2>
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	f845 c003 	str.w	ip, [r5, r3]
 8008ed6:	9b03      	ldr	r3, [sp, #12]
 8008ed8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008edc:	3104      	adds	r1, #4
 8008ede:	f1b9 0f00 	cmp.w	r9, #0
 8008ee2:	d021      	beq.n	8008f28 <__multiply+0x144>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	f104 0c14 	add.w	ip, r4, #20
 8008eea:	46ae      	mov	lr, r5
 8008eec:	f04f 0a00 	mov.w	sl, #0
 8008ef0:	f8bc b000 	ldrh.w	fp, [ip]
 8008ef4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008ef8:	fb09 770b 	mla	r7, r9, fp, r7
 8008efc:	4457      	add	r7, sl
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f04:	f84e 3b04 	str.w	r3, [lr], #4
 8008f08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f10:	f8be 3000 	ldrh.w	r3, [lr]
 8008f14:	fb09 330a 	mla	r3, r9, sl, r3
 8008f18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f1c:	4562      	cmp	r2, ip
 8008f1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f22:	d8e5      	bhi.n	8008ef0 <__multiply+0x10c>
 8008f24:	9f01      	ldr	r7, [sp, #4]
 8008f26:	51eb      	str	r3, [r5, r7]
 8008f28:	3504      	adds	r5, #4
 8008f2a:	e799      	b.n	8008e60 <__multiply+0x7c>
 8008f2c:	3e01      	subs	r6, #1
 8008f2e:	e79b      	b.n	8008e68 <__multiply+0x84>
 8008f30:	0800a8c1 	.word	0x0800a8c1
 8008f34:	0800a949 	.word	0x0800a949

08008f38 <__pow5mult>:
 8008f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	f012 0203 	ands.w	r2, r2, #3
 8008f42:	4607      	mov	r7, r0
 8008f44:	460e      	mov	r6, r1
 8008f46:	d007      	beq.n	8008f58 <__pow5mult+0x20>
 8008f48:	4c25      	ldr	r4, [pc, #148]	@ (8008fe0 <__pow5mult+0xa8>)
 8008f4a:	3a01      	subs	r2, #1
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f52:	f7ff fe55 	bl	8008c00 <__multadd>
 8008f56:	4606      	mov	r6, r0
 8008f58:	10ad      	asrs	r5, r5, #2
 8008f5a:	d03d      	beq.n	8008fd8 <__pow5mult+0xa0>
 8008f5c:	69fc      	ldr	r4, [r7, #28]
 8008f5e:	b97c      	cbnz	r4, 8008f80 <__pow5mult+0x48>
 8008f60:	2010      	movs	r0, #16
 8008f62:	f000 fe97 	bl	8009c94 <malloc>
 8008f66:	4602      	mov	r2, r0
 8008f68:	61f8      	str	r0, [r7, #28]
 8008f6a:	b928      	cbnz	r0, 8008f78 <__pow5mult+0x40>
 8008f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe4 <__pow5mult+0xac>)
 8008f6e:	481e      	ldr	r0, [pc, #120]	@ (8008fe8 <__pow5mult+0xb0>)
 8008f70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008f74:	f000 fe5c 	bl	8009c30 <__assert_func>
 8008f78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f7c:	6004      	str	r4, [r0, #0]
 8008f7e:	60c4      	str	r4, [r0, #12]
 8008f80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f88:	b94c      	cbnz	r4, 8008f9e <__pow5mult+0x66>
 8008f8a:	f240 2171 	movw	r1, #625	@ 0x271
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f7ff ff12 	bl	8008db8 <__i2b>
 8008f94:	2300      	movs	r3, #0
 8008f96:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	6003      	str	r3, [r0, #0]
 8008f9e:	f04f 0900 	mov.w	r9, #0
 8008fa2:	07eb      	lsls	r3, r5, #31
 8008fa4:	d50a      	bpl.n	8008fbc <__pow5mult+0x84>
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4622      	mov	r2, r4
 8008faa:	4638      	mov	r0, r7
 8008fac:	f7ff ff1a 	bl	8008de4 <__multiply>
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	4680      	mov	r8, r0
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f7ff fe01 	bl	8008bbc <_Bfree>
 8008fba:	4646      	mov	r6, r8
 8008fbc:	106d      	asrs	r5, r5, #1
 8008fbe:	d00b      	beq.n	8008fd8 <__pow5mult+0xa0>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	b938      	cbnz	r0, 8008fd4 <__pow5mult+0x9c>
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff ff0b 	bl	8008de4 <__multiply>
 8008fce:	6020      	str	r0, [r4, #0]
 8008fd0:	f8c0 9000 	str.w	r9, [r0]
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	e7e4      	b.n	8008fa2 <__pow5mult+0x6a>
 8008fd8:	4630      	mov	r0, r6
 8008fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fde:	bf00      	nop
 8008fe0:	0800a9a4 	.word	0x0800a9a4
 8008fe4:	0800a932 	.word	0x0800a932
 8008fe8:	0800a949 	.word	0x0800a949

08008fec <__lshift>:
 8008fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	6849      	ldr	r1, [r1, #4]
 8008ff4:	6923      	ldr	r3, [r4, #16]
 8008ff6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ffa:	68a3      	ldr	r3, [r4, #8]
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	4691      	mov	r9, r2
 8009000:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009004:	f108 0601 	add.w	r6, r8, #1
 8009008:	42b3      	cmp	r3, r6
 800900a:	db0b      	blt.n	8009024 <__lshift+0x38>
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff fd95 	bl	8008b3c <_Balloc>
 8009012:	4605      	mov	r5, r0
 8009014:	b948      	cbnz	r0, 800902a <__lshift+0x3e>
 8009016:	4602      	mov	r2, r0
 8009018:	4b28      	ldr	r3, [pc, #160]	@ (80090bc <__lshift+0xd0>)
 800901a:	4829      	ldr	r0, [pc, #164]	@ (80090c0 <__lshift+0xd4>)
 800901c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009020:	f000 fe06 	bl	8009c30 <__assert_func>
 8009024:	3101      	adds	r1, #1
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	e7ee      	b.n	8009008 <__lshift+0x1c>
 800902a:	2300      	movs	r3, #0
 800902c:	f100 0114 	add.w	r1, r0, #20
 8009030:	f100 0210 	add.w	r2, r0, #16
 8009034:	4618      	mov	r0, r3
 8009036:	4553      	cmp	r3, sl
 8009038:	db33      	blt.n	80090a2 <__lshift+0xb6>
 800903a:	6920      	ldr	r0, [r4, #16]
 800903c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009040:	f104 0314 	add.w	r3, r4, #20
 8009044:	f019 091f 	ands.w	r9, r9, #31
 8009048:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800904c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009050:	d02b      	beq.n	80090aa <__lshift+0xbe>
 8009052:	f1c9 0e20 	rsb	lr, r9, #32
 8009056:	468a      	mov	sl, r1
 8009058:	2200      	movs	r2, #0
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	fa00 f009 	lsl.w	r0, r0, r9
 8009060:	4310      	orrs	r0, r2
 8009062:	f84a 0b04 	str.w	r0, [sl], #4
 8009066:	f853 2b04 	ldr.w	r2, [r3], #4
 800906a:	459c      	cmp	ip, r3
 800906c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009070:	d8f3      	bhi.n	800905a <__lshift+0x6e>
 8009072:	ebac 0304 	sub.w	r3, ip, r4
 8009076:	3b15      	subs	r3, #21
 8009078:	f023 0303 	bic.w	r3, r3, #3
 800907c:	3304      	adds	r3, #4
 800907e:	f104 0015 	add.w	r0, r4, #21
 8009082:	4584      	cmp	ip, r0
 8009084:	bf38      	it	cc
 8009086:	2304      	movcc	r3, #4
 8009088:	50ca      	str	r2, [r1, r3]
 800908a:	b10a      	cbz	r2, 8009090 <__lshift+0xa4>
 800908c:	f108 0602 	add.w	r6, r8, #2
 8009090:	3e01      	subs	r6, #1
 8009092:	4638      	mov	r0, r7
 8009094:	612e      	str	r6, [r5, #16]
 8009096:	4621      	mov	r1, r4
 8009098:	f7ff fd90 	bl	8008bbc <_Bfree>
 800909c:	4628      	mov	r0, r5
 800909e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80090a6:	3301      	adds	r3, #1
 80090a8:	e7c5      	b.n	8009036 <__lshift+0x4a>
 80090aa:	3904      	subs	r1, #4
 80090ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80090b4:	459c      	cmp	ip, r3
 80090b6:	d8f9      	bhi.n	80090ac <__lshift+0xc0>
 80090b8:	e7ea      	b.n	8009090 <__lshift+0xa4>
 80090ba:	bf00      	nop
 80090bc:	0800a8c1 	.word	0x0800a8c1
 80090c0:	0800a949 	.word	0x0800a949

080090c4 <__mcmp>:
 80090c4:	690a      	ldr	r2, [r1, #16]
 80090c6:	4603      	mov	r3, r0
 80090c8:	6900      	ldr	r0, [r0, #16]
 80090ca:	1a80      	subs	r0, r0, r2
 80090cc:	b530      	push	{r4, r5, lr}
 80090ce:	d10e      	bne.n	80090ee <__mcmp+0x2a>
 80090d0:	3314      	adds	r3, #20
 80090d2:	3114      	adds	r1, #20
 80090d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80090d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80090dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80090e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80090e4:	4295      	cmp	r5, r2
 80090e6:	d003      	beq.n	80090f0 <__mcmp+0x2c>
 80090e8:	d205      	bcs.n	80090f6 <__mcmp+0x32>
 80090ea:	f04f 30ff 	mov.w	r0, #4294967295
 80090ee:	bd30      	pop	{r4, r5, pc}
 80090f0:	42a3      	cmp	r3, r4
 80090f2:	d3f3      	bcc.n	80090dc <__mcmp+0x18>
 80090f4:	e7fb      	b.n	80090ee <__mcmp+0x2a>
 80090f6:	2001      	movs	r0, #1
 80090f8:	e7f9      	b.n	80090ee <__mcmp+0x2a>
	...

080090fc <__mdiff>:
 80090fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	4689      	mov	r9, r1
 8009102:	4606      	mov	r6, r0
 8009104:	4611      	mov	r1, r2
 8009106:	4648      	mov	r0, r9
 8009108:	4614      	mov	r4, r2
 800910a:	f7ff ffdb 	bl	80090c4 <__mcmp>
 800910e:	1e05      	subs	r5, r0, #0
 8009110:	d112      	bne.n	8009138 <__mdiff+0x3c>
 8009112:	4629      	mov	r1, r5
 8009114:	4630      	mov	r0, r6
 8009116:	f7ff fd11 	bl	8008b3c <_Balloc>
 800911a:	4602      	mov	r2, r0
 800911c:	b928      	cbnz	r0, 800912a <__mdiff+0x2e>
 800911e:	4b3f      	ldr	r3, [pc, #252]	@ (800921c <__mdiff+0x120>)
 8009120:	f240 2137 	movw	r1, #567	@ 0x237
 8009124:	483e      	ldr	r0, [pc, #248]	@ (8009220 <__mdiff+0x124>)
 8009126:	f000 fd83 	bl	8009c30 <__assert_func>
 800912a:	2301      	movs	r3, #1
 800912c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009130:	4610      	mov	r0, r2
 8009132:	b003      	add	sp, #12
 8009134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009138:	bfbc      	itt	lt
 800913a:	464b      	movlt	r3, r9
 800913c:	46a1      	movlt	r9, r4
 800913e:	4630      	mov	r0, r6
 8009140:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009144:	bfba      	itte	lt
 8009146:	461c      	movlt	r4, r3
 8009148:	2501      	movlt	r5, #1
 800914a:	2500      	movge	r5, #0
 800914c:	f7ff fcf6 	bl	8008b3c <_Balloc>
 8009150:	4602      	mov	r2, r0
 8009152:	b918      	cbnz	r0, 800915c <__mdiff+0x60>
 8009154:	4b31      	ldr	r3, [pc, #196]	@ (800921c <__mdiff+0x120>)
 8009156:	f240 2145 	movw	r1, #581	@ 0x245
 800915a:	e7e3      	b.n	8009124 <__mdiff+0x28>
 800915c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009160:	6926      	ldr	r6, [r4, #16]
 8009162:	60c5      	str	r5, [r0, #12]
 8009164:	f109 0310 	add.w	r3, r9, #16
 8009168:	f109 0514 	add.w	r5, r9, #20
 800916c:	f104 0e14 	add.w	lr, r4, #20
 8009170:	f100 0b14 	add.w	fp, r0, #20
 8009174:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009178:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	46d9      	mov	r9, fp
 8009180:	f04f 0c00 	mov.w	ip, #0
 8009184:	9b01      	ldr	r3, [sp, #4]
 8009186:	f85e 0b04 	ldr.w	r0, [lr], #4
 800918a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	fa1f f38a 	uxth.w	r3, sl
 8009194:	4619      	mov	r1, r3
 8009196:	b283      	uxth	r3, r0
 8009198:	1acb      	subs	r3, r1, r3
 800919a:	0c00      	lsrs	r0, r0, #16
 800919c:	4463      	add	r3, ip
 800919e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091ac:	4576      	cmp	r6, lr
 80091ae:	f849 3b04 	str.w	r3, [r9], #4
 80091b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091b6:	d8e5      	bhi.n	8009184 <__mdiff+0x88>
 80091b8:	1b33      	subs	r3, r6, r4
 80091ba:	3b15      	subs	r3, #21
 80091bc:	f023 0303 	bic.w	r3, r3, #3
 80091c0:	3415      	adds	r4, #21
 80091c2:	3304      	adds	r3, #4
 80091c4:	42a6      	cmp	r6, r4
 80091c6:	bf38      	it	cc
 80091c8:	2304      	movcc	r3, #4
 80091ca:	441d      	add	r5, r3
 80091cc:	445b      	add	r3, fp
 80091ce:	461e      	mov	r6, r3
 80091d0:	462c      	mov	r4, r5
 80091d2:	4544      	cmp	r4, r8
 80091d4:	d30e      	bcc.n	80091f4 <__mdiff+0xf8>
 80091d6:	f108 0103 	add.w	r1, r8, #3
 80091da:	1b49      	subs	r1, r1, r5
 80091dc:	f021 0103 	bic.w	r1, r1, #3
 80091e0:	3d03      	subs	r5, #3
 80091e2:	45a8      	cmp	r8, r5
 80091e4:	bf38      	it	cc
 80091e6:	2100      	movcc	r1, #0
 80091e8:	440b      	add	r3, r1
 80091ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091ee:	b191      	cbz	r1, 8009216 <__mdiff+0x11a>
 80091f0:	6117      	str	r7, [r2, #16]
 80091f2:	e79d      	b.n	8009130 <__mdiff+0x34>
 80091f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80091f8:	46e6      	mov	lr, ip
 80091fa:	0c08      	lsrs	r0, r1, #16
 80091fc:	fa1c fc81 	uxtah	ip, ip, r1
 8009200:	4471      	add	r1, lr
 8009202:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009206:	b289      	uxth	r1, r1
 8009208:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800920c:	f846 1b04 	str.w	r1, [r6], #4
 8009210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009214:	e7dd      	b.n	80091d2 <__mdiff+0xd6>
 8009216:	3f01      	subs	r7, #1
 8009218:	e7e7      	b.n	80091ea <__mdiff+0xee>
 800921a:	bf00      	nop
 800921c:	0800a8c1 	.word	0x0800a8c1
 8009220:	0800a949 	.word	0x0800a949

08009224 <__ulp>:
 8009224:	b082      	sub	sp, #8
 8009226:	ed8d 0b00 	vstr	d0, [sp]
 800922a:	9a01      	ldr	r2, [sp, #4]
 800922c:	4b0f      	ldr	r3, [pc, #60]	@ (800926c <__ulp+0x48>)
 800922e:	4013      	ands	r3, r2
 8009230:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009234:	2b00      	cmp	r3, #0
 8009236:	dc08      	bgt.n	800924a <__ulp+0x26>
 8009238:	425b      	negs	r3, r3
 800923a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800923e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009242:	da04      	bge.n	800924e <__ulp+0x2a>
 8009244:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009248:	4113      	asrs	r3, r2
 800924a:	2200      	movs	r2, #0
 800924c:	e008      	b.n	8009260 <__ulp+0x3c>
 800924e:	f1a2 0314 	sub.w	r3, r2, #20
 8009252:	2b1e      	cmp	r3, #30
 8009254:	bfda      	itte	le
 8009256:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800925a:	40da      	lsrle	r2, r3
 800925c:	2201      	movgt	r2, #1
 800925e:	2300      	movs	r3, #0
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	ec41 0b10 	vmov	d0, r0, r1
 8009268:	b002      	add	sp, #8
 800926a:	4770      	bx	lr
 800926c:	7ff00000 	.word	0x7ff00000

08009270 <__b2d>:
 8009270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009274:	6906      	ldr	r6, [r0, #16]
 8009276:	f100 0814 	add.w	r8, r0, #20
 800927a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800927e:	1f37      	subs	r7, r6, #4
 8009280:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009284:	4610      	mov	r0, r2
 8009286:	f7ff fd4b 	bl	8008d20 <__hi0bits>
 800928a:	f1c0 0320 	rsb	r3, r0, #32
 800928e:	280a      	cmp	r0, #10
 8009290:	600b      	str	r3, [r1, #0]
 8009292:	491b      	ldr	r1, [pc, #108]	@ (8009300 <__b2d+0x90>)
 8009294:	dc15      	bgt.n	80092c2 <__b2d+0x52>
 8009296:	f1c0 0c0b 	rsb	ip, r0, #11
 800929a:	fa22 f30c 	lsr.w	r3, r2, ip
 800929e:	45b8      	cmp	r8, r7
 80092a0:	ea43 0501 	orr.w	r5, r3, r1
 80092a4:	bf34      	ite	cc
 80092a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092aa:	2300      	movcs	r3, #0
 80092ac:	3015      	adds	r0, #21
 80092ae:	fa02 f000 	lsl.w	r0, r2, r0
 80092b2:	fa23 f30c 	lsr.w	r3, r3, ip
 80092b6:	4303      	orrs	r3, r0
 80092b8:	461c      	mov	r4, r3
 80092ba:	ec45 4b10 	vmov	d0, r4, r5
 80092be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c2:	45b8      	cmp	r8, r7
 80092c4:	bf3a      	itte	cc
 80092c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092ca:	f1a6 0708 	subcc.w	r7, r6, #8
 80092ce:	2300      	movcs	r3, #0
 80092d0:	380b      	subs	r0, #11
 80092d2:	d012      	beq.n	80092fa <__b2d+0x8a>
 80092d4:	f1c0 0120 	rsb	r1, r0, #32
 80092d8:	fa23 f401 	lsr.w	r4, r3, r1
 80092dc:	4082      	lsls	r2, r0
 80092de:	4322      	orrs	r2, r4
 80092e0:	4547      	cmp	r7, r8
 80092e2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80092e6:	bf8c      	ite	hi
 80092e8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80092ec:	2200      	movls	r2, #0
 80092ee:	4083      	lsls	r3, r0
 80092f0:	40ca      	lsrs	r2, r1
 80092f2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80092f6:	4313      	orrs	r3, r2
 80092f8:	e7de      	b.n	80092b8 <__b2d+0x48>
 80092fa:	ea42 0501 	orr.w	r5, r2, r1
 80092fe:	e7db      	b.n	80092b8 <__b2d+0x48>
 8009300:	3ff00000 	.word	0x3ff00000

08009304 <__d2b>:
 8009304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009308:	460f      	mov	r7, r1
 800930a:	2101      	movs	r1, #1
 800930c:	ec59 8b10 	vmov	r8, r9, d0
 8009310:	4616      	mov	r6, r2
 8009312:	f7ff fc13 	bl	8008b3c <_Balloc>
 8009316:	4604      	mov	r4, r0
 8009318:	b930      	cbnz	r0, 8009328 <__d2b+0x24>
 800931a:	4602      	mov	r2, r0
 800931c:	4b23      	ldr	r3, [pc, #140]	@ (80093ac <__d2b+0xa8>)
 800931e:	4824      	ldr	r0, [pc, #144]	@ (80093b0 <__d2b+0xac>)
 8009320:	f240 310f 	movw	r1, #783	@ 0x30f
 8009324:	f000 fc84 	bl	8009c30 <__assert_func>
 8009328:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800932c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009330:	b10d      	cbz	r5, 8009336 <__d2b+0x32>
 8009332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	f1b8 0300 	subs.w	r3, r8, #0
 800933c:	d023      	beq.n	8009386 <__d2b+0x82>
 800933e:	4668      	mov	r0, sp
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	f7ff fd0c 	bl	8008d5e <__lo0bits>
 8009346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800934a:	b1d0      	cbz	r0, 8009382 <__d2b+0x7e>
 800934c:	f1c0 0320 	rsb	r3, r0, #32
 8009350:	fa02 f303 	lsl.w	r3, r2, r3
 8009354:	430b      	orrs	r3, r1
 8009356:	40c2      	lsrs	r2, r0
 8009358:	6163      	str	r3, [r4, #20]
 800935a:	9201      	str	r2, [sp, #4]
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	61a3      	str	r3, [r4, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	bf0c      	ite	eq
 8009364:	2201      	moveq	r2, #1
 8009366:	2202      	movne	r2, #2
 8009368:	6122      	str	r2, [r4, #16]
 800936a:	b1a5      	cbz	r5, 8009396 <__d2b+0x92>
 800936c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009370:	4405      	add	r5, r0
 8009372:	603d      	str	r5, [r7, #0]
 8009374:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009378:	6030      	str	r0, [r6, #0]
 800937a:	4620      	mov	r0, r4
 800937c:	b003      	add	sp, #12
 800937e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009382:	6161      	str	r1, [r4, #20]
 8009384:	e7ea      	b.n	800935c <__d2b+0x58>
 8009386:	a801      	add	r0, sp, #4
 8009388:	f7ff fce9 	bl	8008d5e <__lo0bits>
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	6163      	str	r3, [r4, #20]
 8009390:	3020      	adds	r0, #32
 8009392:	2201      	movs	r2, #1
 8009394:	e7e8      	b.n	8009368 <__d2b+0x64>
 8009396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800939a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800939e:	6038      	str	r0, [r7, #0]
 80093a0:	6918      	ldr	r0, [r3, #16]
 80093a2:	f7ff fcbd 	bl	8008d20 <__hi0bits>
 80093a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093aa:	e7e5      	b.n	8009378 <__d2b+0x74>
 80093ac:	0800a8c1 	.word	0x0800a8c1
 80093b0:	0800a949 	.word	0x0800a949

080093b4 <__ratio>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b085      	sub	sp, #20
 80093ba:	e9cd 1000 	strd	r1, r0, [sp]
 80093be:	a902      	add	r1, sp, #8
 80093c0:	f7ff ff56 	bl	8009270 <__b2d>
 80093c4:	9800      	ldr	r0, [sp, #0]
 80093c6:	a903      	add	r1, sp, #12
 80093c8:	ec55 4b10 	vmov	r4, r5, d0
 80093cc:	f7ff ff50 	bl	8009270 <__b2d>
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	6919      	ldr	r1, [r3, #16]
 80093d4:	9b00      	ldr	r3, [sp, #0]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	1ac9      	subs	r1, r1, r3
 80093da:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	ec5b ab10 	vmov	sl, fp, d0
 80093e4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bfce      	itee	gt
 80093ec:	462a      	movgt	r2, r5
 80093ee:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80093f2:	465a      	movle	r2, fp
 80093f4:	462f      	mov	r7, r5
 80093f6:	46d9      	mov	r9, fp
 80093f8:	bfcc      	ite	gt
 80093fa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80093fe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009402:	464b      	mov	r3, r9
 8009404:	4652      	mov	r2, sl
 8009406:	4620      	mov	r0, r4
 8009408:	4639      	mov	r1, r7
 800940a:	f7f7 fa4f 	bl	80008ac <__aeabi_ddiv>
 800940e:	ec41 0b10 	vmov	d0, r0, r1
 8009412:	b005      	add	sp, #20
 8009414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009418 <__copybits>:
 8009418:	3901      	subs	r1, #1
 800941a:	b570      	push	{r4, r5, r6, lr}
 800941c:	1149      	asrs	r1, r1, #5
 800941e:	6914      	ldr	r4, [r2, #16]
 8009420:	3101      	adds	r1, #1
 8009422:	f102 0314 	add.w	r3, r2, #20
 8009426:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800942a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800942e:	1f05      	subs	r5, r0, #4
 8009430:	42a3      	cmp	r3, r4
 8009432:	d30c      	bcc.n	800944e <__copybits+0x36>
 8009434:	1aa3      	subs	r3, r4, r2
 8009436:	3b11      	subs	r3, #17
 8009438:	f023 0303 	bic.w	r3, r3, #3
 800943c:	3211      	adds	r2, #17
 800943e:	42a2      	cmp	r2, r4
 8009440:	bf88      	it	hi
 8009442:	2300      	movhi	r3, #0
 8009444:	4418      	add	r0, r3
 8009446:	2300      	movs	r3, #0
 8009448:	4288      	cmp	r0, r1
 800944a:	d305      	bcc.n	8009458 <__copybits+0x40>
 800944c:	bd70      	pop	{r4, r5, r6, pc}
 800944e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009452:	f845 6f04 	str.w	r6, [r5, #4]!
 8009456:	e7eb      	b.n	8009430 <__copybits+0x18>
 8009458:	f840 3b04 	str.w	r3, [r0], #4
 800945c:	e7f4      	b.n	8009448 <__copybits+0x30>

0800945e <__any_on>:
 800945e:	f100 0214 	add.w	r2, r0, #20
 8009462:	6900      	ldr	r0, [r0, #16]
 8009464:	114b      	asrs	r3, r1, #5
 8009466:	4298      	cmp	r0, r3
 8009468:	b510      	push	{r4, lr}
 800946a:	db11      	blt.n	8009490 <__any_on+0x32>
 800946c:	dd0a      	ble.n	8009484 <__any_on+0x26>
 800946e:	f011 011f 	ands.w	r1, r1, #31
 8009472:	d007      	beq.n	8009484 <__any_on+0x26>
 8009474:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009478:	fa24 f001 	lsr.w	r0, r4, r1
 800947c:	fa00 f101 	lsl.w	r1, r0, r1
 8009480:	428c      	cmp	r4, r1
 8009482:	d10b      	bne.n	800949c <__any_on+0x3e>
 8009484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009488:	4293      	cmp	r3, r2
 800948a:	d803      	bhi.n	8009494 <__any_on+0x36>
 800948c:	2000      	movs	r0, #0
 800948e:	bd10      	pop	{r4, pc}
 8009490:	4603      	mov	r3, r0
 8009492:	e7f7      	b.n	8009484 <__any_on+0x26>
 8009494:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009498:	2900      	cmp	r1, #0
 800949a:	d0f5      	beq.n	8009488 <__any_on+0x2a>
 800949c:	2001      	movs	r0, #1
 800949e:	e7f6      	b.n	800948e <__any_on+0x30>

080094a0 <__ascii_wctomb>:
 80094a0:	4603      	mov	r3, r0
 80094a2:	4608      	mov	r0, r1
 80094a4:	b141      	cbz	r1, 80094b8 <__ascii_wctomb+0x18>
 80094a6:	2aff      	cmp	r2, #255	@ 0xff
 80094a8:	d904      	bls.n	80094b4 <__ascii_wctomb+0x14>
 80094aa:	228a      	movs	r2, #138	@ 0x8a
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	f04f 30ff 	mov.w	r0, #4294967295
 80094b2:	4770      	bx	lr
 80094b4:	700a      	strb	r2, [r1, #0]
 80094b6:	2001      	movs	r0, #1
 80094b8:	4770      	bx	lr

080094ba <__ssputs_r>:
 80094ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094be:	688e      	ldr	r6, [r1, #8]
 80094c0:	461f      	mov	r7, r3
 80094c2:	42be      	cmp	r6, r7
 80094c4:	680b      	ldr	r3, [r1, #0]
 80094c6:	4682      	mov	sl, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	4690      	mov	r8, r2
 80094cc:	d82d      	bhi.n	800952a <__ssputs_r+0x70>
 80094ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094d2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094d6:	d026      	beq.n	8009526 <__ssputs_r+0x6c>
 80094d8:	6965      	ldr	r5, [r4, #20]
 80094da:	6909      	ldr	r1, [r1, #16]
 80094dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094e0:	eba3 0901 	sub.w	r9, r3, r1
 80094e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094e8:	1c7b      	adds	r3, r7, #1
 80094ea:	444b      	add	r3, r9
 80094ec:	106d      	asrs	r5, r5, #1
 80094ee:	429d      	cmp	r5, r3
 80094f0:	bf38      	it	cc
 80094f2:	461d      	movcc	r5, r3
 80094f4:	0553      	lsls	r3, r2, #21
 80094f6:	d527      	bpl.n	8009548 <__ssputs_r+0x8e>
 80094f8:	4629      	mov	r1, r5
 80094fa:	f7ff fa81 	bl	8008a00 <_malloc_r>
 80094fe:	4606      	mov	r6, r0
 8009500:	b360      	cbz	r0, 800955c <__ssputs_r+0xa2>
 8009502:	6921      	ldr	r1, [r4, #16]
 8009504:	464a      	mov	r2, r9
 8009506:	f7fe feb6 	bl	8008276 <memcpy>
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	6126      	str	r6, [r4, #16]
 8009518:	6165      	str	r5, [r4, #20]
 800951a:	444e      	add	r6, r9
 800951c:	eba5 0509 	sub.w	r5, r5, r9
 8009520:	6026      	str	r6, [r4, #0]
 8009522:	60a5      	str	r5, [r4, #8]
 8009524:	463e      	mov	r6, r7
 8009526:	42be      	cmp	r6, r7
 8009528:	d900      	bls.n	800952c <__ssputs_r+0x72>
 800952a:	463e      	mov	r6, r7
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	4632      	mov	r2, r6
 8009530:	4641      	mov	r1, r8
 8009532:	f000 fb53 	bl	8009bdc <memmove>
 8009536:	68a3      	ldr	r3, [r4, #8]
 8009538:	1b9b      	subs	r3, r3, r6
 800953a:	60a3      	str	r3, [r4, #8]
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	4433      	add	r3, r6
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	2000      	movs	r0, #0
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009548:	462a      	mov	r2, r5
 800954a:	f000 fbab 	bl	8009ca4 <_realloc_r>
 800954e:	4606      	mov	r6, r0
 8009550:	2800      	cmp	r0, #0
 8009552:	d1e0      	bne.n	8009516 <__ssputs_r+0x5c>
 8009554:	6921      	ldr	r1, [r4, #16]
 8009556:	4650      	mov	r0, sl
 8009558:	f7fe feac 	bl	80082b4 <_free_r>
 800955c:	230c      	movs	r3, #12
 800955e:	f8ca 3000 	str.w	r3, [sl]
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	f04f 30ff 	mov.w	r0, #4294967295
 800956e:	e7e9      	b.n	8009544 <__ssputs_r+0x8a>

08009570 <_svfiprintf_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	4698      	mov	r8, r3
 8009576:	898b      	ldrh	r3, [r1, #12]
 8009578:	061b      	lsls	r3, r3, #24
 800957a:	b09d      	sub	sp, #116	@ 0x74
 800957c:	4607      	mov	r7, r0
 800957e:	460d      	mov	r5, r1
 8009580:	4614      	mov	r4, r2
 8009582:	d510      	bpl.n	80095a6 <_svfiprintf_r+0x36>
 8009584:	690b      	ldr	r3, [r1, #16]
 8009586:	b973      	cbnz	r3, 80095a6 <_svfiprintf_r+0x36>
 8009588:	2140      	movs	r1, #64	@ 0x40
 800958a:	f7ff fa39 	bl	8008a00 <_malloc_r>
 800958e:	6028      	str	r0, [r5, #0]
 8009590:	6128      	str	r0, [r5, #16]
 8009592:	b930      	cbnz	r0, 80095a2 <_svfiprintf_r+0x32>
 8009594:	230c      	movs	r3, #12
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	f04f 30ff 	mov.w	r0, #4294967295
 800959c:	b01d      	add	sp, #116	@ 0x74
 800959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a2:	2340      	movs	r3, #64	@ 0x40
 80095a4:	616b      	str	r3, [r5, #20]
 80095a6:	2300      	movs	r3, #0
 80095a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095aa:	2320      	movs	r3, #32
 80095ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095b4:	2330      	movs	r3, #48	@ 0x30
 80095b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009754 <_svfiprintf_r+0x1e4>
 80095ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095be:	f04f 0901 	mov.w	r9, #1
 80095c2:	4623      	mov	r3, r4
 80095c4:	469a      	mov	sl, r3
 80095c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ca:	b10a      	cbz	r2, 80095d0 <_svfiprintf_r+0x60>
 80095cc:	2a25      	cmp	r2, #37	@ 0x25
 80095ce:	d1f9      	bne.n	80095c4 <_svfiprintf_r+0x54>
 80095d0:	ebba 0b04 	subs.w	fp, sl, r4
 80095d4:	d00b      	beq.n	80095ee <_svfiprintf_r+0x7e>
 80095d6:	465b      	mov	r3, fp
 80095d8:	4622      	mov	r2, r4
 80095da:	4629      	mov	r1, r5
 80095dc:	4638      	mov	r0, r7
 80095de:	f7ff ff6c 	bl	80094ba <__ssputs_r>
 80095e2:	3001      	adds	r0, #1
 80095e4:	f000 80a7 	beq.w	8009736 <_svfiprintf_r+0x1c6>
 80095e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095ea:	445a      	add	r2, fp
 80095ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80095ee:	f89a 3000 	ldrb.w	r3, [sl]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f000 809f 	beq.w	8009736 <_svfiprintf_r+0x1c6>
 80095f8:	2300      	movs	r3, #0
 80095fa:	f04f 32ff 	mov.w	r2, #4294967295
 80095fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009602:	f10a 0a01 	add.w	sl, sl, #1
 8009606:	9304      	str	r3, [sp, #16]
 8009608:	9307      	str	r3, [sp, #28]
 800960a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800960e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009610:	4654      	mov	r4, sl
 8009612:	2205      	movs	r2, #5
 8009614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009618:	484e      	ldr	r0, [pc, #312]	@ (8009754 <_svfiprintf_r+0x1e4>)
 800961a:	f7f6 fe11 	bl	8000240 <memchr>
 800961e:	9a04      	ldr	r2, [sp, #16]
 8009620:	b9d8      	cbnz	r0, 800965a <_svfiprintf_r+0xea>
 8009622:	06d0      	lsls	r0, r2, #27
 8009624:	bf44      	itt	mi
 8009626:	2320      	movmi	r3, #32
 8009628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800962c:	0711      	lsls	r1, r2, #28
 800962e:	bf44      	itt	mi
 8009630:	232b      	movmi	r3, #43	@ 0x2b
 8009632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009636:	f89a 3000 	ldrb.w	r3, [sl]
 800963a:	2b2a      	cmp	r3, #42	@ 0x2a
 800963c:	d015      	beq.n	800966a <_svfiprintf_r+0xfa>
 800963e:	9a07      	ldr	r2, [sp, #28]
 8009640:	4654      	mov	r4, sl
 8009642:	2000      	movs	r0, #0
 8009644:	f04f 0c0a 	mov.w	ip, #10
 8009648:	4621      	mov	r1, r4
 800964a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800964e:	3b30      	subs	r3, #48	@ 0x30
 8009650:	2b09      	cmp	r3, #9
 8009652:	d94b      	bls.n	80096ec <_svfiprintf_r+0x17c>
 8009654:	b1b0      	cbz	r0, 8009684 <_svfiprintf_r+0x114>
 8009656:	9207      	str	r2, [sp, #28]
 8009658:	e014      	b.n	8009684 <_svfiprintf_r+0x114>
 800965a:	eba0 0308 	sub.w	r3, r0, r8
 800965e:	fa09 f303 	lsl.w	r3, r9, r3
 8009662:	4313      	orrs	r3, r2
 8009664:	9304      	str	r3, [sp, #16]
 8009666:	46a2      	mov	sl, r4
 8009668:	e7d2      	b.n	8009610 <_svfiprintf_r+0xa0>
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	1d19      	adds	r1, r3, #4
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	9103      	str	r1, [sp, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	bfbb      	ittet	lt
 8009676:	425b      	neglt	r3, r3
 8009678:	f042 0202 	orrlt.w	r2, r2, #2
 800967c:	9307      	strge	r3, [sp, #28]
 800967e:	9307      	strlt	r3, [sp, #28]
 8009680:	bfb8      	it	lt
 8009682:	9204      	strlt	r2, [sp, #16]
 8009684:	7823      	ldrb	r3, [r4, #0]
 8009686:	2b2e      	cmp	r3, #46	@ 0x2e
 8009688:	d10a      	bne.n	80096a0 <_svfiprintf_r+0x130>
 800968a:	7863      	ldrb	r3, [r4, #1]
 800968c:	2b2a      	cmp	r3, #42	@ 0x2a
 800968e:	d132      	bne.n	80096f6 <_svfiprintf_r+0x186>
 8009690:	9b03      	ldr	r3, [sp, #12]
 8009692:	1d1a      	adds	r2, r3, #4
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	9203      	str	r2, [sp, #12]
 8009698:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800969c:	3402      	adds	r4, #2
 800969e:	9305      	str	r3, [sp, #20]
 80096a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009764 <_svfiprintf_r+0x1f4>
 80096a4:	7821      	ldrb	r1, [r4, #0]
 80096a6:	2203      	movs	r2, #3
 80096a8:	4650      	mov	r0, sl
 80096aa:	f7f6 fdc9 	bl	8000240 <memchr>
 80096ae:	b138      	cbz	r0, 80096c0 <_svfiprintf_r+0x150>
 80096b0:	9b04      	ldr	r3, [sp, #16]
 80096b2:	eba0 000a 	sub.w	r0, r0, sl
 80096b6:	2240      	movs	r2, #64	@ 0x40
 80096b8:	4082      	lsls	r2, r0
 80096ba:	4313      	orrs	r3, r2
 80096bc:	3401      	adds	r4, #1
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c4:	4824      	ldr	r0, [pc, #144]	@ (8009758 <_svfiprintf_r+0x1e8>)
 80096c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096ca:	2206      	movs	r2, #6
 80096cc:	f7f6 fdb8 	bl	8000240 <memchr>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d036      	beq.n	8009742 <_svfiprintf_r+0x1d2>
 80096d4:	4b21      	ldr	r3, [pc, #132]	@ (800975c <_svfiprintf_r+0x1ec>)
 80096d6:	bb1b      	cbnz	r3, 8009720 <_svfiprintf_r+0x1b0>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	3307      	adds	r3, #7
 80096dc:	f023 0307 	bic.w	r3, r3, #7
 80096e0:	3308      	adds	r3, #8
 80096e2:	9303      	str	r3, [sp, #12]
 80096e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e6:	4433      	add	r3, r6
 80096e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ea:	e76a      	b.n	80095c2 <_svfiprintf_r+0x52>
 80096ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80096f0:	460c      	mov	r4, r1
 80096f2:	2001      	movs	r0, #1
 80096f4:	e7a8      	b.n	8009648 <_svfiprintf_r+0xd8>
 80096f6:	2300      	movs	r3, #0
 80096f8:	3401      	adds	r4, #1
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	4619      	mov	r1, r3
 80096fe:	f04f 0c0a 	mov.w	ip, #10
 8009702:	4620      	mov	r0, r4
 8009704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009708:	3a30      	subs	r2, #48	@ 0x30
 800970a:	2a09      	cmp	r2, #9
 800970c:	d903      	bls.n	8009716 <_svfiprintf_r+0x1a6>
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0c6      	beq.n	80096a0 <_svfiprintf_r+0x130>
 8009712:	9105      	str	r1, [sp, #20]
 8009714:	e7c4      	b.n	80096a0 <_svfiprintf_r+0x130>
 8009716:	fb0c 2101 	mla	r1, ip, r1, r2
 800971a:	4604      	mov	r4, r0
 800971c:	2301      	movs	r3, #1
 800971e:	e7f0      	b.n	8009702 <_svfiprintf_r+0x192>
 8009720:	ab03      	add	r3, sp, #12
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	462a      	mov	r2, r5
 8009726:	4b0e      	ldr	r3, [pc, #56]	@ (8009760 <_svfiprintf_r+0x1f0>)
 8009728:	a904      	add	r1, sp, #16
 800972a:	4638      	mov	r0, r7
 800972c:	f3af 8000 	nop.w
 8009730:	1c42      	adds	r2, r0, #1
 8009732:	4606      	mov	r6, r0
 8009734:	d1d6      	bne.n	80096e4 <_svfiprintf_r+0x174>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	065b      	lsls	r3, r3, #25
 800973a:	f53f af2d 	bmi.w	8009598 <_svfiprintf_r+0x28>
 800973e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009740:	e72c      	b.n	800959c <_svfiprintf_r+0x2c>
 8009742:	ab03      	add	r3, sp, #12
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	462a      	mov	r2, r5
 8009748:	4b05      	ldr	r3, [pc, #20]	@ (8009760 <_svfiprintf_r+0x1f0>)
 800974a:	a904      	add	r1, sp, #16
 800974c:	4638      	mov	r0, r7
 800974e:	f000 f879 	bl	8009844 <_printf_i>
 8009752:	e7ed      	b.n	8009730 <_svfiprintf_r+0x1c0>
 8009754:	0800aaa0 	.word	0x0800aaa0
 8009758:	0800aaaa 	.word	0x0800aaaa
 800975c:	00000000 	.word	0x00000000
 8009760:	080094bb 	.word	0x080094bb
 8009764:	0800aaa6 	.word	0x0800aaa6

08009768 <_printf_common>:
 8009768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	4616      	mov	r6, r2
 800976e:	4698      	mov	r8, r3
 8009770:	688a      	ldr	r2, [r1, #8]
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009778:	4293      	cmp	r3, r2
 800977a:	bfb8      	it	lt
 800977c:	4613      	movlt	r3, r2
 800977e:	6033      	str	r3, [r6, #0]
 8009780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009784:	4607      	mov	r7, r0
 8009786:	460c      	mov	r4, r1
 8009788:	b10a      	cbz	r2, 800978e <_printf_common+0x26>
 800978a:	3301      	adds	r3, #1
 800978c:	6033      	str	r3, [r6, #0]
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	0699      	lsls	r1, r3, #26
 8009792:	bf42      	ittt	mi
 8009794:	6833      	ldrmi	r3, [r6, #0]
 8009796:	3302      	addmi	r3, #2
 8009798:	6033      	strmi	r3, [r6, #0]
 800979a:	6825      	ldr	r5, [r4, #0]
 800979c:	f015 0506 	ands.w	r5, r5, #6
 80097a0:	d106      	bne.n	80097b0 <_printf_common+0x48>
 80097a2:	f104 0a19 	add.w	sl, r4, #25
 80097a6:	68e3      	ldr	r3, [r4, #12]
 80097a8:	6832      	ldr	r2, [r6, #0]
 80097aa:	1a9b      	subs	r3, r3, r2
 80097ac:	42ab      	cmp	r3, r5
 80097ae:	dc26      	bgt.n	80097fe <_printf_common+0x96>
 80097b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	3b00      	subs	r3, #0
 80097b8:	bf18      	it	ne
 80097ba:	2301      	movne	r3, #1
 80097bc:	0692      	lsls	r2, r2, #26
 80097be:	d42b      	bmi.n	8009818 <_printf_common+0xb0>
 80097c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097c4:	4641      	mov	r1, r8
 80097c6:	4638      	mov	r0, r7
 80097c8:	47c8      	blx	r9
 80097ca:	3001      	adds	r0, #1
 80097cc:	d01e      	beq.n	800980c <_printf_common+0xa4>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	6922      	ldr	r2, [r4, #16]
 80097d2:	f003 0306 	and.w	r3, r3, #6
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	bf02      	ittt	eq
 80097da:	68e5      	ldreq	r5, [r4, #12]
 80097dc:	6833      	ldreq	r3, [r6, #0]
 80097de:	1aed      	subeq	r5, r5, r3
 80097e0:	68a3      	ldr	r3, [r4, #8]
 80097e2:	bf0c      	ite	eq
 80097e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097e8:	2500      	movne	r5, #0
 80097ea:	4293      	cmp	r3, r2
 80097ec:	bfc4      	itt	gt
 80097ee:	1a9b      	subgt	r3, r3, r2
 80097f0:	18ed      	addgt	r5, r5, r3
 80097f2:	2600      	movs	r6, #0
 80097f4:	341a      	adds	r4, #26
 80097f6:	42b5      	cmp	r5, r6
 80097f8:	d11a      	bne.n	8009830 <_printf_common+0xc8>
 80097fa:	2000      	movs	r0, #0
 80097fc:	e008      	b.n	8009810 <_printf_common+0xa8>
 80097fe:	2301      	movs	r3, #1
 8009800:	4652      	mov	r2, sl
 8009802:	4641      	mov	r1, r8
 8009804:	4638      	mov	r0, r7
 8009806:	47c8      	blx	r9
 8009808:	3001      	adds	r0, #1
 800980a:	d103      	bne.n	8009814 <_printf_common+0xac>
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009814:	3501      	adds	r5, #1
 8009816:	e7c6      	b.n	80097a6 <_printf_common+0x3e>
 8009818:	18e1      	adds	r1, r4, r3
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	2030      	movs	r0, #48	@ 0x30
 800981e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009822:	4422      	add	r2, r4
 8009824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800982c:	3302      	adds	r3, #2
 800982e:	e7c7      	b.n	80097c0 <_printf_common+0x58>
 8009830:	2301      	movs	r3, #1
 8009832:	4622      	mov	r2, r4
 8009834:	4641      	mov	r1, r8
 8009836:	4638      	mov	r0, r7
 8009838:	47c8      	blx	r9
 800983a:	3001      	adds	r0, #1
 800983c:	d0e6      	beq.n	800980c <_printf_common+0xa4>
 800983e:	3601      	adds	r6, #1
 8009840:	e7d9      	b.n	80097f6 <_printf_common+0x8e>
	...

08009844 <_printf_i>:
 8009844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009848:	7e0f      	ldrb	r7, [r1, #24]
 800984a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800984c:	2f78      	cmp	r7, #120	@ 0x78
 800984e:	4691      	mov	r9, r2
 8009850:	4680      	mov	r8, r0
 8009852:	460c      	mov	r4, r1
 8009854:	469a      	mov	sl, r3
 8009856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800985a:	d807      	bhi.n	800986c <_printf_i+0x28>
 800985c:	2f62      	cmp	r7, #98	@ 0x62
 800985e:	d80a      	bhi.n	8009876 <_printf_i+0x32>
 8009860:	2f00      	cmp	r7, #0
 8009862:	f000 80d2 	beq.w	8009a0a <_printf_i+0x1c6>
 8009866:	2f58      	cmp	r7, #88	@ 0x58
 8009868:	f000 80b9 	beq.w	80099de <_printf_i+0x19a>
 800986c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009874:	e03a      	b.n	80098ec <_printf_i+0xa8>
 8009876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800987a:	2b15      	cmp	r3, #21
 800987c:	d8f6      	bhi.n	800986c <_printf_i+0x28>
 800987e:	a101      	add	r1, pc, #4	@ (adr r1, 8009884 <_printf_i+0x40>)
 8009880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009884:	080098dd 	.word	0x080098dd
 8009888:	080098f1 	.word	0x080098f1
 800988c:	0800986d 	.word	0x0800986d
 8009890:	0800986d 	.word	0x0800986d
 8009894:	0800986d 	.word	0x0800986d
 8009898:	0800986d 	.word	0x0800986d
 800989c:	080098f1 	.word	0x080098f1
 80098a0:	0800986d 	.word	0x0800986d
 80098a4:	0800986d 	.word	0x0800986d
 80098a8:	0800986d 	.word	0x0800986d
 80098ac:	0800986d 	.word	0x0800986d
 80098b0:	080099f1 	.word	0x080099f1
 80098b4:	0800991b 	.word	0x0800991b
 80098b8:	080099ab 	.word	0x080099ab
 80098bc:	0800986d 	.word	0x0800986d
 80098c0:	0800986d 	.word	0x0800986d
 80098c4:	08009a13 	.word	0x08009a13
 80098c8:	0800986d 	.word	0x0800986d
 80098cc:	0800991b 	.word	0x0800991b
 80098d0:	0800986d 	.word	0x0800986d
 80098d4:	0800986d 	.word	0x0800986d
 80098d8:	080099b3 	.word	0x080099b3
 80098dc:	6833      	ldr	r3, [r6, #0]
 80098de:	1d1a      	adds	r2, r3, #4
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6032      	str	r2, [r6, #0]
 80098e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098ec:	2301      	movs	r3, #1
 80098ee:	e09d      	b.n	8009a2c <_printf_i+0x1e8>
 80098f0:	6833      	ldr	r3, [r6, #0]
 80098f2:	6820      	ldr	r0, [r4, #0]
 80098f4:	1d19      	adds	r1, r3, #4
 80098f6:	6031      	str	r1, [r6, #0]
 80098f8:	0606      	lsls	r6, r0, #24
 80098fa:	d501      	bpl.n	8009900 <_printf_i+0xbc>
 80098fc:	681d      	ldr	r5, [r3, #0]
 80098fe:	e003      	b.n	8009908 <_printf_i+0xc4>
 8009900:	0645      	lsls	r5, r0, #25
 8009902:	d5fb      	bpl.n	80098fc <_printf_i+0xb8>
 8009904:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009908:	2d00      	cmp	r5, #0
 800990a:	da03      	bge.n	8009914 <_printf_i+0xd0>
 800990c:	232d      	movs	r3, #45	@ 0x2d
 800990e:	426d      	negs	r5, r5
 8009910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009914:	4859      	ldr	r0, [pc, #356]	@ (8009a7c <_printf_i+0x238>)
 8009916:	230a      	movs	r3, #10
 8009918:	e011      	b.n	800993e <_printf_i+0xfa>
 800991a:	6821      	ldr	r1, [r4, #0]
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	0608      	lsls	r0, r1, #24
 8009920:	f853 5b04 	ldr.w	r5, [r3], #4
 8009924:	d402      	bmi.n	800992c <_printf_i+0xe8>
 8009926:	0649      	lsls	r1, r1, #25
 8009928:	bf48      	it	mi
 800992a:	b2ad      	uxthmi	r5, r5
 800992c:	2f6f      	cmp	r7, #111	@ 0x6f
 800992e:	4853      	ldr	r0, [pc, #332]	@ (8009a7c <_printf_i+0x238>)
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	bf14      	ite	ne
 8009934:	230a      	movne	r3, #10
 8009936:	2308      	moveq	r3, #8
 8009938:	2100      	movs	r1, #0
 800993a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800993e:	6866      	ldr	r6, [r4, #4]
 8009940:	60a6      	str	r6, [r4, #8]
 8009942:	2e00      	cmp	r6, #0
 8009944:	bfa2      	ittt	ge
 8009946:	6821      	ldrge	r1, [r4, #0]
 8009948:	f021 0104 	bicge.w	r1, r1, #4
 800994c:	6021      	strge	r1, [r4, #0]
 800994e:	b90d      	cbnz	r5, 8009954 <_printf_i+0x110>
 8009950:	2e00      	cmp	r6, #0
 8009952:	d04b      	beq.n	80099ec <_printf_i+0x1a8>
 8009954:	4616      	mov	r6, r2
 8009956:	fbb5 f1f3 	udiv	r1, r5, r3
 800995a:	fb03 5711 	mls	r7, r3, r1, r5
 800995e:	5dc7      	ldrb	r7, [r0, r7]
 8009960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009964:	462f      	mov	r7, r5
 8009966:	42bb      	cmp	r3, r7
 8009968:	460d      	mov	r5, r1
 800996a:	d9f4      	bls.n	8009956 <_printf_i+0x112>
 800996c:	2b08      	cmp	r3, #8
 800996e:	d10b      	bne.n	8009988 <_printf_i+0x144>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	07df      	lsls	r7, r3, #31
 8009974:	d508      	bpl.n	8009988 <_printf_i+0x144>
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	6861      	ldr	r1, [r4, #4]
 800997a:	4299      	cmp	r1, r3
 800997c:	bfde      	ittt	le
 800997e:	2330      	movle	r3, #48	@ 0x30
 8009980:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009984:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009988:	1b92      	subs	r2, r2, r6
 800998a:	6122      	str	r2, [r4, #16]
 800998c:	f8cd a000 	str.w	sl, [sp]
 8009990:	464b      	mov	r3, r9
 8009992:	aa03      	add	r2, sp, #12
 8009994:	4621      	mov	r1, r4
 8009996:	4640      	mov	r0, r8
 8009998:	f7ff fee6 	bl	8009768 <_printf_common>
 800999c:	3001      	adds	r0, #1
 800999e:	d14a      	bne.n	8009a36 <_printf_i+0x1f2>
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295
 80099a4:	b004      	add	sp, #16
 80099a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	f043 0320 	orr.w	r3, r3, #32
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	4833      	ldr	r0, [pc, #204]	@ (8009a80 <_printf_i+0x23c>)
 80099b4:	2778      	movs	r7, #120	@ 0x78
 80099b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	6831      	ldr	r1, [r6, #0]
 80099be:	061f      	lsls	r7, r3, #24
 80099c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80099c4:	d402      	bmi.n	80099cc <_printf_i+0x188>
 80099c6:	065f      	lsls	r7, r3, #25
 80099c8:	bf48      	it	mi
 80099ca:	b2ad      	uxthmi	r5, r5
 80099cc:	6031      	str	r1, [r6, #0]
 80099ce:	07d9      	lsls	r1, r3, #31
 80099d0:	bf44      	itt	mi
 80099d2:	f043 0320 	orrmi.w	r3, r3, #32
 80099d6:	6023      	strmi	r3, [r4, #0]
 80099d8:	b11d      	cbz	r5, 80099e2 <_printf_i+0x19e>
 80099da:	2310      	movs	r3, #16
 80099dc:	e7ac      	b.n	8009938 <_printf_i+0xf4>
 80099de:	4827      	ldr	r0, [pc, #156]	@ (8009a7c <_printf_i+0x238>)
 80099e0:	e7e9      	b.n	80099b6 <_printf_i+0x172>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	f023 0320 	bic.w	r3, r3, #32
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	e7f6      	b.n	80099da <_printf_i+0x196>
 80099ec:	4616      	mov	r6, r2
 80099ee:	e7bd      	b.n	800996c <_printf_i+0x128>
 80099f0:	6833      	ldr	r3, [r6, #0]
 80099f2:	6825      	ldr	r5, [r4, #0]
 80099f4:	6961      	ldr	r1, [r4, #20]
 80099f6:	1d18      	adds	r0, r3, #4
 80099f8:	6030      	str	r0, [r6, #0]
 80099fa:	062e      	lsls	r6, r5, #24
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	d501      	bpl.n	8009a04 <_printf_i+0x1c0>
 8009a00:	6019      	str	r1, [r3, #0]
 8009a02:	e002      	b.n	8009a0a <_printf_i+0x1c6>
 8009a04:	0668      	lsls	r0, r5, #25
 8009a06:	d5fb      	bpl.n	8009a00 <_printf_i+0x1bc>
 8009a08:	8019      	strh	r1, [r3, #0]
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	4616      	mov	r6, r2
 8009a10:	e7bc      	b.n	800998c <_printf_i+0x148>
 8009a12:	6833      	ldr	r3, [r6, #0]
 8009a14:	1d1a      	adds	r2, r3, #4
 8009a16:	6032      	str	r2, [r6, #0]
 8009a18:	681e      	ldr	r6, [r3, #0]
 8009a1a:	6862      	ldr	r2, [r4, #4]
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f7f6 fc0e 	bl	8000240 <memchr>
 8009a24:	b108      	cbz	r0, 8009a2a <_printf_i+0x1e6>
 8009a26:	1b80      	subs	r0, r0, r6
 8009a28:	6060      	str	r0, [r4, #4]
 8009a2a:	6863      	ldr	r3, [r4, #4]
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a34:	e7aa      	b.n	800998c <_printf_i+0x148>
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	4632      	mov	r2, r6
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	47d0      	blx	sl
 8009a40:	3001      	adds	r0, #1
 8009a42:	d0ad      	beq.n	80099a0 <_printf_i+0x15c>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	079b      	lsls	r3, r3, #30
 8009a48:	d413      	bmi.n	8009a72 <_printf_i+0x22e>
 8009a4a:	68e0      	ldr	r0, [r4, #12]
 8009a4c:	9b03      	ldr	r3, [sp, #12]
 8009a4e:	4298      	cmp	r0, r3
 8009a50:	bfb8      	it	lt
 8009a52:	4618      	movlt	r0, r3
 8009a54:	e7a6      	b.n	80099a4 <_printf_i+0x160>
 8009a56:	2301      	movs	r3, #1
 8009a58:	4632      	mov	r2, r6
 8009a5a:	4649      	mov	r1, r9
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	47d0      	blx	sl
 8009a60:	3001      	adds	r0, #1
 8009a62:	d09d      	beq.n	80099a0 <_printf_i+0x15c>
 8009a64:	3501      	adds	r5, #1
 8009a66:	68e3      	ldr	r3, [r4, #12]
 8009a68:	9903      	ldr	r1, [sp, #12]
 8009a6a:	1a5b      	subs	r3, r3, r1
 8009a6c:	42ab      	cmp	r3, r5
 8009a6e:	dcf2      	bgt.n	8009a56 <_printf_i+0x212>
 8009a70:	e7eb      	b.n	8009a4a <_printf_i+0x206>
 8009a72:	2500      	movs	r5, #0
 8009a74:	f104 0619 	add.w	r6, r4, #25
 8009a78:	e7f5      	b.n	8009a66 <_printf_i+0x222>
 8009a7a:	bf00      	nop
 8009a7c:	0800aab1 	.word	0x0800aab1
 8009a80:	0800aac2 	.word	0x0800aac2

08009a84 <__sflush_r>:
 8009a84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8c:	0716      	lsls	r6, r2, #28
 8009a8e:	4605      	mov	r5, r0
 8009a90:	460c      	mov	r4, r1
 8009a92:	d454      	bmi.n	8009b3e <__sflush_r+0xba>
 8009a94:	684b      	ldr	r3, [r1, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	dc02      	bgt.n	8009aa0 <__sflush_r+0x1c>
 8009a9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dd48      	ble.n	8009b32 <__sflush_r+0xae>
 8009aa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009aa2:	2e00      	cmp	r6, #0
 8009aa4:	d045      	beq.n	8009b32 <__sflush_r+0xae>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009aac:	682f      	ldr	r7, [r5, #0]
 8009aae:	6a21      	ldr	r1, [r4, #32]
 8009ab0:	602b      	str	r3, [r5, #0]
 8009ab2:	d030      	beq.n	8009b16 <__sflush_r+0x92>
 8009ab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	0759      	lsls	r1, r3, #29
 8009aba:	d505      	bpl.n	8009ac8 <__sflush_r+0x44>
 8009abc:	6863      	ldr	r3, [r4, #4]
 8009abe:	1ad2      	subs	r2, r2, r3
 8009ac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ac2:	b10b      	cbz	r3, 8009ac8 <__sflush_r+0x44>
 8009ac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ac6:	1ad2      	subs	r2, r2, r3
 8009ac8:	2300      	movs	r3, #0
 8009aca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009acc:	6a21      	ldr	r1, [r4, #32]
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b0      	blx	r6
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	d106      	bne.n	8009ae6 <__sflush_r+0x62>
 8009ad8:	6829      	ldr	r1, [r5, #0]
 8009ada:	291d      	cmp	r1, #29
 8009adc:	d82b      	bhi.n	8009b36 <__sflush_r+0xb2>
 8009ade:	4a2a      	ldr	r2, [pc, #168]	@ (8009b88 <__sflush_r+0x104>)
 8009ae0:	410a      	asrs	r2, r1
 8009ae2:	07d6      	lsls	r6, r2, #31
 8009ae4:	d427      	bmi.n	8009b36 <__sflush_r+0xb2>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	6062      	str	r2, [r4, #4]
 8009aea:	04d9      	lsls	r1, r3, #19
 8009aec:	6922      	ldr	r2, [r4, #16]
 8009aee:	6022      	str	r2, [r4, #0]
 8009af0:	d504      	bpl.n	8009afc <__sflush_r+0x78>
 8009af2:	1c42      	adds	r2, r0, #1
 8009af4:	d101      	bne.n	8009afa <__sflush_r+0x76>
 8009af6:	682b      	ldr	r3, [r5, #0]
 8009af8:	b903      	cbnz	r3, 8009afc <__sflush_r+0x78>
 8009afa:	6560      	str	r0, [r4, #84]	@ 0x54
 8009afc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009afe:	602f      	str	r7, [r5, #0]
 8009b00:	b1b9      	cbz	r1, 8009b32 <__sflush_r+0xae>
 8009b02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b06:	4299      	cmp	r1, r3
 8009b08:	d002      	beq.n	8009b10 <__sflush_r+0x8c>
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f7fe fbd2 	bl	80082b4 <_free_r>
 8009b10:	2300      	movs	r3, #0
 8009b12:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b14:	e00d      	b.n	8009b32 <__sflush_r+0xae>
 8009b16:	2301      	movs	r3, #1
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b0      	blx	r6
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	1c50      	adds	r0, r2, #1
 8009b20:	d1c9      	bne.n	8009ab6 <__sflush_r+0x32>
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0c6      	beq.n	8009ab6 <__sflush_r+0x32>
 8009b28:	2b1d      	cmp	r3, #29
 8009b2a:	d001      	beq.n	8009b30 <__sflush_r+0xac>
 8009b2c:	2b16      	cmp	r3, #22
 8009b2e:	d11e      	bne.n	8009b6e <__sflush_r+0xea>
 8009b30:	602f      	str	r7, [r5, #0]
 8009b32:	2000      	movs	r0, #0
 8009b34:	e022      	b.n	8009b7c <__sflush_r+0xf8>
 8009b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b3a:	b21b      	sxth	r3, r3
 8009b3c:	e01b      	b.n	8009b76 <__sflush_r+0xf2>
 8009b3e:	690f      	ldr	r7, [r1, #16]
 8009b40:	2f00      	cmp	r7, #0
 8009b42:	d0f6      	beq.n	8009b32 <__sflush_r+0xae>
 8009b44:	0793      	lsls	r3, r2, #30
 8009b46:	680e      	ldr	r6, [r1, #0]
 8009b48:	bf08      	it	eq
 8009b4a:	694b      	ldreq	r3, [r1, #20]
 8009b4c:	600f      	str	r7, [r1, #0]
 8009b4e:	bf18      	it	ne
 8009b50:	2300      	movne	r3, #0
 8009b52:	eba6 0807 	sub.w	r8, r6, r7
 8009b56:	608b      	str	r3, [r1, #8]
 8009b58:	f1b8 0f00 	cmp.w	r8, #0
 8009b5c:	dde9      	ble.n	8009b32 <__sflush_r+0xae>
 8009b5e:	6a21      	ldr	r1, [r4, #32]
 8009b60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b62:	4643      	mov	r3, r8
 8009b64:	463a      	mov	r2, r7
 8009b66:	4628      	mov	r0, r5
 8009b68:	47b0      	blx	r6
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	dc08      	bgt.n	8009b80 <__sflush_r+0xfc>
 8009b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b80:	4407      	add	r7, r0
 8009b82:	eba8 0800 	sub.w	r8, r8, r0
 8009b86:	e7e7      	b.n	8009b58 <__sflush_r+0xd4>
 8009b88:	dfbffffe 	.word	0xdfbffffe

08009b8c <_fflush_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	690b      	ldr	r3, [r1, #16]
 8009b90:	4605      	mov	r5, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	b913      	cbnz	r3, 8009b9c <_fflush_r+0x10>
 8009b96:	2500      	movs	r5, #0
 8009b98:	4628      	mov	r0, r5
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	b118      	cbz	r0, 8009ba6 <_fflush_r+0x1a>
 8009b9e:	6a03      	ldr	r3, [r0, #32]
 8009ba0:	b90b      	cbnz	r3, 8009ba6 <_fflush_r+0x1a>
 8009ba2:	f7fe f9c1 	bl	8007f28 <__sinit>
 8009ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0f3      	beq.n	8009b96 <_fflush_r+0xa>
 8009bae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bb0:	07d0      	lsls	r0, r2, #31
 8009bb2:	d404      	bmi.n	8009bbe <_fflush_r+0x32>
 8009bb4:	0599      	lsls	r1, r3, #22
 8009bb6:	d402      	bmi.n	8009bbe <_fflush_r+0x32>
 8009bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bba:	f7fe fb52 	bl	8008262 <__retarget_lock_acquire_recursive>
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	f7ff ff5f 	bl	8009a84 <__sflush_r>
 8009bc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bc8:	07da      	lsls	r2, r3, #31
 8009bca:	4605      	mov	r5, r0
 8009bcc:	d4e4      	bmi.n	8009b98 <_fflush_r+0xc>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	059b      	lsls	r3, r3, #22
 8009bd2:	d4e1      	bmi.n	8009b98 <_fflush_r+0xc>
 8009bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bd6:	f7fe fb45 	bl	8008264 <__retarget_lock_release_recursive>
 8009bda:	e7dd      	b.n	8009b98 <_fflush_r+0xc>

08009bdc <memmove>:
 8009bdc:	4288      	cmp	r0, r1
 8009bde:	b510      	push	{r4, lr}
 8009be0:	eb01 0402 	add.w	r4, r1, r2
 8009be4:	d902      	bls.n	8009bec <memmove+0x10>
 8009be6:	4284      	cmp	r4, r0
 8009be8:	4623      	mov	r3, r4
 8009bea:	d807      	bhi.n	8009bfc <memmove+0x20>
 8009bec:	1e43      	subs	r3, r0, #1
 8009bee:	42a1      	cmp	r1, r4
 8009bf0:	d008      	beq.n	8009c04 <memmove+0x28>
 8009bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bfa:	e7f8      	b.n	8009bee <memmove+0x12>
 8009bfc:	4402      	add	r2, r0
 8009bfe:	4601      	mov	r1, r0
 8009c00:	428a      	cmp	r2, r1
 8009c02:	d100      	bne.n	8009c06 <memmove+0x2a>
 8009c04:	bd10      	pop	{r4, pc}
 8009c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c0e:	e7f7      	b.n	8009c00 <memmove+0x24>

08009c10 <_sbrk_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d06      	ldr	r5, [pc, #24]	@ (8009c2c <_sbrk_r+0x1c>)
 8009c14:	2300      	movs	r3, #0
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7f9 ff04 	bl	8003a28 <_sbrk>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_sbrk_r+0x1a>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_sbrk_r+0x1a>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	20002e38 	.word	0x20002e38

08009c30 <__assert_func>:
 8009c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c32:	4614      	mov	r4, r2
 8009c34:	461a      	mov	r2, r3
 8009c36:	4b09      	ldr	r3, [pc, #36]	@ (8009c5c <__assert_func+0x2c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	68d8      	ldr	r0, [r3, #12]
 8009c3e:	b954      	cbnz	r4, 8009c56 <__assert_func+0x26>
 8009c40:	4b07      	ldr	r3, [pc, #28]	@ (8009c60 <__assert_func+0x30>)
 8009c42:	461c      	mov	r4, r3
 8009c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c48:	9100      	str	r1, [sp, #0]
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	4905      	ldr	r1, [pc, #20]	@ (8009c64 <__assert_func+0x34>)
 8009c4e:	f000 f857 	bl	8009d00 <fiprintf>
 8009c52:	f000 f867 	bl	8009d24 <abort>
 8009c56:	4b04      	ldr	r3, [pc, #16]	@ (8009c68 <__assert_func+0x38>)
 8009c58:	e7f4      	b.n	8009c44 <__assert_func+0x14>
 8009c5a:	bf00      	nop
 8009c5c:	20000190 	.word	0x20000190
 8009c60:	0800ab0e 	.word	0x0800ab0e
 8009c64:	0800aae0 	.word	0x0800aae0
 8009c68:	0800aad3 	.word	0x0800aad3

08009c6c <_calloc_r>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	fba1 5402 	umull	r5, r4, r1, r2
 8009c72:	b93c      	cbnz	r4, 8009c84 <_calloc_r+0x18>
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7fe fec3 	bl	8008a00 <_malloc_r>
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	b928      	cbnz	r0, 8009c8a <_calloc_r+0x1e>
 8009c7e:	2600      	movs	r6, #0
 8009c80:	4630      	mov	r0, r6
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	220c      	movs	r2, #12
 8009c86:	6002      	str	r2, [r0, #0]
 8009c88:	e7f9      	b.n	8009c7e <_calloc_r+0x12>
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	f7fe fa31 	bl	80080f4 <memset>
 8009c92:	e7f5      	b.n	8009c80 <_calloc_r+0x14>

08009c94 <malloc>:
 8009c94:	4b02      	ldr	r3, [pc, #8]	@ (8009ca0 <malloc+0xc>)
 8009c96:	4601      	mov	r1, r0
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	f7fe beb1 	b.w	8008a00 <_malloc_r>
 8009c9e:	bf00      	nop
 8009ca0:	20000190 	.word	0x20000190

08009ca4 <_realloc_r>:
 8009ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca8:	4680      	mov	r8, r0
 8009caa:	4615      	mov	r5, r2
 8009cac:	460c      	mov	r4, r1
 8009cae:	b921      	cbnz	r1, 8009cba <_realloc_r+0x16>
 8009cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	f7fe bea3 	b.w	8008a00 <_malloc_r>
 8009cba:	b92a      	cbnz	r2, 8009cc8 <_realloc_r+0x24>
 8009cbc:	f7fe fafa 	bl	80082b4 <_free_r>
 8009cc0:	2400      	movs	r4, #0
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc8:	f000 f833 	bl	8009d32 <_malloc_usable_size_r>
 8009ccc:	4285      	cmp	r5, r0
 8009cce:	4606      	mov	r6, r0
 8009cd0:	d802      	bhi.n	8009cd8 <_realloc_r+0x34>
 8009cd2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009cd6:	d8f4      	bhi.n	8009cc2 <_realloc_r+0x1e>
 8009cd8:	4629      	mov	r1, r5
 8009cda:	4640      	mov	r0, r8
 8009cdc:	f7fe fe90 	bl	8008a00 <_malloc_r>
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d0ec      	beq.n	8009cc0 <_realloc_r+0x1c>
 8009ce6:	42b5      	cmp	r5, r6
 8009ce8:	462a      	mov	r2, r5
 8009cea:	4621      	mov	r1, r4
 8009cec:	bf28      	it	cs
 8009cee:	4632      	movcs	r2, r6
 8009cf0:	f7fe fac1 	bl	8008276 <memcpy>
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	f7fe fadc 	bl	80082b4 <_free_r>
 8009cfc:	463c      	mov	r4, r7
 8009cfe:	e7e0      	b.n	8009cc2 <_realloc_r+0x1e>

08009d00 <fiprintf>:
 8009d00:	b40e      	push	{r1, r2, r3}
 8009d02:	b503      	push	{r0, r1, lr}
 8009d04:	4601      	mov	r1, r0
 8009d06:	ab03      	add	r3, sp, #12
 8009d08:	4805      	ldr	r0, [pc, #20]	@ (8009d20 <fiprintf+0x20>)
 8009d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d0e:	6800      	ldr	r0, [r0, #0]
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	f000 f83f 	bl	8009d94 <_vfiprintf_r>
 8009d16:	b002      	add	sp, #8
 8009d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d1c:	b003      	add	sp, #12
 8009d1e:	4770      	bx	lr
 8009d20:	20000190 	.word	0x20000190

08009d24 <abort>:
 8009d24:	b508      	push	{r3, lr}
 8009d26:	2006      	movs	r0, #6
 8009d28:	f000 fa08 	bl	800a13c <raise>
 8009d2c:	2001      	movs	r0, #1
 8009d2e:	f7f9 fe03 	bl	8003938 <_exit>

08009d32 <_malloc_usable_size_r>:
 8009d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d36:	1f18      	subs	r0, r3, #4
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfbc      	itt	lt
 8009d3c:	580b      	ldrlt	r3, [r1, r0]
 8009d3e:	18c0      	addlt	r0, r0, r3
 8009d40:	4770      	bx	lr

08009d42 <__sfputc_r>:
 8009d42:	6893      	ldr	r3, [r2, #8]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	b410      	push	{r4}
 8009d4a:	6093      	str	r3, [r2, #8]
 8009d4c:	da08      	bge.n	8009d60 <__sfputc_r+0x1e>
 8009d4e:	6994      	ldr	r4, [r2, #24]
 8009d50:	42a3      	cmp	r3, r4
 8009d52:	db01      	blt.n	8009d58 <__sfputc_r+0x16>
 8009d54:	290a      	cmp	r1, #10
 8009d56:	d103      	bne.n	8009d60 <__sfputc_r+0x1e>
 8009d58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d5c:	f000 b932 	b.w	8009fc4 <__swbuf_r>
 8009d60:	6813      	ldr	r3, [r2, #0]
 8009d62:	1c58      	adds	r0, r3, #1
 8009d64:	6010      	str	r0, [r2, #0]
 8009d66:	7019      	strb	r1, [r3, #0]
 8009d68:	4608      	mov	r0, r1
 8009d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <__sfputs_r>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	4606      	mov	r6, r0
 8009d74:	460f      	mov	r7, r1
 8009d76:	4614      	mov	r4, r2
 8009d78:	18d5      	adds	r5, r2, r3
 8009d7a:	42ac      	cmp	r4, r5
 8009d7c:	d101      	bne.n	8009d82 <__sfputs_r+0x12>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e007      	b.n	8009d92 <__sfputs_r+0x22>
 8009d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d86:	463a      	mov	r2, r7
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7ff ffda 	bl	8009d42 <__sfputc_r>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	d1f3      	bne.n	8009d7a <__sfputs_r+0xa>
 8009d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d94 <_vfiprintf_r>:
 8009d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d98:	460d      	mov	r5, r1
 8009d9a:	b09d      	sub	sp, #116	@ 0x74
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	4698      	mov	r8, r3
 8009da0:	4606      	mov	r6, r0
 8009da2:	b118      	cbz	r0, 8009dac <_vfiprintf_r+0x18>
 8009da4:	6a03      	ldr	r3, [r0, #32]
 8009da6:	b90b      	cbnz	r3, 8009dac <_vfiprintf_r+0x18>
 8009da8:	f7fe f8be 	bl	8007f28 <__sinit>
 8009dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dae:	07d9      	lsls	r1, r3, #31
 8009db0:	d405      	bmi.n	8009dbe <_vfiprintf_r+0x2a>
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	059a      	lsls	r2, r3, #22
 8009db6:	d402      	bmi.n	8009dbe <_vfiprintf_r+0x2a>
 8009db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dba:	f7fe fa52 	bl	8008262 <__retarget_lock_acquire_recursive>
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	071b      	lsls	r3, r3, #28
 8009dc2:	d501      	bpl.n	8009dc8 <_vfiprintf_r+0x34>
 8009dc4:	692b      	ldr	r3, [r5, #16]
 8009dc6:	b99b      	cbnz	r3, 8009df0 <_vfiprintf_r+0x5c>
 8009dc8:	4629      	mov	r1, r5
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f000 f938 	bl	800a040 <__swsetup_r>
 8009dd0:	b170      	cbz	r0, 8009df0 <_vfiprintf_r+0x5c>
 8009dd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dd4:	07dc      	lsls	r4, r3, #31
 8009dd6:	d504      	bpl.n	8009de2 <_vfiprintf_r+0x4e>
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	b01d      	add	sp, #116	@ 0x74
 8009dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de2:	89ab      	ldrh	r3, [r5, #12]
 8009de4:	0598      	lsls	r0, r3, #22
 8009de6:	d4f7      	bmi.n	8009dd8 <_vfiprintf_r+0x44>
 8009de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dea:	f7fe fa3b 	bl	8008264 <__retarget_lock_release_recursive>
 8009dee:	e7f3      	b.n	8009dd8 <_vfiprintf_r+0x44>
 8009df0:	2300      	movs	r3, #0
 8009df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009df4:	2320      	movs	r3, #32
 8009df6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dfe:	2330      	movs	r3, #48	@ 0x30
 8009e00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fb0 <_vfiprintf_r+0x21c>
 8009e04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e08:	f04f 0901 	mov.w	r9, #1
 8009e0c:	4623      	mov	r3, r4
 8009e0e:	469a      	mov	sl, r3
 8009e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e14:	b10a      	cbz	r2, 8009e1a <_vfiprintf_r+0x86>
 8009e16:	2a25      	cmp	r2, #37	@ 0x25
 8009e18:	d1f9      	bne.n	8009e0e <_vfiprintf_r+0x7a>
 8009e1a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e1e:	d00b      	beq.n	8009e38 <_vfiprintf_r+0xa4>
 8009e20:	465b      	mov	r3, fp
 8009e22:	4622      	mov	r2, r4
 8009e24:	4629      	mov	r1, r5
 8009e26:	4630      	mov	r0, r6
 8009e28:	f7ff ffa2 	bl	8009d70 <__sfputs_r>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f000 80a7 	beq.w	8009f80 <_vfiprintf_r+0x1ec>
 8009e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e34:	445a      	add	r2, fp
 8009e36:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e38:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 809f 	beq.w	8009f80 <_vfiprintf_r+0x1ec>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e4c:	f10a 0a01 	add.w	sl, sl, #1
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	9307      	str	r3, [sp, #28]
 8009e54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e58:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e5a:	4654      	mov	r4, sl
 8009e5c:	2205      	movs	r2, #5
 8009e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e62:	4853      	ldr	r0, [pc, #332]	@ (8009fb0 <_vfiprintf_r+0x21c>)
 8009e64:	f7f6 f9ec 	bl	8000240 <memchr>
 8009e68:	9a04      	ldr	r2, [sp, #16]
 8009e6a:	b9d8      	cbnz	r0, 8009ea4 <_vfiprintf_r+0x110>
 8009e6c:	06d1      	lsls	r1, r2, #27
 8009e6e:	bf44      	itt	mi
 8009e70:	2320      	movmi	r3, #32
 8009e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e76:	0713      	lsls	r3, r2, #28
 8009e78:	bf44      	itt	mi
 8009e7a:	232b      	movmi	r3, #43	@ 0x2b
 8009e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e80:	f89a 3000 	ldrb.w	r3, [sl]
 8009e84:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e86:	d015      	beq.n	8009eb4 <_vfiprintf_r+0x120>
 8009e88:	9a07      	ldr	r2, [sp, #28]
 8009e8a:	4654      	mov	r4, sl
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	f04f 0c0a 	mov.w	ip, #10
 8009e92:	4621      	mov	r1, r4
 8009e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e98:	3b30      	subs	r3, #48	@ 0x30
 8009e9a:	2b09      	cmp	r3, #9
 8009e9c:	d94b      	bls.n	8009f36 <_vfiprintf_r+0x1a2>
 8009e9e:	b1b0      	cbz	r0, 8009ece <_vfiprintf_r+0x13a>
 8009ea0:	9207      	str	r2, [sp, #28]
 8009ea2:	e014      	b.n	8009ece <_vfiprintf_r+0x13a>
 8009ea4:	eba0 0308 	sub.w	r3, r0, r8
 8009ea8:	fa09 f303 	lsl.w	r3, r9, r3
 8009eac:	4313      	orrs	r3, r2
 8009eae:	9304      	str	r3, [sp, #16]
 8009eb0:	46a2      	mov	sl, r4
 8009eb2:	e7d2      	b.n	8009e5a <_vfiprintf_r+0xc6>
 8009eb4:	9b03      	ldr	r3, [sp, #12]
 8009eb6:	1d19      	adds	r1, r3, #4
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	9103      	str	r1, [sp, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	bfbb      	ittet	lt
 8009ec0:	425b      	neglt	r3, r3
 8009ec2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec6:	9307      	strge	r3, [sp, #28]
 8009ec8:	9307      	strlt	r3, [sp, #28]
 8009eca:	bfb8      	it	lt
 8009ecc:	9204      	strlt	r2, [sp, #16]
 8009ece:	7823      	ldrb	r3, [r4, #0]
 8009ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ed2:	d10a      	bne.n	8009eea <_vfiprintf_r+0x156>
 8009ed4:	7863      	ldrb	r3, [r4, #1]
 8009ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ed8:	d132      	bne.n	8009f40 <_vfiprintf_r+0x1ac>
 8009eda:	9b03      	ldr	r3, [sp, #12]
 8009edc:	1d1a      	adds	r2, r3, #4
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	9203      	str	r2, [sp, #12]
 8009ee2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ee6:	3402      	adds	r4, #2
 8009ee8:	9305      	str	r3, [sp, #20]
 8009eea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fc0 <_vfiprintf_r+0x22c>
 8009eee:	7821      	ldrb	r1, [r4, #0]
 8009ef0:	2203      	movs	r2, #3
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	f7f6 f9a4 	bl	8000240 <memchr>
 8009ef8:	b138      	cbz	r0, 8009f0a <_vfiprintf_r+0x176>
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	eba0 000a 	sub.w	r0, r0, sl
 8009f00:	2240      	movs	r2, #64	@ 0x40
 8009f02:	4082      	lsls	r2, r0
 8009f04:	4313      	orrs	r3, r2
 8009f06:	3401      	adds	r4, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	4829      	ldr	r0, [pc, #164]	@ (8009fb4 <_vfiprintf_r+0x220>)
 8009f10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f14:	2206      	movs	r2, #6
 8009f16:	f7f6 f993 	bl	8000240 <memchr>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d03f      	beq.n	8009f9e <_vfiprintf_r+0x20a>
 8009f1e:	4b26      	ldr	r3, [pc, #152]	@ (8009fb8 <_vfiprintf_r+0x224>)
 8009f20:	bb1b      	cbnz	r3, 8009f6a <_vfiprintf_r+0x1d6>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	3307      	adds	r3, #7
 8009f26:	f023 0307 	bic.w	r3, r3, #7
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f30:	443b      	add	r3, r7
 8009f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f34:	e76a      	b.n	8009e0c <_vfiprintf_r+0x78>
 8009f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	e7a8      	b.n	8009e92 <_vfiprintf_r+0xfe>
 8009f40:	2300      	movs	r3, #0
 8009f42:	3401      	adds	r4, #1
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	4619      	mov	r1, r3
 8009f48:	f04f 0c0a 	mov.w	ip, #10
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f52:	3a30      	subs	r2, #48	@ 0x30
 8009f54:	2a09      	cmp	r2, #9
 8009f56:	d903      	bls.n	8009f60 <_vfiprintf_r+0x1cc>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0c6      	beq.n	8009eea <_vfiprintf_r+0x156>
 8009f5c:	9105      	str	r1, [sp, #20]
 8009f5e:	e7c4      	b.n	8009eea <_vfiprintf_r+0x156>
 8009f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f64:	4604      	mov	r4, r0
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7f0      	b.n	8009f4c <_vfiprintf_r+0x1b8>
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4b12      	ldr	r3, [pc, #72]	@ (8009fbc <_vfiprintf_r+0x228>)
 8009f72:	a904      	add	r1, sp, #16
 8009f74:	4630      	mov	r0, r6
 8009f76:	f3af 8000 	nop.w
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	1c78      	adds	r0, r7, #1
 8009f7e:	d1d6      	bne.n	8009f2e <_vfiprintf_r+0x19a>
 8009f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f82:	07d9      	lsls	r1, r3, #31
 8009f84:	d405      	bmi.n	8009f92 <_vfiprintf_r+0x1fe>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	059a      	lsls	r2, r3, #22
 8009f8a:	d402      	bmi.n	8009f92 <_vfiprintf_r+0x1fe>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f8e:	f7fe f969 	bl	8008264 <__retarget_lock_release_recursive>
 8009f92:	89ab      	ldrh	r3, [r5, #12]
 8009f94:	065b      	lsls	r3, r3, #25
 8009f96:	f53f af1f 	bmi.w	8009dd8 <_vfiprintf_r+0x44>
 8009f9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f9c:	e71e      	b.n	8009ddc <_vfiprintf_r+0x48>
 8009f9e:	ab03      	add	r3, sp, #12
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	4b05      	ldr	r3, [pc, #20]	@ (8009fbc <_vfiprintf_r+0x228>)
 8009fa6:	a904      	add	r1, sp, #16
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff fc4b 	bl	8009844 <_printf_i>
 8009fae:	e7e4      	b.n	8009f7a <_vfiprintf_r+0x1e6>
 8009fb0:	0800aaa0 	.word	0x0800aaa0
 8009fb4:	0800aaaa 	.word	0x0800aaaa
 8009fb8:	00000000 	.word	0x00000000
 8009fbc:	08009d71 	.word	0x08009d71
 8009fc0:	0800aaa6 	.word	0x0800aaa6

08009fc4 <__swbuf_r>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	460e      	mov	r6, r1
 8009fc8:	4614      	mov	r4, r2
 8009fca:	4605      	mov	r5, r0
 8009fcc:	b118      	cbz	r0, 8009fd6 <__swbuf_r+0x12>
 8009fce:	6a03      	ldr	r3, [r0, #32]
 8009fd0:	b90b      	cbnz	r3, 8009fd6 <__swbuf_r+0x12>
 8009fd2:	f7fd ffa9 	bl	8007f28 <__sinit>
 8009fd6:	69a3      	ldr	r3, [r4, #24]
 8009fd8:	60a3      	str	r3, [r4, #8]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	071a      	lsls	r2, r3, #28
 8009fde:	d501      	bpl.n	8009fe4 <__swbuf_r+0x20>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	b943      	cbnz	r3, 8009ff6 <__swbuf_r+0x32>
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 f82a 	bl	800a040 <__swsetup_r>
 8009fec:	b118      	cbz	r0, 8009ff6 <__swbuf_r+0x32>
 8009fee:	f04f 37ff 	mov.w	r7, #4294967295
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	6922      	ldr	r2, [r4, #16]
 8009ffa:	1a98      	subs	r0, r3, r2
 8009ffc:	6963      	ldr	r3, [r4, #20]
 8009ffe:	b2f6      	uxtb	r6, r6
 800a000:	4283      	cmp	r3, r0
 800a002:	4637      	mov	r7, r6
 800a004:	dc05      	bgt.n	800a012 <__swbuf_r+0x4e>
 800a006:	4621      	mov	r1, r4
 800a008:	4628      	mov	r0, r5
 800a00a:	f7ff fdbf 	bl	8009b8c <_fflush_r>
 800a00e:	2800      	cmp	r0, #0
 800a010:	d1ed      	bne.n	8009fee <__swbuf_r+0x2a>
 800a012:	68a3      	ldr	r3, [r4, #8]
 800a014:	3b01      	subs	r3, #1
 800a016:	60a3      	str	r3, [r4, #8]
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	1c5a      	adds	r2, r3, #1
 800a01c:	6022      	str	r2, [r4, #0]
 800a01e:	701e      	strb	r6, [r3, #0]
 800a020:	6962      	ldr	r2, [r4, #20]
 800a022:	1c43      	adds	r3, r0, #1
 800a024:	429a      	cmp	r2, r3
 800a026:	d004      	beq.n	800a032 <__swbuf_r+0x6e>
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	07db      	lsls	r3, r3, #31
 800a02c:	d5e1      	bpl.n	8009ff2 <__swbuf_r+0x2e>
 800a02e:	2e0a      	cmp	r6, #10
 800a030:	d1df      	bne.n	8009ff2 <__swbuf_r+0x2e>
 800a032:	4621      	mov	r1, r4
 800a034:	4628      	mov	r0, r5
 800a036:	f7ff fda9 	bl	8009b8c <_fflush_r>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d0d9      	beq.n	8009ff2 <__swbuf_r+0x2e>
 800a03e:	e7d6      	b.n	8009fee <__swbuf_r+0x2a>

0800a040 <__swsetup_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4b29      	ldr	r3, [pc, #164]	@ (800a0e8 <__swsetup_r+0xa8>)
 800a044:	4605      	mov	r5, r0
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	460c      	mov	r4, r1
 800a04a:	b118      	cbz	r0, 800a054 <__swsetup_r+0x14>
 800a04c:	6a03      	ldr	r3, [r0, #32]
 800a04e:	b90b      	cbnz	r3, 800a054 <__swsetup_r+0x14>
 800a050:	f7fd ff6a 	bl	8007f28 <__sinit>
 800a054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a058:	0719      	lsls	r1, r3, #28
 800a05a:	d422      	bmi.n	800a0a2 <__swsetup_r+0x62>
 800a05c:	06da      	lsls	r2, r3, #27
 800a05e:	d407      	bmi.n	800a070 <__swsetup_r+0x30>
 800a060:	2209      	movs	r2, #9
 800a062:	602a      	str	r2, [r5, #0]
 800a064:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a068:	81a3      	strh	r3, [r4, #12]
 800a06a:	f04f 30ff 	mov.w	r0, #4294967295
 800a06e:	e033      	b.n	800a0d8 <__swsetup_r+0x98>
 800a070:	0758      	lsls	r0, r3, #29
 800a072:	d512      	bpl.n	800a09a <__swsetup_r+0x5a>
 800a074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a076:	b141      	cbz	r1, 800a08a <__swsetup_r+0x4a>
 800a078:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d002      	beq.n	800a086 <__swsetup_r+0x46>
 800a080:	4628      	mov	r0, r5
 800a082:	f7fe f917 	bl	80082b4 <_free_r>
 800a086:	2300      	movs	r3, #0
 800a088:	6363      	str	r3, [r4, #52]	@ 0x34
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	2300      	movs	r3, #0
 800a094:	6063      	str	r3, [r4, #4]
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	f043 0308 	orr.w	r3, r3, #8
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	6923      	ldr	r3, [r4, #16]
 800a0a4:	b94b      	cbnz	r3, 800a0ba <__swsetup_r+0x7a>
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0b0:	d003      	beq.n	800a0ba <__swsetup_r+0x7a>
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f000 f883 	bl	800a1c0 <__smakebuf_r>
 800a0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0be:	f013 0201 	ands.w	r2, r3, #1
 800a0c2:	d00a      	beq.n	800a0da <__swsetup_r+0x9a>
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	60a2      	str	r2, [r4, #8]
 800a0c8:	6962      	ldr	r2, [r4, #20]
 800a0ca:	4252      	negs	r2, r2
 800a0cc:	61a2      	str	r2, [r4, #24]
 800a0ce:	6922      	ldr	r2, [r4, #16]
 800a0d0:	b942      	cbnz	r2, 800a0e4 <__swsetup_r+0xa4>
 800a0d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a0d6:	d1c5      	bne.n	800a064 <__swsetup_r+0x24>
 800a0d8:	bd38      	pop	{r3, r4, r5, pc}
 800a0da:	0799      	lsls	r1, r3, #30
 800a0dc:	bf58      	it	pl
 800a0de:	6962      	ldrpl	r2, [r4, #20]
 800a0e0:	60a2      	str	r2, [r4, #8]
 800a0e2:	e7f4      	b.n	800a0ce <__swsetup_r+0x8e>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e7f7      	b.n	800a0d8 <__swsetup_r+0x98>
 800a0e8:	20000190 	.word	0x20000190

0800a0ec <_raise_r>:
 800a0ec:	291f      	cmp	r1, #31
 800a0ee:	b538      	push	{r3, r4, r5, lr}
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	d904      	bls.n	800a100 <_raise_r+0x14>
 800a0f6:	2316      	movs	r3, #22
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a102:	b112      	cbz	r2, 800a10a <_raise_r+0x1e>
 800a104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a108:	b94b      	cbnz	r3, 800a11e <_raise_r+0x32>
 800a10a:	4628      	mov	r0, r5
 800a10c:	f000 f830 	bl	800a170 <_getpid_r>
 800a110:	4622      	mov	r2, r4
 800a112:	4601      	mov	r1, r0
 800a114:	4628      	mov	r0, r5
 800a116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a11a:	f000 b817 	b.w	800a14c <_kill_r>
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d00a      	beq.n	800a138 <_raise_r+0x4c>
 800a122:	1c59      	adds	r1, r3, #1
 800a124:	d103      	bne.n	800a12e <_raise_r+0x42>
 800a126:	2316      	movs	r3, #22
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	2001      	movs	r0, #1
 800a12c:	e7e7      	b.n	800a0fe <_raise_r+0x12>
 800a12e:	2100      	movs	r1, #0
 800a130:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a134:	4620      	mov	r0, r4
 800a136:	4798      	blx	r3
 800a138:	2000      	movs	r0, #0
 800a13a:	e7e0      	b.n	800a0fe <_raise_r+0x12>

0800a13c <raise>:
 800a13c:	4b02      	ldr	r3, [pc, #8]	@ (800a148 <raise+0xc>)
 800a13e:	4601      	mov	r1, r0
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	f7ff bfd3 	b.w	800a0ec <_raise_r>
 800a146:	bf00      	nop
 800a148:	20000190 	.word	0x20000190

0800a14c <_kill_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	@ (800a16c <_kill_r+0x20>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	4611      	mov	r1, r2
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	f7f9 fbdd 	bl	8003918 <_kill>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d102      	bne.n	800a168 <_kill_r+0x1c>
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	b103      	cbz	r3, 800a168 <_kill_r+0x1c>
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	bd38      	pop	{r3, r4, r5, pc}
 800a16a:	bf00      	nop
 800a16c:	20002e38 	.word	0x20002e38

0800a170 <_getpid_r>:
 800a170:	f7f9 bbca 	b.w	8003908 <_getpid>

0800a174 <__swhatbuf_r>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	460c      	mov	r4, r1
 800a178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a17c:	2900      	cmp	r1, #0
 800a17e:	b096      	sub	sp, #88	@ 0x58
 800a180:	4615      	mov	r5, r2
 800a182:	461e      	mov	r6, r3
 800a184:	da0d      	bge.n	800a1a2 <__swhatbuf_r+0x2e>
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a18c:	f04f 0100 	mov.w	r1, #0
 800a190:	bf14      	ite	ne
 800a192:	2340      	movne	r3, #64	@ 0x40
 800a194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a198:	2000      	movs	r0, #0
 800a19a:	6031      	str	r1, [r6, #0]
 800a19c:	602b      	str	r3, [r5, #0]
 800a19e:	b016      	add	sp, #88	@ 0x58
 800a1a0:	bd70      	pop	{r4, r5, r6, pc}
 800a1a2:	466a      	mov	r2, sp
 800a1a4:	f000 f848 	bl	800a238 <_fstat_r>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	dbec      	blt.n	800a186 <__swhatbuf_r+0x12>
 800a1ac:	9901      	ldr	r1, [sp, #4]
 800a1ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1b6:	4259      	negs	r1, r3
 800a1b8:	4159      	adcs	r1, r3
 800a1ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1be:	e7eb      	b.n	800a198 <__swhatbuf_r+0x24>

0800a1c0 <__smakebuf_r>:
 800a1c0:	898b      	ldrh	r3, [r1, #12]
 800a1c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1c4:	079d      	lsls	r5, r3, #30
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	d507      	bpl.n	800a1dc <__smakebuf_r+0x1c>
 800a1cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	6123      	str	r3, [r4, #16]
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	6163      	str	r3, [r4, #20]
 800a1d8:	b003      	add	sp, #12
 800a1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1dc:	ab01      	add	r3, sp, #4
 800a1de:	466a      	mov	r2, sp
 800a1e0:	f7ff ffc8 	bl	800a174 <__swhatbuf_r>
 800a1e4:	9f00      	ldr	r7, [sp, #0]
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7fe fc08 	bl	8008a00 <_malloc_r>
 800a1f0:	b948      	cbnz	r0, 800a206 <__smakebuf_r+0x46>
 800a1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f6:	059a      	lsls	r2, r3, #22
 800a1f8:	d4ee      	bmi.n	800a1d8 <__smakebuf_r+0x18>
 800a1fa:	f023 0303 	bic.w	r3, r3, #3
 800a1fe:	f043 0302 	orr.w	r3, r3, #2
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	e7e2      	b.n	800a1cc <__smakebuf_r+0xc>
 800a206:	89a3      	ldrh	r3, [r4, #12]
 800a208:	6020      	str	r0, [r4, #0]
 800a20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a20e:	81a3      	strh	r3, [r4, #12]
 800a210:	9b01      	ldr	r3, [sp, #4]
 800a212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a216:	b15b      	cbz	r3, 800a230 <__smakebuf_r+0x70>
 800a218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a21c:	4630      	mov	r0, r6
 800a21e:	f000 f81d 	bl	800a25c <_isatty_r>
 800a222:	b128      	cbz	r0, 800a230 <__smakebuf_r+0x70>
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	f043 0301 	orr.w	r3, r3, #1
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	431d      	orrs	r5, r3
 800a234:	81a5      	strh	r5, [r4, #12]
 800a236:	e7cf      	b.n	800a1d8 <__smakebuf_r+0x18>

0800a238 <_fstat_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d07      	ldr	r5, [pc, #28]	@ (800a258 <_fstat_r+0x20>)
 800a23c:	2300      	movs	r3, #0
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	4611      	mov	r1, r2
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	f7f9 fbc7 	bl	80039d8 <_fstat>
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	d102      	bne.n	800a254 <_fstat_r+0x1c>
 800a24e:	682b      	ldr	r3, [r5, #0]
 800a250:	b103      	cbz	r3, 800a254 <_fstat_r+0x1c>
 800a252:	6023      	str	r3, [r4, #0]
 800a254:	bd38      	pop	{r3, r4, r5, pc}
 800a256:	bf00      	nop
 800a258:	20002e38 	.word	0x20002e38

0800a25c <_isatty_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d06      	ldr	r5, [pc, #24]	@ (800a278 <_isatty_r+0x1c>)
 800a260:	2300      	movs	r3, #0
 800a262:	4604      	mov	r4, r0
 800a264:	4608      	mov	r0, r1
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	f7f9 fbc6 	bl	80039f8 <_isatty>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_isatty_r+0x1a>
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	b103      	cbz	r3, 800a276 <_isatty_r+0x1a>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	20002e38 	.word	0x20002e38

0800a27c <_init>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	bf00      	nop
 800a280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a282:	bc08      	pop	{r3}
 800a284:	469e      	mov	lr, r3
 800a286:	4770      	bx	lr

0800a288 <_fini>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	bf00      	nop
 800a28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28e:	bc08      	pop	{r3}
 800a290:	469e      	mov	lr, r3
 800a292:	4770      	bx	lr
