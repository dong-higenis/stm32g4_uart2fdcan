
uart2fdcan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c73c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f88  0800c920  0800c920  0000d920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8a8  0800d8a8  0000fa40  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8a8  0800d8a8  0000e8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8b0  0800d8b0  0000fa40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8b0  0800d8b0  0000e8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8b4  0800d8b4  0000e8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800d8b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .non_cache    00000858  200001e8  0800daa0  0000f1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002de8  20000a40  0800e2f8  0000fa40  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003828  0800e2f8  00010828  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000fa40  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001520b  00000000  00000000  0000fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037d4  00000000  00000000  00024c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00028450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8e  00000000  00000000  00029608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fc1  00000000  00000000  0002a396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bda  00000000  00000000  0004b357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf553  00000000  00000000  00063f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00123484  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bb0  00000000  00000000  001234c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00129078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a40 	.word	0x20000a40
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c904 	.word	0x0800c904

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a44 	.word	0x20000a44
 800021c:	0800c904 	.word	0x0800c904

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <apInit>:
#include "ap.h"



void apInit (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  cliOpen(HW_UART_CH_DEBUG, 115200);
 8000ff8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f9cb 	bl	8001398 <cliOpen>
  logBoot(false);
 8001002:	2000      	movs	r0, #0
 8001004:	f002 ff82 	bl	8003f0c <logBoot>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <apMain>:

void apMain (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	static uint8_t ledStep = 0;
	pre_time = millis ();
 8001012:	f000 f84c 	bl	80010ae <millis>
 8001016:	6078      	str	r0, [r7, #4]
	ledOff (_DEF_LED1);
 8001018:	2000      	movs	r0, #0
 800101a:	f002 ff01 	bl	8003e20 <ledOff>
	ledOff (_DEF_LED2);
 800101e:	2001      	movs	r0, #1
 8001020:	f002 fefe 	bl	8003e20 <ledOff>
	ledOff (_DEF_LED3);
 8001024:	2002      	movs	r0, #2
 8001026:	f002 fefb 	bl	8003e20 <ledOff>
	while (1)
	{
		if (millis () - pre_time >= 100)
 800102a:	f000 f840 	bl	80010ae <millis>
 800102e:	4602      	mov	r2, r0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b63      	cmp	r3, #99	@ 0x63
 8001036:	d928      	bls.n	800108a <apMain+0x7e>
		{
			pre_time = millis ();
 8001038:	f000 f839 	bl	80010ae <millis>
 800103c:	6078      	str	r0, [r7, #4]
			switch(ledStep)
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <apMain+0x84>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d00e      	beq.n	8001064 <apMain+0x58>
 8001046:	2b02      	cmp	r3, #2
 8001048:	dc10      	bgt.n	800106c <apMain+0x60>
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <apMain+0x48>
 800104e:	2b01      	cmp	r3, #1
 8001050:	d004      	beq.n	800105c <apMain+0x50>
 8001052:	e00b      	b.n	800106c <apMain+0x60>
			{
			case 0:
				ledToggle (_DEF_LED1);
 8001054:	2000      	movs	r0, #0
 8001056:	f002 ff03 	bl	8003e60 <ledToggle>
				break;
 800105a:	e007      	b.n	800106c <apMain+0x60>
			case 1:
				ledToggle (_DEF_LED2);
 800105c:	2001      	movs	r0, #1
 800105e:	f002 feff 	bl	8003e60 <ledToggle>
				break;
 8001062:	e003      	b.n	800106c <apMain+0x60>
			case 2:
				ledToggle (_DEF_LED3);
 8001064:	2002      	movs	r0, #2
 8001066:	f002 fefb 	bl	8003e60 <ledToggle>
				break;
 800106a:	bf00      	nop
			}
			ledStep = ((ledStep+1) % 3);
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <apMain+0x84>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <apMain+0x88>)
 8001074:	fb83 3102 	smull	r3, r1, r3, r2
 8001078:	17d3      	asrs	r3, r2, #31
 800107a:	1ac9      	subs	r1, r1, r3
 800107c:	460b      	mov	r3, r1
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	440b      	add	r3, r1
 8001082:	1ad1      	subs	r1, r2, r3
 8001084:	b2ca      	uxtb	r2, r1
 8001086:	4b02      	ldr	r3, [pc, #8]	@ (8001090 <apMain+0x84>)
 8001088:	701a      	strb	r2, [r3, #0]
		}
		cliMain();
 800108a:	f000 fa57 	bl	800153c <cliMain>
		if (millis () - pre_time >= 100)
 800108e:	e7cc      	b.n	800102a <apMain+0x1e>
 8001090:	20000a5c 	.word	0x20000a5c
 8001094:	55555556 	.word	0x55555556

08001098 <delay>:
{
  return true;
}

void delay(uint32_t ms)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f004 fad5 	bl	8005650 <HAL_Delay>
#endif
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <millis>:

uint32_t millis(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010b2:	f004 fac1 	bl	8005638 <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}

080010bc <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80010c8:	2301      	movs	r3, #1
 80010ca:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2201      	movs	r2, #1
 80010e2:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	611a      	str	r2, [r3, #16]

  return ret;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <qbufferCreateBySize>:

bool qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
  bool ret = true;
 8001106:	2301      	movs	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	611a      	str	r2, [r3, #16]

  return ret;
 8001128:	7dfb      	ldrb	r3, [r7, #23]
}
 800112a:	4618      	mov	r0, r3
 800112c:	371c      	adds	r7, #28
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001136:	b480      	push	{r7}
 8001138:	b08b      	sub	sp, #44	@ 0x2c
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001142:	2301      	movs	r3, #1
 8001144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t next_in;


  for (uint32_t i=0; i<length; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	e043      	b.n	80011d6 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	6892      	ldr	r2, [r2, #8]
 8001158:	fbb3 f1f2 	udiv	r1, r3, r2
 800115c:	fb01 f202 	mul.w	r2, r1, r2
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	429a      	cmp	r2, r3
 800116c:	d02c      	beq.n	80011c8 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d024      	beq.n	80011c0 <qbufferWrite+0x8a>
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d021      	beq.n	80011c0 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68f9      	ldr	r1, [r7, #12]
 8001186:	68c9      	ldr	r1, [r1, #12]
 8001188:	fb01 f303 	mul.w	r3, r1, r3
 800118c:	4413      	add	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
        for (uint32_t j=0; j<p_node->size; j++)
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	e00a      	b.n	80011ac <qbufferWrite+0x76>
        {
          p_buf[j] = p_data[j];
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	441a      	add	r2, r3
 800119c:	6979      	ldr	r1, [r7, #20]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	440b      	add	r3, r1
 80011a2:	7812      	ldrb	r2, [r2, #0]
 80011a4:	701a      	strb	r2, [r3, #0]
        for (uint32_t j=0; j<p_node->size; j++)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d3ef      	bcc.n	8001196 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	4413      	add	r3, r2
 80011be:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e003      	b.n	80011d0 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80011ce:	e006      	b.n	80011de <qbufferWrite+0xa8>
  for (uint32_t i=0; i<length; i++)
 80011d0:	6a3b      	ldr	r3, [r7, #32]
 80011d2:	3301      	adds	r3, #1
 80011d4:	623b      	str	r3, [r7, #32]
 80011d6:	6a3a      	ldr	r2, [r7, #32]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3b7      	bcc.n	800114e <qbufferWrite+0x18>
    }
  }

  return ret;
 80011de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	372c      	adds	r7, #44	@ 0x2c
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b089      	sub	sp, #36	@ 0x24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80011fa:	2301      	movs	r3, #1
 80011fc:	77fb      	strb	r3, [r7, #31]


  for (uint32_t i=0; i<length; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	e041      	b.n	8001288 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d024      	beq.n	8001256 <qbufferRead+0x68>
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d021      	beq.n	8001256 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	68f9      	ldr	r1, [r7, #12]
 800121c:	68c9      	ldr	r1, [r1, #12]
 800121e:	fb01 f303 	mul.w	r3, r1, r3
 8001222:	4413      	add	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      for (uint32_t j=0; j<p_node->size; j++)
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e00a      	b.n	8001242 <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	441a      	add	r2, r3
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	440b      	add	r3, r1
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
      for (uint32_t j=0; j<p_node->size; j++)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	429a      	cmp	r2, r3
 800124a:	d3ef      	bcc.n	800122c <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	4413      	add	r3, r2
 8001254:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d00c      	beq.n	800127c <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	3301      	adds	r3, #1
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	6892      	ldr	r2, [r2, #8]
 800126c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001270:	fb01 f202 	mul.w	r2, r1, r2
 8001274:	1a9a      	subs	r2, r3, r2
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	e002      	b.n	8001282 <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 800127c:	2300      	movs	r3, #0
 800127e:	77fb      	strb	r3, [r7, #31]
      break;
 8001280:	e006      	b.n	8001290 <qbufferRead+0xa2>
  for (uint32_t i=0; i<length; i++)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	3301      	adds	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3b9      	bcc.n	8001204 <qbufferRead+0x16>
    }
  }

  return ret;
 8001290:	7ffb      	ldrb	r3, [r7, #31]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	68c9      	ldr	r1, [r1, #12]
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	4413      	add	r3, r2
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	441a      	add	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6892      	ldr	r2, [r2, #8]
 80012e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80012e4:	fb01 f202 	mul.w	r2, r1, r2
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

  return ret;
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <cliInit+0x78>)
 8001302:	2200      	movs	r2, #0
 8001304:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001306:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <cliInit+0x78>)
 8001308:	2200      	movs	r2, #0
 800130a:	725a      	strb	r2, [r3, #9]
  cli_node.is_busy = false;
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <cliInit+0x78>)
 800130e:	2200      	movs	r2, #0
 8001310:	729a      	strb	r2, [r3, #10]
  cli_node.state   = CLI_RX_IDLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <cliInit+0x78>)
 8001314:	2200      	movs	r2, #0
 8001316:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <cliInit+0x78>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <cliInit+0x78>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <cliInit+0x78>)
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <cliInit+0x78>)
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <cliInit+0x78>)
 800133a:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <cliInit+0x7c>)
 800133c:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <cliInit+0x78>)
 8001342:	4a0e      	ldr	r2, [pc, #56]	@ (800137c <cliInit+0x80>)
 8001344:	f8c3 2684 	str.w	r2, [r3, #1668]	@ 0x684
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <cliInit+0x78>)
 800134a:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <cliInit+0x84>)
 800134c:	f8c3 2688 	str.w	r2, [r3, #1672]	@ 0x688
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <cliInit+0x78>)
 8001352:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <cliInit+0x88>)
 8001354:	f8c3 268c 	str.w	r2, [r3, #1676]	@ 0x68c

  cliLineClean(&cli_node);
 8001358:	4806      	ldr	r0, [pc, #24]	@ (8001374 <cliInit+0x78>)
 800135a:	f000 fb9f 	bl	8001a9c <cliLineClean>


  cliAdd("help", cliShowList);
 800135e:	490a      	ldr	r1, [pc, #40]	@ (8001388 <cliInit+0x8c>)
 8001360:	480a      	ldr	r0, [pc, #40]	@ (800138c <cliInit+0x90>)
 8001362:	f000 fe3b 	bl	8001fdc <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001366:	490a      	ldr	r1, [pc, #40]	@ (8001390 <cliInit+0x94>)
 8001368:	480a      	ldr	r0, [pc, #40]	@ (8001394 <cliInit+0x98>)
 800136a:	f000 fe37 	bl	8001fdc <cliAdd>

  return true;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000a60 	.word	0x20000a60
 8001378:	08001e6d 	.word	0x08001e6d
 800137c:	08001ebd 	.word	0x08001ebd
 8001380:	08001f15 	.word	0x08001f15
 8001384:	08001f5d 	.word	0x08001f5d
 8001388:	0800206d 	.word	0x0800206d
 800138c:	0800c920 	.word	0x0800c920
 8001390:	080020dd 	.word	0x080020dd
 8001394:	0800c928 	.word	0x0800c928

08001398 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80013a4:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <cliOpen+0x54>)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	7013      	strb	r3, [r2, #0]


  if (cli_node.is_open == false || cli_node.baud != baud)
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <cliOpen+0x54>)
 80013ac:	7a1b      	ldrb	r3, [r3, #8]
 80013ae:	f083 0301 	eor.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d104      	bne.n	80013c2 <cliOpen+0x2a>
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <cliOpen+0x54>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d00e      	beq.n	80013e0 <cliOpen+0x48>
  {
    if (baud > 0)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00b      	beq.n	80013e0 <cliOpen+0x48>
    {
      cli_node.baud = baud;
 80013c8:	4a08      	ldr	r2, [pc, #32]	@ (80013ec <cliOpen+0x54>)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6053      	str	r3, [r2, #4]
      cli_node.is_open = uartOpen(ch, baud);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	6839      	ldr	r1, [r7, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 ffd4 	bl	8004380 <uartOpen>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <cliOpen+0x54>)
 80013de:	721a      	strb	r2, [r3, #8]
    }
  }

  return cli_node.is_open;
 80013e0:	4b02      	ldr	r3, [pc, #8]	@ (80013ec <cliOpen+0x54>)
 80013e2:	7a1b      	ldrb	r3, [r3, #8]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000a60 	.word	0x20000a60

080013f0 <cliGetPort>:
  }
  return ret;
}

uint8_t cliGetPort(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return cli_node.ch;
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <cliGetPort+0x14>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000a60 	.word	0x20000a60

08001408 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001410:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <cliShowLog+0xdc>)
 8001412:	7a5b      	ldrb	r3, [r3, #9]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d061      	beq.n	80014dc <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7ad8      	ldrb	r0, [r3, #11]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001422:	461a      	mov	r2, r3
 8001424:	4930      	ldr	r1, [pc, #192]	@ (80014e8 <cliShowLog+0xe0>)
 8001426:	f003 fa23 	bl	8004870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7ad8      	ldrb	r0, [r3, #11]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001434:	461a      	mov	r2, r3
 8001436:	492d      	ldr	r1, [pc, #180]	@ (80014ec <cliShowLog+0xe4>)
 8001438:	f003 fa1a 	bl	8004870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7ad8      	ldrb	r0, [r3, #11]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 8001446:	461a      	mov	r2, r3
 8001448:	4929      	ldr	r1, [pc, #164]	@ (80014f0 <cliShowLog+0xe8>)
 800144a:	f003 fa11 	bl	8004870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7ad8      	ldrb	r0, [r3, #11]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001458:	461a      	mov	r2, r3
 800145a:	4926      	ldr	r1, [pc, #152]	@ (80014f4 <cliShowLog+0xec>)
 800145c:	f003 fa08 	bl	8004870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7ad8      	ldrb	r0, [r3, #11]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 800146a:	461a      	mov	r2, r3
 800146c:	4922      	ldr	r1, [pc, #136]	@ (80014f8 <cliShowLog+0xf0>)
 800146e:	f003 f9ff 	bl	8004870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7ad8      	ldrb	r0, [r3, #11]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800147c:	461a      	mov	r2, r3
 800147e:	491f      	ldr	r1, [pc, #124]	@ (80014fc <cliShowLog+0xf4>)
 8001480:	f003 f9f6 	bl	8004870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7ad8      	ldrb	r0, [r3, #11]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800148e:	461a      	mov	r2, r3
 8001490:	491b      	ldr	r1, [pc, #108]	@ (8001500 <cliShowLog+0xf8>)
 8001492:	f003 f9ed 	bl	8004870 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e012      	b.n	80014c2 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7ad8      	ldrb	r0, [r3, #11]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4613      	mov	r3, r2
 80014a4:	015b      	lsls	r3, r3, #5
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	4913      	ldr	r1, [pc, #76]	@ (8001504 <cliShowLog+0xfc>)
 80014b8:	f003 f9da 	bl	8004870 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80014c8:	461a      	mov	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dbe5      	blt.n	800149c <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7adb      	ldrb	r3, [r3, #11]
 80014d4:	490c      	ldr	r1, [pc, #48]	@ (8001508 <cliShowLog+0x100>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f003 f9ca 	bl	8004870 <uartPrintf>
  }
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000a60 	.word	0x20000a60
 80014e8:	0800c92c 	.word	0x0800c92c
 80014ec:	0800c93c 	.word	0x0800c93c
 80014f0:	0800c94c 	.word	0x0800c94c
 80014f4:	0800c95c 	.word	0x0800c95c
 80014f8:	0800c96c 	.word	0x0800c96c
 80014fc:	0800c97c 	.word	0x0800c97c
 8001500:	0800c98c 	.word	0x0800c98c
 8001504:	0800c99c 	.word	0x0800c99c
 8001508:	0800c9ac 	.word	0x0800c9ac

0800150c <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4906      	ldr	r1, [pc, #24]	@ (8001534 <cliShowPrompt+0x28>)
 800151a:	4618      	mov	r0, r3
 800151c:	f003 f9a8 	bl	8004870 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4904      	ldr	r1, [pc, #16]	@ (8001538 <cliShowPrompt+0x2c>)
 8001526:	4618      	mov	r0, r3
 8001528:	f003 f9a2 	bl	8004870 <uartPrintf>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	0800c9b0 	.word	0x0800c9b0
 8001538:	0800c9b4 	.word	0x0800c9b4

0800153c <cliMain>:

bool cliMain(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <cliMain+0x40>)
 8001542:	7a1b      	ldrb	r3, [r3, #8]
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <cliMain+0x16>
  {
    return false;
 800154e:	2300      	movs	r3, #0
 8001550:	e012      	b.n	8001578 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <cliMain+0x40>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f003 f8c6 	bl	80046e8 <uartAvailable>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d009      	beq.n	8001576 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <cliMain+0x40>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f003 f904 	bl	8004774 <uartRead>
 800156c:	4603      	mov	r3, r0
 800156e:	4619      	mov	r1, r3
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <cliMain+0x40>)
 8001572:	f000 f831 	bl	80015d8 <cliUpdate>
  }

  return true;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000a60 	.word	0x20000a60

08001580 <cliAvailable>:

uint32_t cliAvailable(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  return uartAvailable(cli_node.ch);
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <cliAvailable+0x14>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f003 f8ad 	bl	80046e8 <uartAvailable>
 800158e:	4603      	mov	r3, r0
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000a60 	.word	0x20000a60

08001598 <cliRead>:

uint8_t cliRead(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  return uartRead(cli_node.ch);
 800159c:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <cliRead+0x14>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 f8e7 	bl	8004774 <uartRead>
 80015a6:	4603      	mov	r3, r0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000a60 	.word	0x20000a60

080015b0 <cliWrite>:

uint32_t cliWrite(uint8_t *p_data, uint32_t length)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  return uartWrite(cli_node.ch, p_data, length);
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <cliWrite+0x24>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 f910 	bl	80047e8 <uartWrite>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000a60 	.word	0x20000a60

080015d8 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80015f0:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7c1b      	ldrb	r3, [r3, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 816d 	bne.w	80018d6 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001600:	d02a      	beq.n	8001658 <cliUpdate+0x80>
 8001602:	2b7f      	cmp	r3, #127	@ 0x7f
 8001604:	f300 80da 	bgt.w	80017bc <cliUpdate+0x1e4>
 8001608:	2b1b      	cmp	r3, #27
 800160a:	d021      	beq.n	8001650 <cliUpdate+0x78>
 800160c:	2b1b      	cmp	r3, #27
 800160e:	f300 80d5 	bgt.w	80017bc <cliUpdate+0x1e4>
 8001612:	2b08      	cmp	r3, #8
 8001614:	d062      	beq.n	80016dc <cliUpdate+0x104>
 8001616:	2b0d      	cmp	r3, #13
 8001618:	f040 80d0 	bne.w	80017bc <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 fa52 	bl	8001ad0 <cliLineAdd>
          cliRunCmd(p_cli);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fb1d 	bl	8001c6c <cliRunCmd>
        }

        line->count = 0;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff5f 	bl	800150c <cliShowPrompt>
        break;
 800164e:	e142      	b.n	80018d6 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	741a      	strb	r2, [r3, #16]
        break;
 8001656:	e13e      	b.n	80018d6 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001664:	429a      	cmp	r2, r3
 8001666:	f080 8131 	bcs.w	80018cc <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800167a:	2301      	movs	r3, #1
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800167e:	e013      	b.n	80016a8 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001686:	461a      	mov	r2, r3
 8001688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168a:	441a      	add	r2, r3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001692:	4619      	mov	r1, r3
 8001694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001696:	440b      	add	r3, r1
 8001698:	3b01      	subs	r3, #1
 800169a:	69f9      	ldr	r1, [r7, #28]
 800169c:	5c89      	ldrb	r1, [r1, r2]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 80016a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a4:	3301      	adds	r3, #1
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a8:	7efb      	ldrb	r3, [r7, #27]
 80016aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbe7      	blt.n	8001680 <cliUpdate+0xa8>
          }

          line->count--;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016c6:	461a      	mov	r2, r3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2100      	movs	r1, #0
 80016cc:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	498d      	ldr	r1, [pc, #564]	@ (8001908 <cliUpdate+0x330>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 f8cb 	bl	8004870 <uartPrintf>
        }
        break;
 80016da:	e0f7      	b.n	80018cc <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d055      	beq.n	8001792 <cliUpdate+0x1ba>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d050      	beq.n	8001792 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10e      	bne.n	800171e <cliUpdate+0x146>
          {
            line->count--;
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001706:	3b01      	subs	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001716:	461a      	mov	r2, r3
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2100      	movs	r1, #0
 800171c:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800172a:	429a      	cmp	r2, r3
 800172c:	d231      	bcs.n	8001792 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001742:	e013      	b.n	800176c <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174a:	461a      	mov	r2, r3
 800174c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174e:	441a      	add	r2, r3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001756:	4619      	mov	r1, r3
 8001758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175a:	440b      	add	r3, r1
 800175c:	3b01      	subs	r3, #1
 800175e:	69f9      	ldr	r1, [r7, #28]
 8001760:	5c89      	ldrb	r1, [r1, r2]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001768:	3301      	adds	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800176c:	7ebb      	ldrb	r3, [r7, #26]
 800176e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001770:	429a      	cmp	r2, r3
 8001772:	dbe7      	blt.n	8001744 <cliUpdate+0x16c>
            }

            line->count--;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800177a:	3b01      	subs	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800178a:	461a      	mov	r2, r3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8099 	beq.w	80018d0 <cliUpdate+0x2f8>
        {
          line->cursor--;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	4956      	ldr	r1, [pc, #344]	@ (800190c <cliUpdate+0x334>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 f85b 	bl	8004870 <uartPrintf>
        }
        break;
 80017ba:	e089      	b.n	80018d0 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017c2:	3301      	adds	r3, #1
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80017ca:	4293      	cmp	r3, r2
 80017cc:	f280 8082 	bge.w	80018d4 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017dc:	429a      	cmp	r2, r3
 80017de:	d124      	bne.n	800182a <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	1cf9      	adds	r1, r7, #3
 80017e6:	2201      	movs	r2, #1
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 fffd 	bl	80047e8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017f4:	461a      	mov	r2, r3
 80017f6:	78f9      	ldrb	r1, [r7, #3]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	5499      	strb	r1, [r3, r2]
            line->count++;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001812:	3301      	adds	r3, #1
 8001814:	b2da      	uxtb	r2, r3
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001822:	461a      	mov	r2, r3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2100      	movs	r1, #0
 8001828:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001836:	429a      	cmp	r2, r3
 8001838:	d24c      	bcs.n	80018d4 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
 800184e:	e013      	b.n	8001878 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001856:	461a      	mov	r2, r3
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	1e5a      	subs	r2, r3, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001864:	4619      	mov	r1, r3
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	1acb      	subs	r3, r1, r3
 800186a:	69f9      	ldr	r1, [r7, #28]
 800186c:	5c89      	ldrb	r1, [r1, r2]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
 8001878:	7e7b      	ldrb	r3, [r7, #25]
 800187a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187c:	429a      	cmp	r2, r3
 800187e:	dbe7      	blt.n	8001850 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001886:	461a      	mov	r2, r3
 8001888:	78f9      	ldrb	r1, [r7, #3]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	5499      	strb	r1, [r3, r2]
            line->count++;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001894:	3301      	adds	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018b4:	461a      	mov	r2, r3
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2100      	movs	r1, #0
 80018ba:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	4913      	ldr	r1, [pc, #76]	@ (8001910 <cliUpdate+0x338>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 ffd3 	bl	8004870 <uartPrintf>
          }
        }
        break;
 80018ca:	e003      	b.n	80018d4 <cliUpdate+0x2fc>
        break;
 80018cc:	bf00      	nop
 80018ce:	e002      	b.n	80018d6 <cliUpdate+0x2fe>
        break;
 80018d0:	bf00      	nop
 80018d2:	e000      	b.n	80018d6 <cliUpdate+0x2fe>
        break;
 80018d4:	bf00      	nop
    }
  }

  switch(p_cli->state)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7c1b      	ldrb	r3, [r3, #16]
 80018da:	3b01      	subs	r3, #1
 80018dc:	2b03      	cmp	r3, #3
 80018de:	f200 80d0 	bhi.w	8001a82 <cliUpdate+0x4aa>
 80018e2:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <cliUpdate+0x310>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001901 	.word	0x08001901
 80018f0:	08001915 	.word	0x08001915
 80018f4:	08001a79 	.word	0x08001a79
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	741a      	strb	r2, [r3, #16]
      break;
 80018fe:	e0c0      	b.n	8001a82 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2203      	movs	r2, #3
 8001904:	741a      	strb	r2, [r3, #16]
      break;
 8001906:	e0bc      	b.n	8001a82 <cliUpdate+0x4aa>
 8001908:	0800c9bc 	.word	0x0800c9bc
 800190c:	0800c9c4 	.word	0x0800c9c4
 8001910:	0800c9cc 	.word	0x0800c9cc

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	2b44      	cmp	r3, #68	@ 0x44
 800191e:	d11a      	bne.n	8001956 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001926:	2b00      	cmp	r3, #0
 8001928:	d015      	beq.n	8001956 <cliUpdate+0x37e>
        {
          line->cursor--;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001930:	3b01      	subs	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 800193a:	231b      	movs	r3, #27
 800193c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800193e:	235b      	movs	r3, #91	@ 0x5b
 8001940:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	f107 010c 	add.w	r1, r7, #12
 800194e:	2203      	movs	r2, #3
 8001950:	4618      	mov	r0, r3
 8001952:	f002 ff49 	bl	80047e8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	2b43      	cmp	r3, #67	@ 0x43
 800195a:	d11d      	bne.n	8001998 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001968:	429a      	cmp	r2, r3
 800196a:	d215      	bcs.n	8001998 <cliUpdate+0x3c0>
        {
          line->cursor++;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001972:	3301      	adds	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 800197c:	231b      	movs	r3, #27
 800197e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001980:	235b      	movs	r3, #91	@ 0x5b
 8001982:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	f107 010c 	add.w	r1, r7, #12
 8001990:	2203      	movs	r2, #3
 8001992:	4618      	mov	r0, r3
 8001994:	f002 ff28 	bl	80047e8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	2b41      	cmp	r3, #65	@ 0x41
 800199c:	d10c      	bne.n	80019b8 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800199e:	2101      	movs	r1, #1
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f8d9 	bl	8001b58 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f002 ff5c 	bl	8004870 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	2b42      	cmp	r3, #66	@ 0x42
 80019bc:	d10c      	bne.n	80019d8 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 80019be:	2100      	movs	r1, #0
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f8c9 	bl	8001b58 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f002 ff4c 	bl	8004870 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	2b31      	cmp	r3, #49	@ 0x31
 80019dc:	d10f      	bne.n	80019fe <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7818      	ldrb	r0, [r3, #0]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e8:	461a      	mov	r2, r3
 80019ea:	492a      	ldr	r1, [pc, #168]	@ (8001a94 <cliUpdate+0x4bc>)
 80019ec:	f002 ff40 	bl	8004870 <uartPrintf>
        line->cursor = 0;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2204      	movs	r2, #4
 80019fc:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	2b34      	cmp	r3, #52	@ 0x34
 8001a02:	d13d      	bne.n	8001a80 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d20f      	bcs.n	8001a34 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	8afa      	ldrh	r2, [r7, #22]
 8001a2c:	491a      	ldr	r1, [pc, #104]	@ (8001a98 <cliUpdate+0x4c0>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 ff1e 	bl	8004870 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d90f      	bls.n	8001a64 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	8afa      	ldrh	r2, [r7, #22]
 8001a5c:	490d      	ldr	r1, [pc, #52]	@ (8001a94 <cliUpdate+0x4bc>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 ff06 	bl	8004870 <uartPrintf>
        }
        line->cursor = line->count;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2204      	movs	r2, #4
 8001a74:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001a76:	e003      	b.n	8001a80 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	741a      	strb	r2, [r3, #16]
      break;
 8001a7e:	e000      	b.n	8001a82 <cliUpdate+0x4aa>
      break;
 8001a80:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fcc0 	bl	8001408 <cliShowLog>

  return ret;
 8001a88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3730      	adds	r7, #48	@ 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	0800c9d8 	.word	0x0800c9d8
 8001a98:	0800c9e0 	.word	0x0800c9e0

08001a9c <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
  p_cli->line.cursor  = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	223f      	movs	r2, #63	@ 0x3f
 8001ab8:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
  p_cli->line.buf[0]  = 0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	015b      	lsls	r3, r3, #5
 8001ae6:	4413      	add	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4610      	mov	r0, r2
 8001af6:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001afa:	2243      	movs	r2, #67	@ 0x43
 8001afc:	4619      	mov	r1, r3
 8001afe:	f008 fefe 	bl	800a8fe <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b08:	2b07      	cmp	r3, #7
 8001b0a:	d807      	bhi.n	8001b1c <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b12:	3301      	adds	r3, #1
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b22:	b25a      	sxtb	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b30:	3301      	adds	r3, #1
 8001b32:	425a      	negs	r2, r3
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	f002 0207 	and.w	r2, r2, #7
 8001b3c:	bf58      	it	pl
 8001b3e:	4253      	negpl	r3, r2
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d076      	beq.n	8001c5c <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7818      	ldrb	r0, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001b82:	461a      	mov	r2, r3
 8001b84:	4937      	ldr	r1, [pc, #220]	@ (8001c64 <cliLineChange+0x10c>)
 8001b86:	f002 fe73 	bl	8004870 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7818      	ldrb	r0, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4931      	ldr	r1, [pc, #196]	@ (8001c68 <cliLineChange+0x110>)
 8001ba2:	f002 fe65 	bl	8004870 <uartPrintf>
  }


  if (key_up == true)
 8001ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d125      	bne.n	8001bfa <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001bde:	fb93 f1f2 	sdiv	r1, r3, r2
 8001be2:	fb01 f202 	mul.w	r2, r1, r2
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	b25a      	sxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e013      	b.n	8001c22 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c00:	3301      	adds	r3, #1
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001c08:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c0c:	fb01 f202 	mul.w	r2, r1, r2
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	b25a      	sxtb	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c20:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	4413      	add	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	4403      	add	r3, r0
 8001c34:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001c38:	f501 736c 	add.w	r3, r1, #944	@ 0x3b0
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	2243      	movs	r2, #67	@ 0x43
 8001c40:	4618      	mov	r0, r3
 8001c42:	f008 fe5c 	bl	800a8fe <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 23f2 	ldrb.w	r2, [r3, #1010]	@ 0x3f2
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1

  p_cli->hist_line_new = false;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001c5a:	e000      	b.n	8001c5e <cliLineChange+0x106>
    return;
 8001c5c:	bf00      	nop
}
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	0800c9d8 	.word	0x0800c9d8
 8001c68:	0800c9e8 	.word	0x0800c9e8

08001c6c <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001c74:	2300      	movs	r3, #0
 8001c76:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f857 	bl	8001d2c <cliParseArgs>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d04b      	beq.n	8001d1c <cliRunCmd+0xb0>
  {
    cliPrintf("\r\n");
 8001c84:	4828      	ldr	r0, [pc, #160]	@ (8001d28 <cliRunCmd+0xbc>)
 8001c86:	f000 f899 	bl	8001dbc <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f8b7 	bl	8001e04 <cliToUpper>

    p_cli->is_busy = true;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	729a      	strb	r2, [r3, #10]
    for (int i=0; i<p_cli->cmd_count; i++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	e032      	b.n	8001d08 <cliRunCmd+0x9c>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe fab0 	bl	8000220 <strcmp>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11d      	bne.n	8001d02 <cliRunCmd+0x96>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8a3 2678 	strh.w	r2, [r3, #1656]	@ 0x678
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	f502 62cf 	add.w	r2, r2, #1656	@ 0x678
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4798      	blx	r3
        break;
 8001d00:	e009      	b.n	8001d16 <cliRunCmd+0xaa>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4293      	cmp	r3, r2
 8001d14:	dbc5      	blt.n	8001ca2 <cliRunCmd+0x36>
      }
    }
    p_cli->is_busy = false;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	729a      	strb	r2, [r3, #10]
  }

  return ret;
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	0800c9f0 	.word	0x0800c9f0

08001d2c <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001d34:	2300      	movs	r3, #0
 8001d36:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001d4a:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001d52:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001d54:	8afb      	ldrh	r3, [r7, #22]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <cliParseArgs+0x8c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f107 0208 	add.w	r2, r7, #8
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6938      	ldr	r0, [r7, #16]
 8001d6c:	f008 fd48 	bl	800a800 <strtok_r>
 8001d70:	61b8      	str	r0, [r7, #24]
 8001d72:	e010      	b.n	8001d96 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001d74:	8afb      	ldrh	r3, [r7, #22]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	82fa      	strh	r2, [r7, #22]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <cliParseArgs+0x8c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f107 0208 	add.w	r2, r7, #8
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f008 fd36 	bl	800a800 <strtok_r>
 8001d94:	61b8      	str	r0, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1eb      	bne.n	8001d74 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	8afa      	ldrh	r2, [r7, #22]
 8001da0:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001da4:	8afb      	ldrh	r3, [r7, #22]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <cliParseArgs+0x82>
  {
    ret = true;
 8001daa:	2301      	movs	r3, #1
 8001dac:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000000 	.word	0x20000000

08001dbc <cliPrintf>:
  
  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8001dbc:	b40f      	push	{r0, r1, r2, r3}
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <cliPrintf+0x44>)
 8001dcc:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f103 0011 	add.w	r0, r3, #17
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ddc:	f008 fcc0 	bl	800a760 <vsniprintf>
 8001de0:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	7818      	ldrb	r0, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3311      	adds	r3, #17
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f002 fcfb 	bl	80047e8 <uartWrite>
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dfc:	b004      	add	sp, #16
 8001dfe:	4770      	bx	lr
 8001e00:	20000a60 	.word	0x20000a60

08001e04 <cliToUpper>:
  
  uartWrite(p_cli->ch, &data, 1);
}

void cliToUpper(char *str)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	81fb      	strh	r3, [r7, #14]
 8001e10:	e018      	b.n	8001e44 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001e12:	89fb      	ldrh	r3, [r7, #14]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001e1c:	7b7b      	ldrb	r3, [r7, #13]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d014      	beq.n	8001e4c <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001e22:	7b7b      	ldrb	r3, [r7, #13]
 8001e24:	2b60      	cmp	r3, #96	@ 0x60
 8001e26:	d905      	bls.n	8001e34 <cliToUpper+0x30>
 8001e28:	7b7b      	ldrb	r3, [r7, #13]
 8001e2a:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e2c:	d802      	bhi.n	8001e34 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001e2e:	7b7b      	ldrb	r3, [r7, #13]
 8001e30:	3b20      	subs	r3, #32
 8001e32:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	7b7a      	ldrb	r2, [r7, #13]
 8001e3c:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	3301      	adds	r3, #1
 8001e42:	81fb      	strh	r3, [r7, #14]
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	d9e3      	bls.n	8001e12 <cliToUpper+0xe>
 8001e4a:	e000      	b.n	8001e4e <cliToUpper+0x4a>
      break;
 8001e4c:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001e4e:	89fb      	ldrh	r3, [r7, #14]
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d105      	bne.n	8001e60 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
  }
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <cliArgsGetData+0x4c>)
 8001e7c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d301      	bcc.n	8001e90 <cliArgsGetData+0x24>
  {
    return 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e00e      	b.n	8001eae <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f008 faee 	bl	800a484 <strtoul>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60fb      	str	r3, [r7, #12]

  return ret;
 8001eac:	68fb      	ldr	r3, [r7, #12]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000a60 	.word	0x20000a60

08001ebc <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001ecc:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <cliArgsGetFloat+0x54>)
 8001ece:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <cliArgsGetFloat+0x28>
  {
    return 0;
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e00d      	b.n	8001f00 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f008 f9f3 	bl	800a2e0 <strtof>
 8001efa:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	ee07 3a90 	vmov	s15, r3
 8001f04:	eeb0 0a67 	vmov.f32	s0, s15
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000a60 	.word	0x20000a60

08001f14 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <cliArgsGetStr+0x44>)
 8001f24:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d301      	bcc.n	8001f38 <cliArgsGetStr+0x24>
  {
    return 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e008      	b.n	8001f4a <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  return ret;
 8001f48:	68fb      	ldr	r3, [r7, #12]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000a60 	.word	0x20000a60

08001f5c <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, const char *p_str)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <cliArgsIsStr+0x50>)
 8001f6e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d301      	bcc.n	8001f82 <cliArgsIsStr+0x26>
  {
    return 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e010      	b.n	8001fa4 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f7fe f944 	bl	8000220 <strcmp>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <cliArgsIsStr+0x46>
  {
    ret = true;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000a60 	.word	0x20000a60

08001fb0 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <cliKeepLoop+0x28>)
 8001fb8:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 fb92 	bl	80046e8 <uartAvailable>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <cliKeepLoop+0x1e>
  {
    return true;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8001fce:	2300      	movs	r3, #0
  }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000a60 	.word	0x20000a60

08001fdc <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001fea:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <cliAdd+0x8c>)
 8001fec:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001ff4:	2b1f      	cmp	r3, #31
 8001ff6:	d901      	bls.n	8001ffc <cliAdd+0x20>
  {
    return false;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e030      	b.n	800205e <cliAdd+0x82>
  }

  index = p_cli->cmd_count;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8002002:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002004:	89fa      	ldrh	r2, [r7, #14]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f008 fc68 	bl	800a8ee <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800201e:	89fa      	ldrh	r2, [r7, #14]
 8002020:	6939      	ldr	r1, [r7, #16]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002034:	89fa      	ldrh	r2, [r7, #14]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fedc 	bl	8001e04 <cliToUpper>

  p_cli->cmd_count++;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8002052:	3301      	adds	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	f8a3 23f4 	strh.w	r2, [r3, #1012]	@ 0x3f4

  return ret;
 800205c:	7dfb      	ldrb	r3, [r7, #23]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000a60 	.word	0x20000a60

0800206c <cliShowList>:

void cliShowList(cli_args_t *args)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002074:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <cliShowList+0x60>)
 8002076:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002078:	4815      	ldr	r0, [pc, #84]	@ (80020d0 <cliShowList+0x64>)
 800207a:	f7ff fe9f 	bl	8001dbc <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800207e:	4815      	ldr	r0, [pc, #84]	@ (80020d4 <cliShowList+0x68>)
 8002080:	f7ff fe9c 	bl	8001dbc <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e011      	b.n	80020ae <cliShowList+0x42>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	4413      	add	r3, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fe8d 	bl	8001dbc <cliPrintf>
    cliPrintf("\r\n");
 80020a2:	480b      	ldr	r0, [pc, #44]	@ (80020d0 <cliShowList+0x64>)
 80020a4:	f7ff fe8a 	bl	8001dbc <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 80020b4:	461a      	mov	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4293      	cmp	r3, r2
 80020ba:	dbe6      	blt.n	800208a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80020bc:	4806      	ldr	r0, [pc, #24]	@ (80020d8 <cliShowList+0x6c>)
 80020be:	f7ff fe7d 	bl	8001dbc <cliPrintf>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000a60 	.word	0x20000a60
 80020d0:	0800c9f0 	.word	0x0800c9f0
 80020d4:	0800c9f4 	.word	0x0800c9f4
 80020d8:	0800ca14 	.word	0x0800ca14

080020dc <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	@ 0x30
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80020e4:	2310      	movs	r3, #16
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d103      	bne.n	8002104 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80020fc:	4842      	ldr	r0, [pc, #264]	@ (8002208 <cliMemoryDump+0x12c>)
 80020fe:	f7ff fe5d 	bl	8001dbc <cliPrintf>
 8002102:	e07d      	b.n	8002200 <cliMemoryDump+0x124>
    return;
  }

  if(argc > 1)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b01      	cmp	r3, #1
 8002108:	dd09      	ble.n	800211e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f008 f9b5 	bl	800a484 <strtoul>
 800211a:	4603      	mov	r3, r0
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f008 f9ac 	bl	800a484 <strtoul>
 800212c:	4603      	mov	r3, r0
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002134:	4835      	ldr	r0, [pc, #212]	@ (800220c <cliMemoryDump+0x130>)
 8002136:	f7ff fe41 	bl	8001dbc <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800213e:	e05b      	b.n	80021f8 <cliMemoryDump+0x11c>
  {
    if((idx%4) == 0)
 8002140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d104      	bne.n	8002154 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	4619      	mov	r1, r3
 800214e:	4830      	ldr	r0, [pc, #192]	@ (8002210 <cliMemoryDump+0x134>)
 8002150:	f7ff fe34 	bl	8001dbc <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	482e      	ldr	r0, [pc, #184]	@ (8002214 <cliMemoryDump+0x138>)
 800215c:	f7ff fe2e 	bl	8001dbc <cliPrintf>

    if ((idx%4) == 3)
 8002160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002162:	425a      	negs	r2, r3
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	f002 0203 	and.w	r2, r2, #3
 800216c:	bf58      	it	pl
 800216e:	4253      	negpl	r3, r2
 8002170:	2b03      	cmp	r3, #3
 8002172:	d13b      	bne.n	80021ec <cliMemoryDump+0x110>
    {
      cliPrintf ("  |");
 8002174:	4828      	ldr	r0, [pc, #160]	@ (8002218 <cliMemoryDump+0x13c>)
 8002176:	f7ff fe21 	bl	8001dbc <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
 800217e:	e02c      	b.n	80021da <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e01d      	b.n	80021c8 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800218c:	f107 020c 	add.w	r2, r7, #12
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b1f      	cmp	r3, #31
 8002198:	d910      	bls.n	80021bc <cliMemoryDump+0xe0>
 800219a:	f107 020c 	add.w	r2, r7, #12
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80021a6:	d809      	bhi.n	80021bc <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80021a8:	f107 020c 	add.w	r2, r7, #12
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	4819      	ldr	r0, [pc, #100]	@ (800221c <cliMemoryDump+0x140>)
 80021b6:	f7ff fe01 	bl	8001dbc <cliPrintf>
 80021ba:	e002      	b.n	80021c2 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 80021bc:	4818      	ldr	r0, [pc, #96]	@ (8002220 <cliMemoryDump+0x144>)
 80021be:	f7ff fdfd 	bl	8001dbc <cliPrintf>
        for (i=0;i<4;i++)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	ddde      	ble.n	800218c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	3304      	adds	r3, #4
 80021d2:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	3301      	adds	r3, #1
 80021d8:	623b      	str	r3, [r7, #32]
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	ddcf      	ble.n	8002180 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80021e0:	4810      	ldr	r0, [pc, #64]	@ (8002224 <cliMemoryDump+0x148>)
 80021e2:	f7ff fdeb 	bl	8001dbc <cliPrintf>
      delay(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f7fe ff56 	bl	8001098 <delay>
    }
    addr++;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	3304      	adds	r3, #4
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 80021f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f4:	3301      	adds	r3, #1
 80021f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fc:	429a      	cmp	r2, r3
 80021fe:	db9f      	blt.n	8002140 <cliMemoryDump+0x64>
  }
}
 8002200:	3730      	adds	r7, #48	@ 0x30
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	0800ca34 	.word	0x0800ca34
 800220c:	0800ca48 	.word	0x0800ca48
 8002210:	0800ca50 	.word	0x0800ca50
 8002214:	0800ca5c 	.word	0x0800ca5c
 8002218:	0800ca64 	.word	0x0800ca64
 800221c:	0800ca68 	.word	0x0800ca68
 8002220:	0800ca6c 	.word	0x0800ca6c
 8002224:	0800ca70 	.word	0x0800ca70

08002228 <canInit>:
static void cliCan(cli_args_t *args);
#endif

static void canErrUpdate(uint8_t ch);

bool canInit(void) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
	bool ret = true;
 800222e:	2301      	movs	r3, #1
 8002230:	71bb      	strb	r3, [r7, #6]

	uint8_t i;

	for (i = 0; i < CAN_MAX_CH; i++) {
 8002232:	2300      	movs	r3, #0
 8002234:	71fb      	strb	r3, [r7, #7]
 8002236:	e070      	b.n	800231a <canInit+0xf2>
		can_tbl[i].is_init = true;
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4a3f      	ldr	r2, [pc, #252]	@ (8002338 <canInit+0x110>)
 800223c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
		can_tbl[i].is_open = false;
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	4a3a      	ldr	r2, [pc, #232]	@ (8002338 <canInit+0x110>)
 800224e:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3301      	adds	r3, #1
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
		can_tbl[i].err_code = CAN_ERR_NONE;
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4a35      	ldr	r2, [pc, #212]	@ (8002338 <canInit+0x110>)
 8002262:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	4413      	add	r3, r2
 800226c:	3304      	adds	r3, #4
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
		can_tbl[i].state = 0;
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4a30      	ldr	r2, [pc, #192]	@ (8002338 <canInit+0x110>)
 8002276:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800227a:	fb01 f303 	mul.w	r3, r1, r3
 800227e:	4413      	add	r3, r2
 8002280:	3308      	adds	r3, #8
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
		can_tbl[i].recovery_cnt = 0;
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	4a2b      	ldr	r2, [pc, #172]	@ (8002338 <canInit+0x110>)
 800228a:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	330c      	adds	r3, #12
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]

		can_tbl[i].q_rx_full_cnt = 0;
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4a26      	ldr	r2, [pc, #152]	@ (8002338 <canInit+0x110>)
 800229e:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3310      	adds	r3, #16
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
		can_tbl[i].q_tx_full_cnt = 0;
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4a21      	ldr	r2, [pc, #132]	@ (8002338 <canInit+0x110>)
 80022b2:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3314      	adds	r3, #20
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
		can_tbl[i].fifo_full_cnt = 0;
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002338 <canInit+0x110>)
 80022c6:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3318      	adds	r3, #24
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
		can_tbl[i].fifo_lost_cnt = 0;
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <canInit+0x110>)
 80022da:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	331c      	adds	r3, #28
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

		qbufferCreateBySize(&can_tbl[i].q_msg,
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	3338      	adds	r3, #56	@ 0x38
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <canInit+0x110>)
 80022f8:	4413      	add	r3, r2
 80022fa:	1d18      	adds	r0, r3, #4
				(uint8_t*) &can_tbl[i].can_msg[0], sizeof(can_msg_t),
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	3350      	adds	r3, #80	@ 0x50
 8002308:	4a0b      	ldr	r2, [pc, #44]	@ (8002338 <canInit+0x110>)
 800230a:	1899      	adds	r1, r3, r2
		qbufferCreateBySize(&can_tbl[i].q_msg,
 800230c:	2320      	movs	r3, #32
 800230e:	224c      	movs	r2, #76	@ 0x4c
 8002310:	f7fe fef2 	bl	80010f8 <qbufferCreateBySize>
	for (i = 0; i < CAN_MAX_CH; i++) {
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	3301      	adds	r3, #1
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d08b      	beq.n	8002238 <canInit+0x10>
				CAN_MSG_RX_BUF_MAX);
	}

	logPrintf("[OK] canInit()\n");
 8002320:	4806      	ldr	r0, [pc, #24]	@ (800233c <canInit+0x114>)
 8002322:	f001 fe8d 	bl	8004040 <logPrintf>

#ifdef _USE_HW_CLI
	cliAdd("can", cliCan);
 8002326:	4906      	ldr	r1, [pc, #24]	@ (8002340 <canInit+0x118>)
 8002328:	4806      	ldr	r0, [pc, #24]	@ (8002344 <canInit+0x11c>)
 800232a:	f7ff fe57 	bl	8001fdc <cliAdd>
#endif
	return ret;
 800232e:	79bb      	ldrb	r3, [r7, #6]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200010f0 	.word	0x200010f0
 800233c:	0800ca80 	.word	0x0800ca80
 8002340:	080031ad 	.word	0x080031ad
 8002344:	0800ca90 	.word	0x0800ca90

08002348 <canLock>:

bool canLock(void) {
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
	bool ret = true;
 800234e:	2301      	movs	r3, #1
 8002350:	71fb      	strb	r3, [r7, #7]
	return ret;
 8002352:	79fb      	ldrb	r3, [r7, #7]
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <canUnLock>:

bool canUnLock(void) {
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	return true;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <canOpen>:

bool canOpen(uint8_t ch, CanMode_t mode, CanFrame_t frame, CanBaud_t baud,
		CanBaud_t baud_data) {
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af02      	add	r7, sp, #8
 8002376:	4604      	mov	r4, r0
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4623      	mov	r3, r4
 8002380:	71fb      	strb	r3, [r7, #7]
 8002382:	4603      	mov	r3, r0
 8002384:	71bb      	strb	r3, [r7, #6]
 8002386:	460b      	mov	r3, r1
 8002388:	717b      	strb	r3, [r7, #5]
 800238a:	4613      	mov	r3, r2
 800238c:	713b      	strb	r3, [r7, #4]
	bool ret = true;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
	FDCAN_HandleTypeDef *p_can;
	uint32_t tdc_offset;

	if (ch >= CAN_MAX_CH)
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <canOpen+0x2c>
		return false;
 8002398:	2300      	movs	r3, #0
 800239a:	e13c      	b.n	8002616 <canOpen+0x2a6>
	can_tbl[ch].p_hfdcan = &hfdcan1;
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4aa0      	ldr	r2, [pc, #640]	@ (8002620 <canOpen+0x2b0>)
 80023a0:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3334      	adds	r3, #52	@ 0x34
 80023ac:	4a9d      	ldr	r2, [pc, #628]	@ (8002624 <canOpen+0x2b4>)
 80023ae:	601a      	str	r2, [r3, #0]
	p_can = can_tbl[ch].p_hfdcan;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	4a9b      	ldr	r2, [pc, #620]	@ (8002620 <canOpen+0x2b0>)
 80023b4:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3334      	adds	r3, #52	@ 0x34
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]

	switch (ch) {
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 80b6 	bne.w	8002538 <canOpen+0x1c8>
	case _DEF_CAN1:
		p_can->Instance = FDCAN1;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4a96      	ldr	r2, [pc, #600]	@ (8002628 <canOpen+0x2b8>)
 80023d0:	601a      	str	r2, [r3, #0]
		p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2200      	movs	r2, #0
 80023d6:	605a      	str	r2, [r3, #4]
		p_can->Init.FrameFormat = frame_tbl[frame];
 80023d8:	797b      	ldrb	r3, [r7, #5]
 80023da:	4a94      	ldr	r2, [pc, #592]	@ (800262c <canOpen+0x2bc>)
 80023dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]
		p_can->Init.Mode = mode_tbl[mode];
 80023e4:	79bb      	ldrb	r3, [r7, #6]
 80023e6:	4a92      	ldr	r2, [pc, #584]	@ (8002630 <canOpen+0x2c0>)
 80023e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	60da      	str	r2, [r3, #12]
		p_can->Init.AutoRetransmission = DISABLE;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2200      	movs	r2, #0
 80023f4:	741a      	strb	r2, [r3, #16]
		p_can->Init.TransmitPause = ENABLE;
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2201      	movs	r2, #1
 80023fa:	745a      	strb	r2, [r3, #17]
		p_can->Init.ProtocolException = ENABLE;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2201      	movs	r2, #1
 8002400:	749a      	strb	r2, [r3, #18]
		p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 8002402:	4b8c      	ldr	r3, [pc, #560]	@ (8002634 <canOpen+0x2c4>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	793b      	ldrb	r3, [r7, #4]
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	615a      	str	r2, [r3, #20]
		p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 8002412:	4b88      	ldr	r3, [pc, #544]	@ (8002634 <canOpen+0x2c4>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	793b      	ldrb	r3, [r7, #4]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	619a      	str	r2, [r3, #24]
		p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 8002422:	4b84      	ldr	r3, [pc, #528]	@ (8002634 <canOpen+0x2c4>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	793b      	ldrb	r3, [r7, #4]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	4413      	add	r3, r2
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	61da      	str	r2, [r3, #28]
		p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 8002432:	4b80      	ldr	r3, [pc, #512]	@ (8002634 <canOpen+0x2c4>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	793b      	ldrb	r3, [r7, #4]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4413      	add	r3, r2
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	621a      	str	r2, [r3, #32]
		p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 8002442:	4b7d      	ldr	r3, [pc, #500]	@ (8002638 <canOpen+0x2c8>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	4413      	add	r3, r2
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	625a      	str	r2, [r3, #36]	@ 0x24
		p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 8002454:	4b78      	ldr	r3, [pc, #480]	@ (8002638 <canOpen+0x2c8>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	4413      	add	r3, r2
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	629a      	str	r2, [r3, #40]	@ 0x28
		p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 8002466:	4b74      	ldr	r3, [pc, #464]	@ (8002638 <canOpen+0x2c8>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	62da      	str	r2, [r3, #44]	@ 0x2c
		p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 8002478:	4b6f      	ldr	r3, [pc, #444]	@ (8002638 <canOpen+0x2c8>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	4413      	add	r3, r2
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	631a      	str	r2, [r3, #48]	@ 0x30
		p_can->Init.StdFiltersNbr = 28;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	221c      	movs	r2, #28
 800248e:	635a      	str	r2, [r3, #52]	@ 0x34
		p_can->Init.ExtFiltersNbr = 8;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2208      	movs	r2, #8
 8002494:	639a      	str	r2, [r3, #56]	@ 0x38
		p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2200      	movs	r2, #0
 800249a:	63da      	str	r2, [r3, #60]	@ 0x3c

		can_tbl[ch].mode = mode;
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	4a60      	ldr	r2, [pc, #384]	@ (8002620 <canOpen+0x2b0>)
 80024a0:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3328      	adds	r3, #40	@ 0x28
 80024ac:	79ba      	ldrb	r2, [r7, #6]
 80024ae:	701a      	strb	r2, [r3, #0]
		can_tbl[ch].frame = frame;
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002620 <canOpen+0x2b0>)
 80024b4:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3329      	adds	r3, #41	@ 0x29
 80024c0:	797a      	ldrb	r2, [r7, #5]
 80024c2:	701a      	strb	r2, [r3, #0]
		can_tbl[ch].baud = baud;
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	4a56      	ldr	r2, [pc, #344]	@ (8002620 <canOpen+0x2b0>)
 80024c8:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	332a      	adds	r3, #42	@ 0x2a
 80024d4:	793a      	ldrb	r2, [r7, #4]
 80024d6:	701a      	strb	r2, [r3, #0]
		can_tbl[ch].baud_data = baud_data;
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	4a51      	ldr	r2, [pc, #324]	@ (8002620 <canOpen+0x2b0>)
 80024dc:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	332b      	adds	r3, #43	@ 0x2b
 80024e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80024ec:	701a      	strb	r2, [r3, #0]
		can_tbl[ch].fifo_idx = FDCAN_RX_FIFO0;
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002620 <canOpen+0x2b0>)
 80024f2:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3320      	adds	r3, #32
 80024fe:	2240      	movs	r2, #64	@ 0x40
 8002500:	601a      	str	r2, [r3, #0]
		can_tbl[ch].enable_int = FDCAN_IT_LIST_RX_FIFO0 |
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	4a46      	ldr	r2, [pc, #280]	@ (8002620 <canOpen+0x2b0>)
 8002506:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3324      	adds	r3, #36	@ 0x24
 8002512:	4a4a      	ldr	r2, [pc, #296]	@ (800263c <canOpen+0x2cc>)
 8002514:	601a      	str	r2, [r3, #0]
		FDCAN_IT_BUS_OFF |
		FDCAN_IT_ERROR_WARNING |
		FDCAN_IT_ERROR_PASSIVE;

		can_tbl[ch].err_code = CAN_ERR_NONE;
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	4a41      	ldr	r2, [pc, #260]	@ (8002620 <canOpen+0x2b0>)
 800251a:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3304      	adds	r3, #4
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
		ret = true;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
		gpioPinWrite(GPIO_CH_CAN_SLIENT, false); //on
 800252e:	2100      	movs	r1, #0
 8002530:	2000      	movs	r0, #0
 8002532:	f001 fb1f 	bl	8003b74 <gpioPinWrite>
		break;
 8002536:	bf00      	nop
	}

	if (ret != true) {
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <canOpen+0x1d8>
		return false;
 8002544:	2300      	movs	r3, #0
 8002546:	e066      	b.n	8002616 <canOpen+0x2a6>
	}

	if (HAL_FDCAN_Init(p_can) != HAL_OK) {
 8002548:	6938      	ldr	r0, [r7, #16]
 800254a:	f003 fcbb 	bl	8005ec4 <HAL_FDCAN_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <canOpen+0x1e8>
		return false;
 8002554:	2300      	movs	r3, #0
 8002556:	e05e      	b.n	8002616 <canOpen+0x2a6>
	}

	canSetFilterType(CAN_ID_MASK);
 8002558:	2000      	movs	r0, #0
 800255a:	f000 f8af 	bl	80026bc <canSetFilterType>
	canConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 800255e:	79f8      	ldrb	r0, [r7, #7]
 8002560:	2300      	movs	r3, #0
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2300      	movs	r3, #0
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	f000 f8b9 	bl	80026e0 <canConfigFilter>
	canConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 800256e:	79f8      	ldrb	r0, [r7, #7]
 8002570:	2300      	movs	r3, #0
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2300      	movs	r3, #0
 8002576:	2201      	movs	r2, #1
 8002578:	2100      	movs	r1, #0
 800257a:	f000 f8b1 	bl	80026e0 <canConfigFilter>

	if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT,
 800257e:	2300      	movs	r3, #0
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	2202      	movs	r2, #2
 8002586:	2102      	movs	r1, #2
 8002588:	6938      	ldr	r0, [r7, #16]
 800258a:	f003 fe4f 	bl	800622c <HAL_FDCAN_ConfigGlobalFilter>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <canOpen+0x228>
	FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
		return false;
 8002594:	2300      	movs	r3, #0
 8002596:	e03e      	b.n	8002616 <canOpen+0x2a6>
	}
	if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	4a21      	ldr	r2, [pc, #132]	@ (8002620 <canOpen+0x2b0>)
 800259c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3324      	adds	r3, #36	@ 0x24
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	4619      	mov	r1, r3
 80025ae:	6938      	ldr	r0, [r7, #16]
 80025b0:	f004 f91b 	bl	80067ea <HAL_FDCAN_ActivateNotification>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <canOpen+0x24e>
			!= HAL_OK) {
		return false;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e02b      	b.n	8002616 <canOpen+0x2a6>
	}

	tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	60fb      	str	r3, [r7, #12]

	if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK)
 80025cc:	2200      	movs	r2, #0
 80025ce:	68f9      	ldr	r1, [r7, #12]
 80025d0:	6938      	ldr	r0, [r7, #16]
 80025d2:	f003 fe5c 	bl	800628e <HAL_FDCAN_ConfigTxDelayCompensation>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <canOpen+0x270>
		return false;
 80025dc:	2300      	movs	r3, #0
 80025de:	e01a      	b.n	8002616 <canOpen+0x2a6>
	if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)
 80025e0:	6938      	ldr	r0, [r7, #16]
 80025e2:	f003 fe76 	bl	80062d2 <HAL_FDCAN_EnableTxDelayCompensation>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <canOpen+0x280>
		return false;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e012      	b.n	8002616 <canOpen+0x2a6>

	if (HAL_FDCAN_Start(p_can) != HAL_OK) {
 80025f0:	6938      	ldr	r0, [r7, #16]
 80025f2:	f003 fe8f 	bl	8006314 <HAL_FDCAN_Start>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <canOpen+0x290>
		return false;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e00a      	b.n	8002616 <canOpen+0x2a6>
	}

	can_tbl[ch].is_open = true;
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	4a07      	ldr	r2, [pc, #28]	@ (8002620 <canOpen+0x2b0>)
 8002604:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3301      	adds	r3, #1
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]

	return ret;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
}
 8002616:	4618      	mov	r0, r3
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}
 800261e:	bf00      	nop
 8002620:	200010f0 	.word	0x200010f0
 8002624:	20003488 	.word	0x20003488
 8002628:	40006400 	.word	0x40006400
 800262c:	0800d42c 	.word	0x0800d42c
 8002630:	0800d438 	.word	0x0800d438
 8002634:	20000004 	.word	0x20000004
 8002638:	20000008 	.word	0x20000008
 800263c:	000e0007 	.word	0x000e0007

08002640 <canGetDlc>:
	p_info->mode = can_tbl[ch].mode;

	return true;
}

CanDlc_t canGetDlc(uint8_t length) {
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
	CanDlc_t ret;

	if (length >= 64)
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b3f      	cmp	r3, #63	@ 0x3f
 800264e:	d902      	bls.n	8002656 <canGetDlc+0x16>
		ret = CAN_DLC_64;
 8002650:	230f      	movs	r3, #15
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e02b      	b.n	80026ae <canGetDlc+0x6e>
	else if (length >= 48)
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2b2f      	cmp	r3, #47	@ 0x2f
 800265a:	d902      	bls.n	8002662 <canGetDlc+0x22>
		ret = CAN_DLC_48;
 800265c:	230e      	movs	r3, #14
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e025      	b.n	80026ae <canGetDlc+0x6e>
	else if (length >= 32)
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b1f      	cmp	r3, #31
 8002666:	d902      	bls.n	800266e <canGetDlc+0x2e>
		ret = CAN_DLC_32;
 8002668:	230d      	movs	r3, #13
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e01f      	b.n	80026ae <canGetDlc+0x6e>
	else if (length >= 24)
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b17      	cmp	r3, #23
 8002672:	d902      	bls.n	800267a <canGetDlc+0x3a>
		ret = CAN_DLC_24;
 8002674:	230c      	movs	r3, #12
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e019      	b.n	80026ae <canGetDlc+0x6e>
	else if (length >= 20)
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	2b13      	cmp	r3, #19
 800267e:	d902      	bls.n	8002686 <canGetDlc+0x46>
		ret = CAN_DLC_20;
 8002680:	230b      	movs	r3, #11
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	e013      	b.n	80026ae <canGetDlc+0x6e>
	else if (length >= 16)
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2b0f      	cmp	r3, #15
 800268a:	d902      	bls.n	8002692 <canGetDlc+0x52>
		ret = CAN_DLC_16;
 800268c:	230a      	movs	r3, #10
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e00d      	b.n	80026ae <canGetDlc+0x6e>
	else if (length >= 12)
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b0b      	cmp	r3, #11
 8002696:	d902      	bls.n	800269e <canGetDlc+0x5e>
		ret = CAN_DLC_12;
 8002698:	2309      	movs	r3, #9
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e007      	b.n	80026ae <canGetDlc+0x6e>
	else if (length >= 8)
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2b07      	cmp	r3, #7
 80026a2:	d902      	bls.n	80026aa <canGetDlc+0x6a>
		ret = CAN_DLC_8;
 80026a4:	2308      	movs	r3, #8
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e001      	b.n	80026ae <canGetDlc+0x6e>
	else
		ret = (CanDlc_t) length;
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	73fb      	strb	r3, [r7, #15]

	return ret;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <canSetFilterType>:

uint8_t canGetLen(CanDlc_t dlc) {
	return dlc_len_tbl[(int) dlc];
}

bool canSetFilterType(CanFilterType_t filter_type) {
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
	can_filter_type = filter_type;
 80026c6:	4a05      	ldr	r2, [pc, #20]	@ (80026dc <canSetFilterType+0x20>)
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	7013      	strb	r3, [r2, #0]
	return true;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20001ac4 	.word	0x20001ac4

080026e0 <canConfigFilter>:
	*p_filter_type = can_filter_type;
	return true;
}

bool canConfigFilter(uint8_t ch, uint8_t index, CanIdType_t id_type,
		uint32_t id, uint32_t id_mask) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4603      	mov	r3, r0
 80026ea:	71fb      	strb	r3, [r7, #7]
 80026ec:	460b      	mov	r3, r1
 80026ee:	71bb      	strb	r3, [r7, #6]
 80026f0:	4613      	mov	r3, r2
 80026f2:	717b      	strb	r3, [r7, #5]
	bool ret = false;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	FDCAN_FilterTypeDef sFilterConfig;

	if (ch >= CAN_MAX_CH)
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <canConfigFilter+0x24>
		return false;
 8002700:	2300      	movs	r3, #0
 8002702:	e03e      	b.n	8002782 <canConfigFilter+0xa2>

	if (id_type == CAN_STD) {
 8002704:	797b      	ldrb	r3, [r7, #5]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <canConfigFilter+0x30>
		sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e002      	b.n	8002716 <canConfigFilter+0x36>
	} else {
		sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002710:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002714:	60fb      	str	r3, [r7, #12]
	}

	if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0) {
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <canConfigFilter+0xac>)
 800271a:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3320      	adds	r3, #32
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b40      	cmp	r3, #64	@ 0x40
 800272a:	d102      	bne.n	8002732 <canConfigFilter+0x52>
		sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800272c:	2301      	movs	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	e001      	b.n	8002736 <canConfigFilter+0x56>
	} else {
		sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8002732:	2302      	movs	r3, #2
 8002734:	61bb      	str	r3, [r7, #24]
	}

	sFilterConfig.FilterIndex = index;
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	613b      	str	r3, [r7, #16]
	if (can_filter_type == CAN_ID_MASK)
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <canConfigFilter+0xb0>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <canConfigFilter+0x68>
		sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002742:	2302      	movs	r3, #2
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e001      	b.n	800274c <canConfigFilter+0x6c>
	else
		sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = id;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = id_mask;
 8002750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002752:	623b      	str	r3, [r7, #32]

	if (HAL_FDCAN_ConfigFilter(can_tbl[ch].p_hfdcan, &sFilterConfig) == HAL_OK) {
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <canConfigFilter+0xac>)
 8002758:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3334      	adds	r3, #52	@ 0x34
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f107 020c 	add.w	r2, r7, #12
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f003 fd03 	bl	8006178 <HAL_FDCAN_ConfigFilter>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <canConfigFilter+0x9e>
		ret = true;
 8002778:	2301      	movs	r3, #1
 800277a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return ret;
 800277e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002782:	4618      	mov	r0, r3
 8002784:	3728      	adds	r7, #40	@ 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200010f0 	.word	0x200010f0
 8002790:	20001ac4 	.word	0x20001ac4

08002794 <canMsgAvailable>:

uint32_t canMsgAvailable(uint8_t ch) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
	if (ch > CAN_MAX_CH)
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d901      	bls.n	80027a8 <canMsgAvailable+0x14>
		return 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e00c      	b.n	80027c2 <canMsgAvailable+0x2e>

	return qbufferAvailable(&can_tbl[ch].q_msg);
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	3338      	adds	r3, #56	@ 0x38
 80027b4:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <canMsgAvailable+0x38>)
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fd82 	bl	80012c4 <qbufferAvailable>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200010f0 	.word	0x200010f0

080027d0 <canMsgWrite>:
	p_msg->dlc = dlc;
	p_msg->length = dlc_len_tbl[dlc];
	return true;
}

bool canMsgWrite(uint8_t ch, can_msg_t *p_msg, uint32_t timeout) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b090      	sub	sp, #64	@ 0x40
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	73fb      	strb	r3, [r7, #15]
	FDCAN_HandleTypeDef *p_can;
	FDCAN_TxHeaderTypeDef tx_header;
	uint32_t pre_time;
	bool ret = true;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (ch > CAN_MAX_CH)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d901      	bls.n	80027ee <canMsgWrite+0x1e>
		return false;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e096      	b.n	800291c <canMsgWrite+0x14c>

	if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002924 <canMsgWrite+0x154>)
 80027f2:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <canMsgWrite+0x3c>
		return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e087      	b.n	800291c <canMsgWrite+0x14c>
	if (can_tbl[ch].err_code & CAN_ERR_PASSIVE)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	4a45      	ldr	r2, [pc, #276]	@ (8002924 <canMsgWrite+0x154>)
 8002810:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <canMsgWrite+0x5a>
		return false;
 8002826:	2300      	movs	r3, #0
 8002828:	e078      	b.n	800291c <canMsgWrite+0x14c>

	p_can = can_tbl[ch].p_hfdcan;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	4a3d      	ldr	r2, [pc, #244]	@ (8002924 <canMsgWrite+0x154>)
 800282e:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3334      	adds	r3, #52	@ 0x34
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch (p_msg->id_type) {
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <canMsgWrite+0x7e>
 8002848:	2b01      	cmp	r3, #1
 800284a:	d003      	beq.n	8002854 <canMsgWrite+0x84>
 800284c:	e006      	b.n	800285c <canMsgWrite+0x8c>
	case CAN_STD:
		tx_header.IdType = FDCAN_STANDARD_ID;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
		break;
 8002852:	e003      	b.n	800285c <canMsgWrite+0x8c>

	case CAN_EXT:
		tx_header.IdType = FDCAN_EXTENDED_ID;
 8002854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002858:	617b      	str	r3, [r7, #20]
		break;
 800285a:	bf00      	nop
	}

	switch (p_msg->frame) {
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002862:	2b02      	cmp	r3, #2
 8002864:	d011      	beq.n	800288a <canMsgWrite+0xba>
 8002866:	2b02      	cmp	r3, #2
 8002868:	dc16      	bgt.n	8002898 <canMsgWrite+0xc8>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <canMsgWrite+0xa4>
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <canMsgWrite+0xae>
 8002872:	e011      	b.n	8002898 <canMsgWrite+0xc8>
	case CAN_CLASSIC:
		tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8002874:	2300      	movs	r3, #0
 8002876:	62bb      	str	r3, [r7, #40]	@ 0x28
		tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800287c:	e00c      	b.n	8002898 <canMsgWrite+0xc8>

	case CAN_FD_NO_BRS:
		tx_header.FDFormat = FDCAN_FD_CAN;
 800287e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
		tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8002888:	e006      	b.n	8002898 <canMsgWrite+0xc8>

	case CAN_FD_BRS:
		tx_header.FDFormat = FDCAN_FD_CAN;
 800288a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800288e:	62bb      	str	r3, [r7, #40]	@ 0x28
		tx_header.BitRateSwitch = FDCAN_BRS_ON;
 8002890:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8002896:	bf00      	nop
	}

	tx_header.Identifier = p_msg->id;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	613b      	str	r3, [r7, #16]
	tx_header.MessageMarker = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	633b      	str	r3, [r7, #48]	@ 0x30
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
	tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
	tx_header.DataLength = dlc_tbl[p_msg->dlc];
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <canMsgWrite+0x158>)
 80028b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028bc:	61fb      	str	r3, [r7, #28]

	if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0) {
 80028be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028c0:	f003 ff81 	bl	80067c6 <HAL_FDCAN_GetTxFifoFreeLevel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <canMsgWrite+0xfe>
		return false;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e026      	b.n	800291c <canMsgWrite+0x14c>
	}

	pre_time = millis();
 80028ce:	f7fe fbee 	bl	80010ae <millis>
 80028d2:	6378      	str	r0, [r7, #52]	@ 0x34
	if (HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1d9a      	adds	r2, r3, #6
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	4619      	mov	r1, r3
 80028de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80028e0:	f003 fdb0 	bl	8006444 <HAL_FDCAN_AddMessageToTxFifoQ>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <canMsgWrite+0x142>
			== HAL_OK) {
		/* Wait transmission complete */
		while (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0) {
 80028ea:	e00b      	b.n	8002904 <canMsgWrite+0x134>
			if (millis() - pre_time >= timeout) {
 80028ec:	f7fe fbdf 	bl	80010ae <millis>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d803      	bhi.n	8002904 <canMsgWrite+0x134>
				ret = false;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				break;
 8002902:	e009      	b.n	8002918 <canMsgWrite+0x148>
		while (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0) {
 8002904:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002906:	f003 ff5e 	bl	80067c6 <HAL_FDCAN_GetTxFifoFreeLevel>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ed      	beq.n	80028ec <canMsgWrite+0x11c>
 8002910:	e002      	b.n	8002918 <canMsgWrite+0x148>
			}
		}
	} else {
		ret = false;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	return ret;
 8002918:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800291c:	4618      	mov	r0, r3
 800291e:	3740      	adds	r7, #64	@ 0x40
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200010f0 	.word	0x200010f0
 8002928:	0800d3ec 	.word	0x0800d3ec

0800292c <canMsgRead>:

bool canMsgRead(uint8_t ch, can_msg_t *p_msg) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
	bool ret = true;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]

	if (ch > CAN_MAX_CH)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d901      	bls.n	8002946 <canMsgRead+0x1a>
		return 0;
 8002942:	2300      	movs	r3, #0
 8002944:	e010      	b.n	8002968 <canMsgRead+0x3c>

	ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t*) p_msg, 1);
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	3338      	adds	r3, #56	@ 0x38
 8002952:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <canMsgRead+0x44>)
 8002954:	4413      	add	r3, r2
 8002956:	3304      	adds	r3, #4
 8002958:	2201      	movs	r2, #1
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fc46 	bl	80011ee <qbufferRead>
 8002962:	4603      	mov	r3, r0
 8002964:	73fb      	strb	r3, [r7, #15]

	return ret;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200010f0 	.word	0x200010f0

08002974 <canGetRxErrCount>:

uint16_t canGetRxErrCount(uint8_t ch) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
	uint16_t ret = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	83fb      	strh	r3, [r7, #30]
	HAL_StatusTypeDef status;
	FDCAN_ErrorCountersTypeDef error_counters;

	if (ch > CAN_MAX_CH)
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d901      	bls.n	800298c <canGetRxErrCount+0x18>
		return 0;
 8002988:	2300      	movs	r3, #0
 800298a:	e016      	b.n	80029ba <canGetRxErrCount+0x46>

	status = HAL_FDCAN_GetErrorCounters(can_tbl[ch].p_hfdcan, &error_counters);
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a0d      	ldr	r2, [pc, #52]	@ (80029c4 <canGetRxErrCount+0x50>)
 8002990:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3334      	adds	r3, #52	@ 0x34
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f107 020c 	add.w	r2, r7, #12
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f003 fee9 	bl	800677c <HAL_FDCAN_GetErrorCounters>
 80029aa:	4603      	mov	r3, r0
 80029ac:	777b      	strb	r3, [r7, #29]
	if (status == HAL_OK) {
 80029ae:	7f7b      	ldrb	r3, [r7, #29]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <canGetRxErrCount+0x44>
		ret = error_counters.RxErrorCnt;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	83fb      	strh	r3, [r7, #30]
	}

	return ret;
 80029b8:	8bfb      	ldrh	r3, [r7, #30]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200010f0 	.word	0x200010f0

080029c8 <canGetTxErrCount>:

uint16_t canGetTxErrCount(uint8_t ch) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	uint16_t ret = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	83fb      	strh	r3, [r7, #30]
	HAL_StatusTypeDef status;
	FDCAN_ErrorCountersTypeDef error_counters;

	if (ch > CAN_MAX_CH)
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d901      	bls.n	80029e0 <canGetTxErrCount+0x18>
		return 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	e016      	b.n	8002a0e <canGetTxErrCount+0x46>

	status = HAL_FDCAN_GetErrorCounters(can_tbl[ch].p_hfdcan, &error_counters);
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002a18 <canGetTxErrCount+0x50>)
 80029e4:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3334      	adds	r3, #52	@ 0x34
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f107 020c 	add.w	r2, r7, #12
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 febf 	bl	800677c <HAL_FDCAN_GetErrorCounters>
 80029fe:	4603      	mov	r3, r0
 8002a00:	777b      	strb	r3, [r7, #29]
	if (status == HAL_OK) {
 8002a02:	7f7b      	ldrb	r3, [r7, #29]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <canGetTxErrCount+0x44>
		ret = error_counters.TxErrorCnt;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	83fb      	strh	r3, [r7, #30]
	}

	return ret;
 8002a0c:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200010f0 	.word	0x200010f0

08002a1c <canRecovery>:
		return;

	can_tbl[ch].handler = NULL;
}

void canRecovery(uint8_t ch) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
	if (ch > CAN_MAX_CH)
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d842      	bhi.n	8002ab2 <canRecovery+0x96>
		return;
	if (can_tbl[ch].is_open != true)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4a24      	ldr	r2, [pc, #144]	@ (8002ac0 <canRecovery+0xa4>)
 8002a30:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	f083 0301 	eor.w	r3, r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d136      	bne.n	8002ab6 <canRecovery+0x9a>
		return;

	can_tbl[ch].err_code = CAN_ERR_NONE;
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac0 <canRecovery+0xa4>)
 8002a4c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	3304      	adds	r3, #4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

	HAL_FDCAN_Stop(can_tbl[ch].p_hfdcan);
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ac0 <canRecovery+0xa4>)
 8002a60:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3334      	adds	r3, #52	@ 0x34
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fc78 	bl	8006364 <HAL_FDCAN_Stop>
	HAL_FDCAN_Start(can_tbl[ch].p_hfdcan);
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <canRecovery+0xa4>)
 8002a78:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	3334      	adds	r3, #52	@ 0x34
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 fc44 	bl	8006314 <HAL_FDCAN_Start>

	can_tbl[ch].recovery_cnt++;
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	490c      	ldr	r1, [pc, #48]	@ (8002ac0 <canRecovery+0xa4>)
 8002a90:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002a94:	fb03 f202 	mul.w	r2, r3, r2
 8002a98:	440a      	add	r2, r1
 8002a9a:	320c      	adds	r2, #12
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	3201      	adds	r2, #1
 8002aa0:	4907      	ldr	r1, [pc, #28]	@ (8002ac0 <canRecovery+0xa4>)
 8002aa2:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	440b      	add	r3, r1
 8002aac:	330c      	adds	r3, #12
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e002      	b.n	8002ab8 <canRecovery+0x9c>
		return;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <canRecovery+0x9c>
		return;
 8002ab6:	bf00      	nop
}
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200010f0 	.word	0x200010f0

08002ac4 <canUpdate>:

bool canUpdate(void) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
	enum {
		CAN_STATE_IDLE, CAN_STATE_WAIT
	};
	bool ret = false;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
	can_tbl_t *p_can;

	for (int i = 0; i < CAN_MAX_CH; i++) {
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	e02f      	b.n	8002b34 <canUpdate+0x70>
		p_can = &can_tbl[i];
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <canUpdate+0x80>)
 8002ae0:	4413      	add	r3, r2
 8002ae2:	607b      	str	r3, [r7, #4]

		switch (p_can->state) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7a1b      	ldrb	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <canUpdate+0x2e>
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d011      	beq.n	8002b14 <canUpdate+0x50>
 8002af0:	e01d      	b.n	8002b2e <canUpdate+0x6a>
		case CAN_STATE_IDLE:
			if (p_can->err_code & CAN_ERR_BUS_OFF) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d014      	beq.n	8002b28 <canUpdate+0x64>
				canRecovery(i);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff8a 	bl	8002a1c <canRecovery>
				p_can->state = CAN_STATE_WAIT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	721a      	strb	r2, [r3, #8]
				ret = true;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002b12:	e009      	b.n	8002b28 <canUpdate+0x64>

		case CAN_STATE_WAIT:
			if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0) {
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <canUpdate+0x68>
				p_can->state = CAN_STATE_IDLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	721a      	strb	r2, [r3, #8]
			}
			break;
 8002b26:	e001      	b.n	8002b2c <canUpdate+0x68>
			break;
 8002b28:	bf00      	nop
 8002b2a:	e000      	b.n	8002b2e <canUpdate+0x6a>
			break;
 8002b2c:	bf00      	nop
	for (int i = 0; i < CAN_MAX_CH; i++) {
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3301      	adds	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	ddcc      	ble.n	8002ad4 <canUpdate+0x10>
		}
	}

	return ret;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200010f0 	.word	0x200010f0

08002b48 <canRxFifoCallback>:

void canRxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	@ 0x38
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
	can_msg_t *rx_buf;
	FDCAN_RxHeaderTypeDef rx_header;

	rx_buf = (can_msg_t*) qbufferPeekWrite(&can_tbl[ch].q_msg);
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	3338      	adds	r3, #56	@ 0x38
 8002b60:	4a5e      	ldr	r2, [pc, #376]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fb99 	bl	800129e <qbufferPeekWrite>
 8002b6c:	6378      	str	r0, [r7, #52]	@ 0x34

	if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header,
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	4a5a      	ldr	r2, [pc, #360]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002b72:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3320      	adds	r3, #32
 8002b7e:	6819      	ldr	r1, [r3, #0]
			rx_buf->data) == HAL_OK) {
 8002b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b82:	3306      	adds	r3, #6
	if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header,
 8002b84:	f107 020c 	add.w	r2, r7, #12
 8002b88:	6838      	ldr	r0, [r7, #0]
 8002b8a:	f003 fc9f 	bl	80064cc <HAL_FDCAN_GetRxMessage>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f040 809e 	bne.w	8002cd2 <canRxFifoCallback+0x18a>
		if (rx_header.IdType == FDCAN_STANDARD_ID) {
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <canRxFifoCallback+0x64>
			rx_buf->id = rx_header.Identifier;
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba0:	601a      	str	r2, [r3, #0]
			rx_buf->id_type = CAN_STD;
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8002baa:	e006      	b.n	8002bba <canRxFifoCallback+0x72>
		} else {
			rx_buf->id = rx_header.Identifier;
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb0:	601a      	str	r2, [r3, #0]
			rx_buf->id_type = CAN_EXT;
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
		}
		rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	4a47      	ldr	r2, [pc, #284]	@ (8002ce0 <canRxFifoCallback+0x198>)
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bcc:	809a      	strh	r2, [r3, #4]
		rx_buf->dlc = canGetDlc(rx_buf->length);
 8002bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd0:	889b      	ldrh	r3, [r3, #4]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fd33 	bl	8002640 <canGetDlc>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

		if (rx_header.FDFormat == FDCAN_FD_CAN) {
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bea:	d10d      	bne.n	8002c08 <canRxFifoCallback+0xc0>
			if (rx_header.BitRateSwitch == FDCAN_BRS_ON) {
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf2:	d104      	bne.n	8002bfe <canRxFifoCallback+0xb6>
				rx_buf->frame = CAN_FD_BRS;
 8002bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002bfc:	e008      	b.n	8002c10 <canRxFifoCallback+0xc8>
			} else {
				rx_buf->frame = CAN_FD_NO_BRS;
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002c06:	e003      	b.n	8002c10 <canRxFifoCallback+0xc8>
			}
		} else {
			rx_buf->frame = CAN_CLASSIC;
 8002c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		}

		can_tbl[ch].rx_cnt++;
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	4932      	ldr	r1, [pc, #200]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002c14:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002c18:	fb03 f202 	mul.w	r2, r3, r2
 8002c1c:	440a      	add	r2, r1
 8002c1e:	322c      	adds	r2, #44	@ 0x2c
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	3201      	adds	r2, #1
 8002c24:	492d      	ldr	r1, [pc, #180]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002c26:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002c2a:	fb00 f303 	mul.w	r3, r0, r3
 8002c2e:	440b      	add	r3, r1
 8002c30:	332c      	adds	r3, #44	@ 0x2c
 8002c32:	601a      	str	r2, [r3, #0]

		if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != true) {
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	3338      	adds	r3, #56	@ 0x38
 8002c40:	4a26      	ldr	r2, [pc, #152]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002c42:	4413      	add	r3, r2
 8002c44:	3304      	adds	r3, #4
 8002c46:	2201      	movs	r2, #1
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fa73 	bl	8001136 <qbufferWrite>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f083 0301 	eor.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d011      	beq.n	8002c80 <canRxFifoCallback+0x138>
			can_tbl[ch].q_rx_full_cnt++;
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	491f      	ldr	r1, [pc, #124]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002c60:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002c64:	fb03 f202 	mul.w	r2, r3, r2
 8002c68:	440a      	add	r2, r1
 8002c6a:	3210      	adds	r2, #16
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	3201      	adds	r2, #1
 8002c70:	491a      	ldr	r1, [pc, #104]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002c72:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3310      	adds	r3, #16
 8002c7e:	601a      	str	r2, [r3, #0]
		}

		if (can_tbl[ch].handler != NULL) {
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002c84:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3338      	adds	r3, #56	@ 0x38
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01d      	beq.n	8002cd2 <canRxFifoCallback+0x18a>
			if ((*can_tbl[ch].handler)(ch, CAN_EVT_MSG, (void*) rx_buf) == true) {
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	4a10      	ldr	r2, [pc, #64]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002c9a:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3338      	adds	r3, #56	@ 0x38
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	79f8      	ldrb	r0, [r7, #7]
 8002caa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cac:	2101      	movs	r1, #1
 8002cae:	4798      	blx	r3
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00d      	beq.n	8002cd2 <canRxFifoCallback+0x18a>
				qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	3338      	adds	r3, #56	@ 0x38
 8002cc2:	4a06      	ldr	r2, [pc, #24]	@ (8002cdc <canRxFifoCallback+0x194>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fa8e 	bl	80011ee <qbufferRead>
			}
		}
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	3738      	adds	r7, #56	@ 0x38
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200010f0 	.word	0x200010f0
 8002ce0:	0800d3ac 	.word	0x0800d3ac

08002ce4 <canErrPrint>:
		return;

	can_tbl[ch].err_code = CAN_ERR_NONE;
}

void canErrPrint(uint8_t ch) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
	uint32_t err_code;

	if (ch > CAN_MAX_CH)
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d822      	bhi.n	8002d3a <canErrPrint+0x56>
		return;

	err_code = can_tbl[ch].err_code;
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	4a13      	ldr	r2, [pc, #76]	@ (8002d44 <canErrPrint+0x60>)
 8002cf8:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

	if (err_code & CAN_ERR_PASSIVE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <canErrPrint+0x34>
		logPrintf("  ERR : CAN_ERR_PASSIVE\n");
 8002d12:	480d      	ldr	r0, [pc, #52]	@ (8002d48 <canErrPrint+0x64>)
 8002d14:	f001 f994 	bl	8004040 <logPrintf>
	if (err_code & CAN_ERR_WARNING)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <canErrPrint+0x44>
		logPrintf("  ERR : CAN_ERR_WARNING\n");
 8002d22:	480a      	ldr	r0, [pc, #40]	@ (8002d4c <canErrPrint+0x68>)
 8002d24:	f001 f98c 	bl	8004040 <logPrintf>
	if (err_code & CAN_ERR_BUS_OFF)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <canErrPrint+0x58>
		logPrintf("  ERR : CAN_ERR_BUS_OFF\n");
 8002d32:	4807      	ldr	r0, [pc, #28]	@ (8002d50 <canErrPrint+0x6c>)
 8002d34:	f001 f984 	bl	8004040 <logPrintf>
 8002d38:	e000      	b.n	8002d3c <canErrPrint+0x58>
		return;
 8002d3a:	bf00      	nop
}
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200010f0 	.word	0x200010f0
 8002d48:	0800ca94 	.word	0x0800ca94
 8002d4c:	0800cab0 	.word	0x0800cab0
 8002d50:	0800cacc 	.word	0x0800cacc

08002d54 <canErrUpdate>:

void canErrUpdate(uint8_t ch) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08e      	sub	sp, #56	@ 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	FDCAN_ProtocolStatusTypeDef protocol_status;
	CanEvent_t can_evt = CAN_EVT_NONE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	HAL_FDCAN_GetProtocolStatus(can_tbl[ch].p_hfdcan, &protocol_status);
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	4a5e      	ldr	r2, [pc, #376]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002d68:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3334      	adds	r3, #52	@ 0x34
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f107 0208 	add.w	r2, r7, #8
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fcad 	bl	80066dc <HAL_FDCAN_GetProtocolStatus>

	if (protocol_status.ErrorPassive) {
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d017      	beq.n	8002db8 <canErrUpdate+0x64>
		can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	4a55      	ldr	r2, [pc, #340]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002d8c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	494f      	ldr	r1, [pc, #316]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002da2:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002da6:	fb00 f303 	mul.w	r3, r0, r3
 8002daa:	440b      	add	r3, r1
 8002dac:	3304      	adds	r3, #4
 8002dae:	601a      	str	r2, [r3, #0]
		can_evt = CAN_EVT_ERR_PASSIVE;
 8002db0:	2302      	movs	r3, #2
 8002db2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002db6:	e013      	b.n	8002de0 <canErrUpdate+0x8c>
	} else {
		can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	4a49      	ldr	r2, [pc, #292]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002dbc:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	4943      	ldr	r1, [pc, #268]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002dd2:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	440b      	add	r3, r1
 8002ddc:	3304      	adds	r3, #4
 8002dde:	601a      	str	r2, [r3, #0]
	}

	if (protocol_status.Warning) {
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <canErrUpdate+0xc2>
		can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002dea:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3304      	adds	r3, #4
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	f042 0202 	orr.w	r2, r2, #2
 8002dfe:	4938      	ldr	r1, [pc, #224]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002e00:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002e04:	fb00 f303 	mul.w	r3, r0, r3
 8002e08:	440b      	add	r3, r1
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	601a      	str	r2, [r3, #0]
		can_evt = CAN_EVT_ERR_WARNING;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002e14:	e013      	b.n	8002e3e <canErrUpdate+0xea>
	} else {
		can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	4a31      	ldr	r2, [pc, #196]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002e1a:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3304      	adds	r3, #4
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	f022 0202 	bic.w	r2, r2, #2
 8002e2e:	492c      	ldr	r1, [pc, #176]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002e30:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002e34:	fb00 f303 	mul.w	r3, r0, r3
 8002e38:	440b      	add	r3, r1
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	601a      	str	r2, [r3, #0]
	}

	if (protocol_status.BusOff) {
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d017      	beq.n	8002e74 <canErrUpdate+0x120>
		can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	4a26      	ldr	r2, [pc, #152]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002e48:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3304      	adds	r3, #4
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	f042 0204 	orr.w	r2, r2, #4
 8002e5c:	4920      	ldr	r1, [pc, #128]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002e5e:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002e62:	fb00 f303 	mul.w	r3, r0, r3
 8002e66:	440b      	add	r3, r1
 8002e68:	3304      	adds	r3, #4
 8002e6a:	601a      	str	r2, [r3, #0]
		can_evt = CAN_EVT_ERR_BUS_OFF;
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002e72:	e013      	b.n	8002e9c <canErrUpdate+0x148>
	} else {
		can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002e78:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3304      	adds	r3, #4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f022 0204 	bic.w	r2, r2, #4
 8002e8c:	4914      	ldr	r1, [pc, #80]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002e8e:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002e92:	fb00 f303 	mul.w	r3, r0, r3
 8002e96:	440b      	add	r3, r1
 8002e98:	3304      	adds	r3, #4
 8002e9a:	601a      	str	r2, [r3, #0]
	}

	if (can_tbl[ch].handler != NULL) {
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002ea0:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3338      	adds	r3, #56	@ 0x38
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d011      	beq.n	8002ed6 <canErrUpdate+0x182>
		if (can_evt != CAN_EVT_NONE) {
 8002eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <canErrUpdate+0x182>
			(*can_tbl[ch].handler)(ch, can_evt, NULL);
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	4a08      	ldr	r2, [pc, #32]	@ (8002ee0 <canErrUpdate+0x18c>)
 8002ebe:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3338      	adds	r3, #56	@ 0x38
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8002ed0:	79f8      	ldrb	r0, [r7, #7]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4798      	blx	r3
		}
	}
}
 8002ed6:	bf00      	nop
 8002ed8:	3738      	adds	r7, #56	@ 0x38
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200010f0 	.word	0x200010f0

08002ee4 <canInfoPrint>:

void canInfoPrint(uint8_t ch) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
	can_tbl_t *p_can = &can_tbl[ch];
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	4a60      	ldr	r2, [pc, #384]	@ (800307c <canInfoPrint+0x198>)
 8002efa:	4413      	add	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
#define canPrintf   cliPrintf
#else
#define canPrintf   logPrintf
#endif

	canPrintf("ch            : ");
 8002efe:	4860      	ldr	r0, [pc, #384]	@ (8003080 <canInfoPrint+0x19c>)
 8002f00:	f7fe ff5c 	bl	8001dbc <cliPrintf>
	switch (ch) {
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <canInfoPrint+0x2c>
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d004      	beq.n	8002f18 <canInfoPrint+0x34>
 8002f0e:	e007      	b.n	8002f20 <canInfoPrint+0x3c>
	case _DEF_CAN1:
		canPrintf("_DEF_CAN1\n");
 8002f10:	485c      	ldr	r0, [pc, #368]	@ (8003084 <canInfoPrint+0x1a0>)
 8002f12:	f7fe ff53 	bl	8001dbc <cliPrintf>
		break;
 8002f16:	e003      	b.n	8002f20 <canInfoPrint+0x3c>
	case _DEF_CAN2:
		canPrintf("_DEF_CAN2\n");
 8002f18:	485b      	ldr	r0, [pc, #364]	@ (8003088 <canInfoPrint+0x1a4>)
 8002f1a:	f7fe ff4f 	bl	8001dbc <cliPrintf>
		break;
 8002f1e:	bf00      	nop
	}

	canPrintf("is_open       : ");
 8002f20:	485a      	ldr	r0, [pc, #360]	@ (800308c <canInfoPrint+0x1a8>)
 8002f22:	f7fe ff4b 	bl	8001dbc <cliPrintf>
	if (p_can->is_open)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <canInfoPrint+0x52>
		canPrintf("true\n");
 8002f2e:	4858      	ldr	r0, [pc, #352]	@ (8003090 <canInfoPrint+0x1ac>)
 8002f30:	f7fe ff44 	bl	8001dbc <cliPrintf>
 8002f34:	e002      	b.n	8002f3c <canInfoPrint+0x58>
	else
		canPrintf("false\n");
 8002f36:	4857      	ldr	r0, [pc, #348]	@ (8003094 <canInfoPrint+0x1b0>)
 8002f38:	f7fe ff40 	bl	8001dbc <cliPrintf>

	canPrintf("baud          : ");
 8002f3c:	4856      	ldr	r0, [pc, #344]	@ (8003098 <canInfoPrint+0x1b4>)
 8002f3e:	f7fe ff3d 	bl	8001dbc <cliPrintf>
	switch (p_can->baud) {
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d821      	bhi.n	8002f90 <canInfoPrint+0xac>
 8002f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <canInfoPrint+0x70>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f69 	.word	0x08002f69
 8002f58:	08002f71 	.word	0x08002f71
 8002f5c:	08002f79 	.word	0x08002f79
 8002f60:	08002f81 	.word	0x08002f81
 8002f64:	08002f89 	.word	0x08002f89
	case CAN_100K:
		canPrintf("100K\n");
 8002f68:	484c      	ldr	r0, [pc, #304]	@ (800309c <canInfoPrint+0x1b8>)
 8002f6a:	f7fe ff27 	bl	8001dbc <cliPrintf>
		break;
 8002f6e:	e010      	b.n	8002f92 <canInfoPrint+0xae>
	case CAN_125K:
		canPrintf("125K\n");
 8002f70:	484b      	ldr	r0, [pc, #300]	@ (80030a0 <canInfoPrint+0x1bc>)
 8002f72:	f7fe ff23 	bl	8001dbc <cliPrintf>
		break;
 8002f76:	e00c      	b.n	8002f92 <canInfoPrint+0xae>
	case CAN_250K:
		canPrintf("250K\n");
 8002f78:	484a      	ldr	r0, [pc, #296]	@ (80030a4 <canInfoPrint+0x1c0>)
 8002f7a:	f7fe ff1f 	bl	8001dbc <cliPrintf>
		break;
 8002f7e:	e008      	b.n	8002f92 <canInfoPrint+0xae>
	case CAN_500K:
		canPrintf("500K\n");
 8002f80:	4849      	ldr	r0, [pc, #292]	@ (80030a8 <canInfoPrint+0x1c4>)
 8002f82:	f7fe ff1b 	bl	8001dbc <cliPrintf>
		break;
 8002f86:	e004      	b.n	8002f92 <canInfoPrint+0xae>
	case CAN_1M:
		canPrintf("1M\n");
 8002f88:	4848      	ldr	r0, [pc, #288]	@ (80030ac <canInfoPrint+0x1c8>)
 8002f8a:	f7fe ff17 	bl	8001dbc <cliPrintf>
		break;
 8002f8e:	e000      	b.n	8002f92 <canInfoPrint+0xae>
	default:
		break;
 8002f90:	bf00      	nop
	}

	canPrintf("baud data     : ");
 8002f92:	4847      	ldr	r0, [pc, #284]	@ (80030b0 <canInfoPrint+0x1cc>)
 8002f94:	f7fe ff12 	bl	8001dbc <cliPrintf>
	switch (p_can->baud_data) {
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002f9e:	2b07      	cmp	r3, #7
 8002fa0:	d832      	bhi.n	8003008 <canInfoPrint+0x124>
 8002fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa8 <canInfoPrint+0xc4>)
 8002fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa8:	08002fc9 	.word	0x08002fc9
 8002fac:	08002fd1 	.word	0x08002fd1
 8002fb0:	08002fd9 	.word	0x08002fd9
 8002fb4:	08002fe1 	.word	0x08002fe1
 8002fb8:	08002fe9 	.word	0x08002fe9
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08002ff9 	.word	0x08002ff9
 8002fc4:	08003001 	.word	0x08003001
	case CAN_100K:
		canPrintf("100K\n");
 8002fc8:	4834      	ldr	r0, [pc, #208]	@ (800309c <canInfoPrint+0x1b8>)
 8002fca:	f7fe fef7 	bl	8001dbc <cliPrintf>
		break;
 8002fce:	e01b      	b.n	8003008 <canInfoPrint+0x124>
	case CAN_125K:
		canPrintf("125K\n");
 8002fd0:	4833      	ldr	r0, [pc, #204]	@ (80030a0 <canInfoPrint+0x1bc>)
 8002fd2:	f7fe fef3 	bl	8001dbc <cliPrintf>
		break;
 8002fd6:	e017      	b.n	8003008 <canInfoPrint+0x124>
	case CAN_250K:
		canPrintf("250K\n");
 8002fd8:	4832      	ldr	r0, [pc, #200]	@ (80030a4 <canInfoPrint+0x1c0>)
 8002fda:	f7fe feef 	bl	8001dbc <cliPrintf>
		break;
 8002fde:	e013      	b.n	8003008 <canInfoPrint+0x124>
	case CAN_500K:
		canPrintf("500K\n");
 8002fe0:	4831      	ldr	r0, [pc, #196]	@ (80030a8 <canInfoPrint+0x1c4>)
 8002fe2:	f7fe feeb 	bl	8001dbc <cliPrintf>
		break;
 8002fe6:	e00f      	b.n	8003008 <canInfoPrint+0x124>
	case CAN_1M:
		canPrintf("1M\n");
 8002fe8:	4830      	ldr	r0, [pc, #192]	@ (80030ac <canInfoPrint+0x1c8>)
 8002fea:	f7fe fee7 	bl	8001dbc <cliPrintf>
		break;
 8002fee:	e00b      	b.n	8003008 <canInfoPrint+0x124>

	case CAN_2M:
		canPrintf("2M\n");
 8002ff0:	4830      	ldr	r0, [pc, #192]	@ (80030b4 <canInfoPrint+0x1d0>)
 8002ff2:	f7fe fee3 	bl	8001dbc <cliPrintf>
		break;
 8002ff6:	e007      	b.n	8003008 <canInfoPrint+0x124>
	case CAN_4M:
		canPrintf("4M\n");
 8002ff8:	482f      	ldr	r0, [pc, #188]	@ (80030b8 <canInfoPrint+0x1d4>)
 8002ffa:	f7fe fedf 	bl	8001dbc <cliPrintf>
		break;
 8002ffe:	e003      	b.n	8003008 <canInfoPrint+0x124>
	case CAN_5M:
		canPrintf("5M\n");
 8003000:	482e      	ldr	r0, [pc, #184]	@ (80030bc <canInfoPrint+0x1d8>)
 8003002:	f7fe fedb 	bl	8001dbc <cliPrintf>
		break;
 8003006:	bf00      	nop
	}

	canPrintf("mode          : ");
 8003008:	482d      	ldr	r0, [pc, #180]	@ (80030c0 <canInfoPrint+0x1dc>)
 800300a:	f7fe fed7 	bl	8001dbc <cliPrintf>
	switch (p_can->mode) {
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003014:	2b02      	cmp	r3, #2
 8003016:	d00e      	beq.n	8003036 <canInfoPrint+0x152>
 8003018:	2b02      	cmp	r3, #2
 800301a:	dc10      	bgt.n	800303e <canInfoPrint+0x15a>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <canInfoPrint+0x142>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d004      	beq.n	800302e <canInfoPrint+0x14a>
 8003024:	e00b      	b.n	800303e <canInfoPrint+0x15a>
	case CAN_NORMAL:
		canPrintf("NORMAL\n");
 8003026:	4827      	ldr	r0, [pc, #156]	@ (80030c4 <canInfoPrint+0x1e0>)
 8003028:	f7fe fec8 	bl	8001dbc <cliPrintf>
		break;
 800302c:	e007      	b.n	800303e <canInfoPrint+0x15a>
	case CAN_MONITOR:
		canPrintf("MONITOR\n");
 800302e:	4826      	ldr	r0, [pc, #152]	@ (80030c8 <canInfoPrint+0x1e4>)
 8003030:	f7fe fec4 	bl	8001dbc <cliPrintf>
		break;
 8003034:	e003      	b.n	800303e <canInfoPrint+0x15a>
	case CAN_LOOPBACK:
		canPrintf("LOOPBACK\n");
 8003036:	4825      	ldr	r0, [pc, #148]	@ (80030cc <canInfoPrint+0x1e8>)
 8003038:	f7fe fec0 	bl	8001dbc <cliPrintf>
		break;
 800303c:	bf00      	nop
	}

	canPrintf("frame         : ");
 800303e:	4824      	ldr	r0, [pc, #144]	@ (80030d0 <canInfoPrint+0x1ec>)
 8003040:	f7fe febc 	bl	8001dbc <cliPrintf>
	switch (p_can->frame) {
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800304a:	2b02      	cmp	r3, #2
 800304c:	d00e      	beq.n	800306c <canInfoPrint+0x188>
 800304e:	2b02      	cmp	r3, #2
 8003050:	dc10      	bgt.n	8003074 <canInfoPrint+0x190>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <canInfoPrint+0x178>
 8003056:	2b01      	cmp	r3, #1
 8003058:	d004      	beq.n	8003064 <canInfoPrint+0x180>
		break;
	case CAN_FD_BRS:
		canPrintf("CAN_FD_BRS\n");
		break;
	}
}
 800305a:	e00b      	b.n	8003074 <canInfoPrint+0x190>
		canPrintf("CAN_CLASSIC\n");
 800305c:	481d      	ldr	r0, [pc, #116]	@ (80030d4 <canInfoPrint+0x1f0>)
 800305e:	f7fe fead 	bl	8001dbc <cliPrintf>
		break;
 8003062:	e007      	b.n	8003074 <canInfoPrint+0x190>
		canPrintf("CAN_FD_NO_BRS\n");
 8003064:	481c      	ldr	r0, [pc, #112]	@ (80030d8 <canInfoPrint+0x1f4>)
 8003066:	f7fe fea9 	bl	8001dbc <cliPrintf>
		break;
 800306a:	e003      	b.n	8003074 <canInfoPrint+0x190>
		canPrintf("CAN_FD_BRS\n");
 800306c:	481b      	ldr	r0, [pc, #108]	@ (80030dc <canInfoPrint+0x1f8>)
 800306e:	f7fe fea5 	bl	8001dbc <cliPrintf>
		break;
 8003072:	bf00      	nop
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	200010f0 	.word	0x200010f0
 8003080:	0800cae8 	.word	0x0800cae8
 8003084:	0800cafc 	.word	0x0800cafc
 8003088:	0800cb08 	.word	0x0800cb08
 800308c:	0800cb14 	.word	0x0800cb14
 8003090:	0800cb28 	.word	0x0800cb28
 8003094:	0800cb30 	.word	0x0800cb30
 8003098:	0800cb38 	.word	0x0800cb38
 800309c:	0800cb4c 	.word	0x0800cb4c
 80030a0:	0800cb54 	.word	0x0800cb54
 80030a4:	0800cb5c 	.word	0x0800cb5c
 80030a8:	0800cb64 	.word	0x0800cb64
 80030ac:	0800cb6c 	.word	0x0800cb6c
 80030b0:	0800cb70 	.word	0x0800cb70
 80030b4:	0800cb84 	.word	0x0800cb84
 80030b8:	0800cb88 	.word	0x0800cb88
 80030bc:	0800cb8c 	.word	0x0800cb8c
 80030c0:	0800cb90 	.word	0x0800cb90
 80030c4:	0800cba4 	.word	0x0800cba4
 80030c8:	0800cbac 	.word	0x0800cbac
 80030cc:	0800cbb8 	.word	0x0800cbb8
 80030d0:	0800cbc4 	.word	0x0800cbc4
 80030d4:	0800cbd8 	.word	0x0800cbd8
 80030d8:	0800cbe8 	.word	0x0800cbe8
 80030dc:	0800cbf8 	.word	0x0800cbf8

080030e0 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t ErrorStatusITs) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
	uint8_t ch = _DEF_CAN1;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]

	canErrUpdate(ch);
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fe2f 	bl	8002d54 <canErrUpdate>
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_FDCAN_ErrorCallback>:

void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan) {
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	uint8_t ch = _DEF_CAN1;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]

	err_int_cnt++;
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_FDCAN_ErrorCallback+0x54>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3301      	adds	r3, #1
 8003112:	4a10      	ldr	r2, [pc, #64]	@ (8003154 <HAL_FDCAN_ErrorCallback+0x54>)
 8003114:	6013      	str	r3, [r2, #0]

	if (hfdcan->ErrorCode > 0) {
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311a:	2b00      	cmp	r3, #0
 800311c:	d013      	beq.n	8003146 <HAL_FDCAN_ErrorCallback+0x46>
		can_tbl[ch].err_code |= CAN_ERR_ETC;
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	4a0d      	ldr	r2, [pc, #52]	@ (8003158 <HAL_FDCAN_ErrorCallback+0x58>)
 8003122:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3304      	adds	r3, #4
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	f042 0210 	orr.w	r2, r2, #16
 8003136:	4908      	ldr	r1, [pc, #32]	@ (8003158 <HAL_FDCAN_ErrorCallback+0x58>)
 8003138:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 800313c:	fb00 f303 	mul.w	r3, r0, r3
 8003140:	440b      	add	r3, r1
 8003142:	3304      	adds	r3, #4
 8003144:	601a      	str	r2, [r3, #0]
	}
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20001ac0 	.word	0x20001ac0
 8003158:	200010f0 	.word	0x200010f0

0800315c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_FDCAN_RxFifo0Callback+0x1c>
		canRxFifoCallback(_DEF_CAN1, hfdcan);
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	2000      	movs	r0, #0
 8003174:	f7ff fce8 	bl	8002b48 <canRxFifoCallback>
	}

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET) {
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_FDCAN_RxFifo0Callback+0x30>
		can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8003182:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	3301      	adds	r3, #1
 8003188:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800318a:	6193      	str	r3, [r2, #24]
	}

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET) {
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_FDCAN_RxFifo0Callback+0x44>
		can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8003196:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	4a02      	ldr	r2, [pc, #8]	@ (80031a8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800319e:	61d3      	str	r3, [r2, #28]
	}
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	200010f0 	.word	0x200010f0

080031ac <cliCan>:

#ifdef _USE_HW_CLI
void cliCan(cli_args_t *args) {
 80031ac:	b5b0      	push	{r4, r5, r7, lr}
 80031ae:	b0ae      	sub	sp, #184	@ 0xb8
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	canLock();
 80031ba:	f7ff f8c5 	bl	8002348 <canLock>

	if (args->argc == 1 && args->isStr(0, "info")) {
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	f040 809a 	bne.w	80032fc <cliCan+0x150>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	49b9      	ldr	r1, [pc, #740]	@ (80034b4 <cliCan+0x308>)
 80031ce:	2000      	movs	r0, #0
 80031d0:	4798      	blx	r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8091 	beq.w	80032fc <cliCan+0x150>
		for (int i = 0; i < CAN_MAX_CH; i++) {
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031e0:	e084      	b.n	80032ec <cliCan+0x140>
			if (can_tbl[i].is_open == true) {
 80031e2:	4ab5      	ldr	r2, [pc, #724]	@ (80034b8 <cliCan+0x30c>)
 80031e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031e8:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3301      	adds	r3, #1
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d06b      	beq.n	80032d2 <cliCan+0x126>
				canInfoPrint(i);
 80031fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fe6f 	bl	8002ee4 <canInfoPrint>
				cliPrintf("is_open       : %d\n", can_tbl[i].is_open);
 8003206:	4aac      	ldr	r2, [pc, #688]	@ (80034b8 <cliCan+0x30c>)
 8003208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800320c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	4413      	add	r3, r2
 8003216:	3301      	adds	r3, #1
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	4619      	mov	r1, r3
 800321c:	48a7      	ldr	r0, [pc, #668]	@ (80034bc <cliCan+0x310>)
 800321e:	f7fe fdcd 	bl	8001dbc <cliPrintf>

				cliPrintf("q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8003222:	4aa5      	ldr	r2, [pc, #660]	@ (80034b8 <cliCan+0x30c>)
 8003224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003228:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	3310      	adds	r3, #16
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4619      	mov	r1, r3
 8003238:	48a1      	ldr	r0, [pc, #644]	@ (80034c0 <cliCan+0x314>)
 800323a:	f7fe fdbf 	bl	8001dbc <cliPrintf>
				cliPrintf("q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 800323e:	4a9e      	ldr	r2, [pc, #632]	@ (80034b8 <cliCan+0x30c>)
 8003240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003244:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3314      	adds	r3, #20
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	489b      	ldr	r0, [pc, #620]	@ (80034c4 <cliCan+0x318>)
 8003256:	f7fe fdb1 	bl	8001dbc <cliPrintf>
				cliPrintf("fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 800325a:	4a97      	ldr	r2, [pc, #604]	@ (80034b8 <cliCan+0x30c>)
 800325c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003260:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	3318      	adds	r3, #24
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	4895      	ldr	r0, [pc, #596]	@ (80034c8 <cliCan+0x31c>)
 8003272:	f7fe fda3 	bl	8001dbc <cliPrintf>
				cliPrintf("fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8003276:	4a90      	ldr	r2, [pc, #576]	@ (80034b8 <cliCan+0x30c>)
 8003278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800327c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	331c      	adds	r3, #28
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	488f      	ldr	r0, [pc, #572]	@ (80034cc <cliCan+0x320>)
 800328e:	f7fe fd95 	bl	8001dbc <cliPrintf>
				cliPrintf("rx error cnt  : %d\n", canGetRxErrCount(i));
 8003292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003296:	b2db      	uxtb	r3, r3
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fb6b 	bl	8002974 <canGetRxErrCount>
 800329e:	4603      	mov	r3, r0
 80032a0:	4619      	mov	r1, r3
 80032a2:	488b      	ldr	r0, [pc, #556]	@ (80034d0 <cliCan+0x324>)
 80032a4:	f7fe fd8a 	bl	8001dbc <cliPrintf>
				cliPrintf("tx error cnt  : %d\n", canGetTxErrCount(i));
 80032a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fb8a 	bl	80029c8 <canGetTxErrCount>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4619      	mov	r1, r3
 80032b8:	4886      	ldr	r0, [pc, #536]	@ (80034d4 <cliCan+0x328>)
 80032ba:	f7fe fd7f 	bl	8001dbc <cliPrintf>
				canErrPrint(i);
 80032be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fd0d 	bl	8002ce4 <canErrPrint>
				cliPrintf("\n");
 80032ca:	4883      	ldr	r0, [pc, #524]	@ (80034d8 <cliCan+0x32c>)
 80032cc:	f7fe fd76 	bl	8001dbc <cliPrintf>
 80032d0:	e007      	b.n	80032e2 <cliCan+0x136>
			} else {
				cliPrintf("%d not open\n", i);
 80032d2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80032d6:	4881      	ldr	r0, [pc, #516]	@ (80034dc <cliCan+0x330>)
 80032d8:	f7fe fd70 	bl	8001dbc <cliPrintf>
				cliPrintf("\n");
 80032dc:	487e      	ldr	r0, [pc, #504]	@ (80034d8 <cliCan+0x32c>)
 80032de:	f7fe fd6d 	bl	8001dbc <cliPrintf>
		for (int i = 0; i < CAN_MAX_CH; i++) {
 80032e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032e6:	3301      	adds	r3, #1
 80032e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f77f af76 	ble.w	80031e2 <cliCan+0x36>
			}
		}
		ret = true;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 1 && args->isStr(0, "open")) {
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d138      	bne.n	8003376 <cliCan+0x1ca>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4975      	ldr	r1, [pc, #468]	@ (80034e0 <cliCan+0x334>)
 800330a:	2000      	movs	r0, #0
 800330c:	4798      	blx	r3
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d030      	beq.n	8003376 <cliCan+0x1ca>
		cliPrintf("ch    : 0~%d\n\n", CAN_MAX_CH - 1);
 8003314:	2100      	movs	r1, #0
 8003316:	4873      	ldr	r0, [pc, #460]	@ (80034e4 <cliCan+0x338>)
 8003318:	f7fe fd50 	bl	8001dbc <cliPrintf>
		cliPrintf("mode  : CAN_NORMAL\n");
 800331c:	4872      	ldr	r0, [pc, #456]	@ (80034e8 <cliCan+0x33c>)
 800331e:	f7fe fd4d 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_MONITOR\n");
 8003322:	4872      	ldr	r0, [pc, #456]	@ (80034ec <cliCan+0x340>)
 8003324:	f7fe fd4a 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_LOOPBACK\n\n");
 8003328:	4871      	ldr	r0, [pc, #452]	@ (80034f0 <cliCan+0x344>)
 800332a:	f7fe fd47 	bl	8001dbc <cliPrintf>
		cliPrintf("frame : CAN_CLASSIC\n");
 800332e:	4871      	ldr	r0, [pc, #452]	@ (80034f4 <cliCan+0x348>)
 8003330:	f7fe fd44 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_FD_NO_BRS\n");
 8003334:	4870      	ldr	r0, [pc, #448]	@ (80034f8 <cliCan+0x34c>)
 8003336:	f7fe fd41 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_FD_BRS\n\n");
 800333a:	4870      	ldr	r0, [pc, #448]	@ (80034fc <cliCan+0x350>)
 800333c:	f7fe fd3e 	bl	8001dbc <cliPrintf>
		cliPrintf("baud  : CAN_100K\n");
 8003340:	486f      	ldr	r0, [pc, #444]	@ (8003500 <cliCan+0x354>)
 8003342:	f7fe fd3b 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_125K\n");
 8003346:	486f      	ldr	r0, [pc, #444]	@ (8003504 <cliCan+0x358>)
 8003348:	f7fe fd38 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_250K\n");
 800334c:	486e      	ldr	r0, [pc, #440]	@ (8003508 <cliCan+0x35c>)
 800334e:	f7fe fd35 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_500K\n");
 8003352:	486e      	ldr	r0, [pc, #440]	@ (800350c <cliCan+0x360>)
 8003354:	f7fe fd32 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_1M\n");
 8003358:	486d      	ldr	r0, [pc, #436]	@ (8003510 <cliCan+0x364>)
 800335a:	f7fe fd2f 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_2M\n");
 800335e:	486d      	ldr	r0, [pc, #436]	@ (8003514 <cliCan+0x368>)
 8003360:	f7fe fd2c 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_4M\n");
 8003364:	486c      	ldr	r0, [pc, #432]	@ (8003518 <cliCan+0x36c>)
 8003366:	f7fe fd29 	bl	8001dbc <cliPrintf>
		cliPrintf("        CAN_5M\n");
 800336a:	486c      	ldr	r0, [pc, #432]	@ (800351c <cliCan+0x370>)
 800336c:	f7fe fd26 	bl	8001dbc <cliPrintf>
		ret = true;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 2 && args->isStr(0, "open") && args->isStr(1, "test")) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d12b      	bne.n	80033d6 <cliCan+0x22a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4957      	ldr	r1, [pc, #348]	@ (80034e0 <cliCan+0x334>)
 8003384:	2000      	movs	r0, #0
 8003386:	4798      	blx	r3
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d023      	beq.n	80033d6 <cliCan+0x22a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4963      	ldr	r1, [pc, #396]	@ (8003520 <cliCan+0x374>)
 8003394:	2001      	movs	r0, #1
 8003396:	4798      	blx	r3
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01b      	beq.n	80033d6 <cliCan+0x22a>
		bool can_ret;

		//can_ret = canOpen(_DEF_CAN1, CAN_LOOPBACK, CAN_FD_BRS, CAN_1M, CAN_5M);
		can_ret = canOpen(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_500K,
 800339e:	2303      	movs	r3, #3
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2303      	movs	r3, #3
 80033a4:	2200      	movs	r2, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fe ffe1 	bl	8002370 <canOpen>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
				CAN_500K);
		cliPrintf("canOpen() : %s\n", can_ret ? "True" : "False");
 80033b4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <cliCan+0x214>
 80033bc:	4b59      	ldr	r3, [pc, #356]	@ (8003524 <cliCan+0x378>)
 80033be:	e000      	b.n	80033c2 <cliCan+0x216>
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <cliCan+0x37c>)
 80033c2:	4619      	mov	r1, r3
 80033c4:	4859      	ldr	r0, [pc, #356]	@ (800352c <cliCan+0x380>)
 80033c6:	f7fe fcf9 	bl	8001dbc <cliPrintf>
		canInfoPrint(_DEF_CAN1);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7ff fd8a 	bl	8002ee4 <canInfoPrint>
		ret = true;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 6 && args->isStr(0, "open")) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	f040 812c 	bne.w	8003638 <cliCan+0x48c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	493e      	ldr	r1, [pc, #248]	@ (80034e0 <cliCan+0x334>)
 80033e6:	2000      	movs	r0, #0
 80033e8:	4798      	blx	r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8123 	beq.w	8003638 <cliCan+0x48c>
		uint8_t ch;
		CanMode_t mode = CAN_NORMAL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		CanFrame_t frame = CAN_CLASSIC;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
		CanBaud_t baud = CAN_500K; //CAN_1M;
 80033fe:	2303      	movs	r3, #3
 8003400:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
		CanBaud_t baud_data = CAN_500K; //CAN_1M;
 8003404:	2303      	movs	r3, #3
 8003406:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
		const char *mode_str[] = { "CAN_NORMAL", "CAN_MONITOR", "CAN_LOOPBACK" };
 800340a:	4a49      	ldr	r2, [pc, #292]	@ (8003530 <cliCan+0x384>)
 800340c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003410:	ca07      	ldmia	r2, {r0, r1, r2}
 8003412:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		const char *frame_str[] =
 8003416:	4a47      	ldr	r2, [pc, #284]	@ (8003534 <cliCan+0x388>)
 8003418:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800341c:	ca07      	ldmia	r2, {r0, r1, r2}
 800341e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				{ "CAN_CLASSIC", "CAN_FD_NO_BRS", "CAN_FD_BRS" };
		const char *baud_str[] = { "CAN_100K", "CAN_125K", "CAN_250K",
 8003422:	4b45      	ldr	r3, [pc, #276]	@ (8003538 <cliCan+0x38c>)
 8003424:	f107 0408 	add.w	r4, r7, #8
 8003428:	461d      	mov	r5, r3
 800342a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800342c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800342e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				"CAN_500K", "CAN_1M", "CAN_2M", "CAN_4M", "CAN_5M" };

		ch = constrain(args->getData(1), 0, CAN_MAX_CH - 1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2001      	movs	r0, #1
 800343c:	4798      	blx	r3
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0f      	blt.n	8003464 <cliCan+0x2b8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2001      	movs	r0, #1
 800344a:	4798      	blx	r3
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	dc06      	bgt.n	8003460 <cliCan+0x2b4>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2001      	movs	r0, #1
 8003458:	4798      	blx	r3
 800345a:	4603      	mov	r3, r0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e002      	b.n	8003466 <cliCan+0x2ba>
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <cliCan+0x2ba>
 8003464:	2300      	movs	r3, #0
 8003466:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

		for (int i = 0; i < 3; i++) {
 800346a:	2300      	movs	r3, #0
 800346c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003470:	e018      	b.n	80034a4 <cliCan+0x2f8>
			if (args->isStr(2, mode_str[i])) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	33b0      	adds	r3, #176	@ 0xb0
 800347e:	443b      	add	r3, r7
 8003480:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003484:	4619      	mov	r1, r3
 8003486:	2002      	movs	r0, #2
 8003488:	4790      	blx	r2
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <cliCan+0x2ee>
				mode = i;
 8003490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003494:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				break;
 8003498:	e008      	b.n	80034ac <cliCan+0x300>
		for (int i = 0; i < 3; i++) {
 800349a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800349e:	3301      	adds	r3, #1
 80034a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	dde2      	ble.n	8003472 <cliCan+0x2c6>
			}
		}
		for (int i = 0; i < 3; i++) {
 80034ac:	2300      	movs	r3, #0
 80034ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034b2:	e05c      	b.n	800356e <cliCan+0x3c2>
 80034b4:	0800cc04 	.word	0x0800cc04
 80034b8:	200010f0 	.word	0x200010f0
 80034bc:	0800cc0c 	.word	0x0800cc0c
 80034c0:	0800cc20 	.word	0x0800cc20
 80034c4:	0800cc34 	.word	0x0800cc34
 80034c8:	0800cc48 	.word	0x0800cc48
 80034cc:	0800cc5c 	.word	0x0800cc5c
 80034d0:	0800cc70 	.word	0x0800cc70
 80034d4:	0800cc84 	.word	0x0800cc84
 80034d8:	0800cc98 	.word	0x0800cc98
 80034dc:	0800cc9c 	.word	0x0800cc9c
 80034e0:	0800ccac 	.word	0x0800ccac
 80034e4:	0800ccb4 	.word	0x0800ccb4
 80034e8:	0800ccc4 	.word	0x0800ccc4
 80034ec:	0800ccd8 	.word	0x0800ccd8
 80034f0:	0800ccf0 	.word	0x0800ccf0
 80034f4:	0800cd08 	.word	0x0800cd08
 80034f8:	0800cd20 	.word	0x0800cd20
 80034fc:	0800cd38 	.word	0x0800cd38
 8003500:	0800cd50 	.word	0x0800cd50
 8003504:	0800cd64 	.word	0x0800cd64
 8003508:	0800cd78 	.word	0x0800cd78
 800350c:	0800cd8c 	.word	0x0800cd8c
 8003510:	0800cda0 	.word	0x0800cda0
 8003514:	0800cdb0 	.word	0x0800cdb0
 8003518:	0800cdc0 	.word	0x0800cdc0
 800351c:	0800cdd0 	.word	0x0800cdd0
 8003520:	0800cde0 	.word	0x0800cde0
 8003524:	0800cde8 	.word	0x0800cde8
 8003528:	0800cdf0 	.word	0x0800cdf0
 800352c:	0800cdf8 	.word	0x0800cdf8
 8003530:	0800cf90 	.word	0x0800cf90
 8003534:	0800cfc4 	.word	0x0800cfc4
 8003538:	0800d020 	.word	0x0800d020
			if (args->isStr(3, frame_str[i])) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	33b0      	adds	r3, #176	@ 0xb0
 8003548:	443b      	add	r3, r7
 800354a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800354e:	4619      	mov	r1, r3
 8003550:	2003      	movs	r0, #3
 8003552:	4790      	blx	r2
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <cliCan+0x3b8>
				frame = i;
 800355a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800355e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
				break;
 8003562:	e008      	b.n	8003576 <cliCan+0x3ca>
		for (int i = 0; i < 3; i++) {
 8003564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003568:	3301      	adds	r3, #1
 800356a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800356e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003572:	2b02      	cmp	r3, #2
 8003574:	dde2      	ble.n	800353c <cliCan+0x390>
			}
		}
		for (int i = 0; i < 8; i++) {
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800357c:	e018      	b.n	80035b0 <cliCan+0x404>
			if (args->isStr(4, baud_str[i])) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	33b0      	adds	r3, #176	@ 0xb0
 800358a:	443b      	add	r3, r7
 800358c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003590:	4619      	mov	r1, r3
 8003592:	2004      	movs	r0, #4
 8003594:	4790      	blx	r2
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <cliCan+0x3fa>
				baud = i;
 800359c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035a0:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
				break;
 80035a4:	e008      	b.n	80035b8 <cliCan+0x40c>
		for (int i = 0; i < 8; i++) {
 80035a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035aa:	3301      	adds	r3, #1
 80035ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	dde2      	ble.n	800357e <cliCan+0x3d2>
			}
		}
		for (int i = 0; i < 8; i++) {
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035be:	e018      	b.n	80035f2 <cliCan+0x446>
			if (args->isStr(5, baud_str[i])) {
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	33b0      	adds	r3, #176	@ 0xb0
 80035cc:	443b      	add	r3, r7
 80035ce:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80035d2:	4619      	mov	r1, r3
 80035d4:	2005      	movs	r0, #5
 80035d6:	4790      	blx	r2
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d004      	beq.n	80035e8 <cliCan+0x43c>
				baud_data = i;
 80035de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035e2:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
				break;
 80035e6:	e008      	b.n	80035fa <cliCan+0x44e>
		for (int i = 0; i < 8; i++) {
 80035e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035ec:	3301      	adds	r3, #1
 80035ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035f6:	2b07      	cmp	r3, #7
 80035f8:	dde2      	ble.n	80035c0 <cliCan+0x414>
			}
		}

		bool can_ret;

		can_ret = canOpen(ch, mode, frame, baud, baud_data);
 80035fa:	f897 40a5 	ldrb.w	r4, [r7, #165]	@ 0xa5
 80035fe:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 8003602:	f897 10a7 	ldrb.w	r1, [r7, #167]	@ 0xa7
 8003606:	f897 0072 	ldrb.w	r0, [r7, #114]	@ 0x72
 800360a:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	4623      	mov	r3, r4
 8003612:	f7fe fead 	bl	8002370 <canOpen>
 8003616:	4603      	mov	r3, r0
 8003618:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
		cliPrintf("canOpen() : %s\n", can_ret ? "True" : "False");
 800361c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <cliCan+0x47c>
 8003624:	4ba0      	ldr	r3, [pc, #640]	@ (80038a8 <cliCan+0x6fc>)
 8003626:	e000      	b.n	800362a <cliCan+0x47e>
 8003628:	4ba0      	ldr	r3, [pc, #640]	@ (80038ac <cliCan+0x700>)
 800362a:	4619      	mov	r1, r3
 800362c:	48a0      	ldr	r0, [pc, #640]	@ (80038b0 <cliCan+0x704>)
 800362e:	f7fe fbc5 	bl	8001dbc <cliPrintf>
		ret = true;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 2 && args->isStr(0, "read_test")) {
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	2b02      	cmp	r3, #2
 800363e:	f040 808f 	bne.w	8003760 <cliCan+0x5b4>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	499b      	ldr	r1, [pc, #620]	@ (80038b4 <cliCan+0x708>)
 8003648:	2000      	movs	r0, #0
 800364a:	4798      	blx	r3
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8086 	beq.w	8003760 <cliCan+0x5b4>
		uint32_t index = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		uint8_t ch;

		ch = constrain(args->getData(1), 0, CAN_MAX_CH - 1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2001      	movs	r0, #1
 8003660:	4798      	blx	r3
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	db0f      	blt.n	8003688 <cliCan+0x4dc>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2001      	movs	r0, #1
 800366e:	4798      	blx	r3
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	dc06      	bgt.n	8003684 <cliCan+0x4d8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2001      	movs	r0, #1
 800367c:	4798      	blx	r3
 800367e:	4603      	mov	r3, r0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e002      	b.n	800368a <cliCan+0x4de>
 8003684:	2300      	movs	r3, #0
 8003686:	e000      	b.n	800368a <cliCan+0x4de>
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

		while (cliKeepLoop()) {
 800368e:	e05f      	b.n	8003750 <cliCan+0x5a4>
			if (canMsgAvailable(ch)) {
 8003690:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff f87d 	bl	8002794 <canMsgAvailable>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d057      	beq.n	8003750 <cliCan+0x5a4>
				can_msg_t msg;

				canMsgRead(ch, &msg);
 80036a0:	f107 0208 	add.w	r2, r7, #8
 80036a4:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff f93e 	bl	800292c <canMsgRead>

				index %= 1000;
 80036b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036b4:	4a80      	ldr	r2, [pc, #512]	@ (80038b8 <cliCan+0x70c>)
 80036b6:	fba2 1203 	umull	r1, r2, r2, r3
 80036ba:	0992      	lsrs	r2, r2, #6
 80036bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80036c0:	fb01 f202 	mul.w	r2, r1, r2
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				cliPrintf("ch %d %03d(R) <- id ", ch, index++);
 80036ca:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 80036ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80036d8:	461a      	mov	r2, r3
 80036da:	4878      	ldr	r0, [pc, #480]	@ (80038bc <cliCan+0x710>)
 80036dc:	f7fe fb6e 	bl	8001dbc <cliPrintf>
				if (msg.frame != CAN_CLASSIC) {
 80036e0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <cliCan+0x544>
					cliPrintf("fd ");
 80036e8:	4875      	ldr	r0, [pc, #468]	@ (80038c0 <cliCan+0x714>)
 80036ea:	f7fe fb67 	bl	8001dbc <cliPrintf>
 80036ee:	e002      	b.n	80036f6 <cliCan+0x54a>
				} else {
					cliPrintf("   ");
 80036f0:	4874      	ldr	r0, [pc, #464]	@ (80038c4 <cliCan+0x718>)
 80036f2:	f7fe fb63 	bl	8001dbc <cliPrintf>
				}
				if (msg.id_type == CAN_STD) {
 80036f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <cliCan+0x55a>
					cliPrintf("std ");
 80036fe:	4872      	ldr	r0, [pc, #456]	@ (80038c8 <cliCan+0x71c>)
 8003700:	f7fe fb5c 	bl	8001dbc <cliPrintf>
 8003704:	e002      	b.n	800370c <cliCan+0x560>
				} else {
					cliPrintf("ext ");
 8003706:	4871      	ldr	r0, [pc, #452]	@ (80038cc <cliCan+0x720>)
 8003708:	f7fe fb58 	bl	8001dbc <cliPrintf>
				}
				cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	89ba      	ldrh	r2, [r7, #12]
 8003710:	4619      	mov	r1, r3
 8003712:	486f      	ldr	r0, [pc, #444]	@ (80038d0 <cliCan+0x724>)
 8003714:	f7fe fb52 	bl	8001dbc <cliPrintf>
				for (int i = 0; i < msg.length; i++) {
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800371e:	e00e      	b.n	800373e <cliCan+0x592>
					cliPrintf("0x%02X ", msg.data[i]);
 8003720:	f107 020e 	add.w	r2, r7, #14
 8003724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003728:	4413      	add	r3, r2
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	4619      	mov	r1, r3
 800372e:	4869      	ldr	r0, [pc, #420]	@ (80038d4 <cliCan+0x728>)
 8003730:	f7fe fb44 	bl	8001dbc <cliPrintf>
				for (int i = 0; i < msg.length; i++) {
 8003734:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003738:	3301      	adds	r3, #1
 800373a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800373e:	89bb      	ldrh	r3, [r7, #12]
 8003740:	461a      	mov	r2, r3
 8003742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003746:	4293      	cmp	r3, r2
 8003748:	dbea      	blt.n	8003720 <cliCan+0x574>
				}
				cliPrintf("\n");
 800374a:	4863      	ldr	r0, [pc, #396]	@ (80038d8 <cliCan+0x72c>)
 800374c:	f7fe fb36 	bl	8001dbc <cliPrintf>
		while (cliKeepLoop()) {
 8003750:	f7fe fc2e 	bl	8001fb0 <cliKeepLoop>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d19a      	bne.n	8003690 <cliCan+0x4e4>
			}
		}
		ret = true;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 3 && args->isStr(0, "send_test")) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	2b03      	cmp	r3, #3
 8003766:	f040 81a6 	bne.w	8003ab6 <cliCan+0x90a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	495b      	ldr	r1, [pc, #364]	@ (80038dc <cliCan+0x730>)
 8003770:	2000      	movs	r0, #0
 8003772:	4798      	blx	r3
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 819d 	beq.w	8003ab6 <cliCan+0x90a>
		uint32_t pre_time;
		uint32_t index = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		uint32_t err_code;
		uint8_t ch;
		CanFrame_t frame;

		ch = constrain(args->getData(1), 0, CAN_MAX_CH - 1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2001      	movs	r0, #1
 8003788:	4798      	blx	r3
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	db0f      	blt.n	80037b0 <cliCan+0x604>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2001      	movs	r0, #1
 8003796:	4798      	blx	r3
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	dc06      	bgt.n	80037ac <cliCan+0x600>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2001      	movs	r0, #1
 80037a4:	4798      	blx	r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e002      	b.n	80037b2 <cliCan+0x606>
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <cliCan+0x606>
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		if (args->isStr(2, "can"))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4949      	ldr	r1, [pc, #292]	@ (80038e0 <cliCan+0x734>)
 80037bc:	2002      	movs	r0, #2
 80037be:	4798      	blx	r3
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <cliCan+0x622>
			frame = CAN_CLASSIC;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037cc:	e002      	b.n	80037d4 <cliCan+0x628>
		else
			frame = CAN_FD_BRS;
 80037ce:	2302      	movs	r3, #2
 80037d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		err_code = can_tbl[_DEF_CAN1].err_code;
 80037d4:	4b43      	ldr	r3, [pc, #268]	@ (80038e4 <cliCan+0x738>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

		pre_time = millis();
 80037dc:	f7fd fc67 	bl	80010ae <millis>
 80037e0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		while (cliKeepLoop()) {
 80037e4:	e15e      	b.n	8003aa4 <cliCan+0x8f8>
			can_msg_t msg;

			if (millis() - pre_time >= 1) {
 80037e6:	f7fd fc62 	bl	80010ae <millis>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037f0:	4293      	cmp	r3, r2
 80037f2:	f000 80c2 	beq.w	800397a <cliCan+0x7ce>
				pre_time = millis();
 80037f6:	f7fd fc5a 	bl	80010ae <millis>
 80037fa:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

				msg.frame = frame;
 80037fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003802:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
				msg.id_type = CAN_EXT;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				msg.dlc = CAN_DLC_2;
 800380c:	2302      	movs	r3, #2
 800380e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
				msg.id = 0x314;
 8003812:	f44f 7345 	mov.w	r3, #788	@ 0x314
 8003816:	60bb      	str	r3, [r7, #8]
				msg.length = 2;
 8003818:	2302      	movs	r3, #2
 800381a:	81bb      	strh	r3, [r7, #12]
				msg.data[0] = 1;
 800381c:	2301      	movs	r3, #1
 800381e:	73bb      	strb	r3, [r7, #14]
				msg.data[1] = 2;
 8003820:	2302      	movs	r3, #2
 8003822:	73fb      	strb	r3, [r7, #15]
				if (canMsgWrite(ch, &msg, 10) > 0) {
 8003824:	f107 0108 	add.w	r1, r7, #8
 8003828:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800382c:	220a      	movs	r2, #10
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe ffce 	bl	80027d0 <canMsgWrite>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d06c      	beq.n	8003914 <cliCan+0x768>
					index %= 1000;
 800383a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800383e:	4a1e      	ldr	r2, [pc, #120]	@ (80038b8 <cliCan+0x70c>)
 8003840:	fba2 1203 	umull	r1, r2, r2, r3
 8003844:	0992      	lsrs	r2, r2, #6
 8003846:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800384a:	fb01 f202 	mul.w	r2, r1, r2
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					cliPrintf("ch %d %03d(T) -> id ", ch, index++);
 8003854:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8003858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003862:	461a      	mov	r2, r3
 8003864:	4820      	ldr	r0, [pc, #128]	@ (80038e8 <cliCan+0x73c>)
 8003866:	f7fe faa9 	bl	8001dbc <cliPrintf>
					if (msg.frame != CAN_CLASSIC) {
 800386a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <cliCan+0x6ce>
						cliPrintf("fd ");
 8003872:	4813      	ldr	r0, [pc, #76]	@ (80038c0 <cliCan+0x714>)
 8003874:	f7fe faa2 	bl	8001dbc <cliPrintf>
 8003878:	e002      	b.n	8003880 <cliCan+0x6d4>
					} else {
						cliPrintf("   ");
 800387a:	4812      	ldr	r0, [pc, #72]	@ (80038c4 <cliCan+0x718>)
 800387c:	f7fe fa9e 	bl	8001dbc <cliPrintf>
					}

					if (msg.id_type == CAN_STD) {
 8003880:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <cliCan+0x6e4>
						cliPrintf("std ");
 8003888:	480f      	ldr	r0, [pc, #60]	@ (80038c8 <cliCan+0x71c>)
 800388a:	f7fe fa97 	bl	8001dbc <cliPrintf>
 800388e:	e002      	b.n	8003896 <cliCan+0x6ea>
					} else {
						cliPrintf("ext ");
 8003890:	480e      	ldr	r0, [pc, #56]	@ (80038cc <cliCan+0x720>)
 8003892:	f7fe fa93 	bl	8001dbc <cliPrintf>
					}
					cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	89ba      	ldrh	r2, [r7, #12]
 800389a:	4619      	mov	r1, r3
 800389c:	480c      	ldr	r0, [pc, #48]	@ (80038d0 <cliCan+0x724>)
 800389e:	f7fe fa8d 	bl	8001dbc <cliPrintf>
					for (int i = 0; i < msg.length; i++) {
 80038a2:	2300      	movs	r3, #0
 80038a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038a6:	e02d      	b.n	8003904 <cliCan+0x758>
 80038a8:	0800cde8 	.word	0x0800cde8
 80038ac:	0800cdf0 	.word	0x0800cdf0
 80038b0:	0800cdf8 	.word	0x0800cdf8
 80038b4:	0800ce08 	.word	0x0800ce08
 80038b8:	10624dd3 	.word	0x10624dd3
 80038bc:	0800ce14 	.word	0x0800ce14
 80038c0:	0800ce2c 	.word	0x0800ce2c
 80038c4:	0800ce30 	.word	0x0800ce30
 80038c8:	0800ce34 	.word	0x0800ce34
 80038cc:	0800ce3c 	.word	0x0800ce3c
 80038d0:	0800ce44 	.word	0x0800ce44
 80038d4:	0800ce58 	.word	0x0800ce58
 80038d8:	0800cc98 	.word	0x0800cc98
 80038dc:	0800ce60 	.word	0x0800ce60
 80038e0:	0800ca90 	.word	0x0800ca90
 80038e4:	200010f0 	.word	0x200010f0
 80038e8:	0800ce6c 	.word	0x0800ce6c
						cliPrintf("0x%02X ", msg.data[i]);
 80038ec:	f107 020e 	add.w	r2, r7, #14
 80038f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f2:	4413      	add	r3, r2
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	4619      	mov	r1, r3
 80038f8:	4880      	ldr	r0, [pc, #512]	@ (8003afc <cliCan+0x950>)
 80038fa:	f7fe fa5f 	bl	8001dbc <cliPrintf>
					for (int i = 0; i < msg.length; i++) {
 80038fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003900:	3301      	adds	r3, #1
 8003902:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003904:	89bb      	ldrh	r3, [r7, #12]
 8003906:	461a      	mov	r2, r3
 8003908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800390a:	4293      	cmp	r3, r2
 800390c:	dbee      	blt.n	80038ec <cliCan+0x740>
					}
					cliPrintf("\n");
 800390e:	487c      	ldr	r0, [pc, #496]	@ (8003b00 <cliCan+0x954>)
 8003910:	f7fe fa54 	bl	8001dbc <cliPrintf>
				}

				if (canGetRxErrCount(ch) > 0 || canGetTxErrCount(ch) > 0) {
 8003914:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f82b 	bl	8002974 <canGetRxErrCount>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <cliCan+0x788>
 8003924:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff f84d 	bl	80029c8 <canGetTxErrCount>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <cliCan+0x7b0>
					cliPrintf("ch %d ErrCnt : %d, %d\n", ch,
 8003934:	f897 406f 	ldrb.w	r4, [r7, #111]	@ 0x6f
							canGetRxErrCount(ch), canGetTxErrCount(ch));
 8003938:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff f819 	bl	8002974 <canGetRxErrCount>
 8003942:	4603      	mov	r3, r0
					cliPrintf("ch %d ErrCnt : %d, %d\n", ch,
 8003944:	461d      	mov	r5, r3
							canGetRxErrCount(ch), canGetTxErrCount(ch));
 8003946:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff f83c 	bl	80029c8 <canGetTxErrCount>
 8003950:	4603      	mov	r3, r0
					cliPrintf("ch %d ErrCnt : %d, %d\n", ch,
 8003952:	462a      	mov	r2, r5
 8003954:	4621      	mov	r1, r4
 8003956:	486b      	ldr	r0, [pc, #428]	@ (8003b04 <cliCan+0x958>)
 8003958:	f7fe fa30 	bl	8001dbc <cliPrintf>
				}

				if (err_int_cnt > 0) {
 800395c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b08 <cliCan+0x95c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <cliCan+0x7ce>
					cliPrintf("ch %d Cnt : %d\n", ch, err_int_cnt);
 8003964:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003968:	4a67      	ldr	r2, [pc, #412]	@ (8003b08 <cliCan+0x95c>)
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	4867      	ldr	r0, [pc, #412]	@ (8003b0c <cliCan+0x960>)
 8003970:	f7fe fa24 	bl	8001dbc <cliPrintf>
					err_int_cnt = 0;
 8003974:	4b64      	ldr	r3, [pc, #400]	@ (8003b08 <cliCan+0x95c>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
				}
			}

			if (can_tbl[ch].err_code != err_code) {
 800397a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800397e:	4a64      	ldr	r2, [pc, #400]	@ (8003b10 <cliCan+0x964>)
 8003980:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003992:	429a      	cmp	r2, r3
 8003994:	d020      	beq.n	80039d8 <cliCan+0x82c>
				cliPrintf("ch %d ErrCode : 0x%X\n", ch, can_tbl[ch].err_code);
 8003996:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 800399a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800399e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b10 <cliCan+0x964>)
 80039a0:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 80039a4:	fb00 f303 	mul.w	r3, r0, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3304      	adds	r3, #4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	4858      	ldr	r0, [pc, #352]	@ (8003b14 <cliCan+0x968>)
 80039b2:	f7fe fa03 	bl	8001dbc <cliPrintf>
				canErrPrint(ch);
 80039b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f992 	bl	8002ce4 <canErrPrint>
				err_code = can_tbl[ch].err_code;
 80039c0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039c4:	4a52      	ldr	r2, [pc, #328]	@ (8003b10 <cliCan+0x964>)
 80039c6:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3304      	adds	r3, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}

			if (canUpdate()) {
 80039d8:	f7ff f874 	bl	8002ac4 <canUpdate>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <cliCan+0x842>
				cliPrintf("ch %d BusOff Recovery\n", ch);
 80039e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039e6:	4619      	mov	r1, r3
 80039e8:	484b      	ldr	r0, [pc, #300]	@ (8003b18 <cliCan+0x96c>)
 80039ea:	f7fe f9e7 	bl	8001dbc <cliPrintf>
			}

			if (canMsgAvailable(ch)) {
 80039ee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fece 	bl	8002794 <canMsgAvailable>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d052      	beq.n	8003aa4 <cliCan+0x8f8>
				canMsgRead(ch, &msg);
 80039fe:	f107 0208 	add.w	r2, r7, #8
 8003a02:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe ff8f 	bl	800292c <canMsgRead>

				index %= 1000;
 8003a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a12:	4a42      	ldr	r2, [pc, #264]	@ (8003b1c <cliCan+0x970>)
 8003a14:	fba2 1203 	umull	r1, r2, r2, r3
 8003a18:	0992      	lsrs	r2, r2, #6
 8003a1a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003a1e:	fb01 f202 	mul.w	r2, r1, r2
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				cliPrintf("ch %d %03d(R) <- id ", ch, index++);
 8003a28:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8003a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a36:	461a      	mov	r2, r3
 8003a38:	4839      	ldr	r0, [pc, #228]	@ (8003b20 <cliCan+0x974>)
 8003a3a:	f7fe f9bf 	bl	8001dbc <cliPrintf>
				if (msg.frame != CAN_CLASSIC) {
 8003a3e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <cliCan+0x8a2>
					cliPrintf("fd ");
 8003a46:	4837      	ldr	r0, [pc, #220]	@ (8003b24 <cliCan+0x978>)
 8003a48:	f7fe f9b8 	bl	8001dbc <cliPrintf>
 8003a4c:	e002      	b.n	8003a54 <cliCan+0x8a8>
				} else {
					cliPrintf("   ");
 8003a4e:	4836      	ldr	r0, [pc, #216]	@ (8003b28 <cliCan+0x97c>)
 8003a50:	f7fe f9b4 	bl	8001dbc <cliPrintf>
				}
				if (msg.id_type == CAN_STD) {
 8003a54:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <cliCan+0x8b8>
					cliPrintf("std ");
 8003a5c:	4833      	ldr	r0, [pc, #204]	@ (8003b2c <cliCan+0x980>)
 8003a5e:	f7fe f9ad 	bl	8001dbc <cliPrintf>
 8003a62:	e002      	b.n	8003a6a <cliCan+0x8be>
				} else {
					cliPrintf("ext ");
 8003a64:	4832      	ldr	r0, [pc, #200]	@ (8003b30 <cliCan+0x984>)
 8003a66:	f7fe f9a9 	bl	8001dbc <cliPrintf>
				}
				cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	89ba      	ldrh	r2, [r7, #12]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4830      	ldr	r0, [pc, #192]	@ (8003b34 <cliCan+0x988>)
 8003a72:	f7fe f9a3 	bl	8001dbc <cliPrintf>
				for (int i = 0; i < msg.length; i++) {
 8003a76:	2300      	movs	r3, #0
 8003a78:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a7a:	e00b      	b.n	8003a94 <cliCan+0x8e8>
					cliPrintf("0x%02X ", msg.data[i]);
 8003a7c:	f107 020e 	add.w	r2, r7, #14
 8003a80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a82:	4413      	add	r3, r2
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	481c      	ldr	r0, [pc, #112]	@ (8003afc <cliCan+0x950>)
 8003a8a:	f7fe f997 	bl	8001dbc <cliPrintf>
				for (int i = 0; i < msg.length; i++) {
 8003a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a90:	3301      	adds	r3, #1
 8003a92:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a94:	89bb      	ldrh	r3, [r7, #12]
 8003a96:	461a      	mov	r2, r3
 8003a98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	dbee      	blt.n	8003a7c <cliCan+0x8d0>
				}
				cliPrintf("\n");
 8003a9e:	4818      	ldr	r0, [pc, #96]	@ (8003b00 <cliCan+0x954>)
 8003aa0:	f7fe f98c 	bl	8001dbc <cliPrintf>
		while (cliKeepLoop()) {
 8003aa4:	f7fe fa84 	bl	8001fb0 <cliKeepLoop>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f47f ae9b 	bne.w	80037e6 <cliCan+0x63a>
			}
		}
		ret = true;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	canUnLock();
 8003ab6:	f7fe fc53 	bl	8002360 <canUnLock>

	if (ret == false) {
 8003aba:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003abe:	f083 0301 	eor.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d014      	beq.n	8003af2 <cliCan+0x946>
		cliPrintf("can info\n");
 8003ac8:	481b      	ldr	r0, [pc, #108]	@ (8003b38 <cliCan+0x98c>)
 8003aca:	f7fe f977 	bl	8001dbc <cliPrintf>
		cliPrintf("can open\n");
 8003ace:	481b      	ldr	r0, [pc, #108]	@ (8003b3c <cliCan+0x990>)
 8003ad0:	f7fe f974 	bl	8001dbc <cliPrintf>
		cliPrintf("can open ch[0~%d] mode frame baud fd_baud\n",
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	481a      	ldr	r0, [pc, #104]	@ (8003b40 <cliCan+0x994>)
 8003ad8:	f7fe f970 	bl	8001dbc <cliPrintf>
		CAN_MAX_CH - 1);
		cliPrintf("can open test\n");
 8003adc:	4819      	ldr	r0, [pc, #100]	@ (8003b44 <cliCan+0x998>)
 8003ade:	f7fe f96d 	bl	8001dbc <cliPrintf>
		cliPrintf("can read_test ch[0~%d]\n", CAN_MAX_CH - 1);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4818      	ldr	r0, [pc, #96]	@ (8003b48 <cliCan+0x99c>)
 8003ae6:	f7fe f969 	bl	8001dbc <cliPrintf>
		cliPrintf("can send_test ch[0~%d] can:fd\n", CAN_MAX_CH - 1);
 8003aea:	2100      	movs	r1, #0
 8003aec:	4817      	ldr	r0, [pc, #92]	@ (8003b4c <cliCan+0x9a0>)
 8003aee:	f7fe f965 	bl	8001dbc <cliPrintf>
	}
}
 8003af2:	bf00      	nop
 8003af4:	37b0      	adds	r7, #176	@ 0xb0
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bdb0      	pop	{r4, r5, r7, pc}
 8003afa:	bf00      	nop
 8003afc:	0800ce58 	.word	0x0800ce58
 8003b00:	0800cc98 	.word	0x0800cc98
 8003b04:	0800ce84 	.word	0x0800ce84
 8003b08:	20001ac0 	.word	0x20001ac0
 8003b0c:	0800ce9c 	.word	0x0800ce9c
 8003b10:	200010f0 	.word	0x200010f0
 8003b14:	0800ceac 	.word	0x0800ceac
 8003b18:	0800cec4 	.word	0x0800cec4
 8003b1c:	10624dd3 	.word	0x10624dd3
 8003b20:	0800ce14 	.word	0x0800ce14
 8003b24:	0800ce2c 	.word	0x0800ce2c
 8003b28:	0800ce30 	.word	0x0800ce30
 8003b2c:	0800ce34 	.word	0x0800ce34
 8003b30:	0800ce3c 	.word	0x0800ce3c
 8003b34:	0800ce44 	.word	0x0800ce44
 8003b38:	0800cedc 	.word	0x0800cedc
 8003b3c:	0800cee8 	.word	0x0800cee8
 8003b40:	0800cef4 	.word	0x0800cef4
 8003b44:	0800cf20 	.word	0x0800cf20
 8003b48:	0800cf30 	.word	0x0800cf30
 8003b4c:	0800cf48 	.word	0x0800cf48

08003b50 <gpioInit>:
#endif



bool gpioInit(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
  bool ret = true;
 8003b56:	2301      	movs	r3, #1
 8003b58:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8003b5a:	4904      	ldr	r1, [pc, #16]	@ (8003b6c <gpioInit+0x1c>)
 8003b5c:	4804      	ldr	r0, [pc, #16]	@ (8003b70 <gpioInit+0x20>)
 8003b5e:	f7fe fa3d 	bl	8001fdc <cliAdd>
#endif

  return ret;
 8003b62:	79fb      	ldrb	r3, [r7, #7]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	08003c55 	.word	0x08003c55
 8003b70:	0800d04c 	.word	0x0800d04c

08003b74 <gpioPinWrite>:

  return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	71fb      	strb	r3, [r7, #7]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d12e      	bne.n	8003be8 <gpioPinWrite+0x74>
  {
    return;
  }

  if (value)
 8003b8a:	79bb      	ldrb	r3, [r7, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d015      	beq.n	8003bbc <gpioPinWrite+0x48>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	4a17      	ldr	r2, [pc, #92]	@ (8003bf0 <gpioPinWrite+0x7c>)
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4413      	add	r3, r2
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	4a14      	ldr	r2, [pc, #80]	@ (8003bf0 <gpioPinWrite+0x7c>)
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	b299      	uxth	r1, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	4a11      	ldr	r2, [pc, #68]	@ (8003bf0 <gpioPinWrite+0x7c>)
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	4413      	add	r3, r2
 8003bb0:	3309      	adds	r3, #9
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f003 fbc5 	bl	8007344 <HAL_GPIO_WritePin>
 8003bba:	e016      	b.n	8003bea <gpioPinWrite+0x76>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003bf0 <gpioPinWrite+0x7c>)
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	4413      	add	r3, r2
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	4a09      	ldr	r2, [pc, #36]	@ (8003bf0 <gpioPinWrite+0x7c>)
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b299      	uxth	r1, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	4a06      	ldr	r2, [pc, #24]	@ (8003bf0 <gpioPinWrite+0x7c>)
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4413      	add	r3, r2
 8003bdc:	330a      	adds	r3, #10
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	f003 fbaf 	bl	8007344 <HAL_GPIO_WritePin>
 8003be6:	e000      	b.n	8003bea <gpioPinWrite+0x76>
    return;
 8003be8:	bf00      	nop
  }
}
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	0800d444 	.word	0x0800d444

08003bf4 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <gpioPinRead+0x18>
  {
    return false;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e01c      	b.n	8003c46 <gpioPinRead+0x52>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	4a10      	ldr	r2, [pc, #64]	@ (8003c50 <gpioPinRead+0x5c>)
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4413      	add	r3, r2
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	490d      	ldr	r1, [pc, #52]	@ (8003c50 <gpioPinRead+0x5c>)
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3304      	adds	r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f003 fb74 	bl	8007314 <HAL_GPIO_ReadPin>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4619      	mov	r1, r3
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	4a07      	ldr	r2, [pc, #28]	@ (8003c50 <gpioPinRead+0x5c>)
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4413      	add	r3, r2
 8003c38:	3309      	adds	r3, #9
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4299      	cmp	r1, r3
 8003c3e:	d101      	bne.n	8003c44 <gpioPinRead+0x50>
  {
    ret = true;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	0800d444 	.word	0x0800d444

08003c54 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d11e      	bne.n	8003ca6 <cliGpio+0x52>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	495a      	ldr	r1, [pc, #360]	@ (8003dd8 <cliGpio+0x184>)
 8003c6e:	2000      	movs	r0, #0
 8003c70:	4798      	blx	r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d016      	beq.n	8003ca6 <cliGpio+0x52>
  {
    for (int i=0; i<GPIO_MAX_CH; i++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e00e      	b.n	8003c9c <cliGpio+0x48>
    {
      cliPrintf("%d %-16s - %d\n", i, gpio_tbl[i].p_name, gpioPinRead(i));
 8003c7e:	4c57      	ldr	r4, [pc, #348]	@ (8003ddc <cliGpio+0x188>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff ffb5 	bl	8003bf4 <gpioPinRead>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	6939      	ldr	r1, [r7, #16]
 8003c90:	4853      	ldr	r0, [pc, #332]	@ (8003de0 <cliGpio+0x18c>)
 8003c92:	f7fe f893 	bl	8001dbc <cliPrintf>
    for (int i=0; i<GPIO_MAX_CH; i++)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	613b      	str	r3, [r7, #16]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	dded      	ble.n	8003c7e <cliGpio+0x2a>
    }
    ret = true;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 1 && args->isStr(0, "show") == true)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d128      	bne.n	8003d00 <cliGpio+0xac>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	494c      	ldr	r1, [pc, #304]	@ (8003de4 <cliGpio+0x190>)
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	4798      	blx	r3
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d020      	beq.n	8003d00 <cliGpio+0xac>
  {
    while(cliKeepLoop())
 8003cbe:	e018      	b.n	8003cf2 <cliGpio+0x9e>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e00c      	b.n	8003ce0 <cliGpio+0x8c>
      {
        cliPrintf("%d", gpioPinRead(i));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff ff92 	bl	8003bf4 <gpioPinRead>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4844      	ldr	r0, [pc, #272]	@ (8003de8 <cliGpio+0x194>)
 8003cd6:	f7fe f871 	bl	8001dbc <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	ddef      	ble.n	8003cc6 <cliGpio+0x72>
      }
      cliPrintf("\n");
 8003ce6:	4841      	ldr	r0, [pc, #260]	@ (8003dec <cliGpio+0x198>)
 8003ce8:	f7fe f868 	bl	8001dbc <cliPrintf>
      delay(100);
 8003cec:	2064      	movs	r0, #100	@ 0x64
 8003cee:	f7fd f9d3 	bl	8001098 <delay>
    while(cliKeepLoop())
 8003cf2:	f7fe f95d 	bl	8001fb0 <cliKeepLoop>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e1      	bne.n	8003cc0 <cliGpio+0x6c>
    }
    ret = true;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d123      	bne.n	8003d50 <cliGpio+0xfc>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	4938      	ldr	r1, [pc, #224]	@ (8003df0 <cliGpio+0x19c>)
 8003d0e:	2000      	movs	r0, #0
 8003d10:	4798      	blx	r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01b      	beq.n	8003d50 <cliGpio+0xfc>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	4798      	blx	r3
 8003d20:	4603      	mov	r3, r0
 8003d22:	72fb      	strb	r3, [r7, #11]

    while(cliKeepLoop())
 8003d24:	e00d      	b.n	8003d42 <cliGpio+0xee>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8003d26:	7afc      	ldrb	r4, [r7, #11]
 8003d28:	7afb      	ldrb	r3, [r7, #11]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff ff62 	bl	8003bf4 <gpioPinRead>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	4621      	mov	r1, r4
 8003d36:	482f      	ldr	r0, [pc, #188]	@ (8003df4 <cliGpio+0x1a0>)
 8003d38:	f7fe f840 	bl	8001dbc <cliPrintf>
      delay(100);
 8003d3c:	2064      	movs	r0, #100	@ 0x64
 8003d3e:	f7fd f9ab 	bl	8001098 <delay>
    while(cliKeepLoop())
 8003d42:	f7fe f935 	bl	8001fb0 <cliKeepLoop>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ec      	bne.n	8003d26 <cliGpio+0xd2>
    }

    ret = true;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d126      	bne.n	8003da6 <cliGpio+0x152>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	4926      	ldr	r1, [pc, #152]	@ (8003df8 <cliGpio+0x1a4>)
 8003d5e:	2000      	movs	r0, #0
 8003d60:	4798      	blx	r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01e      	beq.n	8003da6 <cliGpio+0x152>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	4798      	blx	r3
 8003d70:	4603      	mov	r3, r0
 8003d72:	72bb      	strb	r3, [r7, #10]
    data = (uint8_t)args->getData(2);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2002      	movs	r0, #2
 8003d7a:	4798      	blx	r3
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	727b      	strb	r3, [r7, #9]

    gpioPinWrite(ch, data);
 8003d80:	7a7b      	ldrb	r3, [r7, #9]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bf14      	ite	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	2300      	moveq	r3, #0
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	7abb      	ldrb	r3, [r7, #10]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff feef 	bl	8003b74 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8003d96:	7abb      	ldrb	r3, [r7, #10]
 8003d98:	7a7a      	ldrb	r2, [r7, #9]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4817      	ldr	r0, [pc, #92]	@ (8003dfc <cliGpio+0x1a8>)
 8003d9e:	f7fe f80d 	bl	8001dbc <cliPrintf>
    ret = true;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	f083 0301 	eor.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <cliGpio+0x17a>
  {
    cliPrintf("gpio info\n");
 8003db2:	4813      	ldr	r0, [pc, #76]	@ (8003e00 <cliGpio+0x1ac>)
 8003db4:	f7fe f802 	bl	8001dbc <cliPrintf>
    cliPrintf("gpio show\n");
 8003db8:	4812      	ldr	r0, [pc, #72]	@ (8003e04 <cliGpio+0x1b0>)
 8003dba:	f7fd ffff 	bl	8001dbc <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4811      	ldr	r0, [pc, #68]	@ (8003e08 <cliGpio+0x1b4>)
 8003dc2:	f7fd fffb 	bl	8001dbc <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4810      	ldr	r0, [pc, #64]	@ (8003e0c <cliGpio+0x1b8>)
 8003dca:	f7fd fff7 	bl	8001dbc <cliPrintf>
  }
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd90      	pop	{r4, r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	0800d054 	.word	0x0800d054
 8003ddc:	0800d040 	.word	0x0800d040
 8003de0:	0800d05c 	.word	0x0800d05c
 8003de4:	0800d06c 	.word	0x0800d06c
 8003de8:	0800d074 	.word	0x0800d074
 8003dec:	0800d078 	.word	0x0800d078
 8003df0:	0800d07c 	.word	0x0800d07c
 8003df4:	0800d084 	.word	0x0800d084
 8003df8:	0800d098 	.word	0x0800d098
 8003dfc:	0800d0a0 	.word	0x0800d0a0
 8003e00:	0800d0b4 	.word	0x0800d0b4
 8003e04:	0800d0c0 	.word	0x0800d0c0
 8003e08:	0800d0cc 	.word	0x0800d0cc
 8003e0c:	0800d0e0 	.word	0x0800d0e0

08003e10 <ledInit>:
};



bool ledInit(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return true;
 8003e14:	2301      	movs	r3, #1
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d811      	bhi.n	8003e54 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	4a0a      	ldr	r2, [pc, #40]	@ (8003e5c <ledOff+0x3c>)
 8003e34:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	4a08      	ldr	r2, [pc, #32]	@ (8003e5c <ledOff+0x3c>)
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	8899      	ldrh	r1, [r3, #4]
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	4a05      	ldr	r2, [pc, #20]	@ (8003e5c <ledOff+0x3c>)
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	79db      	ldrb	r3, [r3, #7]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f003 fa79 	bl	8007344 <HAL_GPIO_WritePin>
 8003e52:	e000      	b.n	8003e56 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8003e54:	bf00      	nop
}
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	0800d454 	.word	0x0800d454

08003e60 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d80d      	bhi.n	8003e8c <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	4a08      	ldr	r2, [pc, #32]	@ (8003e94 <ledToggle+0x34>)
 8003e74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	4906      	ldr	r1, [pc, #24]	@ (8003e94 <ledToggle+0x34>)
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	440b      	add	r3, r1
 8003e80:	889b      	ldrh	r3, [r3, #4]
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f003 fa75 	bl	8007374 <HAL_GPIO_TogglePin>
 8003e8a:	e000      	b.n	8003e8e <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8003e8c:	bf00      	nop
}
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	0800d454 	.word	0x0800d454

08003e98 <logInit>:




bool logInit(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
#ifdef _USE_HW_RTOS
  mutex_lock = xSemaphoreCreateMutex();
#endif

  log_buf_boot.line_index     = 0;
 8003e9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ef0 <logInit+0x58>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	801a      	strh	r2, [r3, #0]
  log_buf_boot.buf_length     = 0;
 8003ea2:	4b13      	ldr	r3, [pc, #76]	@ (8003ef0 <logInit+0x58>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	805a      	strh	r2, [r3, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 8003ea8:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <logInit+0x58>)
 8003eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eae:	809a      	strh	r2, [r3, #4]
  log_buf_boot.buf_index      = 0;
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef0 <logInit+0x58>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	80da      	strh	r2, [r3, #6]
  log_buf_boot.buf            = buf_boot;
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <logInit+0x58>)
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <logInit+0x5c>)
 8003eba:	609a      	str	r2, [r3, #8]


  log_buf_list.line_index     = 0;
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <logInit+0x60>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	801a      	strh	r2, [r3, #0]
  log_buf_list.buf_length     = 0;
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <logInit+0x60>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	805a      	strh	r2, [r3, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <logInit+0x60>)
 8003eca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ece:	809a      	strh	r2, [r3, #4]
  log_buf_list.buf_index      = 0;
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <logInit+0x60>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	80da      	strh	r2, [r3, #6]
  log_buf_list.buf            = buf_list;
 8003ed6:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <logInit+0x60>)
 8003ed8:	4a08      	ldr	r2, [pc, #32]	@ (8003efc <logInit+0x64>)
 8003eda:	609a      	str	r2, [r3, #8]


  is_init = true;
 8003edc:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <logInit+0x68>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("log", cliCmd);
 8003ee2:	4908      	ldr	r1, [pc, #32]	@ (8003f04 <logInit+0x6c>)
 8003ee4:	4808      	ldr	r0, [pc, #32]	@ (8003f08 <logInit+0x70>)
 8003ee6:	f7fe f879 	bl	8001fdc <cliAdd>
#endif

  return true;
 8003eea:	2301      	movs	r3, #1
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20001ac8 	.word	0x20001ac8
 8003ef4:	20001ae0 	.word	0x20001ae0
 8003ef8:	20001ad4 	.word	0x20001ad4
 8003efc:	200022e0 	.word	0x200022e0
 8003f00:	200032e0 	.word	0x200032e0
 8003f04:	080040dd 	.word	0x080040dd
 8003f08:	0800d0fc 	.word	0x0800d0fc

08003f0c <logBoot>:
{
  is_enable = false;
}

void logBoot(uint8_t enable)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
  is_boot_log = enable;
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <logBoot+0x28>)
 8003f24:	701a      	strb	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2000000c 	.word	0x2000000c

08003f38 <logOpen>:

bool logOpen(uint8_t ch, uint32_t baud)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
  log_ch   = ch;
 8003f44:	4a0b      	ldr	r2, [pc, #44]	@ (8003f74 <logOpen+0x3c>)
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	7013      	strb	r3, [r2, #0]
  log_baud = baud;
 8003f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8003f78 <logOpen+0x40>)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6013      	str	r3, [r2, #0]
  is_open  = true;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <logOpen+0x44>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]

  is_open = uartOpen(ch, baud);
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	6839      	ldr	r1, [r7, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fa10 	bl	8004380 <uartOpen>
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <logOpen+0x44>)
 8003f66:	701a      	strb	r2, [r3, #0]

  return is_open;
 8003f68:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <logOpen+0x44>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200032e2 	.word	0x200032e2
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	200032e1 	.word	0x200032e1

08003f80 <logBufPrintf>:

bool logBufPrintf(log_buf_t *p_log, char *p_data, uint32_t length)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	@ 0x28
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t buf_last;
  uint8_t *p_buf;
  int buf_len;


  buf_last = p_log->buf_index + length + 8;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88db      	ldrh	r3, [r3, #6]
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	3308      	adds	r3, #8
 8003f98:	61fb      	str	r3, [r7, #28]
  if (buf_last > p_log->buf_length_max)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	889b      	ldrh	r3, [r3, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d911      	bls.n	8003fca <logBufPrintf+0x4a>
  {
    p_log->buf_index = 0;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	80da      	strh	r2, [r3, #6]
    buf_last = p_log->buf_index + length + 8;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88db      	ldrh	r3, [r3, #6]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	61fb      	str	r3, [r7, #28]

    if (buf_last > p_log->buf_length_max)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	889b      	ldrh	r3, [r3, #4]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <logBufPrintf+0x4a>
    {
      return false;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e033      	b.n	8004032 <logBufPrintf+0xb2>
    }
  }

  p_buf = &p_log->buf[p_log->buf_index];
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	88d2      	ldrh	r2, [r2, #6]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]

  buf_len = snprintf((char *)p_buf, length + 8, "%04X\t%s", p_log->line_index, p_data);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f103 0108 	add.w	r1, r3, #8
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <logBufPrintf+0xbc>)
 8003fea:	69b8      	ldr	r0, [r7, #24]
 8003fec:	f006 fb16 	bl	800a61c <sniprintf>
 8003ff0:	6178      	str	r0, [r7, #20]
  p_log->line_index++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	801a      	strh	r2, [r3, #0]
  p_log->buf_index += buf_len;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	88da      	ldrh	r2, [r3, #6]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	b29b      	uxth	r3, r3
 8004006:	4413      	add	r3, r2
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	80da      	strh	r2, [r3, #6]


  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	885b      	ldrh	r3, [r3, #2]
 8004012:	461a      	mov	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	8892      	ldrh	r2, [r2, #4]
 800401c:	4293      	cmp	r3, r2
 800401e:	dc07      	bgt.n	8004030 <logBufPrintf+0xb0>
  {
    p_log->buf_length += buf_len;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	885a      	ldrh	r2, [r3, #2]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	b29b      	uxth	r3, r3
 8004028:	4413      	add	r3, r2
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	805a      	strh	r2, [r3, #2]
  }

  return true;
 8004030:	2301      	movs	r3, #1
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	0800d100 	.word	0x0800d100

08004040 <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 8004040:	b40f      	push	{r0, r1, r2, r3}
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 8004048:	4b1c      	ldr	r3, [pc, #112]	@ (80040bc <logPrintf+0x7c>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	f083 0301 	eor.w	r3, r3, #1
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d12a      	bne.n	80040ac <logPrintf+0x6c>


  va_start(args, fmt);
 8004056:	f107 0314 	add.w	r3, r7, #20
 800405a:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004064:	4816      	ldr	r0, [pc, #88]	@ (80040c0 <logPrintf+0x80>)
 8004066:	f006 fb7b 	bl	800a760 <vsniprintf>
 800406a:	6078      	str	r0, [r7, #4]

  if (is_open == true && is_enable == true)
 800406c:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <logPrintf+0x84>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <logPrintf+0x4a>
 8004074:	4b14      	ldr	r3, [pc, #80]	@ (80040c8 <logPrintf+0x88>)
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d006      	beq.n	800408a <logPrintf+0x4a>
  {
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <logPrintf+0x8c>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	490f      	ldr	r1, [pc, #60]	@ (80040c0 <logPrintf+0x80>)
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fbaf 	bl	80047e8 <uartWrite>
  }

  if (is_boot_log)
 800408a:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <logPrintf+0x90>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <logPrintf+0x5e>
  {
    logBufPrintf(&log_buf_boot, print_buf, len);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	461a      	mov	r2, r3
 8004096:	490a      	ldr	r1, [pc, #40]	@ (80040c0 <logPrintf+0x80>)
 8004098:	480e      	ldr	r0, [pc, #56]	@ (80040d4 <logPrintf+0x94>)
 800409a:	f7ff ff71 	bl	8003f80 <logBufPrintf>
  }
  logBufPrintf(&log_buf_list, print_buf, len);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	461a      	mov	r2, r3
 80040a2:	4907      	ldr	r1, [pc, #28]	@ (80040c0 <logPrintf+0x80>)
 80040a4:	480c      	ldr	r0, [pc, #48]	@ (80040d8 <logPrintf+0x98>)
 80040a6:	f7ff ff6b 	bl	8003f80 <logBufPrintf>
 80040aa:	e000      	b.n	80040ae <logPrintf+0x6e>
  if (is_init != true) return;
 80040ac:	bf00      	nop
  va_end(args);

#ifdef _USE_HW_RTOS
  unLock();
#endif
}
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040b6:	b004      	add	sp, #16
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	200032e0 	.word	0x200032e0
 80040c0:	200032e4 	.word	0x200032e4
 80040c4:	200032e1 	.word	0x200032e1
 80040c8:	2000000d 	.word	0x2000000d
 80040cc:	200032e2 	.word	0x200032e2
 80040d0:	2000000c 	.word	0x2000000c
 80040d4:	20001ac8 	.word	0x20001ac8
 80040d8:	20001ad4 	.word	0x20001ad4

080040dc <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80040e4:	2300      	movs	r3, #0
 80040e6:	77fb      	strb	r3, [r7, #31]



  if (args->argc == 1 && args->isStr(0, "info"))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d124      	bne.n	800413a <cliCmd+0x5e>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	494c      	ldr	r1, [pc, #304]	@ (8004228 <cliCmd+0x14c>)
 80040f6:	2000      	movs	r0, #0
 80040f8:	4798      	blx	r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01c      	beq.n	800413a <cliCmd+0x5e>
  {
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 8004100:	4b4a      	ldr	r3, [pc, #296]	@ (800422c <cliCmd+0x150>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	4619      	mov	r1, r3
 8004106:	484a      	ldr	r0, [pc, #296]	@ (8004230 <cliCmd+0x154>)
 8004108:	f7fd fe58 	bl	8001dbc <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 800410c:	4b47      	ldr	r3, [pc, #284]	@ (800422c <cliCmd+0x150>)
 800410e:	885b      	ldrh	r3, [r3, #2]
 8004110:	4619      	mov	r1, r3
 8004112:	4848      	ldr	r0, [pc, #288]	@ (8004234 <cliCmd+0x158>)
 8004114:	f7fd fe52 	bl	8001dbc <cliPrintf>
    cliPrintf("\n");
 8004118:	4847      	ldr	r0, [pc, #284]	@ (8004238 <cliCmd+0x15c>)
 800411a:	f7fd fe4f 	bl	8001dbc <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 800411e:	4b47      	ldr	r3, [pc, #284]	@ (800423c <cliCmd+0x160>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	4846      	ldr	r0, [pc, #280]	@ (8004240 <cliCmd+0x164>)
 8004126:	f7fd fe49 	bl	8001dbc <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 800412a:	4b44      	ldr	r3, [pc, #272]	@ (800423c <cliCmd+0x160>)
 800412c:	885b      	ldrh	r3, [r3, #2]
 800412e:	4619      	mov	r1, r3
 8004130:	4844      	ldr	r0, [pc, #272]	@ (8004244 <cliCmd+0x168>)
 8004132:	f7fd fe43 	bl	8001dbc <cliPrintf>

    ret = true;
 8004136:	2301      	movs	r3, #1
 8004138:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d12d      	bne.n	800419e <cliCmd+0xc2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4940      	ldr	r1, [pc, #256]	@ (8004248 <cliCmd+0x16c>)
 8004148:	2000      	movs	r0, #0
 800414a:	4798      	blx	r3
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d025      	beq.n	800419e <cliCmd+0xc2>
  {
    uint32_t index = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	61bb      	str	r3, [r7, #24]

    while(cliKeepLoop())
 8004156:	e019      	b.n	800418c <cliCmd+0xb0>
    {
      uint32_t buf_len;

      buf_len = log_buf_boot.buf_length - index;
 8004158:	4b34      	ldr	r3, [pc, #208]	@ (800422c <cliCmd+0x150>)
 800415a:	885b      	ldrh	r3, [r3, #2]
 800415c:	461a      	mov	r2, r3
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	617b      	str	r3, [r7, #20]
      if (buf_len == 0)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <cliCmd+0xbc>
      {
        break;
      }
      if (buf_len > 64)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	d901      	bls.n	8004174 <cliCmd+0x98>
      {
        buf_len = 64;
 8004170:	2340      	movs	r3, #64	@ 0x40
 8004172:	617b      	str	r3, [r7, #20]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 8004174:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <cliCmd+0x150>)
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4413      	add	r3, r2
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fd fa16 	bl	80015b0 <cliWrite>
      index += buf_len;
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
    while(cliKeepLoop())
 800418c:	f7fd ff10 	bl	8001fb0 <cliKeepLoop>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e0      	bne.n	8004158 <cliCmd+0x7c>
 8004196:	e000      	b.n	800419a <cliCmd+0xbe>
        break;
 8004198:	bf00      	nop

      #ifdef _USE_HW_RTOS
      unLock();
      #endif
    }
    ret = true;
 800419a:	2301      	movs	r3, #1
 800419c:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d12d      	bne.n	8004202 <cliCmd+0x126>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4928      	ldr	r1, [pc, #160]	@ (800424c <cliCmd+0x170>)
 80041ac:	2000      	movs	r0, #0
 80041ae:	4798      	blx	r3
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d025      	beq.n	8004202 <cliCmd+0x126>
  {
    uint32_t index = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]

    while(cliKeepLoop())
 80041ba:	e019      	b.n	80041f0 <cliCmd+0x114>
    {
      uint32_t buf_len;

      buf_len = log_buf_list.buf_length - index;
 80041bc:	4b1f      	ldr	r3, [pc, #124]	@ (800423c <cliCmd+0x160>)
 80041be:	885b      	ldrh	r3, [r3, #2]
 80041c0:	461a      	mov	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	60fb      	str	r3, [r7, #12]
      if (buf_len == 0)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <cliCmd+0x120>
      {
        break;
      }
      if (buf_len > 64)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	d901      	bls.n	80041d8 <cliCmd+0xfc>
      {
        buf_len = 64;
 80041d4:	2340      	movs	r3, #64	@ 0x40
 80041d6:	60fb      	str	r3, [r7, #12]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 80041d8:	4b18      	ldr	r3, [pc, #96]	@ (800423c <cliCmd+0x160>)
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4413      	add	r3, r2
 80041e0:	68f9      	ldr	r1, [r7, #12]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd f9e4 	bl	80015b0 <cliWrite>
      index += buf_len;
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
    while(cliKeepLoop())
 80041f0:	f7fd fede 	bl	8001fb0 <cliKeepLoop>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e0      	bne.n	80041bc <cliCmd+0xe0>
 80041fa:	e000      	b.n	80041fe <cliCmd+0x122>
        break;
 80041fc:	bf00      	nop
      #ifdef _USE_HW_RTOS
      unLock();
      #endif

    }
    ret = true;
 80041fe:	2301      	movs	r3, #1
 8004200:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 8004202:	7ffb      	ldrb	r3, [r7, #31]
 8004204:	f083 0301 	eor.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <cliCmd+0x144>
  {
    cliPrintf("log info\n");
 800420e:	4810      	ldr	r0, [pc, #64]	@ (8004250 <cliCmd+0x174>)
 8004210:	f7fd fdd4 	bl	8001dbc <cliPrintf>
    cliPrintf("log boot\n");
 8004214:	480f      	ldr	r0, [pc, #60]	@ (8004254 <cliCmd+0x178>)
 8004216:	f7fd fdd1 	bl	8001dbc <cliPrintf>
    cliPrintf("log list\n");
 800421a:	480f      	ldr	r0, [pc, #60]	@ (8004258 <cliCmd+0x17c>)
 800421c:	f7fd fdce 	bl	8001dbc <cliPrintf>
  }
}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	0800d108 	.word	0x0800d108
 800422c:	20001ac8 	.word	0x20001ac8
 8004230:	0800d110 	.word	0x0800d110
 8004234:	0800d124 	.word	0x0800d124
 8004238:	0800d138 	.word	0x0800d138
 800423c:	20001ad4 	.word	0x20001ad4
 8004240:	0800d13c 	.word	0x0800d13c
 8004244:	0800d150 	.word	0x0800d150
 8004248:	0800d164 	.word	0x0800d164
 800424c:	0800d16c 	.word	0x0800d16c
 8004250:	0800d174 	.word	0x0800d174
 8004254:	0800d180 	.word	0x0800d180
 8004258:	0800d18c 	.word	0x0800d18c

0800425c <swtimerInit>:
//-- External Functions
//


bool swtimerInit(void)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 8004262:	4b20      	ldr	r3, [pc, #128]	@ (80042e4 <swtimerInit+0x88>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <swtimerInit+0x12>
  {
    return false;  // 이미 한번 실행했다면 정지.
 800426a:	2300      	movs	r3, #0
 800426c:	e033      	b.n	80042d6 <swtimerInit+0x7a>
  }


  // 구조체 초기화
  for(i=0; i<HW_SWTIMER_MAX_CH; i++)
 800426e:	2300      	movs	r3, #0
 8004270:	71fb      	strb	r3, [r7, #7]
 8004272:	e029      	b.n	80042c8 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 8004274:	79fa      	ldrb	r2, [r7, #7]
 8004276:	491c      	ldr	r1, [pc, #112]	@ (80042e8 <swtimerInit+0x8c>)
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 8004286:	79fa      	ldrb	r2, [r7, #7]
 8004288:	4917      	ldr	r1, [pc, #92]	@ (80042e8 <swtimerInit+0x8c>)
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	3304      	adds	r3, #4
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 800429a:	79fa      	ldrb	r2, [r7, #7]
 800429c:	4912      	ldr	r1, [pc, #72]	@ (80042e8 <swtimerInit+0x8c>)
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3308      	adds	r3, #8
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct    = NULL;
 80042ae:	79fa      	ldrb	r2, [r7, #7]
 80042b0:	490d      	ldr	r1, [pc, #52]	@ (80042e8 <swtimerInit+0x8c>)
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	330c      	adds	r3, #12
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
  for(i=0; i<HW_SWTIMER_MAX_CH; i++)
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	3301      	adds	r3, #1
 80042c6:	71fb      	strb	r3, [r7, #7]
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	2b07      	cmp	r3, #7
 80042cc:	d9d2      	bls.n	8004274 <swtimerInit+0x18>
  }

  excute = 1;
 80042ce:	4b05      	ldr	r3, [pc, #20]	@ (80042e4 <swtimerInit+0x88>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]

  return true;
 80042d4:	2301      	movs	r3, #1
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20003484 	.word	0x20003484
 80042e8:	200033e4 	.word	0x200033e4

080042ec <uartInit>:
    {"USART1 DEBUG ", USART1, &huart1, &hdma_usart1_rx, NULL, false},
    {"USART2 RS232 ", USART2, &huart2, &hdma_usart2_rx, NULL, false},
  };

bool uartInit(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e02c      	b.n	8004352 <uartInit+0x66>
  {
    uart_tbl[i].is_open = false;
 80042f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004370 <uartInit+0x84>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].baud = 115200;
 800430a:	4a19      	ldr	r2, [pc, #100]	@ (8004370 <uartInit+0x84>)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3304      	adds	r3, #4
 800431a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800431e:	601a      	str	r2, [r3, #0]
    uart_tbl[i].rx_cnt = 0;
 8004320:	4a13      	ldr	r2, [pc, #76]	@ (8004370 <uartInit+0x84>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    uart_tbl[i].tx_cnt = 0;    
 8004336:	4a0e      	ldr	r2, [pc, #56]	@ (8004370 <uartInit+0x84>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b01      	cmp	r3, #1
 8004356:	ddcf      	ble.n	80042f8 <uartInit+0xc>
  }

  is_init = true;
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <uartInit+0x88>)
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("uart", cliUart);
 800435e:	4906      	ldr	r1, [pc, #24]	@ (8004378 <uartInit+0x8c>)
 8004360:	4806      	ldr	r0, [pc, #24]	@ (800437c <uartInit+0x90>)
 8004362:	f7fd fe3b 	bl	8001fdc <cliAdd>
#endif

  return true;
 8004366:	2301      	movs	r3, #1
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200001e8 	.word	0x200001e8
 8004374:	20003485 	.word	0x20003485
 8004378:	08004921 	.word	0x08004921
 800437c:	0800d1b8 	.word	0x0800d1b8

08004380 <uartOpen>:
{
  return is_init;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	6039      	str	r1, [r7, #0]
 800438a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800438c:	2300      	movs	r3, #0
 800438e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef ret_hal;


  if (ch >= UART_MAX_CH) return false;
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d901      	bls.n	800439a <uartOpen+0x1a>
 8004396:	2300      	movs	r3, #0
 8004398:	e1a0      	b.n	80046dc <uartOpen+0x35c>

  if (uart_tbl[ch].is_open == true && uart_tbl[ch].baud == baud)
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	4a93      	ldr	r2, [pc, #588]	@ (80045ec <uartOpen+0x26c>)
 800439e:	f240 412c 	movw	r1, #1068	@ 0x42c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <uartOpen+0x4a>
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	4a8e      	ldr	r2, [pc, #568]	@ (80045ec <uartOpen+0x26c>)
 80043b2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	3304      	adds	r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d101      	bne.n	80043ca <uartOpen+0x4a>
  {
    return true;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e188      	b.n	80046dc <uartOpen+0x35c>
  }


  switch(ch)
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	dc02      	bgt.n	80043d6 <uartOpen+0x56>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	da02      	bge.n	80043da <uartOpen+0x5a>
 80043d4:	e181      	b.n	80046da <uartOpen+0x35a>
 80043d6:	2b02      	cmp	r3, #2
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
      }
      break;

		case _DEF_UART3:
			break;
 80043d8:	e17f      	b.n	80046da <uartOpen+0x35a>
      uart_tbl[ch].baud      = baud;
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	4a83      	ldr	r2, [pc, #524]	@ (80045ec <uartOpen+0x26c>)
 80043de:	f240 412c 	movw	r1, #1068	@ 0x42c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_huart   = uart_hw_tbl[ch].p_huart;
 80043ee:	79fa      	ldrb	r2, [r7, #7]
 80043f0:	79f9      	ldrb	r1, [r7, #7]
 80043f2:	487f      	ldr	r0, [pc, #508]	@ (80045f0 <uartOpen+0x270>)
 80043f4:	4613      	mov	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4413      	add	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4403      	add	r3, r0
 80043fe:	3308      	adds	r3, #8
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	487a      	ldr	r0, [pc, #488]	@ (80045ec <uartOpen+0x26c>)
 8004404:	f240 432c 	movw	r3, #1068	@ 0x42c
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4403      	add	r3, r0
 800440e:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004412:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_hdma_rx = uart_hw_tbl[ch].p_hdma_rx;
 8004414:	79fa      	ldrb	r2, [r7, #7]
 8004416:	79f9      	ldrb	r1, [r7, #7]
 8004418:	4875      	ldr	r0, [pc, #468]	@ (80045f0 <uartOpen+0x270>)
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4403      	add	r3, r0
 8004424:	330c      	adds	r3, #12
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4870      	ldr	r0, [pc, #448]	@ (80045ec <uartOpen+0x26c>)
 800442a:	f240 432c 	movw	r3, #1068	@ 0x42c
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4403      	add	r3, r0
 8004434:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8004438:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;    
 800443a:	79fa      	ldrb	r2, [r7, #7]
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	496b      	ldr	r1, [pc, #428]	@ (80045ec <uartOpen+0x26c>)
 8004440:	f240 402c 	movw	r0, #1068	@ 0x42c
 8004444:	fb00 f303 	mul.w	r3, r0, r3
 8004448:	440b      	add	r3, r1
 800444a:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	4867      	ldr	r0, [pc, #412]	@ (80045f0 <uartOpen+0x270>)
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4403      	add	r3, r0
 800445c:	3304      	adds	r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	600b      	str	r3, [r1, #0]
      uart_tbl[ch].p_huart->Init.BaudRate       = baud;
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	4a61      	ldr	r2, [pc, #388]	@ (80045ec <uartOpen+0x26c>)
 8004466:	f240 412c 	movw	r1, #1068	@ 0x42c
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	4413      	add	r3, r2
 8004470:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	605a      	str	r2, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength     = UART_WORDLENGTH_8B;
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	4a5b      	ldr	r2, [pc, #364]	@ (80045ec <uartOpen+0x26c>)
 800447e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	609a      	str	r2, [r3, #8]
      uart_tbl[ch].p_huart->Init.StopBits       = UART_STOPBITS_1;
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	4a55      	ldr	r2, [pc, #340]	@ (80045ec <uartOpen+0x26c>)
 8004496:	f240 412c 	movw	r1, #1068	@ 0x42c
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	60da      	str	r2, [r3, #12]
      uart_tbl[ch].p_huart->Init.Parity         = UART_PARITY_NONE;
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	4a4f      	ldr	r2, [pc, #316]	@ (80045ec <uartOpen+0x26c>)
 80044ae:	f240 412c 	movw	r1, #1068	@ 0x42c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
      uart_tbl[ch].p_huart->Init.Mode           = UART_MODE_TX_RX;
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	4a49      	ldr	r2, [pc, #292]	@ (80045ec <uartOpen+0x26c>)
 80044c6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	220c      	movs	r2, #12
 80044d8:	615a      	str	r2, [r3, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	4a43      	ldr	r2, [pc, #268]	@ (80045ec <uartOpen+0x26c>)
 80044de:	f240 412c 	movw	r1, #1068	@ 0x42c
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2200      	movs	r2, #0
 80044f0:	619a      	str	r2, [r3, #24]
      uart_tbl[ch].p_huart->Init.OverSampling   = UART_OVERSAMPLING_16;
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	4a3d      	ldr	r2, [pc, #244]	@ (80045ec <uartOpen+0x26c>)
 80044f6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2200      	movs	r2, #0
 8004508:	61da      	str	r2, [r3, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	4a37      	ldr	r2, [pc, #220]	@ (80045ec <uartOpen+0x26c>)
 800450e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004512:	fb01 f303 	mul.w	r3, r1, r3
 8004516:	4413      	add	r3, r2
 8004518:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	621a      	str	r2, [r3, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	4a31      	ldr	r2, [pc, #196]	@ (80045ec <uartOpen+0x26c>)
 8004526:	f240 412c 	movw	r1, #1068	@ 0x42c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	625a      	str	r2, [r3, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	4a2b      	ldr	r2, [pc, #172]	@ (80045ec <uartOpen+0x26c>)
 800453e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	629a      	str	r2, [r3, #40]	@ 0x28
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	f240 422c 	movw	r2, #1068	@ 0x42c
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004560:	4a22      	ldr	r2, [pc, #136]	@ (80045ec <uartOpen+0x26c>)
 8004562:	1898      	adds	r0, r3, r2
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	f240 422c 	movw	r2, #1068	@ 0x42c
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	3308      	adds	r3, #8
 8004570:	4a1e      	ldr	r2, [pc, #120]	@ (80045ec <uartOpen+0x26c>)
 8004572:	4413      	add	r3, r2
 8004574:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004578:	4619      	mov	r1, r3
 800457a:	f7fc fd9f 	bl	80010bc <qbufferCreate>
      __HAL_RCC_DMA1_CLK_ENABLE();
 800457e:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <uartOpen+0x274>)
 8004580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004582:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <uartOpen+0x274>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6493      	str	r3, [r2, #72]	@ 0x48
 800458a:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <uartOpen+0x274>)
 800458c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	4a14      	ldr	r2, [pc, #80]	@ (80045ec <uartOpen+0x26c>)
 800459a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f003 ff1e 	bl	80083ec <HAL_UART_DeInit>
      if (uart_hw_tbl[ch].is_rs485 == true)
 80045b0:	79fa      	ldrb	r2, [r7, #7]
 80045b2:	490f      	ldr	r1, [pc, #60]	@ (80045f0 <uartOpen+0x270>)
 80045b4:	4613      	mov	r3, r2
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4413      	add	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	440b      	add	r3, r1
 80045be:	3314      	adds	r3, #20
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d018      	beq.n	80045f8 <uartOpen+0x278>
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	4a08      	ldr	r2, [pc, #32]	@ (80045ec <uartOpen+0x26c>)
 80045ca:	f240 412c 	movw	r1, #1068	@ 0x42c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	2200      	movs	r2, #0
 80045de:	2100      	movs	r1, #0
 80045e0:	f004 ff10 	bl	8009404 <HAL_RS485Ex_Init>
 80045e4:	4603      	mov	r3, r0
 80045e6:	73bb      	strb	r3, [r7, #14]
 80045e8:	e015      	b.n	8004616 <uartOpen+0x296>
 80045ea:	bf00      	nop
 80045ec:	200001e8 	.word	0x200001e8
 80045f0:	0800d46c 	.word	0x0800d46c
 80045f4:	40021000 	.word	0x40021000
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	4a3a      	ldr	r2, [pc, #232]	@ (80046e4 <uartOpen+0x364>)
 80045fc:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f003 fe9d 	bl	800834c <HAL_UART_Init>
 8004612:	4603      	mov	r3, r0
 8004614:	73bb      	strb	r3, [r7, #14]
      if (ret_hal == HAL_OK)
 8004616:	7bbb      	ldrb	r3, [r7, #14]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d15d      	bne.n	80046d8 <uartOpen+0x358>
        ret = true;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
        uart_tbl[ch].is_open = true;
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	4a30      	ldr	r2, [pc, #192]	@ (80046e4 <uartOpen+0x364>)
 8004624:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	4a2b      	ldr	r2, [pc, #172]	@ (80046e4 <uartOpen+0x364>)
 8004636:	f240 412c 	movw	r1, #1068	@ 0x42c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	f240 422c 	movw	r2, #1068	@ 0x42c
 800464c:	fb02 f303 	mul.w	r3, r2, r3
 8004650:	3308      	adds	r3, #8
 8004652:	4a24      	ldr	r2, [pc, #144]	@ (80046e4 <uartOpen+0x364>)
 8004654:	4413      	add	r3, r2
 8004656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800465a:	4619      	mov	r1, r3
 800465c:	f003 ff94 	bl	8008588 <HAL_UART_Receive_DMA>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <uartOpen+0x2ea>
          ret = false;
 8004666:	2300      	movs	r3, #0
 8004668:	73fb      	strb	r3, [r7, #15]
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <uartOpen+0x364>)
 800466e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	4413      	add	r3, r2
 8004678:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	4a18      	ldr	r2, [pc, #96]	@ (80046e4 <uartOpen+0x364>)
 8004682:	f240 402c 	movw	r0, #1068	@ 0x42c
 8004686:	fb00 f303 	mul.w	r3, r0, r3
 800468a:	4413      	add	r3, r2
 800468c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	1a8a      	subs	r2, r1, r2
 800469e:	4911      	ldr	r1, [pc, #68]	@ (80046e4 <uartOpen+0x364>)
 80046a0:	f240 402c 	movw	r0, #1068	@ 0x42c
 80046a4:	fb00 f303 	mul.w	r3, r0, r3
 80046a8:	440b      	add	r3, r1
 80046aa:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80046ae:	601a      	str	r2, [r3, #0]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 80046b0:	79fa      	ldrb	r2, [r7, #7]
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	490b      	ldr	r1, [pc, #44]	@ (80046e4 <uartOpen+0x364>)
 80046b6:	f240 402c 	movw	r0, #1068	@ 0x42c
 80046ba:	fb00 f202 	mul.w	r2, r0, r2
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	4907      	ldr	r1, [pc, #28]	@ (80046e4 <uartOpen+0x364>)
 80046c8:	f240 402c 	movw	r0, #1068	@ 0x42c
 80046cc:	fb00 f303 	mul.w	r3, r0, r3
 80046d0:	440b      	add	r3, r1
 80046d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046d6:	601a      	str	r2, [r3, #0]
      break;
 80046d8:	bf00      	nop
  }

  return ret;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	200001e8 	.word	0x200001e8

080046e8 <uartAvailable>:

  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]


  switch(ch)
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	dc02      	bgt.n	8004702 <uartAvailable+0x1a>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da02      	bge.n	8004706 <uartAvailable+0x1e>
 8004700:	e030      	b.n	8004764 <uartAvailable+0x7c>
 8004702:	2b02      	cmp	r3, #2
		}
		break;

    case _DEF_UART3:

      break;
 8004704:	e02e      	b.n	8004764 <uartAvailable+0x7c>
			uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	4a19      	ldr	r2, [pc, #100]	@ (8004770 <uartAvailable+0x88>)
 800470a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	4a14      	ldr	r2, [pc, #80]	@ (8004770 <uartAvailable+0x88>)
 800471e:	f240 402c 	movw	r0, #1068	@ 0x42c
 8004722:	fb00 f303 	mul.w	r3, r0, r3
 8004726:	4413      	add	r3, r2
 8004728:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	1a8a      	subs	r2, r1, r2
 8004736:	490e      	ldr	r1, [pc, #56]	@ (8004770 <uartAvailable+0x88>)
 8004738:	f240 402c 	movw	r0, #1068	@ 0x42c
 800473c:	fb00 f303 	mul.w	r3, r0, r3
 8004740:	440b      	add	r3, r1
 8004742:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004746:	601a      	str	r2, [r3, #0]
			ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	f240 422c 	movw	r2, #1068	@ 0x42c
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004756:	4a06      	ldr	r2, [pc, #24]	@ (8004770 <uartAvailable+0x88>)
 8004758:	4413      	add	r3, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc fdb2 	bl	80012c4 <qbufferAvailable>
 8004760:	60f8      	str	r0, [r7, #12]
		break;
 8004762:	bf00      	nop
  }

  return ret;
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	200001e8 	.word	0x200001e8

08004774 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	2b01      	cmp	r3, #1
 8004786:	dc02      	bgt.n	800478e <uartRead+0x1a>
 8004788:	2b00      	cmp	r3, #0
 800478a:	da02      	bge.n	8004792 <uartRead+0x1e>
 800478c:	e011      	b.n	80047b2 <uartRead+0x3e>
 800478e:	2b02      	cmp	r3, #2
    case _DEF_UART1:
    case _DEF_UART2:
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
      break;
    case _DEF_UART3:
      break;
 8004790:	e00f      	b.n	80047b2 <uartRead+0x3e>
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	f240 422c 	movw	r2, #1068	@ 0x42c
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80047a0:	4a10      	ldr	r2, [pc, #64]	@ (80047e4 <uartRead+0x70>)
 80047a2:	4413      	add	r3, r2
 80047a4:	f107 010f 	add.w	r1, r7, #15
 80047a8:	2201      	movs	r2, #1
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fc fd1f 	bl	80011ee <qbufferRead>
      break;
 80047b0:	bf00      	nop
  }
  uart_tbl[ch].rx_cnt++;
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	490b      	ldr	r1, [pc, #44]	@ (80047e4 <uartRead+0x70>)
 80047b6:	f240 422c 	movw	r2, #1068	@ 0x42c
 80047ba:	fb03 f202 	mul.w	r2, r3, r2
 80047be:	440a      	add	r2, r1
 80047c0:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	3201      	adds	r2, #1
 80047c8:	4906      	ldr	r1, [pc, #24]	@ (80047e4 <uartRead+0x70>)
 80047ca:	f240 402c 	movw	r0, #1068	@ 0x42c
 80047ce:	fb00 f303 	mul.w	r3, r0, r3
 80047d2:	440b      	add	r3, r1
 80047d4:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80047d8:	601a      	str	r2, [r3, #0]

  return ret;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	200001e8 	.word	0x200001e8

080047e8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	617b      	str	r3, [r7, #20]


  switch(ch)
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	dc02      	bgt.n	8004806 <uartWrite+0x1e>
 8004800:	2b00      	cmp	r3, #0
 8004802:	da02      	bge.n	800480a <uartWrite+0x22>
 8004804:	e017      	b.n	8004836 <uartWrite+0x4e>
 8004806:	2b02      	cmp	r3, #2
				ret = length;
			}
    	break;
    case _DEF_UART3:

      break;
 8004808:	e015      	b.n	8004836 <uartWrite+0x4e>
    	if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	4a17      	ldr	r2, [pc, #92]	@ (800486c <uartWrite+0x84>)
 800480e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	b29a      	uxth	r2, r3
 8004822:	2364      	movs	r3, #100	@ 0x64
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	f003 fe20 	bl	800846a <HAL_UART_Transmit>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <uartWrite+0x4c>
				ret = length;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	617b      	str	r3, [r7, #20]
    	break;
 8004834:	bf00      	nop
  }
  uart_tbl[ch].tx_cnt += ret;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	4a0c      	ldr	r2, [pc, #48]	@ (800486c <uartWrite+0x84>)
 800483a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	440a      	add	r2, r1
 8004850:	4906      	ldr	r1, [pc, #24]	@ (800486c <uartWrite+0x84>)
 8004852:	f240 402c 	movw	r0, #1068	@ 0x42c
 8004856:	fb00 f303 	mul.w	r3, r0, r3
 800485a:	440b      	add	r3, r1
 800485c:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8004860:	601a      	str	r2, [r3, #0]

  return ret;
 8004862:	697b      	ldr	r3, [r7, #20]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200001e8 	.word	0x200001e8

08004870 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8004870:	b40e      	push	{r1, r2, r3}
 8004872:	b580      	push	{r7, lr}
 8004874:	b0c7      	sub	sp, #284	@ 0x11c
 8004876:	af00      	add	r7, sp, #0
 8004878:	4602      	mov	r2, r0
 800487a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800487e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8004882:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8004884:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8004888:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800488c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004890:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8004892:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004896:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800489a:	f107 0010 	add.w	r0, r7, #16
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80048a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048a8:	f005 ff5a 	bl	800a760 <vsniprintf>
 80048ac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80048b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80048b4:	f107 0110 	add.w	r1, r7, #16
 80048b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048bc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ff90 	bl	80047e8 <uartWrite>
 80048c8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 80048cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80048d6:	46bd      	mov	sp, r7
 80048d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048dc:	b003      	add	sp, #12
 80048de:	4770      	bx	lr

080048e0 <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]


  if (ch >= UART_MAX_CH) return 0;
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d901      	bls.n	80048f8 <uartGetBaud+0x18>
 80048f4:	2300      	movs	r3, #0
 80048f6:	e00a      	b.n	800490e <uartGetBaud+0x2e>
  if (ch == HW_UART_CH_USB)
    ret = cdcGetBaud();
  else
    ret = uart_tbl[ch].baud;
  #else
  ret = uart_tbl[ch].baud;
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	4a08      	ldr	r2, [pc, #32]	@ (800491c <uartGetBaud+0x3c>)
 80048fc:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	4413      	add	r3, r2
 8004906:	3304      	adds	r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]
  #endif
  
  return ret;
 800490c:	68fb      	ldr	r3, [r7, #12]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	200001e8 	.word	0x200001e8

08004920 <cliUart>:
  return uart_tbl[ch].tx_cnt;
}

#ifdef _USE_HW_CLI
void cliUart(cli_args_t *args)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004928:	2300      	movs	r3, #0
 800492a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "info"))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d127      	bne.n	8004984 <cliUart+0x64>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	494d      	ldr	r1, [pc, #308]	@ (8004a70 <cliUart+0x150>)
 800493a:	2000      	movs	r0, #0
 800493c:	4798      	blx	r3
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01f      	beq.n	8004984 <cliUart+0x64>
  {
    for (int i=0; i<UART_MAX_CH; i++)
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e017      	b.n	800497a <cliUart+0x5a>
    {
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1c5c      	adds	r4, r3, #1
 800494e:	4949      	ldr	r1, [pc, #292]	@ (8004a74 <cliUart+0x154>)
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	440b      	add	r3, r1
 800495c:	681d      	ldr	r5, [r3, #0]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff ffbc 	bl	80048e0 <uartGetBaud>
 8004968:	4603      	mov	r3, r0
 800496a:	462a      	mov	r2, r5
 800496c:	4621      	mov	r1, r4
 800496e:	4842      	ldr	r0, [pc, #264]	@ (8004a78 <cliUart+0x158>)
 8004970:	f7fd fa24 	bl	8001dbc <cliPrintf>
    for (int i=0; i<UART_MAX_CH; i++)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3301      	adds	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b01      	cmp	r3, #1
 800497e:	dde4      	ble.n	800494a <cliUart+0x2a>
    }
    ret = true;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "test"))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d15f      	bne.n	8004a4c <cliUart+0x12c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	493a      	ldr	r1, [pc, #232]	@ (8004a7c <cliUart+0x15c>)
 8004992:	2000      	movs	r0, #0
 8004994:	4798      	blx	r3
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d057      	beq.n	8004a4c <cliUart+0x12c>
  {
    uint8_t uart_ch;

    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2001      	movs	r0, #1
 80049a2:	4798      	blx	r3
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dd11      	ble.n	80049ce <cliUart+0xae>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2001      	movs	r0, #1
 80049b0:	4798      	blx	r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	dc08      	bgt.n	80049ca <cliUart+0xaa>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2001      	movs	r0, #1
 80049be:	4798      	blx	r3
 80049c0:	4603      	mov	r3, r0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e002      	b.n	80049d0 <cliUart+0xb0>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <cliUart+0xb0>
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]

    if (uart_ch != cliGetPort())
 80049d2:	f7fc fd0d 	bl	80013f0 <cliGetPort>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	4293      	cmp	r3, r2
 80049de:	d02e      	beq.n	8004a3e <cliUart+0x11e>
    {
      uint8_t rx_data;

      while(1)
      {
        if (uartAvailable(uart_ch) > 0)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fe80 	bl	80046e8 <uartAvailable>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <cliUart+0xe8>
        {
          rx_data = uartRead(uart_ch);
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff febf 	bl	8004774 <uartRead>
 80049f6:	4603      	mov	r3, r0
 80049f8:	73bb      	strb	r3, [r7, #14]
          cliPrintf("<- _DEF_UART%d RX : 0x%X\n", uart_ch + 1, rx_data);
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	3301      	adds	r3, #1
 80049fe:	7bba      	ldrb	r2, [r7, #14]
 8004a00:	4619      	mov	r1, r3
 8004a02:	481f      	ldr	r0, [pc, #124]	@ (8004a80 <cliUart+0x160>)
 8004a04:	f7fd f9da 	bl	8001dbc <cliPrintf>
        }

        if (cliAvailable() > 0)
 8004a08:	f7fc fdba 	bl	8001580 <cliAvailable>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0e6      	beq.n	80049e0 <cliUart+0xc0>
        {
          rx_data = cliRead();
 8004a12:	f7fc fdc1 	bl	8001598 <cliRead>
 8004a16:	4603      	mov	r3, r0
 8004a18:	73bb      	strb	r3, [r7, #14]
          if (rx_data == 'q')
 8004a1a:	7bbb      	ldrb	r3, [r7, #14]
 8004a1c:	2b71      	cmp	r3, #113	@ 0x71
 8004a1e:	d012      	beq.n	8004a46 <cliUart+0x126>
          {
            break;
          }
          else
          {
            uartWrite(uart_ch, &rx_data, 1);
 8004a20:	f107 010e 	add.w	r1, r7, #14
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	2201      	movs	r2, #1
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fedd 	bl	80047e8 <uartWrite>
            cliPrintf("-> _DEF_UART%d TX : 0x%X\n", uart_ch + 1, rx_data);            
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	3301      	adds	r3, #1
 8004a32:	7bba      	ldrb	r2, [r7, #14]
 8004a34:	4619      	mov	r1, r3
 8004a36:	4813      	ldr	r0, [pc, #76]	@ (8004a84 <cliUart+0x164>)
 8004a38:	f7fd f9c0 	bl	8001dbc <cliPrintf>
        if (uartAvailable(uart_ch) > 0)
 8004a3c:	e7d0      	b.n	80049e0 <cliUart+0xc0>
        }
      }
    }
    else
    {
      cliPrintf("This is cliPort\n");
 8004a3e:	4812      	ldr	r0, [pc, #72]	@ (8004a88 <cliUart+0x168>)
 8004a40:	f7fd f9bc 	bl	8001dbc <cliPrintf>
 8004a44:	e000      	b.n	8004a48 <cliUart+0x128>
            break;
 8004a46:	bf00      	nop
    }
    ret = true;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret == false)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	f083 0301 	eor.w	r3, r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d006      	beq.n	8004a66 <cliUart+0x146>
  {
    cliPrintf("uart info\n");
 8004a58:	480c      	ldr	r0, [pc, #48]	@ (8004a8c <cliUart+0x16c>)
 8004a5a:	f7fd f9af 	bl	8001dbc <cliPrintf>
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
 8004a5e:	2102      	movs	r1, #2
 8004a60:	480b      	ldr	r0, [pc, #44]	@ (8004a90 <cliUart+0x170>)
 8004a62:	f7fd f9ab 	bl	8001dbc <cliPrintf>
  }
}
 8004a66:	bf00      	nop
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	0800d1c0 	.word	0x0800d1c0
 8004a74:	0800d46c 	.word	0x0800d46c
 8004a78:	0800d1c8 	.word	0x0800d1c8
 8004a7c:	0800d1e4 	.word	0x0800d1e4
 8004a80:	0800d1ec 	.word	0x0800d1ec
 8004a84:	0800d208 	.word	0x0800d208
 8004a88:	0800d224 	.word	0x0800d224
 8004a8c:	0800d238 	.word	0x0800d238
 8004a90:	0800d244 	.word	0x0800d244

08004a94 <hwInit>:




bool hwInit(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
	cliInit();
 8004a9a:	f7fc fc2f 	bl	80012fc <cliInit>
	logInit();
 8004a9e:	f7ff f9fb 	bl	8003e98 <logInit>
	swtimerInit();
 8004aa2:	f7ff fbdb 	bl	800425c <swtimerInit>
	gpioInit();
 8004aa6:	f7ff f853 	bl	8003b50 <gpioInit>
	ledInit();
 8004aaa:	f7ff f9b1 	bl	8003e10 <ledInit>
	uartInit();
 8004aae:	f7ff fc1d 	bl	80042ec <uartInit>
	for (int i=0; i<HW_UART_MAX_CH; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	e009      	b.n	8004acc <hwInit+0x38>
	{
		uartOpen(i, 115200);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fc5d 	bl	8004380 <uartOpen>
	for (int i=0; i<HW_UART_MAX_CH; i++)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	ddf2      	ble.n	8004ab8 <hwInit+0x24>
	}
	logOpen(HW_UART_CH_DEBUG, 115200);
 8004ad2:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	f7ff fa2e 	bl	8003f38 <logOpen>
	logPrintf("\r\n[ Firmware Begin... ]\r\n");
 8004adc:	4810      	ldr	r0, [pc, #64]	@ (8004b20 <hwInit+0x8c>)
 8004ade:	f7ff faaf 	bl	8004040 <logPrintf>
	logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 8004ae2:	4910      	ldr	r1, [pc, #64]	@ (8004b24 <hwInit+0x90>)
 8004ae4:	4810      	ldr	r0, [pc, #64]	@ (8004b28 <hwInit+0x94>)
 8004ae6:	f7ff faab 	bl	8004040 <logPrintf>
	logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8004aea:	4910      	ldr	r1, [pc, #64]	@ (8004b2c <hwInit+0x98>)
 8004aec:	4810      	ldr	r0, [pc, #64]	@ (8004b30 <hwInit+0x9c>)
 8004aee:	f7ff faa7 	bl	8004040 <logPrintf>
	logPrintf("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq()/1000000);
 8004af2:	f003 f95b 	bl	8007dac <HAL_RCC_GetSysClockFreq>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4a0e      	ldr	r2, [pc, #56]	@ (8004b34 <hwInit+0xa0>)
 8004afa:	fb82 1203 	smull	r1, r2, r2, r3
 8004afe:	1492      	asrs	r2, r2, #18
 8004b00:	17db      	asrs	r3, r3, #31
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	4619      	mov	r1, r3
 8004b06:	480c      	ldr	r0, [pc, #48]	@ (8004b38 <hwInit+0xa4>)
 8004b08:	f7ff fa9a 	bl	8004040 <logPrintf>
	logPrintf("\n");
 8004b0c:	480b      	ldr	r0, [pc, #44]	@ (8004b3c <hwInit+0xa8>)
 8004b0e:	f7ff fa97 	bl	8004040 <logPrintf>

	  canInit();
 8004b12:	f7fd fb89 	bl	8002228 <canInit>
  return true;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	0800d258 	.word	0x0800d258
 8004b24:	0800d274 	.word	0x0800d274
 8004b28:	0800d280 	.word	0x0800d280
 8004b2c:	0800d298 	.word	0x0800d298
 8004b30:	0800d2a4 	.word	0x0800d2a4
 8004b34:	431bde83 	.word	0x431bde83
 8004b38:	0800d2bc 	.word	0x0800d2bc
 8004b3c:	0800d2d8 	.word	0x0800d2d8

08004b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b44:	f000 fd13 	bl	800556e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b48:	f000 f812 	bl	8004b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b4c:	f000 f96a 	bl	8004e24 <MX_GPIO_Init>
  MX_DMA_Init();
 8004b50:	f000 f936 	bl	8004dc0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004b54:	f000 f856 	bl	8004c04 <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8004b58:	f000 f89a 	bl	8004c90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004b5c:	f000 f8e4 	bl	8004d28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  hwInit();
 8004b60:	f7ff ff98 	bl	8004a94 <hwInit>
  apInit();
 8004b64:	f7fc fa46 	bl	8000ff4 <apInit>
  apMain();
 8004b68:	f7fc fa50 	bl	800100c <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <main+0x2c>

08004b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b094      	sub	sp, #80	@ 0x50
 8004b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b76:	f107 0318 	add.w	r3, r7, #24
 8004b7a:	2238      	movs	r2, #56	@ 0x38
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f005 fdfc 	bl	800a77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b84:	1d3b      	adds	r3, r7, #4
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b92:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004b96:	f002 fc07 	bl	80073a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ba2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004bac:	2301      	movs	r3, #1
 8004bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8004bb0:	2314      	movs	r3, #20
 8004bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bc0:	f107 0318 	add.w	r3, r7, #24
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f002 fca3 	bl	8007510 <HAL_RCC_OscConfig>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8004bd0:	f000 f98a 	bl	8004ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bd4:	230f      	movs	r3, #15
 8004bd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f002 ffa1 	bl	8007b34 <HAL_RCC_ClockConfig>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004bf8:	f000 f976 	bl	8004ee8 <Error_Handler>
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	3750      	adds	r7, #80	@ 0x50
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004c08:	4b1f      	ldr	r3, [pc, #124]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c0a:	4a20      	ldr	r2, [pc, #128]	@ (8004c8c <MX_FDCAN1_Init+0x88>)
 8004c0c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004c14:	4b1c      	ldr	r3, [pc, #112]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004c20:	4b19      	ldr	r3, [pc, #100]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004c26:	4b18      	ldr	r3, [pc, #96]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 15;
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c34:	220f      	movs	r2, #15
 8004c36:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004c38:	4b13      	ldr	r3, [pc, #76]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8004c3e:	4b12      	ldr	r3, [pc, #72]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c40:	220e      	movs	r2, #14
 8004c42:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8004c44:	4b10      	ldr	r3, [pc, #64]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c46:	2205      	movs	r2, #5
 8004c48:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c4c:	2214      	movs	r2, #20
 8004c4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 8004c50:	4b0d      	ldr	r3, [pc, #52]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c52:	220f      	movs	r2, #15
 8004c54:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c58:	220c      	movs	r2, #12
 8004c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c5e:	2202      	movs	r2, #2
 8004c60:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8004c62:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c64:	221c      	movs	r2, #28
 8004c66:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 8004c68:	4b07      	ldr	r3, [pc, #28]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004c74:	4804      	ldr	r0, [pc, #16]	@ (8004c88 <MX_FDCAN1_Init+0x84>)
 8004c76:	f001 f925 	bl	8005ec4 <HAL_FDCAN_Init>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8004c80:	f000 f932 	bl	8004ee8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20003488 	.word	0x20003488
 8004c8c:	40006400 	.word	0x40006400

08004c90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c94:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004c96:	4a23      	ldr	r2, [pc, #140]	@ (8004d24 <MX_USART1_UART_Init+0x94>)
 8004c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004c9a:	4b21      	ldr	r3, [pc, #132]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004cae:	4b1c      	ldr	r3, [pc, #112]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cb6:	220c      	movs	r2, #12
 8004cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cba:	4b19      	ldr	r3, [pc, #100]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cc0:	4b17      	ldr	r3, [pc, #92]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cc6:	4b16      	ldr	r3, [pc, #88]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ccc:	4b14      	ldr	r3, [pc, #80]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cd2:	4b13      	ldr	r3, [pc, #76]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cd8:	4811      	ldr	r0, [pc, #68]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cda:	f003 fb37 	bl	800834c <HAL_UART_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004ce4:	f000 f900 	bl	8004ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ce8:	2100      	movs	r1, #0
 8004cea:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cec:	f004 fc2c 	bl	8009548 <HAL_UARTEx_SetTxFifoThreshold>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004cf6:	f000 f8f7 	bl	8004ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4808      	ldr	r0, [pc, #32]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004cfe:	f004 fc61 	bl	80095c4 <HAL_UARTEx_SetRxFifoThreshold>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004d08:	f000 f8ee 	bl	8004ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004d0c:	4804      	ldr	r0, [pc, #16]	@ (8004d20 <MX_USART1_UART_Init+0x90>)
 8004d0e:	f004 fbe2 	bl	80094d6 <HAL_UARTEx_DisableFifoMode>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004d18:	f000 f8e6 	bl	8004ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	200034ec 	.word	0x200034ec
 8004d24:	40013800 	.word	0x40013800

08004d28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d2c:	4b22      	ldr	r3, [pc, #136]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d2e:	4a23      	ldr	r2, [pc, #140]	@ (8004dbc <MX_USART2_UART_Init+0x94>)
 8004d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d32:	4b21      	ldr	r3, [pc, #132]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d46:	4b1c      	ldr	r3, [pc, #112]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d4e:	220c      	movs	r2, #12
 8004d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d52:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d58:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d5e:	4b16      	ldr	r3, [pc, #88]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d64:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d6a:	4b13      	ldr	r3, [pc, #76]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d70:	4811      	ldr	r0, [pc, #68]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d72:	f003 faeb 	bl	800834c <HAL_UART_Init>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004d7c:	f000 f8b4 	bl	8004ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d80:	2100      	movs	r1, #0
 8004d82:	480d      	ldr	r0, [pc, #52]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d84:	f004 fbe0 	bl	8009548 <HAL_UARTEx_SetTxFifoThreshold>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004d8e:	f000 f8ab 	bl	8004ee8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d92:	2100      	movs	r1, #0
 8004d94:	4808      	ldr	r0, [pc, #32]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004d96:	f004 fc15 	bl	80095c4 <HAL_UARTEx_SetRxFifoThreshold>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004da0:	f000 f8a2 	bl	8004ee8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004da4:	4804      	ldr	r0, [pc, #16]	@ (8004db8 <MX_USART2_UART_Init+0x90>)
 8004da6:	f004 fb96 	bl	80094d6 <HAL_UARTEx_DisableFifoMode>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004db0:	f000 f89a 	bl	8004ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20003580 	.word	0x20003580
 8004dbc:	40004400 	.word	0x40004400

08004dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004dc6:	4b16      	ldr	r3, [pc, #88]	@ (8004e20 <MX_DMA_Init+0x60>)
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dca:	4a15      	ldr	r2, [pc, #84]	@ (8004e20 <MX_DMA_Init+0x60>)
 8004dcc:	f043 0304 	orr.w	r3, r3, #4
 8004dd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8004dd2:	4b13      	ldr	r3, [pc, #76]	@ (8004e20 <MX_DMA_Init+0x60>)
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004dde:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <MX_DMA_Init+0x60>)
 8004de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e20 <MX_DMA_Init+0x60>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6493      	str	r3, [r2, #72]	@ 0x48
 8004dea:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <MX_DMA_Init+0x60>)
 8004dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004df6:	2200      	movs	r2, #0
 8004df8:	2100      	movs	r1, #0
 8004dfa:	200b      	movs	r0, #11
 8004dfc:	f000 fd25 	bl	800584a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e00:	200b      	movs	r0, #11
 8004e02:	f000 fd3c 	bl	800587e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004e06:	2200      	movs	r2, #0
 8004e08:	2100      	movs	r1, #0
 8004e0a:	200c      	movs	r0, #12
 8004e0c:	f000 fd1d 	bl	800584a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004e10:	200c      	movs	r0, #12
 8004e12:	f000 fd34 	bl	800587e <HAL_NVIC_EnableIRQ>

}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40021000 	.word	0x40021000

08004e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e2a:	f107 030c 	add.w	r3, r7, #12
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	609a      	str	r2, [r3, #8]
 8004e36:	60da      	str	r2, [r3, #12]
 8004e38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e3a:	4b29      	ldr	r3, [pc, #164]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3e:	4a28      	ldr	r2, [pc, #160]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e40:	f043 0320 	orr.w	r3, r3, #32
 8004e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e46:	4b26      	ldr	r3, [pc, #152]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e52:	4b23      	ldr	r3, [pc, #140]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e56:	4a22      	ldr	r2, [pc, #136]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e70:	f043 0302 	orr.w	r3, r3, #2
 8004e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e76:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee0 <MX_GPIO_Init+0xbc>)
 8004e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8004e82:	2200      	movs	r2, #0
 8004e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e8c:	f002 fa5a 	bl	8007344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8004e90:	2200      	movs	r2, #0
 8004e92:	2170      	movs	r1, #112	@ 0x70
 8004e94:	4813      	ldr	r0, [pc, #76]	@ (8004ee4 <MX_GPIO_Init+0xc0>)
 8004e96:	f002 fa55 	bl	8007344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eac:	f107 030c 	add.w	r3, r7, #12
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004eb6:	f001 ffc9 	bl	8006e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004eba:	2370      	movs	r3, #112	@ 0x70
 8004ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eca:	f107 030c 	add.w	r3, r7, #12
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4804      	ldr	r0, [pc, #16]	@ (8004ee4 <MX_GPIO_Init+0xc0>)
 8004ed2:	f001 ffbb 	bl	8006e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ed6:	bf00      	nop
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	48000400 	.word	0x48000400

08004ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004eec:	b672      	cpsid	i
}
 8004eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <Error_Handler+0x8>

08004ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004efa:	4b0f      	ldr	r3, [pc, #60]	@ (8004f38 <HAL_MspInit+0x44>)
 8004efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efe:	4a0e      	ldr	r2, [pc, #56]	@ (8004f38 <HAL_MspInit+0x44>)
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f06:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <HAL_MspInit+0x44>)
 8004f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <HAL_MspInit+0x44>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f16:	4a08      	ldr	r2, [pc, #32]	@ (8004f38 <HAL_MspInit+0x44>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <HAL_MspInit+0x44>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004f2a:	f002 fae1 	bl	80074f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40021000 	.word	0x40021000

08004f3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b09a      	sub	sp, #104	@ 0x68
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f54:	f107 0310 	add.w	r3, r7, #16
 8004f58:	2244      	movs	r2, #68	@ 0x44
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f005 fc0d 	bl	800a77c <memset>
  if(hfdcan->Instance==FDCAN1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a24      	ldr	r2, [pc, #144]	@ (8004ff8 <HAL_FDCAN_MspInit+0xbc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d141      	bne.n	8004ff0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004f6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f70:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f76:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f78:	f107 0310 	add.w	r3, r7, #16
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f002 fff5 	bl	8007f6c <HAL_RCCEx_PeriphCLKConfig>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004f88:	f7ff ffae 	bl	8004ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ffc <HAL_FDCAN_MspInit+0xc0>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f90:	4a1a      	ldr	r2, [pc, #104]	@ (8004ffc <HAL_FDCAN_MspInit+0xc0>)
 8004f92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f98:	4b18      	ldr	r3, [pc, #96]	@ (8004ffc <HAL_FDCAN_MspInit+0xc0>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa4:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <HAL_FDCAN_MspInit+0xc0>)
 8004fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa8:	4a14      	ldr	r2, [pc, #80]	@ (8004ffc <HAL_FDCAN_MspInit+0xc0>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fb0:	4b12      	ldr	r3, [pc, #72]	@ (8004ffc <HAL_FDCAN_MspInit+0xc0>)
 8004fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004fbc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004fc0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004fce:	2309      	movs	r3, #9
 8004fd0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fdc:	f001 ff36 	bl	8006e4c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	2015      	movs	r0, #21
 8004fe6:	f000 fc30 	bl	800584a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004fea:	2015      	movs	r0, #21
 8004fec:	f000 fc47 	bl	800587e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004ff0:	bf00      	nop
 8004ff2:	3768      	adds	r7, #104	@ 0x68
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40006400 	.word	0x40006400
 8004ffc:	40021000 	.word	0x40021000

08005000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b09e      	sub	sp, #120	@ 0x78
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005018:	f107 0320 	add.w	r3, r7, #32
 800501c:	2244      	movs	r2, #68	@ 0x44
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f005 fbab 	bl	800a77c <memset>
  if(huart->Instance==USART1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a7f      	ldr	r2, [pc, #508]	@ (8005228 <HAL_UART_MspInit+0x228>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d174      	bne.n	800511a <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005030:	2301      	movs	r3, #1
 8005032:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005038:	f107 0320 	add.w	r3, r7, #32
 800503c:	4618      	mov	r0, r3
 800503e:	f002 ff95 	bl	8007f6c <HAL_RCCEx_PeriphCLKConfig>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005048:	f7ff ff4e 	bl	8004ee8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800504c:	4b77      	ldr	r3, [pc, #476]	@ (800522c <HAL_UART_MspInit+0x22c>)
 800504e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005050:	4a76      	ldr	r2, [pc, #472]	@ (800522c <HAL_UART_MspInit+0x22c>)
 8005052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005056:	6613      	str	r3, [r2, #96]	@ 0x60
 8005058:	4b74      	ldr	r3, [pc, #464]	@ (800522c <HAL_UART_MspInit+0x22c>)
 800505a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800505c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005064:	4b71      	ldr	r3, [pc, #452]	@ (800522c <HAL_UART_MspInit+0x22c>)
 8005066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005068:	4a70      	ldr	r2, [pc, #448]	@ (800522c <HAL_UART_MspInit+0x22c>)
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005070:	4b6e      	ldr	r3, [pc, #440]	@ (800522c <HAL_UART_MspInit+0x22c>)
 8005072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800507c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005080:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005082:	2302      	movs	r3, #2
 8005084:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	2300      	movs	r3, #0
 8005088:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800508a:	2300      	movs	r3, #0
 800508c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800508e:	2307      	movs	r3, #7
 8005090:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005092:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005096:	4619      	mov	r1, r3
 8005098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800509c:	f001 fed6 	bl	8006e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a6:	2302      	movs	r3, #2
 80050a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050aa:	2301      	movs	r3, #1
 80050ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ae:	2300      	movs	r3, #0
 80050b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050b2:	2307      	movs	r3, #7
 80050b4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80050ba:	4619      	mov	r1, r3
 80050bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80050c0:	f001 fec4 	bl	8006e4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80050c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005234 <HAL_UART_MspInit+0x234>)
 80050c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80050ca:	4b59      	ldr	r3, [pc, #356]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050cc:	2218      	movs	r2, #24
 80050ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050d0:	4b57      	ldr	r3, [pc, #348]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050d6:	4b56      	ldr	r3, [pc, #344]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050d8:	2200      	movs	r2, #0
 80050da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050dc:	4b54      	ldr	r3, [pc, #336]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050de:	2280      	movs	r2, #128	@ 0x80
 80050e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050e2:	4b53      	ldr	r3, [pc, #332]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050e8:	4b51      	ldr	r3, [pc, #324]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80050ee:	4b50      	ldr	r3, [pc, #320]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050f0:	2220      	movs	r2, #32
 80050f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050f4:	4b4e      	ldr	r3, [pc, #312]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80050fa:	484d      	ldr	r0, [pc, #308]	@ (8005230 <HAL_UART_MspInit+0x230>)
 80050fc:	f000 fbda 	bl	80058b4 <HAL_DMA_Init>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8005106:	f7ff feef 	bl	8004ee8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a48      	ldr	r2, [pc, #288]	@ (8005230 <HAL_UART_MspInit+0x230>)
 800510e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005112:	4a47      	ldr	r2, [pc, #284]	@ (8005230 <HAL_UART_MspInit+0x230>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005118:	e082      	b.n	8005220 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a46      	ldr	r2, [pc, #280]	@ (8005238 <HAL_UART_MspInit+0x238>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d17d      	bne.n	8005220 <HAL_UART_MspInit+0x220>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005124:	2302      	movs	r3, #2
 8005126:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005128:	2300      	movs	r3, #0
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800512c:	f107 0320 	add.w	r3, r7, #32
 8005130:	4618      	mov	r0, r3
 8005132:	f002 ff1b 	bl	8007f6c <HAL_RCCEx_PeriphCLKConfig>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_UART_MspInit+0x140>
      Error_Handler();
 800513c:	f7ff fed4 	bl	8004ee8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005140:	4b3a      	ldr	r3, [pc, #232]	@ (800522c <HAL_UART_MspInit+0x22c>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005144:	4a39      	ldr	r2, [pc, #228]	@ (800522c <HAL_UART_MspInit+0x22c>)
 8005146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800514a:	6593      	str	r3, [r2, #88]	@ 0x58
 800514c:	4b37      	ldr	r3, [pc, #220]	@ (800522c <HAL_UART_MspInit+0x22c>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005158:	4b34      	ldr	r3, [pc, #208]	@ (800522c <HAL_UART_MspInit+0x22c>)
 800515a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800515c:	4a33      	ldr	r2, [pc, #204]	@ (800522c <HAL_UART_MspInit+0x22c>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005164:	4b31      	ldr	r3, [pc, #196]	@ (800522c <HAL_UART_MspInit+0x22c>)
 8005166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005170:	4b2e      	ldr	r3, [pc, #184]	@ (800522c <HAL_UART_MspInit+0x22c>)
 8005172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005174:	4a2d      	ldr	r2, [pc, #180]	@ (800522c <HAL_UART_MspInit+0x22c>)
 8005176:	f043 0302 	orr.w	r3, r3, #2
 800517a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800517c:	4b2b      	ldr	r3, [pc, #172]	@ (800522c <HAL_UART_MspInit+0x22c>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005188:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800518c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518e:	2302      	movs	r3, #2
 8005190:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005192:	2301      	movs	r3, #1
 8005194:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	2300      	movs	r3, #0
 8005198:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800519a:	2307      	movs	r3, #7
 800519c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800519e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80051a2:	4619      	mov	r1, r3
 80051a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051a8:	f001 fe50 	bl	8006e4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80051ac:	2308      	movs	r3, #8
 80051ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b0:	2302      	movs	r3, #2
 80051b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b8:	2300      	movs	r3, #0
 80051ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051bc:	2307      	movs	r3, #7
 80051be:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80051c4:	4619      	mov	r1, r3
 80051c6:	481d      	ldr	r0, [pc, #116]	@ (800523c <HAL_UART_MspInit+0x23c>)
 80051c8:	f001 fe40 	bl	8006e4c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80051cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005244 <HAL_UART_MspInit+0x244>)
 80051d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80051d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051d4:	221a      	movs	r2, #26
 80051d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051d8:	4b19      	ldr	r3, [pc, #100]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051da:	2200      	movs	r2, #0
 80051dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051de:	4b18      	ldr	r3, [pc, #96]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051e4:	4b16      	ldr	r3, [pc, #88]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051e6:	2280      	movs	r2, #128	@ 0x80
 80051e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051ea:	4b15      	ldr	r3, [pc, #84]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051f0:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80051f6:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051f8:	2220      	movs	r2, #32
 80051fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051fc:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <HAL_UART_MspInit+0x240>)
 80051fe:	2200      	movs	r2, #0
 8005200:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005202:	480f      	ldr	r0, [pc, #60]	@ (8005240 <HAL_UART_MspInit+0x240>)
 8005204:	f000 fb56 	bl	80058b4 <HAL_DMA_Init>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_UART_MspInit+0x212>
      Error_Handler();
 800520e:	f7ff fe6b 	bl	8004ee8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a0a      	ldr	r2, [pc, #40]	@ (8005240 <HAL_UART_MspInit+0x240>)
 8005216:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800521a:	4a09      	ldr	r2, [pc, #36]	@ (8005240 <HAL_UART_MspInit+0x240>)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8005220:	bf00      	nop
 8005222:	3778      	adds	r7, #120	@ 0x78
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40013800 	.word	0x40013800
 800522c:	40021000 	.word	0x40021000
 8005230:	20003614 	.word	0x20003614
 8005234:	40020008 	.word	0x40020008
 8005238:	40004400 	.word	0x40004400
 800523c:	48000400 	.word	0x48000400
 8005240:	20003674 	.word	0x20003674
 8005244:	4002001c 	.word	0x4002001c

08005248 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1a      	ldr	r2, [pc, #104]	@ (80052c0 <HAL_UART_MspDeInit+0x78>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d112      	bne.n	8005280 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800525a:	4b1a      	ldr	r3, [pc, #104]	@ (80052c4 <HAL_UART_MspDeInit+0x7c>)
 800525c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525e:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <HAL_UART_MspDeInit+0x7c>)
 8005260:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005264:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005266:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800526a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800526e:	f001 ff6f 	bl	8007150 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fbc3 	bl	8005a04 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800527e:	e01a      	b.n	80052b6 <HAL_UART_MspDeInit+0x6e>
  else if(huart->Instance==USART2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a10      	ldr	r2, [pc, #64]	@ (80052c8 <HAL_UART_MspDeInit+0x80>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d115      	bne.n	80052b6 <HAL_UART_MspDeInit+0x6e>
    __HAL_RCC_USART2_CLK_DISABLE();
 800528a:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <HAL_UART_MspDeInit+0x7c>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	4a0d      	ldr	r2, [pc, #52]	@ (80052c4 <HAL_UART_MspDeInit+0x7c>)
 8005290:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005294:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800529a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800529e:	f001 ff57 	bl	8007150 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 80052a2:	2108      	movs	r1, #8
 80052a4:	4809      	ldr	r0, [pc, #36]	@ (80052cc <HAL_UART_MspDeInit+0x84>)
 80052a6:	f001 ff53 	bl	8007150 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fba7 	bl	8005a04 <HAL_DMA_DeInit>
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40013800 	.word	0x40013800
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40004400 	.word	0x40004400
 80052cc:	48000400 	.word	0x48000400

080052d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <NMI_Handler+0x4>

080052d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <HardFault_Handler+0x4>

080052e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <MemManage_Handler+0x4>

080052e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <BusFault_Handler+0x4>

080052f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <UsageFault_Handler+0x4>

080052f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052fc:	bf00      	nop
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800530a:	bf00      	nop
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005326:	f000 f975 	bl	8005614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005334:	4802      	ldr	r0, [pc, #8]	@ (8005340 <DMA1_Channel1_IRQHandler+0x10>)
 8005336:	f000 fc76 	bl	8005c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20003614 	.word	0x20003614

08005344 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005348:	4802      	ldr	r0, [pc, #8]	@ (8005354 <DMA1_Channel2_IRQHandler+0x10>)
 800534a:	f000 fc6c 	bl	8005c26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20003674 	.word	0x20003674

08005358 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800535c:	4802      	ldr	r0, [pc, #8]	@ (8005368 <FDCAN1_IT0_IRQHandler+0x10>)
 800535e:	f001 fb2a 	bl	80069b6 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20003488 	.word	0x20003488

0800536c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return 1;
 8005370:	2301      	movs	r3, #1
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <_kill>:

int _kill(int pid, int sig)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005386:	f005 fa85 	bl	800a894 <__errno>
 800538a:	4603      	mov	r3, r0
 800538c:	2216      	movs	r2, #22
 800538e:	601a      	str	r2, [r3, #0]
  return -1;
 8005390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <_exit>:

void _exit (int status)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80053a4:	f04f 31ff 	mov.w	r1, #4294967295
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ffe7 	bl	800537c <_kill>
  while (1) {}    /* Make sure we hang here */
 80053ae:	bf00      	nop
 80053b0:	e7fd      	b.n	80053ae <_exit+0x12>

080053b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b086      	sub	sp, #24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e00a      	b.n	80053da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053c4:	f3af 8000 	nop.w
 80053c8:	4601      	mov	r1, r0
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	60ba      	str	r2, [r7, #8]
 80053d0:	b2ca      	uxtb	r2, r1
 80053d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3301      	adds	r3, #1
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	429a      	cmp	r2, r3
 80053e0:	dbf0      	blt.n	80053c4 <_read+0x12>
  }

  return len;
 80053e2:	687b      	ldr	r3, [r7, #4]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e009      	b.n	8005412 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	60ba      	str	r2, [r7, #8]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	3301      	adds	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	dbf1      	blt.n	80053fe <_write+0x12>
  }
  return len;
 800541a:	687b      	ldr	r3, [r7, #4]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <_close>:

int _close(int file)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800544c:	605a      	str	r2, [r3, #4]
  return 0;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <_isatty>:

int _isatty(int file)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005464:	2301      	movs	r3, #1
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005494:	4a14      	ldr	r2, [pc, #80]	@ (80054e8 <_sbrk+0x5c>)
 8005496:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <_sbrk+0x60>)
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054a0:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <_sbrk+0x64>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054a8:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <_sbrk+0x64>)
 80054aa:	4a12      	ldr	r2, [pc, #72]	@ (80054f4 <_sbrk+0x68>)
 80054ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054ae:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <_sbrk+0x64>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d207      	bcs.n	80054cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054bc:	f005 f9ea 	bl	800a894 <__errno>
 80054c0:	4603      	mov	r3, r0
 80054c2:	220c      	movs	r2, #12
 80054c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	e009      	b.n	80054e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054cc:	4b08      	ldr	r3, [pc, #32]	@ (80054f0 <_sbrk+0x64>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <_sbrk+0x64>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	4a05      	ldr	r2, [pc, #20]	@ (80054f0 <_sbrk+0x64>)
 80054dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20008000 	.word	0x20008000
 80054ec:	00000400 	.word	0x00000400
 80054f0:	200036d4 	.word	0x200036d4
 80054f4:	20003828 	.word	0x20003828

080054f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <SystemInit+0x20>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	4a05      	ldr	r2, [pc, #20]	@ (8005518 <SystemInit+0x20>)
 8005504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800550c:	bf00      	nop
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000ed00 	.word	0xe000ed00

0800551c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800551c:	480d      	ldr	r0, [pc, #52]	@ (8005554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800551e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005520:	f7ff ffea 	bl	80054f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005524:	480c      	ldr	r0, [pc, #48]	@ (8005558 <LoopForever+0x6>)
  ldr r1, =_edata
 8005526:	490d      	ldr	r1, [pc, #52]	@ (800555c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005528:	4a0d      	ldr	r2, [pc, #52]	@ (8005560 <LoopForever+0xe>)
  movs r3, #0
 800552a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800552c:	e002      	b.n	8005534 <LoopCopyDataInit>

0800552e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800552e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005532:	3304      	adds	r3, #4

08005534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005538:	d3f9      	bcc.n	800552e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800553a:	4a0a      	ldr	r2, [pc, #40]	@ (8005564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800553c:	4c0a      	ldr	r4, [pc, #40]	@ (8005568 <LoopForever+0x16>)
  movs r3, #0
 800553e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005540:	e001      	b.n	8005546 <LoopFillZerobss>

08005542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005544:	3204      	adds	r2, #4

08005546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005548:	d3fb      	bcc.n	8005542 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800554a:	f005 f9a9 	bl	800a8a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800554e:	f7ff faf7 	bl	8004b40 <main>

08005552 <LoopForever>:

LoopForever:
    b LoopForever
 8005552:	e7fe      	b.n	8005552 <LoopForever>
  ldr   r0, =_estack
 8005554:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800555c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005560:	0800d8b8 	.word	0x0800d8b8
  ldr r2, =_sbss
 8005564:	20000a40 	.word	0x20000a40
  ldr r4, =_ebss
 8005568:	20003828 	.word	0x20003828

0800556c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800556c:	e7fe      	b.n	800556c <ADC1_2_IRQHandler>

0800556e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b082      	sub	sp, #8
 8005572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005578:	2003      	movs	r0, #3
 800557a:	f000 f95b 	bl	8005834 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800557e:	200f      	movs	r0, #15
 8005580:	f000 f80e 	bl	80055a0 <HAL_InitTick>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	71fb      	strb	r3, [r7, #7]
 800558e:	e001      	b.n	8005594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005590:	f7ff fcb0 	bl	8004ef4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005594:	79fb      	ldrb	r3, [r7, #7]

}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80055ac:	4b16      	ldr	r3, [pc, #88]	@ (8005608 <HAL_InitTick+0x68>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d022      	beq.n	80055fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80055b4:	4b15      	ldr	r3, [pc, #84]	@ (800560c <HAL_InitTick+0x6c>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b13      	ldr	r3, [pc, #76]	@ (8005608 <HAL_InitTick+0x68>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80055c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 f966 	bl	800589a <HAL_SYSTICK_Config>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10f      	bne.n	80055f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d809      	bhi.n	80055ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055da:	2200      	movs	r2, #0
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	f04f 30ff 	mov.w	r0, #4294967295
 80055e2:	f000 f932 	bl	800584a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005610 <HAL_InitTick+0x70>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	e007      	b.n	80055fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
 80055f2:	e004      	b.n	80055fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e001      	b.n	80055fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	2000001c 	.word	0x2000001c
 800560c:	20000014 	.word	0x20000014
 8005610:	20000018 	.word	0x20000018

08005614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005618:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <HAL_IncTick+0x1c>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <HAL_IncTick+0x20>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4413      	add	r3, r2
 8005622:	4a03      	ldr	r2, [pc, #12]	@ (8005630 <HAL_IncTick+0x1c>)
 8005624:	6013      	str	r3, [r2, #0]
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	200036d8 	.word	0x200036d8
 8005634:	2000001c 	.word	0x2000001c

08005638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return uwTick;
 800563c:	4b03      	ldr	r3, [pc, #12]	@ (800564c <HAL_GetTick+0x14>)
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	200036d8 	.word	0x200036d8

08005650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005658:	f7ff ffee 	bl	8005638 <HAL_GetTick>
 800565c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d004      	beq.n	8005674 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800566a:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <HAL_Delay+0x40>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005674:	bf00      	nop
 8005676:	f7ff ffdf 	bl	8005638 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d8f7      	bhi.n	8005676 <HAL_Delay+0x26>
  {
  }
}
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	2000001c 	.word	0x2000001c

08005694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056a4:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <__NVIC_SetPriorityGrouping+0x44>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056b0:	4013      	ands	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056c6:	4a04      	ldr	r2, [pc, #16]	@ (80056d8 <__NVIC_SetPriorityGrouping+0x44>)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	60d3      	str	r3, [r2, #12]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	e000ed00 	.word	0xe000ed00

080056dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056e0:	4b04      	ldr	r3, [pc, #16]	@ (80056f4 <__NVIC_GetPriorityGrouping+0x18>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	f003 0307 	and.w	r3, r3, #7
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	e000ed00 	.word	0xe000ed00

080056f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005706:	2b00      	cmp	r3, #0
 8005708:	db0b      	blt.n	8005722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	f003 021f 	and.w	r2, r3, #31
 8005710:	4907      	ldr	r1, [pc, #28]	@ (8005730 <__NVIC_EnableIRQ+0x38>)
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	2001      	movs	r0, #1
 800571a:	fa00 f202 	lsl.w	r2, r0, r2
 800571e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	e000e100 	.word	0xe000e100

08005734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	6039      	str	r1, [r7, #0]
 800573e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005744:	2b00      	cmp	r3, #0
 8005746:	db0a      	blt.n	800575e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	490c      	ldr	r1, [pc, #48]	@ (8005780 <__NVIC_SetPriority+0x4c>)
 800574e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005752:	0112      	lsls	r2, r2, #4
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	440b      	add	r3, r1
 8005758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800575c:	e00a      	b.n	8005774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	4908      	ldr	r1, [pc, #32]	@ (8005784 <__NVIC_SetPriority+0x50>)
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	3b04      	subs	r3, #4
 800576c:	0112      	lsls	r2, r2, #4
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	440b      	add	r3, r1
 8005772:	761a      	strb	r2, [r3, #24]
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	e000e100 	.word	0xe000e100
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005788:	b480      	push	{r7}
 800578a:	b089      	sub	sp, #36	@ 0x24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f1c3 0307 	rsb	r3, r3, #7
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	bf28      	it	cs
 80057a6:	2304      	movcs	r3, #4
 80057a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3304      	adds	r3, #4
 80057ae:	2b06      	cmp	r3, #6
 80057b0:	d902      	bls.n	80057b8 <NVIC_EncodePriority+0x30>
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3b03      	subs	r3, #3
 80057b6:	e000      	b.n	80057ba <NVIC_EncodePriority+0x32>
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	43da      	mvns	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	401a      	ands	r2, r3
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057d0:	f04f 31ff 	mov.w	r1, #4294967295
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	fa01 f303 	lsl.w	r3, r1, r3
 80057da:	43d9      	mvns	r1, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e0:	4313      	orrs	r3, r2
         );
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3724      	adds	r7, #36	@ 0x24
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005800:	d301      	bcc.n	8005806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005802:	2301      	movs	r3, #1
 8005804:	e00f      	b.n	8005826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005806:	4a0a      	ldr	r2, [pc, #40]	@ (8005830 <SysTick_Config+0x40>)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3b01      	subs	r3, #1
 800580c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800580e:	210f      	movs	r1, #15
 8005810:	f04f 30ff 	mov.w	r0, #4294967295
 8005814:	f7ff ff8e 	bl	8005734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <SysTick_Config+0x40>)
 800581a:	2200      	movs	r2, #0
 800581c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800581e:	4b04      	ldr	r3, [pc, #16]	@ (8005830 <SysTick_Config+0x40>)
 8005820:	2207      	movs	r2, #7
 8005822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	e000e010 	.word	0xe000e010

08005834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff ff29 	bl	8005694 <__NVIC_SetPriorityGrouping>
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	4603      	mov	r3, r0
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005858:	f7ff ff40 	bl	80056dc <__NVIC_GetPriorityGrouping>
 800585c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	6978      	ldr	r0, [r7, #20]
 8005864:	f7ff ff90 	bl	8005788 <NVIC_EncodePriority>
 8005868:	4602      	mov	r2, r0
 800586a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff5f 	bl	8005734 <__NVIC_SetPriority>
}
 8005876:	bf00      	nop
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	4603      	mov	r3, r0
 8005886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff33 	bl	80056f8 <__NVIC_EnableIRQ>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff ffa4 	bl	80057f0 <SysTick_Config>
 80058a8:	4603      	mov	r3, r0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e08d      	b.n	80059e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	4b47      	ldr	r3, [pc, #284]	@ (80059ec <HAL_DMA_Init+0x138>)
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d80f      	bhi.n	80058f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	4b45      	ldr	r3, [pc, #276]	@ (80059f0 <HAL_DMA_Init+0x13c>)
 80058da:	4413      	add	r3, r2
 80058dc:	4a45      	ldr	r2, [pc, #276]	@ (80059f4 <HAL_DMA_Init+0x140>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	091b      	lsrs	r3, r3, #4
 80058e4:	009a      	lsls	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a42      	ldr	r2, [pc, #264]	@ (80059f8 <HAL_DMA_Init+0x144>)
 80058ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80058f0:	e00e      	b.n	8005910 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b40      	ldr	r3, [pc, #256]	@ (80059fc <HAL_DMA_Init+0x148>)
 80058fa:	4413      	add	r3, r2
 80058fc:	4a3d      	ldr	r2, [pc, #244]	@ (80059f4 <HAL_DMA_Init+0x140>)
 80058fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	009a      	lsls	r2, r3, #2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a00 <HAL_DMA_Init+0x14c>)
 800590e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800594c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa4c 	bl	8005e00 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005970:	d102      	bne.n	8005978 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800598c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d010      	beq.n	80059b8 <HAL_DMA_Init+0x104>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d80c      	bhi.n	80059b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa6c 	bl	8005e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	e008      	b.n	80059ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40020407 	.word	0x40020407
 80059f0:	bffdfff8 	.word	0xbffdfff8
 80059f4:	cccccccd 	.word	0xcccccccd
 80059f8:	40020000 	.word	0x40020000
 80059fc:	bffdfbf8 	.word	0xbffdfbf8
 8005a00:	40020400 	.word	0x40020400

08005a04 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e07b      	b.n	8005b0e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b18 <HAL_DMA_DeInit+0x114>)
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d80f      	bhi.n	8005a52 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	4b38      	ldr	r3, [pc, #224]	@ (8005b1c <HAL_DMA_DeInit+0x118>)
 8005a3a:	4413      	add	r3, r2
 8005a3c:	4a38      	ldr	r2, [pc, #224]	@ (8005b20 <HAL_DMA_DeInit+0x11c>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	091b      	lsrs	r3, r3, #4
 8005a44:	009a      	lsls	r2, r3, #2
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a35      	ldr	r2, [pc, #212]	@ (8005b24 <HAL_DMA_DeInit+0x120>)
 8005a4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a50:	e00e      	b.n	8005a70 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	4b33      	ldr	r3, [pc, #204]	@ (8005b28 <HAL_DMA_DeInit+0x124>)
 8005a5a:	4413      	add	r3, r2
 8005a5c:	4a30      	ldr	r2, [pc, #192]	@ (8005b20 <HAL_DMA_DeInit+0x11c>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	009a      	lsls	r2, r3, #2
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b2c <HAL_DMA_DeInit+0x128>)
 8005a6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7c:	f003 021f 	and.w	r2, r3, #31
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f9b7 	bl	8005e00 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005aa2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <HAL_DMA_DeInit+0xc8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d80b      	bhi.n	8005acc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f9e1 	bl	8005e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005aca:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40020407 	.word	0x40020407
 8005b1c:	bffdfff8 	.word	0xbffdfff8
 8005b20:	cccccccd 	.word	0xcccccccd
 8005b24:	40020000 	.word	0x40020000
 8005b28:	bffdfbf8 	.word	0xbffdfbf8
 8005b2c:	40020400 	.word	0x40020400

08005b30 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_DMA_Start_IT+0x20>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e066      	b.n	8005c1e <HAL_DMA_Start_IT+0xee>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d155      	bne.n	8005c10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f8fb 	bl	8005d84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 020e 	orr.w	r2, r2, #14
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e00f      	b.n	8005bc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0204 	bic.w	r2, r2, #4
 8005bb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 020a 	orr.w	r2, r2, #10
 8005bc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005be4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bfc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0201 	orr.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e005      	b.n	8005c1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2204      	movs	r2, #4
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d026      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x7a>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d021      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0204 	bic.w	r2, r2, #4
 8005c78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7e:	f003 021f 	and.w	r2, r3, #31
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c86:	2104      	movs	r1, #4
 8005c88:	fa01 f202 	lsl.w	r2, r1, r2
 8005c8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d071      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005c9e:	e06c      	b.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	2202      	movs	r2, #2
 8005caa:	409a      	lsls	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d02e      	beq.n	8005d12 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d029      	beq.n	8005d12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 020a 	bic.w	r2, r2, #10
 8005cda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	f003 021f 	and.w	r2, r3, #31
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d038      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005d10:	e033      	b.n	8005d7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d02a      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d025      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 020e 	bic.w	r2, r2, #14
 8005d3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	f003 021f 	and.w	r2, r3, #31
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
}
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d9a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005dac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db2:	f003 021f 	and.w	r2, r3, #31
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dba:	2101      	movs	r1, #1
 8005dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d108      	bne.n	8005de4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005de2:	e007      	b.n	8005df4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	60da      	str	r2, [r3, #12]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b16      	ldr	r3, [pc, #88]	@ (8005e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d802      	bhi.n	8005e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005e14:	4b15      	ldr	r3, [pc, #84]	@ (8005e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e001      	b.n	8005e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8005e1a:	4b15      	ldr	r3, [pc, #84]	@ (8005e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005e1c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	3b08      	subs	r3, #8
 8005e2a:	4a12      	ldr	r2, [pc, #72]	@ (8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e38:	089b      	lsrs	r3, r3, #2
 8005e3a:	009a      	lsls	r2, r3, #2
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	461a      	mov	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a0b      	ldr	r2, [pc, #44]	@ (8005e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005e4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 031f 	and.w	r3, r3, #31
 8005e52:	2201      	movs	r2, #1
 8005e54:	409a      	lsls	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40020407 	.word	0x40020407
 8005e6c:	40020800 	.word	0x40020800
 8005e70:	40020820 	.word	0x40020820
 8005e74:	cccccccd 	.word	0xcccccccd
 8005e78:	40020880 	.word	0x40020880

08005e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a08      	ldr	r2, [pc, #32]	@ (8005ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005e9e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	1000823f 	.word	0x1000823f
 8005ec0:	40020940 	.word	0x40020940

08005ec4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e147      	b.n	8006166 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff f826 	bl	8004f3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0210 	bic.w	r2, r2, #16
 8005efe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f00:	f7ff fb9a 	bl	8005638 <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005f06:	e012      	b.n	8005f2e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005f08:	f7ff fb96 	bl	8005638 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b0a      	cmp	r3, #10
 8005f14:	d90b      	bls.n	8005f2e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f1a:	f043 0201 	orr.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2203      	movs	r2, #3
 8005f26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e11b      	b.n	8006166 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d0e5      	beq.n	8005f08 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f4c:	f7ff fb74 	bl	8005638 <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005f52:	e012      	b.n	8005f7a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005f54:	f7ff fb70 	bl	8005638 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b0a      	cmp	r3, #10
 8005f60:	d90b      	bls.n	8005f7a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f66:	f043 0201 	orr.w	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2203      	movs	r2, #3
 8005f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e0f5      	b.n	8006166 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0e5      	beq.n	8005f54 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0202 	orr.w	r2, r2, #2
 8005f96:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a74      	ldr	r2, [pc, #464]	@ (8006170 <HAL_FDCAN_Init+0x2ac>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d103      	bne.n	8005faa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005fa2:	4a74      	ldr	r2, [pc, #464]	@ (8006174 <HAL_FDCAN_Init+0x2b0>)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	7c1b      	ldrb	r3, [r3, #16]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d108      	bne.n	8005fc4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fc0:	619a      	str	r2, [r3, #24]
 8005fc2:	e007      	b.n	8005fd4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fd2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	7c5b      	ldrb	r3, [r3, #17]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d108      	bne.n	8005fee <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fea:	619a      	str	r2, [r3, #24]
 8005fec:	e007      	b.n	8005ffe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ffc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	7c9b      	ldrb	r3, [r3, #18]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d108      	bne.n	8006018 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006014:	619a      	str	r2, [r3, #24]
 8006016:	e007      	b.n	8006028 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006026:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699a      	ldr	r2, [r3, #24]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800604c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0210 	bic.w	r2, r2, #16
 800605c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d108      	bne.n	8006078 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0204 	orr.w	r2, r2, #4
 8006074:	619a      	str	r2, [r3, #24]
 8006076:	e02c      	b.n	80060d2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d028      	beq.n	80060d2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d01c      	beq.n	80060c2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006096:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0210 	orr.w	r2, r2, #16
 80060a6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d110      	bne.n	80060d2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	699a      	ldr	r2, [r3, #24]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0220 	orr.w	r2, r2, #32
 80060be:	619a      	str	r2, [r3, #24]
 80060c0:	e007      	b.n	80060d2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699a      	ldr	r2, [r3, #24]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0220 	orr.w	r2, r2, #32
 80060d0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	3b01      	subs	r3, #1
 80060e0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060e2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80060ea:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80060fa:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80060fc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006106:	d115      	bne.n	8006134 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	3b01      	subs	r3, #1
 8006114:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006116:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611c:	3b01      	subs	r3, #1
 800611e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006120:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	3b01      	subs	r3, #1
 800612a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006130:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006132:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fdac 	bl	8006ca8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40006400 	.word	0x40006400
 8006174:	40006500 	.word	0x40006500

08006178 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006188:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800618a:	7dfb      	ldrb	r3, [r7, #23]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d002      	beq.n	8006196 <HAL_FDCAN_ConfigFilter+0x1e>
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b02      	cmp	r3, #2
 8006194:	d13d      	bne.n	8006212 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d119      	bne.n	80061d2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80061aa:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80061b2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	e01d      	b.n	800620e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	075a      	lsls	r2, r3, #29
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	079a      	lsls	r2, r3, #30
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	4413      	add	r3, r2
 80061fa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	3304      	adds	r3, #4
 8006206:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e006      	b.n	8006220 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006216:	f043 0202 	orr.w	r2, r3, #2
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
  }
}
 8006220:	4618      	mov	r0, r3
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b01      	cmp	r3, #1
 8006244:	d116      	bne.n	8006274 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	011a      	lsls	r2, r3, #4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	431a      	orrs	r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	431a      	orrs	r2, r3
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e006      	b.n	8006282 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006278:	f043 0204 	orr.w	r2, r3, #4
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d108      	bne.n	80062b8 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	0219      	lsls	r1, r3, #8
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e006      	b.n	80062c6 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062bc:	f043 0204 	orr.w	r2, r3, #4
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
  }
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d109      	bne.n	80062fa <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80062f4:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	e006      	b.n	8006308 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062fe:	f043 0204 	orr.w	r2, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
  }
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d110      	bne.n	800634a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e006      	b.n	8006358 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800634e:	f043 0204 	orr.w	r2, r3, #4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d156      	bne.n	800642a <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800638c:	e011      	b.n	80063b2 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b0a      	cmp	r3, #10
 8006392:	d90b      	bls.n	80063ac <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006398:	f043 0201 	orr.w	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2203      	movs	r2, #3
 80063a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e045      	b.n	8006438 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0e6      	beq.n	800638e <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0210 	bic.w	r2, r2, #16
 80063d2:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80063d4:	e011      	b.n	80063fa <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b0a      	cmp	r3, #10
 80063da:	d90b      	bls.n	80063f4 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063e0:	f043 0201 	orr.w	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2203      	movs	r2, #3
 80063ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e021      	b.n	8006438 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f003 0308 	and.w	r3, r3, #8
 8006404:	2b08      	cmp	r3, #8
 8006406:	d0e6      	beq.n	80063d6 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0202 	orr.w	r2, r2, #2
 8006416:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Return function status */
    return HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	e006      	b.n	8006438 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642e:	f043 0208 	orr.w	r2, r3, #8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
  }
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d12c      	bne.n	80064b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006470:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e023      	b.n	80064c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006484:	0c1b      	lsrs	r3, r3, #16
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fc5e 	bl	8006d54 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2101      	movs	r1, #1
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	fa01 f202 	lsl.w	r2, r1, r2
 80064a4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80064a8:	2201      	movs	r2, #1
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	409a      	lsls	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e006      	b.n	80064c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ba:	f043 0208 	orr.w	r2, r3, #8
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b08b      	sub	sp, #44	@ 0x2c
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064e4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80064e6:	7efb      	ldrb	r3, [r7, #27]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	f040 80e8 	bne.w	80066be <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b40      	cmp	r3, #64	@ 0x40
 80064f2:	d137      	bne.n	8006564 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	2b00      	cmp	r3, #0
 8006502:	d107      	bne.n	8006514 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006508:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0db      	b.n	80066cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651c:	0e1b      	lsrs	r3, r3, #24
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	d10a      	bne.n	800653c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800652e:	0a5b      	lsrs	r3, r3, #9
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006538:	2301      	movs	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006544:	0a1b      	lsrs	r3, r3, #8
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	4413      	add	r3, r2
 800654e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	4613      	mov	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	4413      	add	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	440b      	add	r3, r1
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
 8006562:	e036      	b.n	80065d2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	2b00      	cmp	r3, #0
 8006572:	d107      	bne.n	8006584 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006578:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0a3      	b.n	80066cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800658c:	0e1b      	lsrs	r3, r3, #24
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10a      	bne.n	80065ac <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80065a8:	2301      	movs	r3, #1
 80065aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065b4:	0a1b      	lsrs	r3, r3, #8
 80065b6:	f003 0303 	and.w	r3, r3, #3
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4413      	add	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	440b      	add	r3, r1
 80065d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d107      	bne.n	80065f6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	0c9b      	lsrs	r3, r3, #18
 80065ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e005      	b.n	8006602 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	3304      	adds	r3, #4
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	b29a      	uxth	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	0c1b      	lsrs	r3, r3, #16
 8006630:	f003 020f 	and.w	r2, r3, #15
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	0e1b      	lsrs	r3, r3, #24
 8006656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	0fda      	lsrs	r2, r3, #31
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	3304      	adds	r3, #4
 800666c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006672:	2300      	movs	r3, #0
 8006674:	623b      	str	r3, [r7, #32]
 8006676:	e00a      	b.n	800668e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	441a      	add	r2, r3
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	440b      	add	r3, r1
 8006684:	7812      	ldrb	r2, [r2, #0]
 8006686:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	3301      	adds	r3, #1
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	4a11      	ldr	r2, [pc, #68]	@ (80066d8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006694:	5cd3      	ldrb	r3, [r2, r3]
 8006696:	461a      	mov	r2, r3
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	4293      	cmp	r3, r2
 800669c:	d3ec      	bcc.n	8006678 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b40      	cmp	r3, #64	@ 0x40
 80066a2:	d105      	bne.n	80066b0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80066ae:	e004      	b.n	80066ba <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e006      	b.n	80066cc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c2:	f043 0208 	orr.w	r2, r3, #8
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	372c      	adds	r7, #44	@ 0x2c
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	0800d4b4 	.word	0x0800d4b4

080066dc <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0207 	and.w	r2, r3, #7
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	f003 0207 	and.w	r2, r3, #7
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0218 	and.w	r2, r3, #24
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	f003 0201 	and.w	r2, r3, #1
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	099b      	lsrs	r3, r3, #6
 800671e:	f003 0201 	and.w	r2, r3, #1
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	09db      	lsrs	r3, r3, #7
 800672a:	f003 0201 	and.w	r2, r3, #1
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	0adb      	lsrs	r3, r3, #11
 8006736:	f003 0201 	and.w	r2, r3, #1
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	0b1b      	lsrs	r3, r3, #12
 8006742:	f003 0201 	and.w	r2, r3, #1
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	0b5b      	lsrs	r3, r3, #13
 800674e:	f003 0201 	and.w	r2, r3, #1
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	0b9b      	lsrs	r3, r3, #14
 800675a:	f003 0201 	and.w	r2, r3, #1
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	0c1b      	lsrs	r3, r3, #16
 8006766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678c:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	0a1b      	lsrs	r3, r3, #8
 800679a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	0bdb      	lsrs	r3, r3, #15
 80067a6:	f003 0201 	and.w	r2, r3, #1
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80067dc:	68fb      	ldr	r3, [r7, #12]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80067fc:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d003      	beq.n	800680c <HAL_FDCAN_ActivateNotification+0x22>
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b02      	cmp	r3, #2
 8006808:	f040 80c8 	bne.w	800699c <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006812:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b00      	cmp	r3, #0
 800681c:	d004      	beq.n	8006828 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	2b00      	cmp	r3, #0
 8006826:	d03b      	beq.n	80068a0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d031      	beq.n	80068a0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d027      	beq.n	80068a0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01d      	beq.n	80068a0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800686a:	2b00      	cmp	r3, #0
 800686c:	d004      	beq.n	8006878 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	d013      	beq.n	80068a0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800687e:	2b00      	cmp	r3, #0
 8006880:	d004      	beq.n	800688c <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d107      	bne.n	80068b0 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d13b      	bne.n	800693c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d131      	bne.n	800693c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d127      	bne.n	800693c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d11d      	bne.n	800693c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	d113      	bne.n	800693c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d109      	bne.n	800693c <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00c      	beq.n	800694c <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0202 	orr.w	r2, r2, #2
 800694a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	430a      	orrs	r2, r1
 8006966:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d009      	beq.n	8006988 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	430a      	orrs	r2, r1
 8006984:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	430a      	orrs	r2, r1
 8006996:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	e006      	b.n	80069aa <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a0:	f043 0202 	orr.w	r2, r3, #2
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
  }
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b08c      	sub	sp, #48	@ 0x30
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d2:	4013      	ands	r3, r2
 80069d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ea:	4013      	ands	r3, r2
 80069ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a02:	4013      	ands	r3, r2
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0c:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006a10:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a18:	6a3a      	ldr	r2, [r7, #32]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a24:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006a28:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	4013      	ands	r3, r2
 8006a34:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3c:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a44:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d006      	beq.n	8006a68 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2240      	movs	r2, #64	@ 0x40
 8006a60:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f916 	bl	8006c94 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d019      	beq.n	8006aa6 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d014      	beq.n	8006aa6 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a84:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4013      	ands	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a9c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006a9e:	6939      	ldr	r1, [r7, #16]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f8d8 	bl	8006c56 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006ab4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f8a2 	bl	8006c00 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ac8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006aca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fc fb45 	bl	800315c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ade:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006ae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f897 	bl	8006c16 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00c      	beq.n	8006b0c <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b04:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f890 	bl	8006c2c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d018      	beq.n	8006b48 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d013      	beq.n	8006b48 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006b28:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4013      	ands	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2280      	movs	r2, #128	@ 0x80
 8006b3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006b40:	68f9      	ldr	r1, [r7, #12]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f87c 	bl	8006c40 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00c      	beq.n	8006b6c <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006b64:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f880 	bl	8006c6c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006b88:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f878 	bl	8006c80 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00f      	beq.n	8006bba <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006bac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006bc8:	69f9      	ldr	r1, [r7, #28]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fc fa88 	bl	80030e0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6a3a      	ldr	r2, [r7, #32]
 8006bdc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fc fa84 	bl	8003100 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	3730      	adds	r7, #48	@ 0x30
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006cb0:	4b27      	ldr	r3, [pc, #156]	@ (8006d50 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006cb2:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cca:	041a      	lsls	r2, r3, #16
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ce8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf0:	061a      	lsls	r2, r3, #24
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	e005      	b.n	8006d36 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3304      	adds	r3, #4
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d3f3      	bcc.n	8006d2a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	4000a400 	.word	0x4000a400

08006d54 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	@ 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006d72:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	e00a      	b.n	8006d96 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006d88:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006d8e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006d90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d94:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006da0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006da6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006dac:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	440b      	add	r3, r1
 8006dc8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	3304      	adds	r3, #4
 8006de0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	e020      	b.n	8006e2a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	3303      	adds	r3, #3
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	4413      	add	r3, r2
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	3302      	adds	r3, #2
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	440b      	add	r3, r1
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006e00:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	3301      	adds	r3, #1
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	440b      	add	r3, r1
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006e0e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	440a      	add	r2, r1
 8006e16:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006e18:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	3304      	adds	r3, #4
 8006e22:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	3304      	adds	r3, #4
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	4a06      	ldr	r2, [pc, #24]	@ (8006e48 <FDCAN_CopyMessageToRAM+0xf4>)
 8006e30:	5cd3      	ldrb	r3, [r2, r3]
 8006e32:	461a      	mov	r2, r3
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d3d6      	bcc.n	8006de8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006e3a:	bf00      	nop
 8006e3c:	bf00      	nop
 8006e3e:	3724      	adds	r7, #36	@ 0x24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	0800d4b4 	.word	0x0800d4b4

08006e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006e5a:	e15a      	b.n	8007112 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	2101      	movs	r1, #1
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	4013      	ands	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 814c 	beq.w	800710c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d005      	beq.n	8006e8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d130      	bne.n	8006eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	2203      	movs	r2, #3
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	091b      	lsrs	r3, r3, #4
 8006ed8:	f003 0201 	and.w	r2, r3, #1
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d017      	beq.n	8006f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	2203      	movs	r2, #3
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	43db      	mvns	r3, r3
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d123      	bne.n	8006f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	08da      	lsrs	r2, r3, #3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3208      	adds	r2, #8
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	220f      	movs	r2, #15
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43db      	mvns	r3, r3
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4013      	ands	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	08da      	lsrs	r2, r3, #3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3208      	adds	r2, #8
 8006f78:	6939      	ldr	r1, [r7, #16]
 8006f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	2203      	movs	r2, #3
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	43db      	mvns	r3, r3
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4013      	ands	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f003 0203 	and.w	r2, r3, #3
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80a6 	beq.w	800710c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8007130 <HAL_GPIO_Init+0x2e4>)
 8006fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8007130 <HAL_GPIO_Init+0x2e4>)
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	6613      	str	r3, [r2, #96]	@ 0x60
 8006fcc:	4b58      	ldr	r3, [pc, #352]	@ (8007130 <HAL_GPIO_Init+0x2e4>)
 8006fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	60bb      	str	r3, [r7, #8]
 8006fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fd8:	4a56      	ldr	r2, [pc, #344]	@ (8007134 <HAL_GPIO_Init+0x2e8>)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	089b      	lsrs	r3, r3, #2
 8006fde:	3302      	adds	r3, #2
 8006fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	220f      	movs	r2, #15
 8006ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff4:	43db      	mvns	r3, r3
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007002:	d01f      	beq.n	8007044 <HAL_GPIO_Init+0x1f8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a4c      	ldr	r2, [pc, #304]	@ (8007138 <HAL_GPIO_Init+0x2ec>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d019      	beq.n	8007040 <HAL_GPIO_Init+0x1f4>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a4b      	ldr	r2, [pc, #300]	@ (800713c <HAL_GPIO_Init+0x2f0>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <HAL_GPIO_Init+0x1f0>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a4a      	ldr	r2, [pc, #296]	@ (8007140 <HAL_GPIO_Init+0x2f4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00d      	beq.n	8007038 <HAL_GPIO_Init+0x1ec>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a49      	ldr	r2, [pc, #292]	@ (8007144 <HAL_GPIO_Init+0x2f8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d007      	beq.n	8007034 <HAL_GPIO_Init+0x1e8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a48      	ldr	r2, [pc, #288]	@ (8007148 <HAL_GPIO_Init+0x2fc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d101      	bne.n	8007030 <HAL_GPIO_Init+0x1e4>
 800702c:	2305      	movs	r3, #5
 800702e:	e00a      	b.n	8007046 <HAL_GPIO_Init+0x1fa>
 8007030:	2306      	movs	r3, #6
 8007032:	e008      	b.n	8007046 <HAL_GPIO_Init+0x1fa>
 8007034:	2304      	movs	r3, #4
 8007036:	e006      	b.n	8007046 <HAL_GPIO_Init+0x1fa>
 8007038:	2303      	movs	r3, #3
 800703a:	e004      	b.n	8007046 <HAL_GPIO_Init+0x1fa>
 800703c:	2302      	movs	r3, #2
 800703e:	e002      	b.n	8007046 <HAL_GPIO_Init+0x1fa>
 8007040:	2301      	movs	r3, #1
 8007042:	e000      	b.n	8007046 <HAL_GPIO_Init+0x1fa>
 8007044:	2300      	movs	r3, #0
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	f002 0203 	and.w	r2, r2, #3
 800704c:	0092      	lsls	r2, r2, #2
 800704e:	4093      	lsls	r3, r2
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007056:	4937      	ldr	r1, [pc, #220]	@ (8007134 <HAL_GPIO_Init+0x2e8>)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	089b      	lsrs	r3, r3, #2
 800705c:	3302      	adds	r3, #2
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007064:	4b39      	ldr	r3, [pc, #228]	@ (800714c <HAL_GPIO_Init+0x300>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	43db      	mvns	r3, r3
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4013      	ands	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007088:	4a30      	ldr	r2, [pc, #192]	@ (800714c <HAL_GPIO_Init+0x300>)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800708e:	4b2f      	ldr	r3, [pc, #188]	@ (800714c <HAL_GPIO_Init+0x300>)
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	43db      	mvns	r3, r3
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4013      	ands	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80070b2:	4a26      	ldr	r2, [pc, #152]	@ (800714c <HAL_GPIO_Init+0x300>)
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80070b8:	4b24      	ldr	r3, [pc, #144]	@ (800714c <HAL_GPIO_Init+0x300>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	43db      	mvns	r3, r3
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4013      	ands	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80070dc:	4a1b      	ldr	r2, [pc, #108]	@ (800714c <HAL_GPIO_Init+0x300>)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80070e2:	4b1a      	ldr	r3, [pc, #104]	@ (800714c <HAL_GPIO_Init+0x300>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	43db      	mvns	r3, r3
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4013      	ands	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007106:	4a11      	ldr	r2, [pc, #68]	@ (800714c <HAL_GPIO_Init+0x300>)
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	3301      	adds	r3, #1
 8007110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	f47f ae9d 	bne.w	8006e5c <HAL_GPIO_Init+0x10>
  }
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40021000 	.word	0x40021000
 8007134:	40010000 	.word	0x40010000
 8007138:	48000400 	.word	0x48000400
 800713c:	48000800 	.word	0x48000800
 8007140:	48000c00 	.word	0x48000c00
 8007144:	48001000 	.word	0x48001000
 8007148:	48001400 	.word	0x48001400
 800714c:	40010400 	.word	0x40010400

08007150 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800715e:	e0bd      	b.n	80072dc <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007160:	2201      	movs	r2, #1
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	4013      	ands	r3, r2
 800716c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80b0 	beq.w	80072d6 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007176:	4a60      	ldr	r2, [pc, #384]	@ (80072f8 <HAL_GPIO_DeInit+0x1a8>)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	089b      	lsrs	r3, r3, #2
 800717c:	3302      	adds	r3, #2
 800717e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007182:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	220f      	movs	r2, #15
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4013      	ands	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800719e:	d01f      	beq.n	80071e0 <HAL_GPIO_DeInit+0x90>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a56      	ldr	r2, [pc, #344]	@ (80072fc <HAL_GPIO_DeInit+0x1ac>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d019      	beq.n	80071dc <HAL_GPIO_DeInit+0x8c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a55      	ldr	r2, [pc, #340]	@ (8007300 <HAL_GPIO_DeInit+0x1b0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <HAL_GPIO_DeInit+0x88>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a54      	ldr	r2, [pc, #336]	@ (8007304 <HAL_GPIO_DeInit+0x1b4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00d      	beq.n	80071d4 <HAL_GPIO_DeInit+0x84>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a53      	ldr	r2, [pc, #332]	@ (8007308 <HAL_GPIO_DeInit+0x1b8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d007      	beq.n	80071d0 <HAL_GPIO_DeInit+0x80>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a52      	ldr	r2, [pc, #328]	@ (800730c <HAL_GPIO_DeInit+0x1bc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d101      	bne.n	80071cc <HAL_GPIO_DeInit+0x7c>
 80071c8:	2305      	movs	r3, #5
 80071ca:	e00a      	b.n	80071e2 <HAL_GPIO_DeInit+0x92>
 80071cc:	2306      	movs	r3, #6
 80071ce:	e008      	b.n	80071e2 <HAL_GPIO_DeInit+0x92>
 80071d0:	2304      	movs	r3, #4
 80071d2:	e006      	b.n	80071e2 <HAL_GPIO_DeInit+0x92>
 80071d4:	2303      	movs	r3, #3
 80071d6:	e004      	b.n	80071e2 <HAL_GPIO_DeInit+0x92>
 80071d8:	2302      	movs	r3, #2
 80071da:	e002      	b.n	80071e2 <HAL_GPIO_DeInit+0x92>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <HAL_GPIO_DeInit+0x92>
 80071e0:	2300      	movs	r3, #0
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	f002 0203 	and.w	r2, r2, #3
 80071e8:	0092      	lsls	r2, r2, #2
 80071ea:	4093      	lsls	r3, r2
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d132      	bne.n	8007258 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80071f2:	4b47      	ldr	r3, [pc, #284]	@ (8007310 <HAL_GPIO_DeInit+0x1c0>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	43db      	mvns	r3, r3
 80071fa:	4945      	ldr	r1, [pc, #276]	@ (8007310 <HAL_GPIO_DeInit+0x1c0>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007200:	4b43      	ldr	r3, [pc, #268]	@ (8007310 <HAL_GPIO_DeInit+0x1c0>)
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	43db      	mvns	r3, r3
 8007208:	4941      	ldr	r1, [pc, #260]	@ (8007310 <HAL_GPIO_DeInit+0x1c0>)
 800720a:	4013      	ands	r3, r2
 800720c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800720e:	4b40      	ldr	r3, [pc, #256]	@ (8007310 <HAL_GPIO_DeInit+0x1c0>)
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	43db      	mvns	r3, r3
 8007216:	493e      	ldr	r1, [pc, #248]	@ (8007310 <HAL_GPIO_DeInit+0x1c0>)
 8007218:	4013      	ands	r3, r2
 800721a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800721c:	4b3c      	ldr	r3, [pc, #240]	@ (8007310 <HAL_GPIO_DeInit+0x1c0>)
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	43db      	mvns	r3, r3
 8007224:	493a      	ldr	r1, [pc, #232]	@ (8007310 <HAL_GPIO_DeInit+0x1c0>)
 8007226:	4013      	ands	r3, r2
 8007228:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	220f      	movs	r2, #15
 8007234:	fa02 f303 	lsl.w	r3, r2, r3
 8007238:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800723a:	4a2f      	ldr	r2, [pc, #188]	@ (80072f8 <HAL_GPIO_DeInit+0x1a8>)
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	089b      	lsrs	r3, r3, #2
 8007240:	3302      	adds	r3, #2
 8007242:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	43da      	mvns	r2, r3
 800724a:	482b      	ldr	r0, [pc, #172]	@ (80072f8 <HAL_GPIO_DeInit+0x1a8>)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	089b      	lsrs	r3, r3, #2
 8007250:	400a      	ands	r2, r1
 8007252:	3302      	adds	r3, #2
 8007254:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	2103      	movs	r1, #3
 8007262:	fa01 f303 	lsl.w	r3, r1, r3
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	08da      	lsrs	r2, r3, #3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3208      	adds	r2, #8
 8007274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	220f      	movs	r2, #15
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	43db      	mvns	r3, r3
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	08d2      	lsrs	r2, r2, #3
 800728c:	4019      	ands	r1, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3208      	adds	r2, #8
 8007292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	2103      	movs	r1, #3
 80072a0:	fa01 f303 	lsl.w	r3, r1, r3
 80072a4:	43db      	mvns	r3, r3
 80072a6:	401a      	ands	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	2101      	movs	r1, #1
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	fa01 f303 	lsl.w	r3, r1, r3
 80072b8:	43db      	mvns	r3, r3
 80072ba:	401a      	ands	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	005b      	lsls	r3, r3, #1
 80072c8:	2103      	movs	r1, #3
 80072ca:	fa01 f303 	lsl.w	r3, r1, r3
 80072ce:	43db      	mvns	r3, r3
 80072d0:	401a      	ands	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	3301      	adds	r3, #1
 80072da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f47f af3b 	bne.w	8007160 <HAL_GPIO_DeInit+0x10>
  }
}
 80072ea:	bf00      	nop
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	40010000 	.word	0x40010000
 80072fc:	48000400 	.word	0x48000400
 8007300:	48000800 	.word	0x48000800
 8007304:	48000c00 	.word	0x48000c00
 8007308:	48001000 	.word	0x48001000
 800730c:	48001400 	.word	0x48001400
 8007310:	40010400 	.word	0x40010400

08007314 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	887b      	ldrh	r3, [r7, #2]
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]
 8007330:	e001      	b.n	8007336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	807b      	strh	r3, [r7, #2]
 8007350:	4613      	mov	r3, r2
 8007352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007354:	787b      	ldrb	r3, [r7, #1]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800735a:	887a      	ldrh	r2, [r7, #2]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007360:	e002      	b.n	8007368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007362:	887a      	ldrh	r2, [r7, #2]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007386:	887a      	ldrh	r2, [r7, #2]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4013      	ands	r3, r2
 800738c:	041a      	lsls	r2, r3, #16
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	43d9      	mvns	r1, r3
 8007392:	887b      	ldrh	r3, [r7, #2]
 8007394:	400b      	ands	r3, r1
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	619a      	str	r2, [r3, #24]
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d141      	bne.n	800743a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073b6:	4b4b      	ldr	r3, [pc, #300]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c2:	d131      	bne.n	8007428 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073c4:	4b47      	ldr	r3, [pc, #284]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ca:	4a46      	ldr	r2, [pc, #280]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073d4:	4b43      	ldr	r3, [pc, #268]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80073dc:	4a41      	ldr	r2, [pc, #260]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80073e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073e4:	4b40      	ldr	r3, [pc, #256]	@ (80074e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2232      	movs	r2, #50	@ 0x32
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	4a3f      	ldr	r2, [pc, #252]	@ (80074ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80073f0:	fba2 2303 	umull	r2, r3, r2, r3
 80073f4:	0c9b      	lsrs	r3, r3, #18
 80073f6:	3301      	adds	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073fa:	e002      	b.n	8007402 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3b01      	subs	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007402:	4b38      	ldr	r3, [pc, #224]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800740a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800740e:	d102      	bne.n	8007416 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f2      	bne.n	80073fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007416:	4b33      	ldr	r3, [pc, #204]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800741e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007422:	d158      	bne.n	80074d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e057      	b.n	80074d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007428:	4b2e      	ldr	r3, [pc, #184]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800742a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800742e:	4a2d      	ldr	r2, [pc, #180]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007438:	e04d      	b.n	80074d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007440:	d141      	bne.n	80074c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007442:	4b28      	ldr	r3, [pc, #160]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800744a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744e:	d131      	bne.n	80074b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007450:	4b24      	ldr	r3, [pc, #144]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007456:	4a23      	ldr	r2, [pc, #140]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800745c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007460:	4b20      	ldr	r3, [pc, #128]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007468:	4a1e      	ldr	r2, [pc, #120]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800746a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800746e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007470:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2232      	movs	r2, #50	@ 0x32
 8007476:	fb02 f303 	mul.w	r3, r2, r3
 800747a:	4a1c      	ldr	r2, [pc, #112]	@ (80074ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800747c:	fba2 2303 	umull	r2, r3, r2, r3
 8007480:	0c9b      	lsrs	r3, r3, #18
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007486:	e002      	b.n	800748e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3b01      	subs	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800748e:	4b15      	ldr	r3, [pc, #84]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800749a:	d102      	bne.n	80074a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f2      	bne.n	8007488 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074a2:	4b10      	ldr	r3, [pc, #64]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074ae:	d112      	bne.n	80074d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e011      	b.n	80074d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074b4:	4b0b      	ldr	r3, [pc, #44]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ba:	4a0a      	ldr	r2, [pc, #40]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80074c4:	e007      	b.n	80074d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80074c6:	4b07      	ldr	r3, [pc, #28]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80074ce:	4a05      	ldr	r2, [pc, #20]	@ (80074e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40007000 	.word	0x40007000
 80074e8:	20000014 	.word	0x20000014
 80074ec:	431bde83 	.word	0x431bde83

080074f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80074f4:	4b05      	ldr	r3, [pc, #20]	@ (800750c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a04      	ldr	r2, [pc, #16]	@ (800750c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80074fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074fe:	6093      	str	r3, [r2, #8]
}
 8007500:	bf00      	nop
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	40007000 	.word	0x40007000

08007510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e2fe      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d075      	beq.n	800761a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800752e:	4b97      	ldr	r3, [pc, #604]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 030c 	and.w	r3, r3, #12
 8007536:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007538:	4b94      	ldr	r3, [pc, #592]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0303 	and.w	r3, r3, #3
 8007540:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b0c      	cmp	r3, #12
 8007546:	d102      	bne.n	800754e <HAL_RCC_OscConfig+0x3e>
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2b03      	cmp	r3, #3
 800754c:	d002      	beq.n	8007554 <HAL_RCC_OscConfig+0x44>
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d10b      	bne.n	800756c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007554:	4b8d      	ldr	r3, [pc, #564]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d05b      	beq.n	8007618 <HAL_RCC_OscConfig+0x108>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d157      	bne.n	8007618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e2d9      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007574:	d106      	bne.n	8007584 <HAL_RCC_OscConfig+0x74>
 8007576:	4b85      	ldr	r3, [pc, #532]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a84      	ldr	r2, [pc, #528]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 800757c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	e01d      	b.n	80075c0 <HAL_RCC_OscConfig+0xb0>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800758c:	d10c      	bne.n	80075a8 <HAL_RCC_OscConfig+0x98>
 800758e:	4b7f      	ldr	r3, [pc, #508]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a7e      	ldr	r2, [pc, #504]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	4b7c      	ldr	r3, [pc, #496]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a7b      	ldr	r2, [pc, #492]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80075a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	e00b      	b.n	80075c0 <HAL_RCC_OscConfig+0xb0>
 80075a8:	4b78      	ldr	r3, [pc, #480]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a77      	ldr	r2, [pc, #476]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80075ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	4b75      	ldr	r3, [pc, #468]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a74      	ldr	r2, [pc, #464]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80075ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d013      	beq.n	80075f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c8:	f7fe f836 	bl	8005638 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075ce:	e008      	b.n	80075e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075d0:	f7fe f832 	bl	8005638 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b64      	cmp	r3, #100	@ 0x64
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e29e      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075e2:	4b6a      	ldr	r3, [pc, #424]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0f0      	beq.n	80075d0 <HAL_RCC_OscConfig+0xc0>
 80075ee:	e014      	b.n	800761a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f0:	f7fe f822 	bl	8005638 <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075f8:	f7fe f81e 	bl	8005638 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b64      	cmp	r3, #100	@ 0x64
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e28a      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800760a:	4b60      	ldr	r3, [pc, #384]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1f0      	bne.n	80075f8 <HAL_RCC_OscConfig+0xe8>
 8007616:	e000      	b.n	800761a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d075      	beq.n	8007712 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007626:	4b59      	ldr	r3, [pc, #356]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 030c 	and.w	r3, r3, #12
 800762e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007630:	4b56      	ldr	r3, [pc, #344]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b0c      	cmp	r3, #12
 800763e:	d102      	bne.n	8007646 <HAL_RCC_OscConfig+0x136>
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d002      	beq.n	800764c <HAL_RCC_OscConfig+0x13c>
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	2b04      	cmp	r3, #4
 800764a:	d11f      	bne.n	800768c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800764c:	4b4f      	ldr	r3, [pc, #316]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <HAL_RCC_OscConfig+0x154>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e25d      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007664:	4b49      	ldr	r3, [pc, #292]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	061b      	lsls	r3, r3, #24
 8007672:	4946      	ldr	r1, [pc, #280]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007674:	4313      	orrs	r3, r2
 8007676:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007678:	4b45      	ldr	r3, [pc, #276]	@ (8007790 <HAL_RCC_OscConfig+0x280>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f7fd ff8f 	bl	80055a0 <HAL_InitTick>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d043      	beq.n	8007710 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e249      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d023      	beq.n	80076dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007694:	4b3d      	ldr	r3, [pc, #244]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a3c      	ldr	r2, [pc, #240]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 800769a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800769e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a0:	f7fd ffca 	bl	8005638 <HAL_GetTick>
 80076a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076a8:	f7fd ffc6 	bl	8005638 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e232      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076ba:	4b34      	ldr	r3, [pc, #208]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0f0      	beq.n	80076a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c6:	4b31      	ldr	r3, [pc, #196]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	061b      	lsls	r3, r3, #24
 80076d4:	492d      	ldr	r1, [pc, #180]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	604b      	str	r3, [r1, #4]
 80076da:	e01a      	b.n	8007712 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076dc:	4b2b      	ldr	r3, [pc, #172]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a2a      	ldr	r2, [pc, #168]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 80076e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e8:	f7fd ffa6 	bl	8005638 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076f0:	f7fd ffa2 	bl	8005638 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e20e      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007702:	4b22      	ldr	r3, [pc, #136]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f0      	bne.n	80076f0 <HAL_RCC_OscConfig+0x1e0>
 800770e:	e000      	b.n	8007712 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007710:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0308 	and.w	r3, r3, #8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d041      	beq.n	80077a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01c      	beq.n	8007760 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007726:	4b19      	ldr	r3, [pc, #100]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800772c:	4a17      	ldr	r2, [pc, #92]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007736:	f7fd ff7f 	bl	8005638 <HAL_GetTick>
 800773a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800773c:	e008      	b.n	8007750 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800773e:	f7fd ff7b 	bl	8005638 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d901      	bls.n	8007750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e1e7      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007750:	4b0e      	ldr	r3, [pc, #56]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0ef      	beq.n	800773e <HAL_RCC_OscConfig+0x22e>
 800775e:	e020      	b.n	80077a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007760:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007766:	4a09      	ldr	r2, [pc, #36]	@ (800778c <HAL_RCC_OscConfig+0x27c>)
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007770:	f7fd ff62 	bl	8005638 <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007776:	e00d      	b.n	8007794 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007778:	f7fd ff5e 	bl	8005638 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d906      	bls.n	8007794 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e1ca      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
 800778a:	bf00      	nop
 800778c:	40021000 	.word	0x40021000
 8007790:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007794:	4b8c      	ldr	r3, [pc, #560]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1ea      	bne.n	8007778 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80a6 	beq.w	80078fc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077b0:	2300      	movs	r3, #0
 80077b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077b4:	4b84      	ldr	r3, [pc, #528]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80077b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <HAL_RCC_OscConfig+0x2b4>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <HAL_RCC_OscConfig+0x2b6>
 80077c4:	2300      	movs	r3, #0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ca:	4b7f      	ldr	r3, [pc, #508]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80077cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ce:	4a7e      	ldr	r2, [pc, #504]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80077d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80077d6:	4b7c      	ldr	r3, [pc, #496]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80077d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80077e2:	2301      	movs	r3, #1
 80077e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077e6:	4b79      	ldr	r3, [pc, #484]	@ (80079cc <HAL_RCC_OscConfig+0x4bc>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d118      	bne.n	8007824 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077f2:	4b76      	ldr	r3, [pc, #472]	@ (80079cc <HAL_RCC_OscConfig+0x4bc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a75      	ldr	r2, [pc, #468]	@ (80079cc <HAL_RCC_OscConfig+0x4bc>)
 80077f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077fe:	f7fd ff1b 	bl	8005638 <HAL_GetTick>
 8007802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007804:	e008      	b.n	8007818 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007806:	f7fd ff17 	bl	8005638 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e183      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007818:	4b6c      	ldr	r3, [pc, #432]	@ (80079cc <HAL_RCC_OscConfig+0x4bc>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d0f0      	beq.n	8007806 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d108      	bne.n	800783e <HAL_RCC_OscConfig+0x32e>
 800782c:	4b66      	ldr	r3, [pc, #408]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007832:	4a65      	ldr	r2, [pc, #404]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007834:	f043 0301 	orr.w	r3, r3, #1
 8007838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800783c:	e024      	b.n	8007888 <HAL_RCC_OscConfig+0x378>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b05      	cmp	r3, #5
 8007844:	d110      	bne.n	8007868 <HAL_RCC_OscConfig+0x358>
 8007846:	4b60      	ldr	r3, [pc, #384]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800784c:	4a5e      	ldr	r2, [pc, #376]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 800784e:	f043 0304 	orr.w	r3, r3, #4
 8007852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007856:	4b5c      	ldr	r3, [pc, #368]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800785c:	4a5a      	ldr	r2, [pc, #360]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 800785e:	f043 0301 	orr.w	r3, r3, #1
 8007862:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007866:	e00f      	b.n	8007888 <HAL_RCC_OscConfig+0x378>
 8007868:	4b57      	ldr	r3, [pc, #348]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786e:	4a56      	ldr	r2, [pc, #344]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007878:	4b53      	ldr	r3, [pc, #332]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 800787a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787e:	4a52      	ldr	r2, [pc, #328]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007880:	f023 0304 	bic.w	r3, r3, #4
 8007884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d016      	beq.n	80078be <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007890:	f7fd fed2 	bl	8005638 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007896:	e00a      	b.n	80078ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007898:	f7fd fece 	bl	8005638 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e138      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078ae:	4b46      	ldr	r3, [pc, #280]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80078b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0ed      	beq.n	8007898 <HAL_RCC_OscConfig+0x388>
 80078bc:	e015      	b.n	80078ea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078be:	f7fd febb 	bl	8005638 <HAL_GetTick>
 80078c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078c4:	e00a      	b.n	80078dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c6:	f7fd feb7 	bl	8005638 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d901      	bls.n	80078dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e121      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078dc:	4b3a      	ldr	r3, [pc, #232]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80078de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1ed      	bne.n	80078c6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078ea:	7ffb      	ldrb	r3, [r7, #31]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d105      	bne.n	80078fc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f0:	4b35      	ldr	r3, [pc, #212]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80078f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f4:	4a34      	ldr	r2, [pc, #208]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80078f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d03c      	beq.n	8007982 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01c      	beq.n	800794a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007910:	4b2d      	ldr	r3, [pc, #180]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007916:	4a2c      	ldr	r2, [pc, #176]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007918:	f043 0301 	orr.w	r3, r3, #1
 800791c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007920:	f7fd fe8a 	bl	8005638 <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007928:	f7fd fe86 	bl	8005638 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e0f2      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800793a:	4b23      	ldr	r3, [pc, #140]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 800793c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0ef      	beq.n	8007928 <HAL_RCC_OscConfig+0x418>
 8007948:	e01b      	b.n	8007982 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800794a:	4b1f      	ldr	r3, [pc, #124]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 800794c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007950:	4a1d      	ldr	r2, [pc, #116]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007952:	f023 0301 	bic.w	r3, r3, #1
 8007956:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795a:	f7fd fe6d 	bl	8005638 <HAL_GetTick>
 800795e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007960:	e008      	b.n	8007974 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007962:	f7fd fe69 	bl	8005638 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b02      	cmp	r3, #2
 800796e:	d901      	bls.n	8007974 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e0d5      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007974:	4b14      	ldr	r3, [pc, #80]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 8007976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1ef      	bne.n	8007962 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 80c9 	beq.w	8007b1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800798c:	4b0e      	ldr	r3, [pc, #56]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 030c 	and.w	r3, r3, #12
 8007994:	2b0c      	cmp	r3, #12
 8007996:	f000 8083 	beq.w	8007aa0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d15e      	bne.n	8007a60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a2:	4b09      	ldr	r3, [pc, #36]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a08      	ldr	r2, [pc, #32]	@ (80079c8 <HAL_RCC_OscConfig+0x4b8>)
 80079a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ae:	f7fd fe43 	bl	8005638 <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079b4:	e00c      	b.n	80079d0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b6:	f7fd fe3f 	bl	8005638 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d905      	bls.n	80079d0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e0ab      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
 80079c8:	40021000 	.word	0x40021000
 80079cc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079d0:	4b55      	ldr	r3, [pc, #340]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1ec      	bne.n	80079b6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079dc:	4b52      	ldr	r3, [pc, #328]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	4b52      	ldr	r3, [pc, #328]	@ (8007b2c <HAL_RCC_OscConfig+0x61c>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6a11      	ldr	r1, [r2, #32]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80079ec:	3a01      	subs	r2, #1
 80079ee:	0112      	lsls	r2, r2, #4
 80079f0:	4311      	orrs	r1, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80079f6:	0212      	lsls	r2, r2, #8
 80079f8:	4311      	orrs	r1, r2
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80079fe:	0852      	lsrs	r2, r2, #1
 8007a00:	3a01      	subs	r2, #1
 8007a02:	0552      	lsls	r2, r2, #21
 8007a04:	4311      	orrs	r1, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a0a:	0852      	lsrs	r2, r2, #1
 8007a0c:	3a01      	subs	r2, #1
 8007a0e:	0652      	lsls	r2, r2, #25
 8007a10:	4311      	orrs	r1, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007a16:	06d2      	lsls	r2, r2, #27
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	4943      	ldr	r1, [pc, #268]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a20:	4b41      	ldr	r3, [pc, #260]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a40      	ldr	r2, [pc, #256]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4a3d      	ldr	r2, [pc, #244]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a38:	f7fd fdfe 	bl	8005638 <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a40:	f7fd fdfa 	bl	8005638 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e066      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a52:	4b35      	ldr	r3, [pc, #212]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0f0      	beq.n	8007a40 <HAL_RCC_OscConfig+0x530>
 8007a5e:	e05e      	b.n	8007b1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a60:	4b31      	ldr	r3, [pc, #196]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a30      	ldr	r2, [pc, #192]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6c:	f7fd fde4 	bl	8005638 <HAL_GetTick>
 8007a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a72:	e008      	b.n	8007a86 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a74:	f7fd fde0 	bl	8005638 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d901      	bls.n	8007a86 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e04c      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a86:	4b28      	ldr	r3, [pc, #160]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1f0      	bne.n	8007a74 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007a92:	4b25      	ldr	r3, [pc, #148]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	4924      	ldr	r1, [pc, #144]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007a98:	4b25      	ldr	r3, [pc, #148]	@ (8007b30 <HAL_RCC_OscConfig+0x620>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	60cb      	str	r3, [r1, #12]
 8007a9e:	e03e      	b.n	8007b1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e039      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007aac:	4b1e      	ldr	r3, [pc, #120]	@ (8007b28 <HAL_RCC_OscConfig+0x618>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f003 0203 	and.w	r2, r3, #3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d12c      	bne.n	8007b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aca:	3b01      	subs	r3, #1
 8007acc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d123      	bne.n	8007b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007adc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d11b      	bne.n	8007b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d113      	bne.n	8007b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	3b01      	subs	r3, #1
 8007b00:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d109      	bne.n	8007b1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	3b01      	subs	r3, #1
 8007b14:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d001      	beq.n	8007b1e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	019f800c 	.word	0x019f800c
 8007b30:	feeefffc 	.word	0xfeeefffc

08007b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e11e      	b.n	8007d8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b4c:	4b91      	ldr	r3, [pc, #580]	@ (8007d94 <HAL_RCC_ClockConfig+0x260>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d910      	bls.n	8007b7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5a:	4b8e      	ldr	r3, [pc, #568]	@ (8007d94 <HAL_RCC_ClockConfig+0x260>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f023 020f 	bic.w	r2, r3, #15
 8007b62:	498c      	ldr	r1, [pc, #560]	@ (8007d94 <HAL_RCC_ClockConfig+0x260>)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6a:	4b8a      	ldr	r3, [pc, #552]	@ (8007d94 <HAL_RCC_ClockConfig+0x260>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d001      	beq.n	8007b7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e106      	b.n	8007d8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d073      	beq.n	8007c70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d129      	bne.n	8007be4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b90:	4b81      	ldr	r3, [pc, #516]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e0f4      	b.n	8007d8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007ba0:	f000 f99e 	bl	8007ee0 <RCC_GetSysClockFreqFromPLLSource>
 8007ba4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4a7c      	ldr	r2, [pc, #496]	@ (8007d9c <HAL_RCC_ClockConfig+0x268>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d93f      	bls.n	8007c2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007bae:	4b7a      	ldr	r3, [pc, #488]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d033      	beq.n	8007c2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d12f      	bne.n	8007c2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bce:	4b72      	ldr	r3, [pc, #456]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007bd6:	4a70      	ldr	r2, [pc, #448]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bdc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007bde:	2380      	movs	r3, #128	@ 0x80
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	e024      	b.n	8007c2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d107      	bne.n	8007bfc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bec:	4b6a      	ldr	r3, [pc, #424]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d109      	bne.n	8007c0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e0c6      	b.n	8007d8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bfc:	4b66      	ldr	r3, [pc, #408]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e0be      	b.n	8007d8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007c0c:	f000 f8ce 	bl	8007dac <HAL_RCC_GetSysClockFreq>
 8007c10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	4a61      	ldr	r2, [pc, #388]	@ (8007d9c <HAL_RCC_ClockConfig+0x268>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d909      	bls.n	8007c2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c22:	4a5d      	ldr	r2, [pc, #372]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c2a:	2380      	movs	r3, #128	@ 0x80
 8007c2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c2e:	4b5a      	ldr	r3, [pc, #360]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f023 0203 	bic.w	r2, r3, #3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	4957      	ldr	r1, [pc, #348]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c40:	f7fd fcfa 	bl	8005638 <HAL_GetTick>
 8007c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c46:	e00a      	b.n	8007c5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c48:	f7fd fcf6 	bl	8005638 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e095      	b.n	8007d8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 020c 	and.w	r2, r3, #12
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d1eb      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d023      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d005      	beq.n	8007c94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c88:	4b43      	ldr	r3, [pc, #268]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	4a42      	ldr	r2, [pc, #264]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007c8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007c92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007caa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007cae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cb0:	4b39      	ldr	r3, [pc, #228]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4936      	ldr	r1, [pc, #216]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	608b      	str	r3, [r1, #8]
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b80      	cmp	r3, #128	@ 0x80
 8007cc8:	d105      	bne.n	8007cd6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007cca:	4b33      	ldr	r3, [pc, #204]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	4a32      	ldr	r2, [pc, #200]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007cd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cd4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8007d94 <HAL_RCC_ClockConfig+0x260>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 030f 	and.w	r3, r3, #15
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d21d      	bcs.n	8007d20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8007d94 <HAL_RCC_ClockConfig+0x260>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f023 020f 	bic.w	r2, r3, #15
 8007cec:	4929      	ldr	r1, [pc, #164]	@ (8007d94 <HAL_RCC_ClockConfig+0x260>)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007cf4:	f7fd fca0 	bl	8005638 <HAL_GetTick>
 8007cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cfa:	e00a      	b.n	8007d12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cfc:	f7fd fc9c 	bl	8005638 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e03b      	b.n	8007d8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d12:	4b20      	ldr	r3, [pc, #128]	@ (8007d94 <HAL_RCC_ClockConfig+0x260>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d1ed      	bne.n	8007cfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d008      	beq.n	8007d3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4917      	ldr	r1, [pc, #92]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d4a:	4b13      	ldr	r3, [pc, #76]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	490f      	ldr	r1, [pc, #60]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d5e:	f000 f825 	bl	8007dac <HAL_RCC_GetSysClockFreq>
 8007d62:	4602      	mov	r2, r0
 8007d64:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <HAL_RCC_ClockConfig+0x264>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	490c      	ldr	r1, [pc, #48]	@ (8007da0 <HAL_RCC_ClockConfig+0x26c>)
 8007d70:	5ccb      	ldrb	r3, [r1, r3]
 8007d72:	f003 031f 	and.w	r3, r3, #31
 8007d76:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8007da4 <HAL_RCC_ClockConfig+0x270>)
 8007d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007da8 <HAL_RCC_ClockConfig+0x274>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fd fc0c 	bl	80055a0 <HAL_InitTick>
 8007d88:	4603      	mov	r3, r0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	40022000 	.word	0x40022000
 8007d98:	40021000 	.word	0x40021000
 8007d9c:	04c4b400 	.word	0x04c4b400
 8007da0:	0800d49c 	.word	0x0800d49c
 8007da4:	20000014 	.word	0x20000014
 8007da8:	20000018 	.word	0x20000018

08007dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007db2:	4b2c      	ldr	r3, [pc, #176]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 030c 	and.w	r3, r3, #12
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d102      	bne.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	e047      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007dc4:	4b27      	ldr	r3, [pc, #156]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 030c 	and.w	r3, r3, #12
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d102      	bne.n	8007dd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007dd0:	4b26      	ldr	r3, [pc, #152]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	e03e      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007dd6:	4b23      	ldr	r3, [pc, #140]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 030c 	and.w	r3, r3, #12
 8007dde:	2b0c      	cmp	r3, #12
 8007de0:	d136      	bne.n	8007e50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007de2:	4b20      	ldr	r3, [pc, #128]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007dec:	4b1d      	ldr	r3, [pc, #116]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	091b      	lsrs	r3, r3, #4
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	3301      	adds	r3, #1
 8007df8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d10c      	bne.n	8007e1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e00:	4a1a      	ldr	r2, [pc, #104]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e08:	4a16      	ldr	r2, [pc, #88]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e0a:	68d2      	ldr	r2, [r2, #12]
 8007e0c:	0a12      	lsrs	r2, r2, #8
 8007e0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e12:	fb02 f303 	mul.w	r3, r2, r3
 8007e16:	617b      	str	r3, [r7, #20]
      break;
 8007e18:	e00c      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e1a:	4a13      	ldr	r2, [pc, #76]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e22:	4a10      	ldr	r2, [pc, #64]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e24:	68d2      	ldr	r2, [r2, #12]
 8007e26:	0a12      	lsrs	r2, r2, #8
 8007e28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e2c:	fb02 f303 	mul.w	r3, r2, r3
 8007e30:	617b      	str	r3, [r7, #20]
      break;
 8007e32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e34:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	0e5b      	lsrs	r3, r3, #25
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	3301      	adds	r3, #1
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	e001      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e54:	693b      	ldr	r3, [r7, #16]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40021000 	.word	0x40021000
 8007e68:	00f42400 	.word	0x00f42400
 8007e6c:	007a1200 	.word	0x007a1200

08007e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e74:	4b03      	ldr	r3, [pc, #12]	@ (8007e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e76:	681b      	ldr	r3, [r3, #0]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20000014 	.word	0x20000014

08007e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e8c:	f7ff fff0 	bl	8007e70 <HAL_RCC_GetHCLKFreq>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4b06      	ldr	r3, [pc, #24]	@ (8007eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	0a1b      	lsrs	r3, r3, #8
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	4904      	ldr	r1, [pc, #16]	@ (8007eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ea0:	f003 031f 	and.w	r3, r3, #31
 8007ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	0800d4ac 	.word	0x0800d4ac

08007eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007eb8:	f7ff ffda 	bl	8007e70 <HAL_RCC_GetHCLKFreq>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	0adb      	lsrs	r3, r3, #11
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	4904      	ldr	r1, [pc, #16]	@ (8007edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eca:	5ccb      	ldrb	r3, [r1, r3]
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40021000 	.word	0x40021000
 8007edc:	0800d4ac 	.word	0x0800d4ac

08007ee0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8007f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	091b      	lsrs	r3, r3, #4
 8007ef6:	f003 030f 	and.w	r3, r3, #15
 8007efa:	3301      	adds	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d10c      	bne.n	8007f1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f04:	4a17      	ldr	r2, [pc, #92]	@ (8007f64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0c:	4a14      	ldr	r2, [pc, #80]	@ (8007f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f0e:	68d2      	ldr	r2, [r2, #12]
 8007f10:	0a12      	lsrs	r2, r2, #8
 8007f12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
 8007f1a:	617b      	str	r3, [r7, #20]
    break;
 8007f1c:	e00c      	b.n	8007f38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f1e:	4a12      	ldr	r2, [pc, #72]	@ (8007f68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f26:	4a0e      	ldr	r2, [pc, #56]	@ (8007f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f28:	68d2      	ldr	r2, [r2, #12]
 8007f2a:	0a12      	lsrs	r2, r2, #8
 8007f2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f30:	fb02 f303 	mul.w	r3, r2, r3
 8007f34:	617b      	str	r3, [r7, #20]
    break;
 8007f36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f38:	4b09      	ldr	r3, [pc, #36]	@ (8007f60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	0e5b      	lsrs	r3, r3, #25
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	3301      	adds	r3, #1
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007f52:	687b      	ldr	r3, [r7, #4]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	371c      	adds	r7, #28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	40021000 	.word	0x40021000
 8007f64:	007a1200 	.word	0x007a1200
 8007f68:	00f42400 	.word	0x00f42400

08007f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f74:	2300      	movs	r3, #0
 8007f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f78:	2300      	movs	r3, #0
 8007f7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 8098 	beq.w	80080ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f8e:	4b43      	ldr	r3, [pc, #268]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10d      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f9a:	4b40      	ldr	r3, [pc, #256]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fae:	60bb      	str	r3, [r7, #8]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a39      	ldr	r2, [pc, #228]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fc2:	f7fd fb39 	bl	8005638 <HAL_GetTick>
 8007fc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fc8:	e009      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fca:	f7fd fb35 	bl	8005638 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d902      	bls.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	74fb      	strb	r3, [r7, #19]
        break;
 8007fdc:	e005      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fde:	4b30      	ldr	r3, [pc, #192]	@ (80080a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0ef      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007fea:	7cfb      	ldrb	r3, [r7, #19]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d159      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ffa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d01e      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	429a      	cmp	r2, r3
 800800a:	d019      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800800c:	4b23      	ldr	r3, [pc, #140]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800800e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008016:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008018:	4b20      	ldr	r3, [pc, #128]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800801a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801e:	4a1f      	ldr	r2, [pc, #124]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008028:	4b1c      	ldr	r3, [pc, #112]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802e:	4a1b      	ldr	r2, [pc, #108]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008038:	4a18      	ldr	r2, [pc, #96]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d016      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804a:	f7fd faf5 	bl	8005638 <HAL_GetTick>
 800804e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008050:	e00b      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008052:	f7fd faf1 	bl	8005638 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008060:	4293      	cmp	r3, r2
 8008062:	d902      	bls.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	74fb      	strb	r3, [r7, #19]
            break;
 8008068:	e006      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800806a:	4b0c      	ldr	r3, [pc, #48]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800806c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0ec      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800807e:	4b07      	ldr	r3, [pc, #28]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808c:	4903      	ldr	r1, [pc, #12]	@ (800809c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800808e:	4313      	orrs	r3, r2
 8008090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008094:	e008      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008096:	7cfb      	ldrb	r3, [r7, #19]
 8008098:	74bb      	strb	r3, [r7, #18]
 800809a:	e005      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800809c:	40021000 	.word	0x40021000
 80080a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a4:	7cfb      	ldrb	r3, [r7, #19]
 80080a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080a8:	7c7b      	ldrb	r3, [r7, #17]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d105      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ae:	4ba6      	ldr	r3, [pc, #664]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b2:	4aa5      	ldr	r2, [pc, #660]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00a      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080c6:	4ba0      	ldr	r3, [pc, #640]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080cc:	f023 0203 	bic.w	r2, r3, #3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	499c      	ldr	r1, [pc, #624]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00a      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080e8:	4b97      	ldr	r3, [pc, #604]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ee:	f023 020c 	bic.w	r2, r3, #12
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	4994      	ldr	r1, [pc, #592]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800810a:	4b8f      	ldr	r3, [pc, #572]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008110:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	498b      	ldr	r1, [pc, #556]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800812c:	4b86      	ldr	r3, [pc, #536]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800812e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008132:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	4983      	ldr	r1, [pc, #524]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800813c:	4313      	orrs	r3, r2
 800813e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0320 	and.w	r3, r3, #32
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800814e:	4b7e      	ldr	r3, [pc, #504]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008154:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	497a      	ldr	r1, [pc, #488]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800815e:	4313      	orrs	r3, r2
 8008160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008170:	4b75      	ldr	r3, [pc, #468]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008176:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	4972      	ldr	r1, [pc, #456]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008180:	4313      	orrs	r3, r2
 8008182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008192:	4b6d      	ldr	r3, [pc, #436]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008198:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	4969      	ldr	r1, [pc, #420]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081b4:	4b64      	ldr	r3, [pc, #400]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	4961      	ldr	r1, [pc, #388]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081d6:	4b5c      	ldr	r3, [pc, #368]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e4:	4958      	ldr	r1, [pc, #352]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d015      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081f8:	4b53      	ldr	r3, [pc, #332]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008206:	4950      	ldr	r1, [pc, #320]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008208:	4313      	orrs	r3, r2
 800820a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008216:	d105      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008218:	4b4b      	ldr	r3, [pc, #300]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	4a4a      	ldr	r2, [pc, #296]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800821e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008222:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800822c:	2b00      	cmp	r3, #0
 800822e:	d015      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008230:	4b45      	ldr	r3, [pc, #276]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008236:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	4942      	ldr	r1, [pc, #264]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008240:	4313      	orrs	r3, r2
 8008242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800824e:	d105      	bne.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008250:	4b3d      	ldr	r3, [pc, #244]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	4a3c      	ldr	r2, [pc, #240]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800825a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d015      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008268:	4b37      	ldr	r3, [pc, #220]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800826a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800826e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	4934      	ldr	r1, [pc, #208]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008278:	4313      	orrs	r3, r2
 800827a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008286:	d105      	bne.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008288:	4b2f      	ldr	r3, [pc, #188]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	4a2e      	ldr	r2, [pc, #184]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800828e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008292:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d015      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082a0:	4b29      	ldr	r3, [pc, #164]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ae:	4926      	ldr	r1, [pc, #152]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082be:	d105      	bne.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082c0:	4b21      	ldr	r3, [pc, #132]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	4a20      	ldr	r2, [pc, #128]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d015      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e6:	4918      	ldr	r1, [pc, #96]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082f6:	d105      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082f8:	4b13      	ldr	r3, [pc, #76]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	4a12      	ldr	r2, [pc, #72]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008302:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d015      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008310:	4b0d      	ldr	r3, [pc, #52]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008316:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831e:	490a      	ldr	r1, [pc, #40]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008320:	4313      	orrs	r3, r2
 8008322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800832e:	d105      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008330:	4b05      	ldr	r3, [pc, #20]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	4a04      	ldr	r2, [pc, #16]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800833a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800833c:	7cbb      	ldrb	r3, [r7, #18]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	40021000 	.word	0x40021000

0800834c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e042      	b.n	80083e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7fc fe45 	bl	8005000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2224      	movs	r2, #36	@ 0x24
 800837a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fc38 	bl	8008c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f969 	bl	8008674 <UART_SetConfig>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e01b      	b.n	80083e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fcb7 	bl	8008d50 <UART_CheckIdleState>
 80083e2:	4603      	mov	r3, r0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e031      	b.n	8008462 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2224      	movs	r2, #36	@ 0x24
 8008402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0201 	bic.w	r2, r2, #1
 8008414:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2200      	movs	r2, #0
 8008424:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7fc ff0a 	bl	8005248 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b08a      	sub	sp, #40	@ 0x28
 800846e:	af02      	add	r7, sp, #8
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	603b      	str	r3, [r7, #0]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008480:	2b20      	cmp	r3, #32
 8008482:	d17b      	bne.n	800857c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <HAL_UART_Transmit+0x26>
 800848a:	88fb      	ldrh	r3, [r7, #6]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e074      	b.n	800857e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2221      	movs	r2, #33	@ 0x21
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084a4:	f7fd f8c8 	bl	8005638 <HAL_GetTick>
 80084a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	88fa      	ldrh	r2, [r7, #6]
 80084ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c2:	d108      	bne.n	80084d6 <HAL_UART_Transmit+0x6c>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d104      	bne.n	80084d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	61bb      	str	r3, [r7, #24]
 80084d4:	e003      	b.n	80084de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084de:	e030      	b.n	8008542 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2200      	movs	r2, #0
 80084e8:	2180      	movs	r1, #128	@ 0x80
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 fcda 	bl	8008ea4 <UART_WaitOnFlagUntilTimeout>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e03d      	b.n	800857e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008516:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	3302      	adds	r3, #2
 800851c:	61bb      	str	r3, [r7, #24]
 800851e:	e007      	b.n	8008530 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	781a      	ldrb	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	3301      	adds	r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008536:	b29b      	uxth	r3, r3
 8008538:	3b01      	subs	r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1c8      	bne.n	80084e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2200      	movs	r2, #0
 8008556:	2140      	movs	r1, #64	@ 0x40
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fca3 	bl	8008ea4 <UART_WaitOnFlagUntilTimeout>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2220      	movs	r2, #32
 8008568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e006      	b.n	800857e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2220      	movs	r2, #32
 8008574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	e000      	b.n	800857e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800857c:	2302      	movs	r3, #2
  }
}
 800857e:	4618      	mov	r0, r3
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
	...

08008588 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	@ 0x28
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	4613      	mov	r3, r2
 8008594:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800859c:	2b20      	cmp	r3, #32
 800859e:	d137      	bne.n	8008610 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <HAL_UART_Receive_DMA+0x24>
 80085a6:	88fb      	ldrh	r3, [r7, #6]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e030      	b.n	8008612 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a18      	ldr	r2, [pc, #96]	@ (800861c <HAL_UART_Receive_DMA+0x94>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d01f      	beq.n	8008600 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d018      	beq.n	8008600 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	613b      	str	r3, [r7, #16]
   return(result);
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	623b      	str	r3, [r7, #32]
 80085ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	69f9      	ldr	r1, [r7, #28]
 80085f2:	6a3a      	ldr	r2, [r7, #32]
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e6      	bne.n	80085ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008600:	88fb      	ldrh	r3, [r7, #6]
 8008602:	461a      	mov	r2, r3
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 fcba 	bl	8008f80 <UART_Start_Receive_DMA>
 800860c:	4603      	mov	r3, r0
 800860e:	e000      	b.n	8008612 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3728      	adds	r7, #40	@ 0x28
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40008000 	.word	0x40008000

08008620 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008678:	b08c      	sub	sp, #48	@ 0x30
 800867a:	af00      	add	r7, sp, #0
 800867c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	431a      	orrs	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	431a      	orrs	r2, r3
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	4313      	orrs	r3, r2
 800869a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	4bab      	ldr	r3, [pc, #684]	@ (8008950 <UART_SetConfig+0x2dc>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	6812      	ldr	r2, [r2, #0]
 80086aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ac:	430b      	orrs	r3, r1
 80086ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4aa0      	ldr	r2, [pc, #640]	@ (8008954 <UART_SetConfig+0x2e0>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d004      	beq.n	80086e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086dc:	4313      	orrs	r3, r2
 80086de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80086ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fe:	f023 010f 	bic.w	r1, r3, #15
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a91      	ldr	r2, [pc, #580]	@ (8008958 <UART_SetConfig+0x2e4>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d125      	bne.n	8008764 <UART_SetConfig+0xf0>
 8008718:	4b90      	ldr	r3, [pc, #576]	@ (800895c <UART_SetConfig+0x2e8>)
 800871a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b03      	cmp	r3, #3
 8008724:	d81a      	bhi.n	800875c <UART_SetConfig+0xe8>
 8008726:	a201      	add	r2, pc, #4	@ (adr r2, 800872c <UART_SetConfig+0xb8>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	0800873d 	.word	0x0800873d
 8008730:	0800874d 	.word	0x0800874d
 8008734:	08008745 	.word	0x08008745
 8008738:	08008755 	.word	0x08008755
 800873c:	2301      	movs	r3, #1
 800873e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008742:	e0d6      	b.n	80088f2 <UART_SetConfig+0x27e>
 8008744:	2302      	movs	r3, #2
 8008746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874a:	e0d2      	b.n	80088f2 <UART_SetConfig+0x27e>
 800874c:	2304      	movs	r3, #4
 800874e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008752:	e0ce      	b.n	80088f2 <UART_SetConfig+0x27e>
 8008754:	2308      	movs	r3, #8
 8008756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800875a:	e0ca      	b.n	80088f2 <UART_SetConfig+0x27e>
 800875c:	2310      	movs	r3, #16
 800875e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008762:	e0c6      	b.n	80088f2 <UART_SetConfig+0x27e>
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a7d      	ldr	r2, [pc, #500]	@ (8008960 <UART_SetConfig+0x2ec>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d138      	bne.n	80087e0 <UART_SetConfig+0x16c>
 800876e:	4b7b      	ldr	r3, [pc, #492]	@ (800895c <UART_SetConfig+0x2e8>)
 8008770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008774:	f003 030c 	and.w	r3, r3, #12
 8008778:	2b0c      	cmp	r3, #12
 800877a:	d82d      	bhi.n	80087d8 <UART_SetConfig+0x164>
 800877c:	a201      	add	r2, pc, #4	@ (adr r2, 8008784 <UART_SetConfig+0x110>)
 800877e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008782:	bf00      	nop
 8008784:	080087b9 	.word	0x080087b9
 8008788:	080087d9 	.word	0x080087d9
 800878c:	080087d9 	.word	0x080087d9
 8008790:	080087d9 	.word	0x080087d9
 8008794:	080087c9 	.word	0x080087c9
 8008798:	080087d9 	.word	0x080087d9
 800879c:	080087d9 	.word	0x080087d9
 80087a0:	080087d9 	.word	0x080087d9
 80087a4:	080087c1 	.word	0x080087c1
 80087a8:	080087d9 	.word	0x080087d9
 80087ac:	080087d9 	.word	0x080087d9
 80087b0:	080087d9 	.word	0x080087d9
 80087b4:	080087d1 	.word	0x080087d1
 80087b8:	2300      	movs	r3, #0
 80087ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087be:	e098      	b.n	80088f2 <UART_SetConfig+0x27e>
 80087c0:	2302      	movs	r3, #2
 80087c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087c6:	e094      	b.n	80088f2 <UART_SetConfig+0x27e>
 80087c8:	2304      	movs	r3, #4
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ce:	e090      	b.n	80088f2 <UART_SetConfig+0x27e>
 80087d0:	2308      	movs	r3, #8
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d6:	e08c      	b.n	80088f2 <UART_SetConfig+0x27e>
 80087d8:	2310      	movs	r3, #16
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087de:	e088      	b.n	80088f2 <UART_SetConfig+0x27e>
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a5f      	ldr	r2, [pc, #380]	@ (8008964 <UART_SetConfig+0x2f0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d125      	bne.n	8008836 <UART_SetConfig+0x1c2>
 80087ea:	4b5c      	ldr	r3, [pc, #368]	@ (800895c <UART_SetConfig+0x2e8>)
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80087f4:	2b30      	cmp	r3, #48	@ 0x30
 80087f6:	d016      	beq.n	8008826 <UART_SetConfig+0x1b2>
 80087f8:	2b30      	cmp	r3, #48	@ 0x30
 80087fa:	d818      	bhi.n	800882e <UART_SetConfig+0x1ba>
 80087fc:	2b20      	cmp	r3, #32
 80087fe:	d00a      	beq.n	8008816 <UART_SetConfig+0x1a2>
 8008800:	2b20      	cmp	r3, #32
 8008802:	d814      	bhi.n	800882e <UART_SetConfig+0x1ba>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <UART_SetConfig+0x19a>
 8008808:	2b10      	cmp	r3, #16
 800880a:	d008      	beq.n	800881e <UART_SetConfig+0x1aa>
 800880c:	e00f      	b.n	800882e <UART_SetConfig+0x1ba>
 800880e:	2300      	movs	r3, #0
 8008810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008814:	e06d      	b.n	80088f2 <UART_SetConfig+0x27e>
 8008816:	2302      	movs	r3, #2
 8008818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800881c:	e069      	b.n	80088f2 <UART_SetConfig+0x27e>
 800881e:	2304      	movs	r3, #4
 8008820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008824:	e065      	b.n	80088f2 <UART_SetConfig+0x27e>
 8008826:	2308      	movs	r3, #8
 8008828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882c:	e061      	b.n	80088f2 <UART_SetConfig+0x27e>
 800882e:	2310      	movs	r3, #16
 8008830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008834:	e05d      	b.n	80088f2 <UART_SetConfig+0x27e>
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a4b      	ldr	r2, [pc, #300]	@ (8008968 <UART_SetConfig+0x2f4>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d125      	bne.n	800888c <UART_SetConfig+0x218>
 8008840:	4b46      	ldr	r3, [pc, #280]	@ (800895c <UART_SetConfig+0x2e8>)
 8008842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008846:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800884a:	2bc0      	cmp	r3, #192	@ 0xc0
 800884c:	d016      	beq.n	800887c <UART_SetConfig+0x208>
 800884e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008850:	d818      	bhi.n	8008884 <UART_SetConfig+0x210>
 8008852:	2b80      	cmp	r3, #128	@ 0x80
 8008854:	d00a      	beq.n	800886c <UART_SetConfig+0x1f8>
 8008856:	2b80      	cmp	r3, #128	@ 0x80
 8008858:	d814      	bhi.n	8008884 <UART_SetConfig+0x210>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <UART_SetConfig+0x1f0>
 800885e:	2b40      	cmp	r3, #64	@ 0x40
 8008860:	d008      	beq.n	8008874 <UART_SetConfig+0x200>
 8008862:	e00f      	b.n	8008884 <UART_SetConfig+0x210>
 8008864:	2300      	movs	r3, #0
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800886a:	e042      	b.n	80088f2 <UART_SetConfig+0x27e>
 800886c:	2302      	movs	r3, #2
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008872:	e03e      	b.n	80088f2 <UART_SetConfig+0x27e>
 8008874:	2304      	movs	r3, #4
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800887a:	e03a      	b.n	80088f2 <UART_SetConfig+0x27e>
 800887c:	2308      	movs	r3, #8
 800887e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008882:	e036      	b.n	80088f2 <UART_SetConfig+0x27e>
 8008884:	2310      	movs	r3, #16
 8008886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800888a:	e032      	b.n	80088f2 <UART_SetConfig+0x27e>
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a30      	ldr	r2, [pc, #192]	@ (8008954 <UART_SetConfig+0x2e0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d12a      	bne.n	80088ec <UART_SetConfig+0x278>
 8008896:	4b31      	ldr	r3, [pc, #196]	@ (800895c <UART_SetConfig+0x2e8>)
 8008898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800889c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80088a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088a4:	d01a      	beq.n	80088dc <UART_SetConfig+0x268>
 80088a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088aa:	d81b      	bhi.n	80088e4 <UART_SetConfig+0x270>
 80088ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088b0:	d00c      	beq.n	80088cc <UART_SetConfig+0x258>
 80088b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088b6:	d815      	bhi.n	80088e4 <UART_SetConfig+0x270>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <UART_SetConfig+0x250>
 80088bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088c0:	d008      	beq.n	80088d4 <UART_SetConfig+0x260>
 80088c2:	e00f      	b.n	80088e4 <UART_SetConfig+0x270>
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ca:	e012      	b.n	80088f2 <UART_SetConfig+0x27e>
 80088cc:	2302      	movs	r3, #2
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d2:	e00e      	b.n	80088f2 <UART_SetConfig+0x27e>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088da:	e00a      	b.n	80088f2 <UART_SetConfig+0x27e>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e2:	e006      	b.n	80088f2 <UART_SetConfig+0x27e>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ea:	e002      	b.n	80088f2 <UART_SetConfig+0x27e>
 80088ec:	2310      	movs	r3, #16
 80088ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a17      	ldr	r2, [pc, #92]	@ (8008954 <UART_SetConfig+0x2e0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	f040 80a8 	bne.w	8008a4e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008902:	2b08      	cmp	r3, #8
 8008904:	d834      	bhi.n	8008970 <UART_SetConfig+0x2fc>
 8008906:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <UART_SetConfig+0x298>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008931 	.word	0x08008931
 8008910:	08008971 	.word	0x08008971
 8008914:	08008939 	.word	0x08008939
 8008918:	08008971 	.word	0x08008971
 800891c:	0800893f 	.word	0x0800893f
 8008920:	08008971 	.word	0x08008971
 8008924:	08008971 	.word	0x08008971
 8008928:	08008971 	.word	0x08008971
 800892c:	08008947 	.word	0x08008947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008930:	f7ff faaa 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 8008934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008936:	e021      	b.n	800897c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008938:	4b0c      	ldr	r3, [pc, #48]	@ (800896c <UART_SetConfig+0x2f8>)
 800893a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800893c:	e01e      	b.n	800897c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800893e:	f7ff fa35 	bl	8007dac <HAL_RCC_GetSysClockFreq>
 8008942:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008944:	e01a      	b.n	800897c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800894a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800894c:	e016      	b.n	800897c <UART_SetConfig+0x308>
 800894e:	bf00      	nop
 8008950:	cfff69f3 	.word	0xcfff69f3
 8008954:	40008000 	.word	0x40008000
 8008958:	40013800 	.word	0x40013800
 800895c:	40021000 	.word	0x40021000
 8008960:	40004400 	.word	0x40004400
 8008964:	40004800 	.word	0x40004800
 8008968:	40004c00 	.word	0x40004c00
 800896c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800897a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 812a 	beq.w	8008bd8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	4a9e      	ldr	r2, [pc, #632]	@ (8008c04 <UART_SetConfig+0x590>)
 800898a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800898e:	461a      	mov	r2, r3
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	fbb3 f3f2 	udiv	r3, r3, r2
 8008996:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	4613      	mov	r3, r2
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	4413      	add	r3, r2
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d305      	bcc.n	80089b4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ae:	69ba      	ldr	r2, [r7, #24]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d903      	bls.n	80089bc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80089ba:	e10d      	b.n	8008bd8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089be:	2200      	movs	r2, #0
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	60fa      	str	r2, [r7, #12]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c8:	4a8e      	ldr	r2, [pc, #568]	@ (8008c04 <UART_SetConfig+0x590>)
 80089ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	2200      	movs	r2, #0
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	607a      	str	r2, [r7, #4]
 80089d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089de:	f7f8 f95b 	bl	8000c98 <__aeabi_uldivmod>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4610      	mov	r0, r2
 80089e8:	4619      	mov	r1, r3
 80089ea:	f04f 0200 	mov.w	r2, #0
 80089ee:	f04f 0300 	mov.w	r3, #0
 80089f2:	020b      	lsls	r3, r1, #8
 80089f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089f8:	0202      	lsls	r2, r0, #8
 80089fa:	6979      	ldr	r1, [r7, #20]
 80089fc:	6849      	ldr	r1, [r1, #4]
 80089fe:	0849      	lsrs	r1, r1, #1
 8008a00:	2000      	movs	r0, #0
 8008a02:	460c      	mov	r4, r1
 8008a04:	4605      	mov	r5, r0
 8008a06:	eb12 0804 	adds.w	r8, r2, r4
 8008a0a:	eb43 0905 	adc.w	r9, r3, r5
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	469a      	mov	sl, r3
 8008a16:	4693      	mov	fp, r2
 8008a18:	4652      	mov	r2, sl
 8008a1a:	465b      	mov	r3, fp
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	4649      	mov	r1, r9
 8008a20:	f7f8 f93a 	bl	8000c98 <__aeabi_uldivmod>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4613      	mov	r3, r2
 8008a2a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a32:	d308      	bcc.n	8008a46 <UART_SetConfig+0x3d2>
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a3a:	d204      	bcs.n	8008a46 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	60da      	str	r2, [r3, #12]
 8008a44:	e0c8      	b.n	8008bd8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a4c:	e0c4      	b.n	8008bd8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a56:	d167      	bne.n	8008b28 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008a58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d828      	bhi.n	8008ab2 <UART_SetConfig+0x43e>
 8008a60:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <UART_SetConfig+0x3f4>)
 8008a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a66:	bf00      	nop
 8008a68:	08008a8d 	.word	0x08008a8d
 8008a6c:	08008a95 	.word	0x08008a95
 8008a70:	08008a9d 	.word	0x08008a9d
 8008a74:	08008ab3 	.word	0x08008ab3
 8008a78:	08008aa3 	.word	0x08008aa3
 8008a7c:	08008ab3 	.word	0x08008ab3
 8008a80:	08008ab3 	.word	0x08008ab3
 8008a84:	08008ab3 	.word	0x08008ab3
 8008a88:	08008aab 	.word	0x08008aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a8c:	f7ff f9fc 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 8008a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a92:	e014      	b.n	8008abe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a94:	f7ff fa0e 	bl	8007eb4 <HAL_RCC_GetPCLK2Freq>
 8008a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a9a:	e010      	b.n	8008abe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8008c08 <UART_SetConfig+0x594>)
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008aa0:	e00d      	b.n	8008abe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aa2:	f7ff f983 	bl	8007dac <HAL_RCC_GetSysClockFreq>
 8008aa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aa8:	e009      	b.n	8008abe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ab0:	e005      	b.n	8008abe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008abc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8089 	beq.w	8008bd8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aca:	4a4e      	ldr	r2, [pc, #312]	@ (8008c04 <UART_SetConfig+0x590>)
 8008acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ad8:	005a      	lsls	r2, r3, #1
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	085b      	lsrs	r3, r3, #1
 8008ae0:	441a      	add	r2, r3
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	2b0f      	cmp	r3, #15
 8008af0:	d916      	bls.n	8008b20 <UART_SetConfig+0x4ac>
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008af8:	d212      	bcs.n	8008b20 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	f023 030f 	bic.w	r3, r3, #15
 8008b02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	085b      	lsrs	r3, r3, #1
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	8bfb      	ldrh	r3, [r7, #30]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	8bfa      	ldrh	r2, [r7, #30]
 8008b1c:	60da      	str	r2, [r3, #12]
 8008b1e:	e05b      	b.n	8008bd8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b26:	e057      	b.n	8008bd8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d828      	bhi.n	8008b82 <UART_SetConfig+0x50e>
 8008b30:	a201      	add	r2, pc, #4	@ (adr r2, 8008b38 <UART_SetConfig+0x4c4>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b5d 	.word	0x08008b5d
 8008b3c:	08008b65 	.word	0x08008b65
 8008b40:	08008b6d 	.word	0x08008b6d
 8008b44:	08008b83 	.word	0x08008b83
 8008b48:	08008b73 	.word	0x08008b73
 8008b4c:	08008b83 	.word	0x08008b83
 8008b50:	08008b83 	.word	0x08008b83
 8008b54:	08008b83 	.word	0x08008b83
 8008b58:	08008b7b 	.word	0x08008b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b5c:	f7ff f994 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 8008b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b62:	e014      	b.n	8008b8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b64:	f7ff f9a6 	bl	8007eb4 <HAL_RCC_GetPCLK2Freq>
 8008b68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b6a:	e010      	b.n	8008b8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b6c:	4b26      	ldr	r3, [pc, #152]	@ (8008c08 <UART_SetConfig+0x594>)
 8008b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b70:	e00d      	b.n	8008b8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b72:	f7ff f91b 	bl	8007dac <HAL_RCC_GetSysClockFreq>
 8008b76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b78:	e009      	b.n	8008b8e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b80:	e005      	b.n	8008b8e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b8c:	bf00      	nop
    }

    if (pclk != 0U)
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d021      	beq.n	8008bd8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b98:	4a1a      	ldr	r2, [pc, #104]	@ (8008c04 <UART_SetConfig+0x590>)
 8008b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	085b      	lsrs	r3, r3, #1
 8008bac:	441a      	add	r2, r3
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bb8:	6a3b      	ldr	r3, [r7, #32]
 8008bba:	2b0f      	cmp	r3, #15
 8008bbc:	d909      	bls.n	8008bd2 <UART_SetConfig+0x55e>
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bc4:	d205      	bcs.n	8008bd2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60da      	str	r2, [r3, #12]
 8008bd0:	e002      	b.n	8008bd8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008bf4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3730      	adds	r7, #48	@ 0x30
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c02:	bf00      	nop
 8008c04:	0800d4c4 	.word	0x0800d4c4
 8008c08:	00f42400 	.word	0x00f42400

08008c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	f003 0308 	and.w	r3, r3, #8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00a      	beq.n	8008c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00a      	beq.n	8008c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01a      	beq.n	8008d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d0a:	d10a      	bne.n	8008d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
  }
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b098      	sub	sp, #96	@ 0x60
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d60:	f7fc fc6a 	bl	8005638 <HAL_GetTick>
 8008d64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0308 	and.w	r3, r3, #8
 8008d70:	2b08      	cmp	r3, #8
 8008d72:	d12f      	bne.n	8008dd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f88e 	bl	8008ea4 <UART_WaitOnFlagUntilTimeout>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d022      	beq.n	8008dd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e6      	bne.n	8008d8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e063      	b.n	8008e9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d149      	bne.n	8008e76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008de2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dea:	2200      	movs	r2, #0
 8008dec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f857 	bl	8008ea4 <UART_WaitOnFlagUntilTimeout>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d03c      	beq.n	8008e76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	623b      	str	r3, [r7, #32]
   return(result);
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e6      	bne.n	8008dfc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e4e:	61fa      	str	r2, [r7, #28]
 8008e50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	69b9      	ldr	r1, [r7, #24]
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e5      	bne.n	8008e2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e012      	b.n	8008e9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3758      	adds	r7, #88	@ 0x58
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eb4:	e04f      	b.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d04b      	beq.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ebe:	f7fc fbbb 	bl	8005638 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	69ba      	ldr	r2, [r7, #24]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d302      	bcc.n	8008ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e04e      	b.n	8008f76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0304 	and.w	r3, r3, #4
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d037      	beq.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b80      	cmp	r3, #128	@ 0x80
 8008eea:	d034      	beq.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b40      	cmp	r3, #64	@ 0x40
 8008ef0:	d031      	beq.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	f003 0308 	and.w	r3, r3, #8
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d110      	bne.n	8008f22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2208      	movs	r2, #8
 8008f06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f920 	bl	800914e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2208      	movs	r2, #8
 8008f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e029      	b.n	8008f76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f30:	d111      	bne.n	8008f56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 f906 	bl	800914e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e00f      	b.n	8008f76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69da      	ldr	r2, [r3, #28]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	4013      	ands	r3, r2
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	bf0c      	ite	eq
 8008f66:	2301      	moveq	r3, #1
 8008f68:	2300      	movne	r3, #0
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d0a0      	beq.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b096      	sub	sp, #88	@ 0x58
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	88fa      	ldrh	r2, [r7, #6]
 8008f98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2222      	movs	r2, #34	@ 0x22
 8008fa8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d02d      	beq.n	8009012 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fbc:	4a40      	ldr	r2, [pc, #256]	@ (80090c0 <UART_Start_Receive_DMA+0x140>)
 8008fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80090c4 <UART_Start_Receive_DMA+0x144>)
 8008fc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fd0:	4a3d      	ldr	r2, [pc, #244]	@ (80090c8 <UART_Start_Receive_DMA+0x148>)
 8008fd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fda:	2200      	movs	r2, #0
 8008fdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3324      	adds	r3, #36	@ 0x24
 8008fea:	4619      	mov	r1, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	88fb      	ldrh	r3, [r7, #6]
 8008ff4:	f7fc fd9c 	bl	8005b30 <HAL_DMA_Start_IT>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d009      	beq.n	8009012 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2210      	movs	r2, #16
 8009002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2220      	movs	r2, #32
 800900a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e051      	b.n	80090b6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d018      	beq.n	800904c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800902e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800903a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800903e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e6      	bne.n	800901a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	653b      	str	r3, [r7, #80]	@ 0x50
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800906c:	637a      	str	r2, [r7, #52]	@ 0x34
 800906e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009072:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800907a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e5      	bne.n	800904c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	613b      	str	r3, [r7, #16]
   return(result);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090a0:	623a      	str	r2, [r7, #32]
 80090a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	69f9      	ldr	r1, [r7, #28]
 80090a6:	6a3a      	ldr	r2, [r7, #32]
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e5      	bne.n	8009080 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3758      	adds	r7, #88	@ 0x58
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	0800921b 	.word	0x0800921b
 80090c4:	08009347 	.word	0x08009347
 80090c8:	08009385 	.word	0x08009385

080090cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b08f      	sub	sp, #60	@ 0x3c
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80090e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e6      	bne.n	80090d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	60bb      	str	r3, [r7, #8]
   return(result);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800911c:	633b      	str	r3, [r7, #48]	@ 0x30
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009126:	61ba      	str	r2, [r7, #24]
 8009128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6979      	ldr	r1, [r7, #20]
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	613b      	str	r3, [r7, #16]
   return(result);
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e5      	bne.n	8009106 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2220      	movs	r2, #32
 800913e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009142:	bf00      	nop
 8009144:	373c      	adds	r7, #60	@ 0x3c
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800914e:	b480      	push	{r7}
 8009150:	b095      	sub	sp, #84	@ 0x54
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800916a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009174:	643b      	str	r3, [r7, #64]	@ 0x40
 8009176:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009178:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800917a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800917c:	e841 2300 	strex	r3, r2, [r1]
 8009180:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e6      	bne.n	8009156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	61fb      	str	r3, [r7, #28]
   return(result);
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3308      	adds	r3, #8
 80091aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e3      	bne.n	8009188 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d118      	bne.n	80091fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f023 0310 	bic.w	r3, r3, #16
 80091dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091e6:	61bb      	str	r3, [r7, #24]
 80091e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6979      	ldr	r1, [r7, #20]
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	613b      	str	r3, [r7, #16]
   return(result);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e6      	bne.n	80091c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800920e:	bf00      	nop
 8009210:	3754      	adds	r7, #84	@ 0x54
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b09c      	sub	sp, #112	@ 0x70
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009226:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d171      	bne.n	800931a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009238:	2200      	movs	r2, #0
 800923a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800923e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800924c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800924e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009252:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800925c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800925e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800926a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e6      	bne.n	800923e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3308      	adds	r3, #8
 8009276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	667b      	str	r3, [r7, #100]	@ 0x64
 8009288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3308      	adds	r3, #8
 800928e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009290:	647a      	str	r2, [r7, #68]	@ 0x44
 8009292:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800929e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e5      	bne.n	8009270 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3308      	adds	r3, #8
 80092aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	e853 3f00 	ldrex	r3, [r3]
 80092b2:	623b      	str	r3, [r7, #32]
   return(result);
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80092bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3308      	adds	r3, #8
 80092c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80092c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e5      	bne.n	80092a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092da:	2220      	movs	r2, #32
 80092dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d118      	bne.n	800931a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 0310 	bic.w	r3, r3, #16
 80092fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	69b9      	ldr	r1, [r7, #24]
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	617b      	str	r3, [r7, #20]
   return(result);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800931a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800931c:	2200      	movs	r2, #0
 800931e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009324:	2b01      	cmp	r3, #1
 8009326:	d107      	bne.n	8009338 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800932a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800932e:	4619      	mov	r1, r3
 8009330:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009332:	f7ff f993 	bl	800865c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009336:	e002      	b.n	800933e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009338:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800933a:	f7ff f971 	bl	8008620 <HAL_UART_RxCpltCallback>
}
 800933e:	bf00      	nop
 8009340:	3770      	adds	r7, #112	@ 0x70
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009352:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2201      	movs	r2, #1
 8009358:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800935e:	2b01      	cmp	r3, #1
 8009360:	d109      	bne.n	8009376 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009368:	085b      	lsrs	r3, r3, #1
 800936a:	b29b      	uxth	r3, r3
 800936c:	4619      	mov	r1, r3
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff f974 	bl	800865c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009374:	e002      	b.n	800937c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff f95c 	bl	8008634 <HAL_UART_RxHalfCpltCallback>
}
 800937c:	bf00      	nop
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009390:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009398:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093a0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ac:	2b80      	cmp	r3, #128	@ 0x80
 80093ae:	d109      	bne.n	80093c4 <UART_DMAError+0x40>
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2b21      	cmp	r3, #33	@ 0x21
 80093b4:	d106      	bne.n	80093c4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80093be:	6978      	ldr	r0, [r7, #20]
 80093c0:	f7ff fe84 	bl	80090cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ce:	2b40      	cmp	r3, #64	@ 0x40
 80093d0:	d109      	bne.n	80093e6 <UART_DMAError+0x62>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b22      	cmp	r3, #34	@ 0x22
 80093d6:	d106      	bne.n	80093e6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80093e0:	6978      	ldr	r0, [r7, #20]
 80093e2:	f7ff feb4 	bl	800914e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ec:	f043 0210 	orr.w	r2, r3, #16
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093f6:	6978      	ldr	r0, [r7, #20]
 80093f8:	f7ff f926 	bl	8008648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093fc:	bf00      	nop
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e058      	b.n	80094ce <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7fb fde6 	bl	8005000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2224      	movs	r2, #36	@ 0x24
 8009438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 0201 	bic.w	r2, r2, #1
 800944a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	2b00      	cmp	r3, #0
 8009452:	d002      	beq.n	800945a <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7ff fbd9 	bl	8008c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff f90a 	bl	8008674 <UART_SetConfig>
 8009460:	4603      	mov	r3, r0
 8009462:	2b01      	cmp	r3, #1
 8009464:	d101      	bne.n	800946a <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e031      	b.n	80094ce <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009478:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	430a      	orrs	r2, r1
 800948c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	055b      	lsls	r3, r3, #21
 8009492:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	041b      	lsls	r3, r3, #16
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	4313      	orrs	r3, r2
 800949c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80094a8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	6979      	ldr	r1, [r7, #20]
 80094b2:	430b      	orrs	r3, r1
 80094b4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f042 0201 	orr.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff fc42 	bl	8008d50 <UART_CheckIdleState>
 80094cc:	4603      	mov	r3, r0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d101      	bne.n	80094ec <HAL_UARTEx_DisableFifoMode+0x16>
 80094e8:	2302      	movs	r3, #2
 80094ea:	e027      	b.n	800953c <HAL_UARTEx_DisableFifoMode+0x66>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2224      	movs	r2, #36	@ 0x24
 80094f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f022 0201 	bic.w	r2, r2, #1
 8009512:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800951a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009558:	2b01      	cmp	r3, #1
 800955a:	d101      	bne.n	8009560 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800955c:	2302      	movs	r3, #2
 800955e:	e02d      	b.n	80095bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2224      	movs	r2, #36	@ 0x24
 800956c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0201 	bic.w	r2, r2, #1
 8009586:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	683a      	ldr	r2, [r7, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f84f 	bl	8009640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095d8:	2302      	movs	r3, #2
 80095da:	e02d      	b.n	8009638 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2224      	movs	r2, #36	@ 0x24
 80095e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 0201 	bic.w	r2, r2, #1
 8009602:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f811 	bl	8009640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964c:	2b00      	cmp	r3, #0
 800964e:	d108      	bne.n	8009662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009660:	e031      	b.n	80096c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009662:	2308      	movs	r3, #8
 8009664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009666:	2308      	movs	r3, #8
 8009668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	0e5b      	lsrs	r3, r3, #25
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	0f5b      	lsrs	r3, r3, #29
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	7b3a      	ldrb	r2, [r7, #12]
 800968e:	4911      	ldr	r1, [pc, #68]	@ (80096d4 <UARTEx_SetNbDataToProcess+0x94>)
 8009690:	5c8a      	ldrb	r2, [r1, r2]
 8009692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009696:	7b3a      	ldrb	r2, [r7, #12]
 8009698:	490f      	ldr	r1, [pc, #60]	@ (80096d8 <UARTEx_SetNbDataToProcess+0x98>)
 800969a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800969c:	fb93 f3f2 	sdiv	r3, r3, r2
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	7b7a      	ldrb	r2, [r7, #13]
 80096ac:	4909      	ldr	r1, [pc, #36]	@ (80096d4 <UARTEx_SetNbDataToProcess+0x94>)
 80096ae:	5c8a      	ldrb	r2, [r1, r2]
 80096b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096b4:	7b7a      	ldrb	r2, [r7, #13]
 80096b6:	4908      	ldr	r1, [pc, #32]	@ (80096d8 <UARTEx_SetNbDataToProcess+0x98>)
 80096b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	0800d4dc 	.word	0x0800d4dc
 80096d8:	0800d4e4 	.word	0x0800d4e4

080096dc <sulp>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	4604      	mov	r4, r0
 80096e0:	460d      	mov	r5, r1
 80096e2:	ec45 4b10 	vmov	d0, r4, r5
 80096e6:	4616      	mov	r6, r2
 80096e8:	f002 f8e0 	bl	800b8ac <__ulp>
 80096ec:	ec51 0b10 	vmov	r0, r1, d0
 80096f0:	b17e      	cbz	r6, 8009712 <sulp+0x36>
 80096f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80096f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	dd09      	ble.n	8009712 <sulp+0x36>
 80096fe:	051b      	lsls	r3, r3, #20
 8009700:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009704:	2400      	movs	r4, #0
 8009706:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800970a:	4622      	mov	r2, r4
 800970c:	462b      	mov	r3, r5
 800970e:	f7f6 ffa3 	bl	8000658 <__aeabi_dmul>
 8009712:	ec41 0b10 	vmov	d0, r0, r1
 8009716:	bd70      	pop	{r4, r5, r6, pc}

08009718 <_strtod_l>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	b09f      	sub	sp, #124	@ 0x7c
 800971e:	460c      	mov	r4, r1
 8009720:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009722:	2200      	movs	r2, #0
 8009724:	921a      	str	r2, [sp, #104]	@ 0x68
 8009726:	9005      	str	r0, [sp, #20]
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	f04f 0b00 	mov.w	fp, #0
 8009730:	460a      	mov	r2, r1
 8009732:	9219      	str	r2, [sp, #100]	@ 0x64
 8009734:	7811      	ldrb	r1, [r2, #0]
 8009736:	292b      	cmp	r1, #43	@ 0x2b
 8009738:	d04a      	beq.n	80097d0 <_strtod_l+0xb8>
 800973a:	d838      	bhi.n	80097ae <_strtod_l+0x96>
 800973c:	290d      	cmp	r1, #13
 800973e:	d832      	bhi.n	80097a6 <_strtod_l+0x8e>
 8009740:	2908      	cmp	r1, #8
 8009742:	d832      	bhi.n	80097aa <_strtod_l+0x92>
 8009744:	2900      	cmp	r1, #0
 8009746:	d03b      	beq.n	80097c0 <_strtod_l+0xa8>
 8009748:	2200      	movs	r2, #0
 800974a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800974c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800974e:	782a      	ldrb	r2, [r5, #0]
 8009750:	2a30      	cmp	r2, #48	@ 0x30
 8009752:	f040 80b3 	bne.w	80098bc <_strtod_l+0x1a4>
 8009756:	786a      	ldrb	r2, [r5, #1]
 8009758:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800975c:	2a58      	cmp	r2, #88	@ 0x58
 800975e:	d16e      	bne.n	800983e <_strtod_l+0x126>
 8009760:	9302      	str	r3, [sp, #8]
 8009762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	ab1a      	add	r3, sp, #104	@ 0x68
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	4a8e      	ldr	r2, [pc, #568]	@ (80099a4 <_strtod_l+0x28c>)
 800976c:	9805      	ldr	r0, [sp, #20]
 800976e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009770:	a919      	add	r1, sp, #100	@ 0x64
 8009772:	f001 f995 	bl	800aaa0 <__gethex>
 8009776:	f010 060f 	ands.w	r6, r0, #15
 800977a:	4604      	mov	r4, r0
 800977c:	d005      	beq.n	800978a <_strtod_l+0x72>
 800977e:	2e06      	cmp	r6, #6
 8009780:	d128      	bne.n	80097d4 <_strtod_l+0xbc>
 8009782:	3501      	adds	r5, #1
 8009784:	2300      	movs	r3, #0
 8009786:	9519      	str	r5, [sp, #100]	@ 0x64
 8009788:	930b      	str	r3, [sp, #44]	@ 0x2c
 800978a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800978c:	2b00      	cmp	r3, #0
 800978e:	f040 858e 	bne.w	800a2ae <_strtod_l+0xb96>
 8009792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009794:	b1cb      	cbz	r3, 80097ca <_strtod_l+0xb2>
 8009796:	4652      	mov	r2, sl
 8009798:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800979c:	ec43 2b10 	vmov	d0, r2, r3
 80097a0:	b01f      	add	sp, #124	@ 0x7c
 80097a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a6:	2920      	cmp	r1, #32
 80097a8:	d1ce      	bne.n	8009748 <_strtod_l+0x30>
 80097aa:	3201      	adds	r2, #1
 80097ac:	e7c1      	b.n	8009732 <_strtod_l+0x1a>
 80097ae:	292d      	cmp	r1, #45	@ 0x2d
 80097b0:	d1ca      	bne.n	8009748 <_strtod_l+0x30>
 80097b2:	2101      	movs	r1, #1
 80097b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80097b6:	1c51      	adds	r1, r2, #1
 80097b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80097ba:	7852      	ldrb	r2, [r2, #1]
 80097bc:	2a00      	cmp	r2, #0
 80097be:	d1c5      	bne.n	800974c <_strtod_l+0x34>
 80097c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80097c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f040 8570 	bne.w	800a2aa <_strtod_l+0xb92>
 80097ca:	4652      	mov	r2, sl
 80097cc:	465b      	mov	r3, fp
 80097ce:	e7e5      	b.n	800979c <_strtod_l+0x84>
 80097d0:	2100      	movs	r1, #0
 80097d2:	e7ef      	b.n	80097b4 <_strtod_l+0x9c>
 80097d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80097d6:	b13a      	cbz	r2, 80097e8 <_strtod_l+0xd0>
 80097d8:	2135      	movs	r1, #53	@ 0x35
 80097da:	a81c      	add	r0, sp, #112	@ 0x70
 80097dc:	f002 f960 	bl	800baa0 <__copybits>
 80097e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097e2:	9805      	ldr	r0, [sp, #20]
 80097e4:	f001 fd2e 	bl	800b244 <_Bfree>
 80097e8:	3e01      	subs	r6, #1
 80097ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80097ec:	2e04      	cmp	r6, #4
 80097ee:	d806      	bhi.n	80097fe <_strtod_l+0xe6>
 80097f0:	e8df f006 	tbb	[pc, r6]
 80097f4:	201d0314 	.word	0x201d0314
 80097f8:	14          	.byte	0x14
 80097f9:	00          	.byte	0x00
 80097fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80097fe:	05e1      	lsls	r1, r4, #23
 8009800:	bf48      	it	mi
 8009802:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009806:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800980a:	0d1b      	lsrs	r3, r3, #20
 800980c:	051b      	lsls	r3, r3, #20
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1bb      	bne.n	800978a <_strtod_l+0x72>
 8009812:	f001 f83f 	bl	800a894 <__errno>
 8009816:	2322      	movs	r3, #34	@ 0x22
 8009818:	6003      	str	r3, [r0, #0]
 800981a:	e7b6      	b.n	800978a <_strtod_l+0x72>
 800981c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009820:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009824:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009828:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800982c:	e7e7      	b.n	80097fe <_strtod_l+0xe6>
 800982e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80099ac <_strtod_l+0x294>
 8009832:	e7e4      	b.n	80097fe <_strtod_l+0xe6>
 8009834:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009838:	f04f 3aff 	mov.w	sl, #4294967295
 800983c:	e7df      	b.n	80097fe <_strtod_l+0xe6>
 800983e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	9219      	str	r2, [sp, #100]	@ 0x64
 8009844:	785b      	ldrb	r3, [r3, #1]
 8009846:	2b30      	cmp	r3, #48	@ 0x30
 8009848:	d0f9      	beq.n	800983e <_strtod_l+0x126>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d09d      	beq.n	800978a <_strtod_l+0x72>
 800984e:	2301      	movs	r3, #1
 8009850:	9309      	str	r3, [sp, #36]	@ 0x24
 8009852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009854:	930c      	str	r3, [sp, #48]	@ 0x30
 8009856:	2300      	movs	r3, #0
 8009858:	9308      	str	r3, [sp, #32]
 800985a:	930a      	str	r3, [sp, #40]	@ 0x28
 800985c:	461f      	mov	r7, r3
 800985e:	220a      	movs	r2, #10
 8009860:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009862:	7805      	ldrb	r5, [r0, #0]
 8009864:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009868:	b2d9      	uxtb	r1, r3
 800986a:	2909      	cmp	r1, #9
 800986c:	d928      	bls.n	80098c0 <_strtod_l+0x1a8>
 800986e:	494e      	ldr	r1, [pc, #312]	@ (80099a8 <_strtod_l+0x290>)
 8009870:	2201      	movs	r2, #1
 8009872:	f000 ff8b 	bl	800a78c <strncmp>
 8009876:	2800      	cmp	r0, #0
 8009878:	d032      	beq.n	80098e0 <_strtod_l+0x1c8>
 800987a:	2000      	movs	r0, #0
 800987c:	462a      	mov	r2, r5
 800987e:	4681      	mov	r9, r0
 8009880:	463d      	mov	r5, r7
 8009882:	4603      	mov	r3, r0
 8009884:	2a65      	cmp	r2, #101	@ 0x65
 8009886:	d001      	beq.n	800988c <_strtod_l+0x174>
 8009888:	2a45      	cmp	r2, #69	@ 0x45
 800988a:	d114      	bne.n	80098b6 <_strtod_l+0x19e>
 800988c:	b91d      	cbnz	r5, 8009896 <_strtod_l+0x17e>
 800988e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009890:	4302      	orrs	r2, r0
 8009892:	d095      	beq.n	80097c0 <_strtod_l+0xa8>
 8009894:	2500      	movs	r5, #0
 8009896:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009898:	1c62      	adds	r2, r4, #1
 800989a:	9219      	str	r2, [sp, #100]	@ 0x64
 800989c:	7862      	ldrb	r2, [r4, #1]
 800989e:	2a2b      	cmp	r2, #43	@ 0x2b
 80098a0:	d077      	beq.n	8009992 <_strtod_l+0x27a>
 80098a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80098a4:	d07b      	beq.n	800999e <_strtod_l+0x286>
 80098a6:	f04f 0c00 	mov.w	ip, #0
 80098aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80098ae:	2909      	cmp	r1, #9
 80098b0:	f240 8082 	bls.w	80099b8 <_strtod_l+0x2a0>
 80098b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80098b6:	f04f 0800 	mov.w	r8, #0
 80098ba:	e0a2      	b.n	8009a02 <_strtod_l+0x2ea>
 80098bc:	2300      	movs	r3, #0
 80098be:	e7c7      	b.n	8009850 <_strtod_l+0x138>
 80098c0:	2f08      	cmp	r7, #8
 80098c2:	bfd5      	itete	le
 80098c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80098c6:	9908      	ldrgt	r1, [sp, #32]
 80098c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80098cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80098d0:	f100 0001 	add.w	r0, r0, #1
 80098d4:	bfd4      	ite	le
 80098d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80098d8:	9308      	strgt	r3, [sp, #32]
 80098da:	3701      	adds	r7, #1
 80098dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80098de:	e7bf      	b.n	8009860 <_strtod_l+0x148>
 80098e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098e2:	1c5a      	adds	r2, r3, #1
 80098e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80098e6:	785a      	ldrb	r2, [r3, #1]
 80098e8:	b37f      	cbz	r7, 800994a <_strtod_l+0x232>
 80098ea:	4681      	mov	r9, r0
 80098ec:	463d      	mov	r5, r7
 80098ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80098f2:	2b09      	cmp	r3, #9
 80098f4:	d912      	bls.n	800991c <_strtod_l+0x204>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e7c4      	b.n	8009884 <_strtod_l+0x16c>
 80098fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009900:	785a      	ldrb	r2, [r3, #1]
 8009902:	3001      	adds	r0, #1
 8009904:	2a30      	cmp	r2, #48	@ 0x30
 8009906:	d0f8      	beq.n	80098fa <_strtod_l+0x1e2>
 8009908:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800990c:	2b08      	cmp	r3, #8
 800990e:	f200 84d3 	bhi.w	800a2b8 <_strtod_l+0xba0>
 8009912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009914:	930c      	str	r3, [sp, #48]	@ 0x30
 8009916:	4681      	mov	r9, r0
 8009918:	2000      	movs	r0, #0
 800991a:	4605      	mov	r5, r0
 800991c:	3a30      	subs	r2, #48	@ 0x30
 800991e:	f100 0301 	add.w	r3, r0, #1
 8009922:	d02a      	beq.n	800997a <_strtod_l+0x262>
 8009924:	4499      	add	r9, r3
 8009926:	eb00 0c05 	add.w	ip, r0, r5
 800992a:	462b      	mov	r3, r5
 800992c:	210a      	movs	r1, #10
 800992e:	4563      	cmp	r3, ip
 8009930:	d10d      	bne.n	800994e <_strtod_l+0x236>
 8009932:	1c69      	adds	r1, r5, #1
 8009934:	4401      	add	r1, r0
 8009936:	4428      	add	r0, r5
 8009938:	2808      	cmp	r0, #8
 800993a:	dc16      	bgt.n	800996a <_strtod_l+0x252>
 800993c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800993e:	230a      	movs	r3, #10
 8009940:	fb03 2300 	mla	r3, r3, r0, r2
 8009944:	930a      	str	r3, [sp, #40]	@ 0x28
 8009946:	2300      	movs	r3, #0
 8009948:	e018      	b.n	800997c <_strtod_l+0x264>
 800994a:	4638      	mov	r0, r7
 800994c:	e7da      	b.n	8009904 <_strtod_l+0x1ec>
 800994e:	2b08      	cmp	r3, #8
 8009950:	f103 0301 	add.w	r3, r3, #1
 8009954:	dc03      	bgt.n	800995e <_strtod_l+0x246>
 8009956:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009958:	434e      	muls	r6, r1
 800995a:	960a      	str	r6, [sp, #40]	@ 0x28
 800995c:	e7e7      	b.n	800992e <_strtod_l+0x216>
 800995e:	2b10      	cmp	r3, #16
 8009960:	bfde      	ittt	le
 8009962:	9e08      	ldrle	r6, [sp, #32]
 8009964:	434e      	mulle	r6, r1
 8009966:	9608      	strle	r6, [sp, #32]
 8009968:	e7e1      	b.n	800992e <_strtod_l+0x216>
 800996a:	280f      	cmp	r0, #15
 800996c:	dceb      	bgt.n	8009946 <_strtod_l+0x22e>
 800996e:	9808      	ldr	r0, [sp, #32]
 8009970:	230a      	movs	r3, #10
 8009972:	fb03 2300 	mla	r3, r3, r0, r2
 8009976:	9308      	str	r3, [sp, #32]
 8009978:	e7e5      	b.n	8009946 <_strtod_l+0x22e>
 800997a:	4629      	mov	r1, r5
 800997c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800997e:	1c50      	adds	r0, r2, #1
 8009980:	9019      	str	r0, [sp, #100]	@ 0x64
 8009982:	7852      	ldrb	r2, [r2, #1]
 8009984:	4618      	mov	r0, r3
 8009986:	460d      	mov	r5, r1
 8009988:	e7b1      	b.n	80098ee <_strtod_l+0x1d6>
 800998a:	f04f 0900 	mov.w	r9, #0
 800998e:	2301      	movs	r3, #1
 8009990:	e77d      	b.n	800988e <_strtod_l+0x176>
 8009992:	f04f 0c00 	mov.w	ip, #0
 8009996:	1ca2      	adds	r2, r4, #2
 8009998:	9219      	str	r2, [sp, #100]	@ 0x64
 800999a:	78a2      	ldrb	r2, [r4, #2]
 800999c:	e785      	b.n	80098aa <_strtod_l+0x192>
 800999e:	f04f 0c01 	mov.w	ip, #1
 80099a2:	e7f8      	b.n	8009996 <_strtod_l+0x27e>
 80099a4:	0800d510 	.word	0x0800d510
 80099a8:	0800d4ec 	.word	0x0800d4ec
 80099ac:	7ff00000 	.word	0x7ff00000
 80099b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099b2:	1c51      	adds	r1, r2, #1
 80099b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80099b6:	7852      	ldrb	r2, [r2, #1]
 80099b8:	2a30      	cmp	r2, #48	@ 0x30
 80099ba:	d0f9      	beq.n	80099b0 <_strtod_l+0x298>
 80099bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80099c0:	2908      	cmp	r1, #8
 80099c2:	f63f af78 	bhi.w	80098b6 <_strtod_l+0x19e>
 80099c6:	3a30      	subs	r2, #48	@ 0x30
 80099c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80099ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80099ce:	f04f 080a 	mov.w	r8, #10
 80099d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80099d4:	1c56      	adds	r6, r2, #1
 80099d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80099d8:	7852      	ldrb	r2, [r2, #1]
 80099da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80099de:	f1be 0f09 	cmp.w	lr, #9
 80099e2:	d939      	bls.n	8009a58 <_strtod_l+0x340>
 80099e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80099e6:	1a76      	subs	r6, r6, r1
 80099e8:	2e08      	cmp	r6, #8
 80099ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80099ee:	dc03      	bgt.n	80099f8 <_strtod_l+0x2e0>
 80099f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80099f2:	4588      	cmp	r8, r1
 80099f4:	bfa8      	it	ge
 80099f6:	4688      	movge	r8, r1
 80099f8:	f1bc 0f00 	cmp.w	ip, #0
 80099fc:	d001      	beq.n	8009a02 <_strtod_l+0x2ea>
 80099fe:	f1c8 0800 	rsb	r8, r8, #0
 8009a02:	2d00      	cmp	r5, #0
 8009a04:	d14e      	bne.n	8009aa4 <_strtod_l+0x38c>
 8009a06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a08:	4308      	orrs	r0, r1
 8009a0a:	f47f aebe 	bne.w	800978a <_strtod_l+0x72>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f47f aed6 	bne.w	80097c0 <_strtod_l+0xa8>
 8009a14:	2a69      	cmp	r2, #105	@ 0x69
 8009a16:	d028      	beq.n	8009a6a <_strtod_l+0x352>
 8009a18:	dc25      	bgt.n	8009a66 <_strtod_l+0x34e>
 8009a1a:	2a49      	cmp	r2, #73	@ 0x49
 8009a1c:	d025      	beq.n	8009a6a <_strtod_l+0x352>
 8009a1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009a20:	f47f aece 	bne.w	80097c0 <_strtod_l+0xa8>
 8009a24:	499b      	ldr	r1, [pc, #620]	@ (8009c94 <_strtod_l+0x57c>)
 8009a26:	a819      	add	r0, sp, #100	@ 0x64
 8009a28:	f001 fa5c 	bl	800aee4 <__match>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	f43f aec7 	beq.w	80097c0 <_strtod_l+0xa8>
 8009a32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b28      	cmp	r3, #40	@ 0x28
 8009a38:	d12e      	bne.n	8009a98 <_strtod_l+0x380>
 8009a3a:	4997      	ldr	r1, [pc, #604]	@ (8009c98 <_strtod_l+0x580>)
 8009a3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a3e:	a819      	add	r0, sp, #100	@ 0x64
 8009a40:	f001 fa64 	bl	800af0c <__hexnan>
 8009a44:	2805      	cmp	r0, #5
 8009a46:	d127      	bne.n	8009a98 <_strtod_l+0x380>
 8009a48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009a4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009a52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009a56:	e698      	b.n	800978a <_strtod_l+0x72>
 8009a58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a5a:	fb08 2101 	mla	r1, r8, r1, r2
 8009a5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009a62:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a64:	e7b5      	b.n	80099d2 <_strtod_l+0x2ba>
 8009a66:	2a6e      	cmp	r2, #110	@ 0x6e
 8009a68:	e7da      	b.n	8009a20 <_strtod_l+0x308>
 8009a6a:	498c      	ldr	r1, [pc, #560]	@ (8009c9c <_strtod_l+0x584>)
 8009a6c:	a819      	add	r0, sp, #100	@ 0x64
 8009a6e:	f001 fa39 	bl	800aee4 <__match>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	f43f aea4 	beq.w	80097c0 <_strtod_l+0xa8>
 8009a78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a7a:	4989      	ldr	r1, [pc, #548]	@ (8009ca0 <_strtod_l+0x588>)
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	a819      	add	r0, sp, #100	@ 0x64
 8009a80:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a82:	f001 fa2f 	bl	800aee4 <__match>
 8009a86:	b910      	cbnz	r0, 8009a8e <_strtod_l+0x376>
 8009a88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009cb0 <_strtod_l+0x598>
 8009a92:	f04f 0a00 	mov.w	sl, #0
 8009a96:	e678      	b.n	800978a <_strtod_l+0x72>
 8009a98:	4882      	ldr	r0, [pc, #520]	@ (8009ca4 <_strtod_l+0x58c>)
 8009a9a:	f000 ff41 	bl	800a920 <nan>
 8009a9e:	ec5b ab10 	vmov	sl, fp, d0
 8009aa2:	e672      	b.n	800978a <_strtod_l+0x72>
 8009aa4:	eba8 0309 	sub.w	r3, r8, r9
 8009aa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aac:	2f00      	cmp	r7, #0
 8009aae:	bf08      	it	eq
 8009ab0:	462f      	moveq	r7, r5
 8009ab2:	2d10      	cmp	r5, #16
 8009ab4:	462c      	mov	r4, r5
 8009ab6:	bfa8      	it	ge
 8009ab8:	2410      	movge	r4, #16
 8009aba:	f7f6 fd53 	bl	8000564 <__aeabi_ui2d>
 8009abe:	2d09      	cmp	r5, #9
 8009ac0:	4682      	mov	sl, r0
 8009ac2:	468b      	mov	fp, r1
 8009ac4:	dc13      	bgt.n	8009aee <_strtod_l+0x3d6>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f43f ae5e 	beq.w	800978a <_strtod_l+0x72>
 8009ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad0:	dd78      	ble.n	8009bc4 <_strtod_l+0x4ac>
 8009ad2:	2b16      	cmp	r3, #22
 8009ad4:	dc5f      	bgt.n	8009b96 <_strtod_l+0x47e>
 8009ad6:	4974      	ldr	r1, [pc, #464]	@ (8009ca8 <_strtod_l+0x590>)
 8009ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ae0:	4652      	mov	r2, sl
 8009ae2:	465b      	mov	r3, fp
 8009ae4:	f7f6 fdb8 	bl	8000658 <__aeabi_dmul>
 8009ae8:	4682      	mov	sl, r0
 8009aea:	468b      	mov	fp, r1
 8009aec:	e64d      	b.n	800978a <_strtod_l+0x72>
 8009aee:	4b6e      	ldr	r3, [pc, #440]	@ (8009ca8 <_strtod_l+0x590>)
 8009af0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009af4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009af8:	f7f6 fdae 	bl	8000658 <__aeabi_dmul>
 8009afc:	4682      	mov	sl, r0
 8009afe:	9808      	ldr	r0, [sp, #32]
 8009b00:	468b      	mov	fp, r1
 8009b02:	f7f6 fd2f 	bl	8000564 <__aeabi_ui2d>
 8009b06:	4602      	mov	r2, r0
 8009b08:	460b      	mov	r3, r1
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	f7f6 fbed 	bl	80002ec <__adddf3>
 8009b12:	2d0f      	cmp	r5, #15
 8009b14:	4682      	mov	sl, r0
 8009b16:	468b      	mov	fp, r1
 8009b18:	ddd5      	ble.n	8009ac6 <_strtod_l+0x3ae>
 8009b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b1c:	1b2c      	subs	r4, r5, r4
 8009b1e:	441c      	add	r4, r3
 8009b20:	2c00      	cmp	r4, #0
 8009b22:	f340 8096 	ble.w	8009c52 <_strtod_l+0x53a>
 8009b26:	f014 030f 	ands.w	r3, r4, #15
 8009b2a:	d00a      	beq.n	8009b42 <_strtod_l+0x42a>
 8009b2c:	495e      	ldr	r1, [pc, #376]	@ (8009ca8 <_strtod_l+0x590>)
 8009b2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b32:	4652      	mov	r2, sl
 8009b34:	465b      	mov	r3, fp
 8009b36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b3a:	f7f6 fd8d 	bl	8000658 <__aeabi_dmul>
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	f034 040f 	bics.w	r4, r4, #15
 8009b46:	d073      	beq.n	8009c30 <_strtod_l+0x518>
 8009b48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009b4c:	dd48      	ble.n	8009be0 <_strtod_l+0x4c8>
 8009b4e:	2400      	movs	r4, #0
 8009b50:	46a0      	mov	r8, r4
 8009b52:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b54:	46a1      	mov	r9, r4
 8009b56:	9a05      	ldr	r2, [sp, #20]
 8009b58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009cb0 <_strtod_l+0x598>
 8009b5c:	2322      	movs	r3, #34	@ 0x22
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	f04f 0a00 	mov.w	sl, #0
 8009b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f43f ae0f 	beq.w	800978a <_strtod_l+0x72>
 8009b6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b6e:	9805      	ldr	r0, [sp, #20]
 8009b70:	f001 fb68 	bl	800b244 <_Bfree>
 8009b74:	9805      	ldr	r0, [sp, #20]
 8009b76:	4649      	mov	r1, r9
 8009b78:	f001 fb64 	bl	800b244 <_Bfree>
 8009b7c:	9805      	ldr	r0, [sp, #20]
 8009b7e:	4641      	mov	r1, r8
 8009b80:	f001 fb60 	bl	800b244 <_Bfree>
 8009b84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b86:	9805      	ldr	r0, [sp, #20]
 8009b88:	f001 fb5c 	bl	800b244 <_Bfree>
 8009b8c:	9805      	ldr	r0, [sp, #20]
 8009b8e:	4621      	mov	r1, r4
 8009b90:	f001 fb58 	bl	800b244 <_Bfree>
 8009b94:	e5f9      	b.n	800978a <_strtod_l+0x72>
 8009b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	dbbc      	blt.n	8009b1a <_strtod_l+0x402>
 8009ba0:	4c41      	ldr	r4, [pc, #260]	@ (8009ca8 <_strtod_l+0x590>)
 8009ba2:	f1c5 050f 	rsb	r5, r5, #15
 8009ba6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009baa:	4652      	mov	r2, sl
 8009bac:	465b      	mov	r3, fp
 8009bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb2:	f7f6 fd51 	bl	8000658 <__aeabi_dmul>
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	1b5d      	subs	r5, r3, r5
 8009bba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009bbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009bc2:	e78f      	b.n	8009ae4 <_strtod_l+0x3cc>
 8009bc4:	3316      	adds	r3, #22
 8009bc6:	dba8      	blt.n	8009b1a <_strtod_l+0x402>
 8009bc8:	4b37      	ldr	r3, [pc, #220]	@ (8009ca8 <_strtod_l+0x590>)
 8009bca:	eba9 0808 	sub.w	r8, r9, r8
 8009bce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009bd2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4659      	mov	r1, fp
 8009bda:	f7f6 fe67 	bl	80008ac <__aeabi_ddiv>
 8009bde:	e783      	b.n	8009ae8 <_strtod_l+0x3d0>
 8009be0:	4b32      	ldr	r3, [pc, #200]	@ (8009cac <_strtod_l+0x594>)
 8009be2:	9308      	str	r3, [sp, #32]
 8009be4:	2300      	movs	r3, #0
 8009be6:	1124      	asrs	r4, r4, #4
 8009be8:	4650      	mov	r0, sl
 8009bea:	4659      	mov	r1, fp
 8009bec:	461e      	mov	r6, r3
 8009bee:	2c01      	cmp	r4, #1
 8009bf0:	dc21      	bgt.n	8009c36 <_strtod_l+0x51e>
 8009bf2:	b10b      	cbz	r3, 8009bf8 <_strtod_l+0x4e0>
 8009bf4:	4682      	mov	sl, r0
 8009bf6:	468b      	mov	fp, r1
 8009bf8:	492c      	ldr	r1, [pc, #176]	@ (8009cac <_strtod_l+0x594>)
 8009bfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009bfe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009c02:	4652      	mov	r2, sl
 8009c04:	465b      	mov	r3, fp
 8009c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c0a:	f7f6 fd25 	bl	8000658 <__aeabi_dmul>
 8009c0e:	4b28      	ldr	r3, [pc, #160]	@ (8009cb0 <_strtod_l+0x598>)
 8009c10:	460a      	mov	r2, r1
 8009c12:	400b      	ands	r3, r1
 8009c14:	4927      	ldr	r1, [pc, #156]	@ (8009cb4 <_strtod_l+0x59c>)
 8009c16:	428b      	cmp	r3, r1
 8009c18:	4682      	mov	sl, r0
 8009c1a:	d898      	bhi.n	8009b4e <_strtod_l+0x436>
 8009c1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009c20:	428b      	cmp	r3, r1
 8009c22:	bf86      	itte	hi
 8009c24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009cb8 <_strtod_l+0x5a0>
 8009c28:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009c30:	2300      	movs	r3, #0
 8009c32:	9308      	str	r3, [sp, #32]
 8009c34:	e07a      	b.n	8009d2c <_strtod_l+0x614>
 8009c36:	07e2      	lsls	r2, r4, #31
 8009c38:	d505      	bpl.n	8009c46 <_strtod_l+0x52e>
 8009c3a:	9b08      	ldr	r3, [sp, #32]
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fd0a 	bl	8000658 <__aeabi_dmul>
 8009c44:	2301      	movs	r3, #1
 8009c46:	9a08      	ldr	r2, [sp, #32]
 8009c48:	3208      	adds	r2, #8
 8009c4a:	3601      	adds	r6, #1
 8009c4c:	1064      	asrs	r4, r4, #1
 8009c4e:	9208      	str	r2, [sp, #32]
 8009c50:	e7cd      	b.n	8009bee <_strtod_l+0x4d6>
 8009c52:	d0ed      	beq.n	8009c30 <_strtod_l+0x518>
 8009c54:	4264      	negs	r4, r4
 8009c56:	f014 020f 	ands.w	r2, r4, #15
 8009c5a:	d00a      	beq.n	8009c72 <_strtod_l+0x55a>
 8009c5c:	4b12      	ldr	r3, [pc, #72]	@ (8009ca8 <_strtod_l+0x590>)
 8009c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c62:	4650      	mov	r0, sl
 8009c64:	4659      	mov	r1, fp
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	f7f6 fe1f 	bl	80008ac <__aeabi_ddiv>
 8009c6e:	4682      	mov	sl, r0
 8009c70:	468b      	mov	fp, r1
 8009c72:	1124      	asrs	r4, r4, #4
 8009c74:	d0dc      	beq.n	8009c30 <_strtod_l+0x518>
 8009c76:	2c1f      	cmp	r4, #31
 8009c78:	dd20      	ble.n	8009cbc <_strtod_l+0x5a4>
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	46a0      	mov	r8, r4
 8009c7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c80:	46a1      	mov	r9, r4
 8009c82:	9a05      	ldr	r2, [sp, #20]
 8009c84:	2322      	movs	r3, #34	@ 0x22
 8009c86:	f04f 0a00 	mov.w	sl, #0
 8009c8a:	f04f 0b00 	mov.w	fp, #0
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	e768      	b.n	8009b64 <_strtod_l+0x44c>
 8009c92:	bf00      	nop
 8009c94:	0800d4f7 	.word	0x0800d4f7
 8009c98:	0800d4fc 	.word	0x0800d4fc
 8009c9c:	0800d4ee 	.word	0x0800d4ee
 8009ca0:	0800d4f1 	.word	0x0800d4f1
 8009ca4:	0800d8a6 	.word	0x0800d8a6
 8009ca8:	0800d770 	.word	0x0800d770
 8009cac:	0800d748 	.word	0x0800d748
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	7ca00000 	.word	0x7ca00000
 8009cb8:	7fefffff 	.word	0x7fefffff
 8009cbc:	f014 0310 	ands.w	r3, r4, #16
 8009cc0:	bf18      	it	ne
 8009cc2:	236a      	movne	r3, #106	@ 0x6a
 8009cc4:	4ea9      	ldr	r6, [pc, #676]	@ (8009f6c <_strtod_l+0x854>)
 8009cc6:	9308      	str	r3, [sp, #32]
 8009cc8:	4650      	mov	r0, sl
 8009cca:	4659      	mov	r1, fp
 8009ccc:	2300      	movs	r3, #0
 8009cce:	07e2      	lsls	r2, r4, #31
 8009cd0:	d504      	bpl.n	8009cdc <_strtod_l+0x5c4>
 8009cd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cd6:	f7f6 fcbf 	bl	8000658 <__aeabi_dmul>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	1064      	asrs	r4, r4, #1
 8009cde:	f106 0608 	add.w	r6, r6, #8
 8009ce2:	d1f4      	bne.n	8009cce <_strtod_l+0x5b6>
 8009ce4:	b10b      	cbz	r3, 8009cea <_strtod_l+0x5d2>
 8009ce6:	4682      	mov	sl, r0
 8009ce8:	468b      	mov	fp, r1
 8009cea:	9b08      	ldr	r3, [sp, #32]
 8009cec:	b1b3      	cbz	r3, 8009d1c <_strtod_l+0x604>
 8009cee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009cf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	4659      	mov	r1, fp
 8009cfa:	dd0f      	ble.n	8009d1c <_strtod_l+0x604>
 8009cfc:	2b1f      	cmp	r3, #31
 8009cfe:	dd55      	ble.n	8009dac <_strtod_l+0x694>
 8009d00:	2b34      	cmp	r3, #52	@ 0x34
 8009d02:	bfde      	ittt	le
 8009d04:	f04f 33ff 	movle.w	r3, #4294967295
 8009d08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009d0c:	4093      	lslle	r3, r2
 8009d0e:	f04f 0a00 	mov.w	sl, #0
 8009d12:	bfcc      	ite	gt
 8009d14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009d18:	ea03 0b01 	andle.w	fp, r3, r1
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4650      	mov	r0, sl
 8009d22:	4659      	mov	r1, fp
 8009d24:	f7f6 ff00 	bl	8000b28 <__aeabi_dcmpeq>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d1a6      	bne.n	8009c7a <_strtod_l+0x562>
 8009d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009d32:	9805      	ldr	r0, [sp, #20]
 8009d34:	462b      	mov	r3, r5
 8009d36:	463a      	mov	r2, r7
 8009d38:	f001 faec 	bl	800b314 <__s2b>
 8009d3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f43f af05 	beq.w	8009b4e <_strtod_l+0x436>
 8009d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d46:	2a00      	cmp	r2, #0
 8009d48:	eba9 0308 	sub.w	r3, r9, r8
 8009d4c:	bfa8      	it	ge
 8009d4e:	2300      	movge	r3, #0
 8009d50:	9312      	str	r3, [sp, #72]	@ 0x48
 8009d52:	2400      	movs	r4, #0
 8009d54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d58:	9316      	str	r3, [sp, #88]	@ 0x58
 8009d5a:	46a0      	mov	r8, r4
 8009d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d5e:	9805      	ldr	r0, [sp, #20]
 8009d60:	6859      	ldr	r1, [r3, #4]
 8009d62:	f001 fa2f 	bl	800b1c4 <_Balloc>
 8009d66:	4681      	mov	r9, r0
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f43f aef4 	beq.w	8009b56 <_strtod_l+0x43e>
 8009d6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d70:	691a      	ldr	r2, [r3, #16]
 8009d72:	3202      	adds	r2, #2
 8009d74:	f103 010c 	add.w	r1, r3, #12
 8009d78:	0092      	lsls	r2, r2, #2
 8009d7a:	300c      	adds	r0, #12
 8009d7c:	f000 fdbf 	bl	800a8fe <memcpy>
 8009d80:	ec4b ab10 	vmov	d0, sl, fp
 8009d84:	9805      	ldr	r0, [sp, #20]
 8009d86:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d88:	a91b      	add	r1, sp, #108	@ 0x6c
 8009d8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009d8e:	f001 fdfd 	bl	800b98c <__d2b>
 8009d92:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f43f aede 	beq.w	8009b56 <_strtod_l+0x43e>
 8009d9a:	9805      	ldr	r0, [sp, #20]
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	f001 fb4f 	bl	800b440 <__i2b>
 8009da2:	4680      	mov	r8, r0
 8009da4:	b948      	cbnz	r0, 8009dba <_strtod_l+0x6a2>
 8009da6:	f04f 0800 	mov.w	r8, #0
 8009daa:	e6d4      	b.n	8009b56 <_strtod_l+0x43e>
 8009dac:	f04f 32ff 	mov.w	r2, #4294967295
 8009db0:	fa02 f303 	lsl.w	r3, r2, r3
 8009db4:	ea03 0a0a 	and.w	sl, r3, sl
 8009db8:	e7b0      	b.n	8009d1c <_strtod_l+0x604>
 8009dba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009dbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009dbe:	2d00      	cmp	r5, #0
 8009dc0:	bfab      	itete	ge
 8009dc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009dc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009dc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009dc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009dca:	bfac      	ite	ge
 8009dcc:	18ef      	addge	r7, r5, r3
 8009dce:	1b5e      	sublt	r6, r3, r5
 8009dd0:	9b08      	ldr	r3, [sp, #32]
 8009dd2:	1aed      	subs	r5, r5, r3
 8009dd4:	4415      	add	r5, r2
 8009dd6:	4b66      	ldr	r3, [pc, #408]	@ (8009f70 <_strtod_l+0x858>)
 8009dd8:	3d01      	subs	r5, #1
 8009dda:	429d      	cmp	r5, r3
 8009ddc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009de0:	da50      	bge.n	8009e84 <_strtod_l+0x76c>
 8009de2:	1b5b      	subs	r3, r3, r5
 8009de4:	2b1f      	cmp	r3, #31
 8009de6:	eba2 0203 	sub.w	r2, r2, r3
 8009dea:	f04f 0101 	mov.w	r1, #1
 8009dee:	dc3d      	bgt.n	8009e6c <_strtod_l+0x754>
 8009df0:	fa01 f303 	lsl.w	r3, r1, r3
 8009df4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009df6:	2300      	movs	r3, #0
 8009df8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009dfa:	18bd      	adds	r5, r7, r2
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	42af      	cmp	r7, r5
 8009e00:	4416      	add	r6, r2
 8009e02:	441e      	add	r6, r3
 8009e04:	463b      	mov	r3, r7
 8009e06:	bfa8      	it	ge
 8009e08:	462b      	movge	r3, r5
 8009e0a:	42b3      	cmp	r3, r6
 8009e0c:	bfa8      	it	ge
 8009e0e:	4633      	movge	r3, r6
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	bfc2      	ittt	gt
 8009e14:	1aed      	subgt	r5, r5, r3
 8009e16:	1af6      	subgt	r6, r6, r3
 8009e18:	1aff      	subgt	r7, r7, r3
 8009e1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	dd16      	ble.n	8009e4e <_strtod_l+0x736>
 8009e20:	4641      	mov	r1, r8
 8009e22:	9805      	ldr	r0, [sp, #20]
 8009e24:	461a      	mov	r2, r3
 8009e26:	f001 fbcb 	bl	800b5c0 <__pow5mult>
 8009e2a:	4680      	mov	r8, r0
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d0ba      	beq.n	8009da6 <_strtod_l+0x68e>
 8009e30:	4601      	mov	r1, r0
 8009e32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e34:	9805      	ldr	r0, [sp, #20]
 8009e36:	f001 fb19 	bl	800b46c <__multiply>
 8009e3a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	f43f ae8a 	beq.w	8009b56 <_strtod_l+0x43e>
 8009e42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e44:	9805      	ldr	r0, [sp, #20]
 8009e46:	f001 f9fd 	bl	800b244 <_Bfree>
 8009e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e4e:	2d00      	cmp	r5, #0
 8009e50:	dc1d      	bgt.n	8009e8e <_strtod_l+0x776>
 8009e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dd23      	ble.n	8009ea0 <_strtod_l+0x788>
 8009e58:	4649      	mov	r1, r9
 8009e5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009e5c:	9805      	ldr	r0, [sp, #20]
 8009e5e:	f001 fbaf 	bl	800b5c0 <__pow5mult>
 8009e62:	4681      	mov	r9, r0
 8009e64:	b9e0      	cbnz	r0, 8009ea0 <_strtod_l+0x788>
 8009e66:	f04f 0900 	mov.w	r9, #0
 8009e6a:	e674      	b.n	8009b56 <_strtod_l+0x43e>
 8009e6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009e70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009e74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009e78:	35e2      	adds	r5, #226	@ 0xe2
 8009e7a:	fa01 f305 	lsl.w	r3, r1, r5
 8009e7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009e82:	e7ba      	b.n	8009dfa <_strtod_l+0x6e2>
 8009e84:	2300      	movs	r3, #0
 8009e86:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e88:	2301      	movs	r3, #1
 8009e8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e8c:	e7b5      	b.n	8009dfa <_strtod_l+0x6e2>
 8009e8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e90:	9805      	ldr	r0, [sp, #20]
 8009e92:	462a      	mov	r2, r5
 8009e94:	f001 fbee 	bl	800b674 <__lshift>
 8009e98:	901a      	str	r0, [sp, #104]	@ 0x68
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d1d9      	bne.n	8009e52 <_strtod_l+0x73a>
 8009e9e:	e65a      	b.n	8009b56 <_strtod_l+0x43e>
 8009ea0:	2e00      	cmp	r6, #0
 8009ea2:	dd07      	ble.n	8009eb4 <_strtod_l+0x79c>
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	9805      	ldr	r0, [sp, #20]
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	f001 fbe3 	bl	800b674 <__lshift>
 8009eae:	4681      	mov	r9, r0
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d0d8      	beq.n	8009e66 <_strtod_l+0x74e>
 8009eb4:	2f00      	cmp	r7, #0
 8009eb6:	dd08      	ble.n	8009eca <_strtod_l+0x7b2>
 8009eb8:	4641      	mov	r1, r8
 8009eba:	9805      	ldr	r0, [sp, #20]
 8009ebc:	463a      	mov	r2, r7
 8009ebe:	f001 fbd9 	bl	800b674 <__lshift>
 8009ec2:	4680      	mov	r8, r0
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f43f ae46 	beq.w	8009b56 <_strtod_l+0x43e>
 8009eca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ecc:	9805      	ldr	r0, [sp, #20]
 8009ece:	464a      	mov	r2, r9
 8009ed0:	f001 fc58 	bl	800b784 <__mdiff>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f43f ae3d 	beq.w	8009b56 <_strtod_l+0x43e>
 8009edc:	68c3      	ldr	r3, [r0, #12]
 8009ede:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60c3      	str	r3, [r0, #12]
 8009ee4:	4641      	mov	r1, r8
 8009ee6:	f001 fc31 	bl	800b74c <__mcmp>
 8009eea:	2800      	cmp	r0, #0
 8009eec:	da46      	bge.n	8009f7c <_strtod_l+0x864>
 8009eee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ef0:	ea53 030a 	orrs.w	r3, r3, sl
 8009ef4:	d16c      	bne.n	8009fd0 <_strtod_l+0x8b8>
 8009ef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d168      	bne.n	8009fd0 <_strtod_l+0x8b8>
 8009efe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f02:	0d1b      	lsrs	r3, r3, #20
 8009f04:	051b      	lsls	r3, r3, #20
 8009f06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f0a:	d961      	bls.n	8009fd0 <_strtod_l+0x8b8>
 8009f0c:	6963      	ldr	r3, [r4, #20]
 8009f0e:	b913      	cbnz	r3, 8009f16 <_strtod_l+0x7fe>
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	dd5c      	ble.n	8009fd0 <_strtod_l+0x8b8>
 8009f16:	4621      	mov	r1, r4
 8009f18:	2201      	movs	r2, #1
 8009f1a:	9805      	ldr	r0, [sp, #20]
 8009f1c:	f001 fbaa 	bl	800b674 <__lshift>
 8009f20:	4641      	mov	r1, r8
 8009f22:	4604      	mov	r4, r0
 8009f24:	f001 fc12 	bl	800b74c <__mcmp>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	dd51      	ble.n	8009fd0 <_strtod_l+0x8b8>
 8009f2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f30:	9a08      	ldr	r2, [sp, #32]
 8009f32:	0d1b      	lsrs	r3, r3, #20
 8009f34:	051b      	lsls	r3, r3, #20
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	d06b      	beq.n	800a012 <_strtod_l+0x8fa>
 8009f3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f3e:	d868      	bhi.n	800a012 <_strtod_l+0x8fa>
 8009f40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009f44:	f67f ae9d 	bls.w	8009c82 <_strtod_l+0x56a>
 8009f48:	4b0a      	ldr	r3, [pc, #40]	@ (8009f74 <_strtod_l+0x85c>)
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	4659      	mov	r1, fp
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f7f6 fb82 	bl	8000658 <__aeabi_dmul>
 8009f54:	4b08      	ldr	r3, [pc, #32]	@ (8009f78 <_strtod_l+0x860>)
 8009f56:	400b      	ands	r3, r1
 8009f58:	4682      	mov	sl, r0
 8009f5a:	468b      	mov	fp, r1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f47f ae05 	bne.w	8009b6c <_strtod_l+0x454>
 8009f62:	9a05      	ldr	r2, [sp, #20]
 8009f64:	2322      	movs	r3, #34	@ 0x22
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	e600      	b.n	8009b6c <_strtod_l+0x454>
 8009f6a:	bf00      	nop
 8009f6c:	0800d528 	.word	0x0800d528
 8009f70:	fffffc02 	.word	0xfffffc02
 8009f74:	39500000 	.word	0x39500000
 8009f78:	7ff00000 	.word	0x7ff00000
 8009f7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009f80:	d165      	bne.n	800a04e <_strtod_l+0x936>
 8009f82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f88:	b35a      	cbz	r2, 8009fe2 <_strtod_l+0x8ca>
 8009f8a:	4a9f      	ldr	r2, [pc, #636]	@ (800a208 <_strtod_l+0xaf0>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d12b      	bne.n	8009fe8 <_strtod_l+0x8d0>
 8009f90:	9b08      	ldr	r3, [sp, #32]
 8009f92:	4651      	mov	r1, sl
 8009f94:	b303      	cbz	r3, 8009fd8 <_strtod_l+0x8c0>
 8009f96:	4b9d      	ldr	r3, [pc, #628]	@ (800a20c <_strtod_l+0xaf4>)
 8009f98:	465a      	mov	r2, fp
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa4:	d81b      	bhi.n	8009fde <_strtod_l+0x8c6>
 8009fa6:	0d1b      	lsrs	r3, r3, #20
 8009fa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009fac:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb0:	4299      	cmp	r1, r3
 8009fb2:	d119      	bne.n	8009fe8 <_strtod_l+0x8d0>
 8009fb4:	4b96      	ldr	r3, [pc, #600]	@ (800a210 <_strtod_l+0xaf8>)
 8009fb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d102      	bne.n	8009fc2 <_strtod_l+0x8aa>
 8009fbc:	3101      	adds	r1, #1
 8009fbe:	f43f adca 	beq.w	8009b56 <_strtod_l+0x43e>
 8009fc2:	4b92      	ldr	r3, [pc, #584]	@ (800a20c <_strtod_l+0xaf4>)
 8009fc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fc6:	401a      	ands	r2, r3
 8009fc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009fcc:	f04f 0a00 	mov.w	sl, #0
 8009fd0:	9b08      	ldr	r3, [sp, #32]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1b8      	bne.n	8009f48 <_strtod_l+0x830>
 8009fd6:	e5c9      	b.n	8009b6c <_strtod_l+0x454>
 8009fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fdc:	e7e8      	b.n	8009fb0 <_strtod_l+0x898>
 8009fde:	4613      	mov	r3, r2
 8009fe0:	e7e6      	b.n	8009fb0 <_strtod_l+0x898>
 8009fe2:	ea53 030a 	orrs.w	r3, r3, sl
 8009fe6:	d0a1      	beq.n	8009f2c <_strtod_l+0x814>
 8009fe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009fea:	b1db      	cbz	r3, 800a024 <_strtod_l+0x90c>
 8009fec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fee:	4213      	tst	r3, r2
 8009ff0:	d0ee      	beq.n	8009fd0 <_strtod_l+0x8b8>
 8009ff2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff4:	9a08      	ldr	r2, [sp, #32]
 8009ff6:	4650      	mov	r0, sl
 8009ff8:	4659      	mov	r1, fp
 8009ffa:	b1bb      	cbz	r3, 800a02c <_strtod_l+0x914>
 8009ffc:	f7ff fb6e 	bl	80096dc <sulp>
 800a000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a004:	ec53 2b10 	vmov	r2, r3, d0
 800a008:	f7f6 f970 	bl	80002ec <__adddf3>
 800a00c:	4682      	mov	sl, r0
 800a00e:	468b      	mov	fp, r1
 800a010:	e7de      	b.n	8009fd0 <_strtod_l+0x8b8>
 800a012:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a016:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a01a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a01e:	f04f 3aff 	mov.w	sl, #4294967295
 800a022:	e7d5      	b.n	8009fd0 <_strtod_l+0x8b8>
 800a024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a026:	ea13 0f0a 	tst.w	r3, sl
 800a02a:	e7e1      	b.n	8009ff0 <_strtod_l+0x8d8>
 800a02c:	f7ff fb56 	bl	80096dc <sulp>
 800a030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a034:	ec53 2b10 	vmov	r2, r3, d0
 800a038:	f7f6 f956 	bl	80002e8 <__aeabi_dsub>
 800a03c:	2200      	movs	r2, #0
 800a03e:	2300      	movs	r3, #0
 800a040:	4682      	mov	sl, r0
 800a042:	468b      	mov	fp, r1
 800a044:	f7f6 fd70 	bl	8000b28 <__aeabi_dcmpeq>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d0c1      	beq.n	8009fd0 <_strtod_l+0x8b8>
 800a04c:	e619      	b.n	8009c82 <_strtod_l+0x56a>
 800a04e:	4641      	mov	r1, r8
 800a050:	4620      	mov	r0, r4
 800a052:	f001 fcf3 	bl	800ba3c <__ratio>
 800a056:	ec57 6b10 	vmov	r6, r7, d0
 800a05a:	2200      	movs	r2, #0
 800a05c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a060:	4630      	mov	r0, r6
 800a062:	4639      	mov	r1, r7
 800a064:	f7f6 fd74 	bl	8000b50 <__aeabi_dcmple>
 800a068:	2800      	cmp	r0, #0
 800a06a:	d06f      	beq.n	800a14c <_strtod_l+0xa34>
 800a06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d17a      	bne.n	800a168 <_strtod_l+0xa50>
 800a072:	f1ba 0f00 	cmp.w	sl, #0
 800a076:	d158      	bne.n	800a12a <_strtod_l+0xa12>
 800a078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a07a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d15a      	bne.n	800a138 <_strtod_l+0xa20>
 800a082:	4b64      	ldr	r3, [pc, #400]	@ (800a214 <_strtod_l+0xafc>)
 800a084:	2200      	movs	r2, #0
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 fd57 	bl	8000b3c <__aeabi_dcmplt>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d159      	bne.n	800a146 <_strtod_l+0xa2e>
 800a092:	4630      	mov	r0, r6
 800a094:	4639      	mov	r1, r7
 800a096:	4b60      	ldr	r3, [pc, #384]	@ (800a218 <_strtod_l+0xb00>)
 800a098:	2200      	movs	r2, #0
 800a09a:	f7f6 fadd 	bl	8000658 <__aeabi_dmul>
 800a09e:	4606      	mov	r6, r0
 800a0a0:	460f      	mov	r7, r1
 800a0a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a0a6:	9606      	str	r6, [sp, #24]
 800a0a8:	9307      	str	r3, [sp, #28]
 800a0aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0ae:	4d57      	ldr	r5, [pc, #348]	@ (800a20c <_strtod_l+0xaf4>)
 800a0b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0b6:	401d      	ands	r5, r3
 800a0b8:	4b58      	ldr	r3, [pc, #352]	@ (800a21c <_strtod_l+0xb04>)
 800a0ba:	429d      	cmp	r5, r3
 800a0bc:	f040 80b2 	bne.w	800a224 <_strtod_l+0xb0c>
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a0c6:	ec4b ab10 	vmov	d0, sl, fp
 800a0ca:	f001 fbef 	bl	800b8ac <__ulp>
 800a0ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0d2:	ec51 0b10 	vmov	r0, r1, d0
 800a0d6:	f7f6 fabf 	bl	8000658 <__aeabi_dmul>
 800a0da:	4652      	mov	r2, sl
 800a0dc:	465b      	mov	r3, fp
 800a0de:	f7f6 f905 	bl	80002ec <__adddf3>
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4949      	ldr	r1, [pc, #292]	@ (800a20c <_strtod_l+0xaf4>)
 800a0e6:	4a4e      	ldr	r2, [pc, #312]	@ (800a220 <_strtod_l+0xb08>)
 800a0e8:	4019      	ands	r1, r3
 800a0ea:	4291      	cmp	r1, r2
 800a0ec:	4682      	mov	sl, r0
 800a0ee:	d942      	bls.n	800a176 <_strtod_l+0xa5e>
 800a0f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0f2:	4b47      	ldr	r3, [pc, #284]	@ (800a210 <_strtod_l+0xaf8>)
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d103      	bne.n	800a100 <_strtod_l+0x9e8>
 800a0f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	f43f ad2b 	beq.w	8009b56 <_strtod_l+0x43e>
 800a100:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a210 <_strtod_l+0xaf8>
 800a104:	f04f 3aff 	mov.w	sl, #4294967295
 800a108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a10a:	9805      	ldr	r0, [sp, #20]
 800a10c:	f001 f89a 	bl	800b244 <_Bfree>
 800a110:	9805      	ldr	r0, [sp, #20]
 800a112:	4649      	mov	r1, r9
 800a114:	f001 f896 	bl	800b244 <_Bfree>
 800a118:	9805      	ldr	r0, [sp, #20]
 800a11a:	4641      	mov	r1, r8
 800a11c:	f001 f892 	bl	800b244 <_Bfree>
 800a120:	9805      	ldr	r0, [sp, #20]
 800a122:	4621      	mov	r1, r4
 800a124:	f001 f88e 	bl	800b244 <_Bfree>
 800a128:	e618      	b.n	8009d5c <_strtod_l+0x644>
 800a12a:	f1ba 0f01 	cmp.w	sl, #1
 800a12e:	d103      	bne.n	800a138 <_strtod_l+0xa20>
 800a130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a132:	2b00      	cmp	r3, #0
 800a134:	f43f ada5 	beq.w	8009c82 <_strtod_l+0x56a>
 800a138:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a1e8 <_strtod_l+0xad0>
 800a13c:	4f35      	ldr	r7, [pc, #212]	@ (800a214 <_strtod_l+0xafc>)
 800a13e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a142:	2600      	movs	r6, #0
 800a144:	e7b1      	b.n	800a0aa <_strtod_l+0x992>
 800a146:	4f34      	ldr	r7, [pc, #208]	@ (800a218 <_strtod_l+0xb00>)
 800a148:	2600      	movs	r6, #0
 800a14a:	e7aa      	b.n	800a0a2 <_strtod_l+0x98a>
 800a14c:	4b32      	ldr	r3, [pc, #200]	@ (800a218 <_strtod_l+0xb00>)
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	2200      	movs	r2, #0
 800a154:	f7f6 fa80 	bl	8000658 <__aeabi_dmul>
 800a158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a15a:	4606      	mov	r6, r0
 800a15c:	460f      	mov	r7, r1
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d09f      	beq.n	800a0a2 <_strtod_l+0x98a>
 800a162:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a166:	e7a0      	b.n	800a0aa <_strtod_l+0x992>
 800a168:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a1f0 <_strtod_l+0xad8>
 800a16c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a170:	ec57 6b17 	vmov	r6, r7, d7
 800a174:	e799      	b.n	800a0aa <_strtod_l+0x992>
 800a176:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a17a:	9b08      	ldr	r3, [sp, #32]
 800a17c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1c1      	bne.n	800a108 <_strtod_l+0x9f0>
 800a184:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a188:	0d1b      	lsrs	r3, r3, #20
 800a18a:	051b      	lsls	r3, r3, #20
 800a18c:	429d      	cmp	r5, r3
 800a18e:	d1bb      	bne.n	800a108 <_strtod_l+0x9f0>
 800a190:	4630      	mov	r0, r6
 800a192:	4639      	mov	r1, r7
 800a194:	f7f6 fd98 	bl	8000cc8 <__aeabi_d2lz>
 800a198:	f7f6 fa30 	bl	80005fc <__aeabi_l2d>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f7f6 f8a0 	bl	80002e8 <__aeabi_dsub>
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a1b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1b6:	ea46 060a 	orr.w	r6, r6, sl
 800a1ba:	431e      	orrs	r6, r3
 800a1bc:	d06f      	beq.n	800a29e <_strtod_l+0xb86>
 800a1be:	a30e      	add	r3, pc, #56	@ (adr r3, 800a1f8 <_strtod_l+0xae0>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f6 fcba 	bl	8000b3c <__aeabi_dcmplt>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	f47f accf 	bne.w	8009b6c <_strtod_l+0x454>
 800a1ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800a200 <_strtod_l+0xae8>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1d8:	f7f6 fcce 	bl	8000b78 <__aeabi_dcmpgt>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d093      	beq.n	800a108 <_strtod_l+0x9f0>
 800a1e0:	e4c4      	b.n	8009b6c <_strtod_l+0x454>
 800a1e2:	bf00      	nop
 800a1e4:	f3af 8000 	nop.w
 800a1e8:	00000000 	.word	0x00000000
 800a1ec:	bff00000 	.word	0xbff00000
 800a1f0:	00000000 	.word	0x00000000
 800a1f4:	3ff00000 	.word	0x3ff00000
 800a1f8:	94a03595 	.word	0x94a03595
 800a1fc:	3fdfffff 	.word	0x3fdfffff
 800a200:	35afe535 	.word	0x35afe535
 800a204:	3fe00000 	.word	0x3fe00000
 800a208:	000fffff 	.word	0x000fffff
 800a20c:	7ff00000 	.word	0x7ff00000
 800a210:	7fefffff 	.word	0x7fefffff
 800a214:	3ff00000 	.word	0x3ff00000
 800a218:	3fe00000 	.word	0x3fe00000
 800a21c:	7fe00000 	.word	0x7fe00000
 800a220:	7c9fffff 	.word	0x7c9fffff
 800a224:	9b08      	ldr	r3, [sp, #32]
 800a226:	b323      	cbz	r3, 800a272 <_strtod_l+0xb5a>
 800a228:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a22c:	d821      	bhi.n	800a272 <_strtod_l+0xb5a>
 800a22e:	a328      	add	r3, pc, #160	@ (adr r3, 800a2d0 <_strtod_l+0xbb8>)
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	4630      	mov	r0, r6
 800a236:	4639      	mov	r1, r7
 800a238:	f7f6 fc8a 	bl	8000b50 <__aeabi_dcmple>
 800a23c:	b1a0      	cbz	r0, 800a268 <_strtod_l+0xb50>
 800a23e:	4639      	mov	r1, r7
 800a240:	4630      	mov	r0, r6
 800a242:	f7f6 fcb9 	bl	8000bb8 <__aeabi_d2uiz>
 800a246:	2801      	cmp	r0, #1
 800a248:	bf38      	it	cc
 800a24a:	2001      	movcc	r0, #1
 800a24c:	f7f6 f98a 	bl	8000564 <__aeabi_ui2d>
 800a250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a252:	4606      	mov	r6, r0
 800a254:	460f      	mov	r7, r1
 800a256:	b9fb      	cbnz	r3, 800a298 <_strtod_l+0xb80>
 800a258:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a25c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a25e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a260:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a264:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a268:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a26a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a26e:	1b5b      	subs	r3, r3, r5
 800a270:	9311      	str	r3, [sp, #68]	@ 0x44
 800a272:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a276:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a27a:	f001 fb17 	bl	800b8ac <__ulp>
 800a27e:	4650      	mov	r0, sl
 800a280:	ec53 2b10 	vmov	r2, r3, d0
 800a284:	4659      	mov	r1, fp
 800a286:	f7f6 f9e7 	bl	8000658 <__aeabi_dmul>
 800a28a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a28e:	f7f6 f82d 	bl	80002ec <__adddf3>
 800a292:	4682      	mov	sl, r0
 800a294:	468b      	mov	fp, r1
 800a296:	e770      	b.n	800a17a <_strtod_l+0xa62>
 800a298:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a29c:	e7e0      	b.n	800a260 <_strtod_l+0xb48>
 800a29e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a2d8 <_strtod_l+0xbc0>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f6 fc4a 	bl	8000b3c <__aeabi_dcmplt>
 800a2a8:	e798      	b.n	800a1dc <_strtod_l+0xac4>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a2b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	f7ff ba6d 	b.w	8009792 <_strtod_l+0x7a>
 800a2b8:	2a65      	cmp	r2, #101	@ 0x65
 800a2ba:	f43f ab66 	beq.w	800998a <_strtod_l+0x272>
 800a2be:	2a45      	cmp	r2, #69	@ 0x45
 800a2c0:	f43f ab63 	beq.w	800998a <_strtod_l+0x272>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	f7ff bb9e 	b.w	8009a06 <_strtod_l+0x2ee>
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w
 800a2d0:	ffc00000 	.word	0xffc00000
 800a2d4:	41dfffff 	.word	0x41dfffff
 800a2d8:	94a03595 	.word	0x94a03595
 800a2dc:	3fcfffff 	.word	0x3fcfffff

0800a2e0 <strtof>:
 800a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800a3a4 <strtof+0xc4>
 800a2e8:	4b29      	ldr	r3, [pc, #164]	@ (800a390 <strtof+0xb0>)
 800a2ea:	460a      	mov	r2, r1
 800a2ec:	ed2d 8b02 	vpush	{d8}
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	f8d8 0000 	ldr.w	r0, [r8]
 800a2f6:	f7ff fa0f 	bl	8009718 <_strtod_l>
 800a2fa:	ec55 4b10 	vmov	r4, r5, d0
 800a2fe:	4622      	mov	r2, r4
 800a300:	462b      	mov	r3, r5
 800a302:	4620      	mov	r0, r4
 800a304:	4629      	mov	r1, r5
 800a306:	f7f6 fc41 	bl	8000b8c <__aeabi_dcmpun>
 800a30a:	b190      	cbz	r0, 800a332 <strtof+0x52>
 800a30c:	2d00      	cmp	r5, #0
 800a30e:	4821      	ldr	r0, [pc, #132]	@ (800a394 <strtof+0xb4>)
 800a310:	da09      	bge.n	800a326 <strtof+0x46>
 800a312:	f000 fb0d 	bl	800a930 <nanf>
 800a316:	eeb1 8a40 	vneg.f32	s16, s0
 800a31a:	eeb0 0a48 	vmov.f32	s0, s16
 800a31e:	ecbd 8b02 	vpop	{d8}
 800a322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a326:	ecbd 8b02 	vpop	{d8}
 800a32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a32e:	f000 baff 	b.w	800a930 <nanf>
 800a332:	4620      	mov	r0, r4
 800a334:	4629      	mov	r1, r5
 800a336:	f7f6 fc5f 	bl	8000bf8 <__aeabi_d2f>
 800a33a:	ee08 0a10 	vmov	s16, r0
 800a33e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a398 <strtof+0xb8>
 800a342:	eeb0 7ac8 	vabs.f32	s14, s16
 800a346:	eeb4 7a67 	vcmp.f32	s14, s15
 800a34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34e:	dd11      	ble.n	800a374 <strtof+0x94>
 800a350:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800a354:	4b11      	ldr	r3, [pc, #68]	@ (800a39c <strtof+0xbc>)
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	4620      	mov	r0, r4
 800a35c:	4639      	mov	r1, r7
 800a35e:	f7f6 fc15 	bl	8000b8c <__aeabi_dcmpun>
 800a362:	b980      	cbnz	r0, 800a386 <strtof+0xa6>
 800a364:	4b0d      	ldr	r3, [pc, #52]	@ (800a39c <strtof+0xbc>)
 800a366:	f04f 32ff 	mov.w	r2, #4294967295
 800a36a:	4620      	mov	r0, r4
 800a36c:	4639      	mov	r1, r7
 800a36e:	f7f6 fbef 	bl	8000b50 <__aeabi_dcmple>
 800a372:	b940      	cbnz	r0, 800a386 <strtof+0xa6>
 800a374:	ee18 3a10 	vmov	r3, s16
 800a378:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a37c:	d1cd      	bne.n	800a31a <strtof+0x3a>
 800a37e:	4b08      	ldr	r3, [pc, #32]	@ (800a3a0 <strtof+0xc0>)
 800a380:	402b      	ands	r3, r5
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0c9      	beq.n	800a31a <strtof+0x3a>
 800a386:	f8d8 3000 	ldr.w	r3, [r8]
 800a38a:	2222      	movs	r2, #34	@ 0x22
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	e7c4      	b.n	800a31a <strtof+0x3a>
 800a390:	2000002c 	.word	0x2000002c
 800a394:	0800d8a6 	.word	0x0800d8a6
 800a398:	7f7fffff 	.word	0x7f7fffff
 800a39c:	7fefffff 	.word	0x7fefffff
 800a3a0:	7ff00000 	.word	0x7ff00000
 800a3a4:	20000198 	.word	0x20000198

0800a3a8 <_strtoul_l.constprop.0>:
 800a3a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3ac:	4e34      	ldr	r6, [pc, #208]	@ (800a480 <_strtoul_l.constprop.0+0xd8>)
 800a3ae:	4686      	mov	lr, r0
 800a3b0:	460d      	mov	r5, r1
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3b8:	5d37      	ldrb	r7, [r6, r4]
 800a3ba:	f017 0708 	ands.w	r7, r7, #8
 800a3be:	d1f8      	bne.n	800a3b2 <_strtoul_l.constprop.0+0xa>
 800a3c0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a3c2:	d12f      	bne.n	800a424 <_strtoul_l.constprop.0+0x7c>
 800a3c4:	782c      	ldrb	r4, [r5, #0]
 800a3c6:	2701      	movs	r7, #1
 800a3c8:	1c85      	adds	r5, r0, #2
 800a3ca:	f033 0010 	bics.w	r0, r3, #16
 800a3ce:	d109      	bne.n	800a3e4 <_strtoul_l.constprop.0+0x3c>
 800a3d0:	2c30      	cmp	r4, #48	@ 0x30
 800a3d2:	d12c      	bne.n	800a42e <_strtoul_l.constprop.0+0x86>
 800a3d4:	7828      	ldrb	r0, [r5, #0]
 800a3d6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a3da:	2858      	cmp	r0, #88	@ 0x58
 800a3dc:	d127      	bne.n	800a42e <_strtoul_l.constprop.0+0x86>
 800a3de:	786c      	ldrb	r4, [r5, #1]
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	3502      	adds	r5, #2
 800a3e4:	f04f 38ff 	mov.w	r8, #4294967295
 800a3e8:	2600      	movs	r6, #0
 800a3ea:	fbb8 f8f3 	udiv	r8, r8, r3
 800a3ee:	fb03 f908 	mul.w	r9, r3, r8
 800a3f2:	ea6f 0909 	mvn.w	r9, r9
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a3fc:	f1bc 0f09 	cmp.w	ip, #9
 800a400:	d81c      	bhi.n	800a43c <_strtoul_l.constprop.0+0x94>
 800a402:	4664      	mov	r4, ip
 800a404:	42a3      	cmp	r3, r4
 800a406:	dd2a      	ble.n	800a45e <_strtoul_l.constprop.0+0xb6>
 800a408:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a40c:	d007      	beq.n	800a41e <_strtoul_l.constprop.0+0x76>
 800a40e:	4580      	cmp	r8, r0
 800a410:	d322      	bcc.n	800a458 <_strtoul_l.constprop.0+0xb0>
 800a412:	d101      	bne.n	800a418 <_strtoul_l.constprop.0+0x70>
 800a414:	45a1      	cmp	r9, r4
 800a416:	db1f      	blt.n	800a458 <_strtoul_l.constprop.0+0xb0>
 800a418:	fb00 4003 	mla	r0, r0, r3, r4
 800a41c:	2601      	movs	r6, #1
 800a41e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a422:	e7e9      	b.n	800a3f8 <_strtoul_l.constprop.0+0x50>
 800a424:	2c2b      	cmp	r4, #43	@ 0x2b
 800a426:	bf04      	itt	eq
 800a428:	782c      	ldrbeq	r4, [r5, #0]
 800a42a:	1c85      	addeq	r5, r0, #2
 800a42c:	e7cd      	b.n	800a3ca <_strtoul_l.constprop.0+0x22>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1d8      	bne.n	800a3e4 <_strtoul_l.constprop.0+0x3c>
 800a432:	2c30      	cmp	r4, #48	@ 0x30
 800a434:	bf0c      	ite	eq
 800a436:	2308      	moveq	r3, #8
 800a438:	230a      	movne	r3, #10
 800a43a:	e7d3      	b.n	800a3e4 <_strtoul_l.constprop.0+0x3c>
 800a43c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a440:	f1bc 0f19 	cmp.w	ip, #25
 800a444:	d801      	bhi.n	800a44a <_strtoul_l.constprop.0+0xa2>
 800a446:	3c37      	subs	r4, #55	@ 0x37
 800a448:	e7dc      	b.n	800a404 <_strtoul_l.constprop.0+0x5c>
 800a44a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a44e:	f1bc 0f19 	cmp.w	ip, #25
 800a452:	d804      	bhi.n	800a45e <_strtoul_l.constprop.0+0xb6>
 800a454:	3c57      	subs	r4, #87	@ 0x57
 800a456:	e7d5      	b.n	800a404 <_strtoul_l.constprop.0+0x5c>
 800a458:	f04f 36ff 	mov.w	r6, #4294967295
 800a45c:	e7df      	b.n	800a41e <_strtoul_l.constprop.0+0x76>
 800a45e:	1c73      	adds	r3, r6, #1
 800a460:	d106      	bne.n	800a470 <_strtoul_l.constprop.0+0xc8>
 800a462:	2322      	movs	r3, #34	@ 0x22
 800a464:	f8ce 3000 	str.w	r3, [lr]
 800a468:	4630      	mov	r0, r6
 800a46a:	b932      	cbnz	r2, 800a47a <_strtoul_l.constprop.0+0xd2>
 800a46c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a470:	b107      	cbz	r7, 800a474 <_strtoul_l.constprop.0+0xcc>
 800a472:	4240      	negs	r0, r0
 800a474:	2a00      	cmp	r2, #0
 800a476:	d0f9      	beq.n	800a46c <_strtoul_l.constprop.0+0xc4>
 800a478:	b106      	cbz	r6, 800a47c <_strtoul_l.constprop.0+0xd4>
 800a47a:	1e69      	subs	r1, r5, #1
 800a47c:	6011      	str	r1, [r2, #0]
 800a47e:	e7f5      	b.n	800a46c <_strtoul_l.constprop.0+0xc4>
 800a480:	0800d551 	.word	0x0800d551

0800a484 <strtoul>:
 800a484:	4613      	mov	r3, r2
 800a486:	460a      	mov	r2, r1
 800a488:	4601      	mov	r1, r0
 800a48a:	4802      	ldr	r0, [pc, #8]	@ (800a494 <strtoul+0x10>)
 800a48c:	6800      	ldr	r0, [r0, #0]
 800a48e:	f7ff bf8b 	b.w	800a3a8 <_strtoul_l.constprop.0>
 800a492:	bf00      	nop
 800a494:	20000198 	.word	0x20000198

0800a498 <std>:
 800a498:	2300      	movs	r3, #0
 800a49a:	b510      	push	{r4, lr}
 800a49c:	4604      	mov	r4, r0
 800a49e:	e9c0 3300 	strd	r3, r3, [r0]
 800a4a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4a6:	6083      	str	r3, [r0, #8]
 800a4a8:	8181      	strh	r1, [r0, #12]
 800a4aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4ac:	81c2      	strh	r2, [r0, #14]
 800a4ae:	6183      	str	r3, [r0, #24]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	2208      	movs	r2, #8
 800a4b4:	305c      	adds	r0, #92	@ 0x5c
 800a4b6:	f000 f961 	bl	800a77c <memset>
 800a4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f0 <std+0x58>)
 800a4bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4be:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f4 <std+0x5c>)
 800a4c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f8 <std+0x60>)
 800a4c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a4fc <std+0x64>)
 800a4c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a500 <std+0x68>)
 800a4cc:	6224      	str	r4, [r4, #32]
 800a4ce:	429c      	cmp	r4, r3
 800a4d0:	d006      	beq.n	800a4e0 <std+0x48>
 800a4d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4d6:	4294      	cmp	r4, r2
 800a4d8:	d002      	beq.n	800a4e0 <std+0x48>
 800a4da:	33d0      	adds	r3, #208	@ 0xd0
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	d105      	bne.n	800a4ec <std+0x54>
 800a4e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e8:	f000 b9fe 	b.w	800a8e8 <__retarget_lock_init_recursive>
 800a4ec:	bd10      	pop	{r4, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0800a685 	.word	0x0800a685
 800a4f4:	0800a6a7 	.word	0x0800a6a7
 800a4f8:	0800a6df 	.word	0x0800a6df
 800a4fc:	0800a703 	.word	0x0800a703
 800a500:	200036dc 	.word	0x200036dc

0800a504 <stdio_exit_handler>:
 800a504:	4a02      	ldr	r2, [pc, #8]	@ (800a510 <stdio_exit_handler+0xc>)
 800a506:	4903      	ldr	r1, [pc, #12]	@ (800a514 <stdio_exit_handler+0x10>)
 800a508:	4803      	ldr	r0, [pc, #12]	@ (800a518 <stdio_exit_handler+0x14>)
 800a50a:	f000 b869 	b.w	800a5e0 <_fwalk_sglue>
 800a50e:	bf00      	nop
 800a510:	20000020 	.word	0x20000020
 800a514:	0800c215 	.word	0x0800c215
 800a518:	2000019c 	.word	0x2000019c

0800a51c <cleanup_stdio>:
 800a51c:	6841      	ldr	r1, [r0, #4]
 800a51e:	4b0c      	ldr	r3, [pc, #48]	@ (800a550 <cleanup_stdio+0x34>)
 800a520:	4299      	cmp	r1, r3
 800a522:	b510      	push	{r4, lr}
 800a524:	4604      	mov	r4, r0
 800a526:	d001      	beq.n	800a52c <cleanup_stdio+0x10>
 800a528:	f001 fe74 	bl	800c214 <_fflush_r>
 800a52c:	68a1      	ldr	r1, [r4, #8]
 800a52e:	4b09      	ldr	r3, [pc, #36]	@ (800a554 <cleanup_stdio+0x38>)
 800a530:	4299      	cmp	r1, r3
 800a532:	d002      	beq.n	800a53a <cleanup_stdio+0x1e>
 800a534:	4620      	mov	r0, r4
 800a536:	f001 fe6d 	bl	800c214 <_fflush_r>
 800a53a:	68e1      	ldr	r1, [r4, #12]
 800a53c:	4b06      	ldr	r3, [pc, #24]	@ (800a558 <cleanup_stdio+0x3c>)
 800a53e:	4299      	cmp	r1, r3
 800a540:	d004      	beq.n	800a54c <cleanup_stdio+0x30>
 800a542:	4620      	mov	r0, r4
 800a544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a548:	f001 be64 	b.w	800c214 <_fflush_r>
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	bf00      	nop
 800a550:	200036dc 	.word	0x200036dc
 800a554:	20003744 	.word	0x20003744
 800a558:	200037ac 	.word	0x200037ac

0800a55c <global_stdio_init.part.0>:
 800a55c:	b510      	push	{r4, lr}
 800a55e:	4b0b      	ldr	r3, [pc, #44]	@ (800a58c <global_stdio_init.part.0+0x30>)
 800a560:	4c0b      	ldr	r4, [pc, #44]	@ (800a590 <global_stdio_init.part.0+0x34>)
 800a562:	4a0c      	ldr	r2, [pc, #48]	@ (800a594 <global_stdio_init.part.0+0x38>)
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	4620      	mov	r0, r4
 800a568:	2200      	movs	r2, #0
 800a56a:	2104      	movs	r1, #4
 800a56c:	f7ff ff94 	bl	800a498 <std>
 800a570:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a574:	2201      	movs	r2, #1
 800a576:	2109      	movs	r1, #9
 800a578:	f7ff ff8e 	bl	800a498 <std>
 800a57c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a580:	2202      	movs	r2, #2
 800a582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a586:	2112      	movs	r1, #18
 800a588:	f7ff bf86 	b.w	800a498 <std>
 800a58c:	20003814 	.word	0x20003814
 800a590:	200036dc 	.word	0x200036dc
 800a594:	0800a505 	.word	0x0800a505

0800a598 <__sfp_lock_acquire>:
 800a598:	4801      	ldr	r0, [pc, #4]	@ (800a5a0 <__sfp_lock_acquire+0x8>)
 800a59a:	f000 b9a6 	b.w	800a8ea <__retarget_lock_acquire_recursive>
 800a59e:	bf00      	nop
 800a5a0:	2000381d 	.word	0x2000381d

0800a5a4 <__sfp_lock_release>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	@ (800a5ac <__sfp_lock_release+0x8>)
 800a5a6:	f000 b9a1 	b.w	800a8ec <__retarget_lock_release_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	2000381d 	.word	0x2000381d

0800a5b0 <__sinit>:
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	f7ff fff0 	bl	800a598 <__sfp_lock_acquire>
 800a5b8:	6a23      	ldr	r3, [r4, #32]
 800a5ba:	b11b      	cbz	r3, 800a5c4 <__sinit+0x14>
 800a5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c0:	f7ff bff0 	b.w	800a5a4 <__sfp_lock_release>
 800a5c4:	4b04      	ldr	r3, [pc, #16]	@ (800a5d8 <__sinit+0x28>)
 800a5c6:	6223      	str	r3, [r4, #32]
 800a5c8:	4b04      	ldr	r3, [pc, #16]	@ (800a5dc <__sinit+0x2c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1f5      	bne.n	800a5bc <__sinit+0xc>
 800a5d0:	f7ff ffc4 	bl	800a55c <global_stdio_init.part.0>
 800a5d4:	e7f2      	b.n	800a5bc <__sinit+0xc>
 800a5d6:	bf00      	nop
 800a5d8:	0800a51d 	.word	0x0800a51d
 800a5dc:	20003814 	.word	0x20003814

0800a5e0 <_fwalk_sglue>:
 800a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	4688      	mov	r8, r1
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	2600      	movs	r6, #0
 800a5ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5f0:	f1b9 0901 	subs.w	r9, r9, #1
 800a5f4:	d505      	bpl.n	800a602 <_fwalk_sglue+0x22>
 800a5f6:	6824      	ldr	r4, [r4, #0]
 800a5f8:	2c00      	cmp	r4, #0
 800a5fa:	d1f7      	bne.n	800a5ec <_fwalk_sglue+0xc>
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a602:	89ab      	ldrh	r3, [r5, #12]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d907      	bls.n	800a618 <_fwalk_sglue+0x38>
 800a608:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a60c:	3301      	adds	r3, #1
 800a60e:	d003      	beq.n	800a618 <_fwalk_sglue+0x38>
 800a610:	4629      	mov	r1, r5
 800a612:	4638      	mov	r0, r7
 800a614:	47c0      	blx	r8
 800a616:	4306      	orrs	r6, r0
 800a618:	3568      	adds	r5, #104	@ 0x68
 800a61a:	e7e9      	b.n	800a5f0 <_fwalk_sglue+0x10>

0800a61c <sniprintf>:
 800a61c:	b40c      	push	{r2, r3}
 800a61e:	b530      	push	{r4, r5, lr}
 800a620:	4b17      	ldr	r3, [pc, #92]	@ (800a680 <sniprintf+0x64>)
 800a622:	1e0c      	subs	r4, r1, #0
 800a624:	681d      	ldr	r5, [r3, #0]
 800a626:	b09d      	sub	sp, #116	@ 0x74
 800a628:	da08      	bge.n	800a63c <sniprintf+0x20>
 800a62a:	238b      	movs	r3, #139	@ 0x8b
 800a62c:	602b      	str	r3, [r5, #0]
 800a62e:	f04f 30ff 	mov.w	r0, #4294967295
 800a632:	b01d      	add	sp, #116	@ 0x74
 800a634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a638:	b002      	add	sp, #8
 800a63a:	4770      	bx	lr
 800a63c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a640:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a644:	bf14      	ite	ne
 800a646:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a64a:	4623      	moveq	r3, r4
 800a64c:	9304      	str	r3, [sp, #16]
 800a64e:	9307      	str	r3, [sp, #28]
 800a650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a654:	9002      	str	r0, [sp, #8]
 800a656:	9006      	str	r0, [sp, #24]
 800a658:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a65c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a65e:	ab21      	add	r3, sp, #132	@ 0x84
 800a660:	a902      	add	r1, sp, #8
 800a662:	4628      	mov	r0, r5
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	f001 fac7 	bl	800bbf8 <_svfiprintf_r>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	bfbc      	itt	lt
 800a66e:	238b      	movlt	r3, #139	@ 0x8b
 800a670:	602b      	strlt	r3, [r5, #0]
 800a672:	2c00      	cmp	r4, #0
 800a674:	d0dd      	beq.n	800a632 <sniprintf+0x16>
 800a676:	9b02      	ldr	r3, [sp, #8]
 800a678:	2200      	movs	r2, #0
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	e7d9      	b.n	800a632 <sniprintf+0x16>
 800a67e:	bf00      	nop
 800a680:	20000198 	.word	0x20000198

0800a684 <__sread>:
 800a684:	b510      	push	{r4, lr}
 800a686:	460c      	mov	r4, r1
 800a688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a68c:	f000 f8de 	bl	800a84c <_read_r>
 800a690:	2800      	cmp	r0, #0
 800a692:	bfab      	itete	ge
 800a694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a696:	89a3      	ldrhlt	r3, [r4, #12]
 800a698:	181b      	addge	r3, r3, r0
 800a69a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a69e:	bfac      	ite	ge
 800a6a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a6a2:	81a3      	strhlt	r3, [r4, #12]
 800a6a4:	bd10      	pop	{r4, pc}

0800a6a6 <__swrite>:
 800a6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6aa:	461f      	mov	r7, r3
 800a6ac:	898b      	ldrh	r3, [r1, #12]
 800a6ae:	05db      	lsls	r3, r3, #23
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	4616      	mov	r6, r2
 800a6b6:	d505      	bpl.n	800a6c4 <__swrite+0x1e>
 800a6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6bc:	2302      	movs	r3, #2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f000 f8b2 	bl	800a828 <_lseek_r>
 800a6c4:	89a3      	ldrh	r3, [r4, #12]
 800a6c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	463b      	mov	r3, r7
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6da:	f000 b8c9 	b.w	800a870 <_write_r>

0800a6de <__sseek>:
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e6:	f000 f89f 	bl	800a828 <_lseek_r>
 800a6ea:	1c43      	adds	r3, r0, #1
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	bf15      	itete	ne
 800a6f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6fa:	81a3      	strheq	r3, [r4, #12]
 800a6fc:	bf18      	it	ne
 800a6fe:	81a3      	strhne	r3, [r4, #12]
 800a700:	bd10      	pop	{r4, pc}

0800a702 <__sclose>:
 800a702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a706:	f000 b87f 	b.w	800a808 <_close_r>

0800a70a <_vsniprintf_r>:
 800a70a:	b530      	push	{r4, r5, lr}
 800a70c:	4614      	mov	r4, r2
 800a70e:	2c00      	cmp	r4, #0
 800a710:	b09b      	sub	sp, #108	@ 0x6c
 800a712:	4605      	mov	r5, r0
 800a714:	461a      	mov	r2, r3
 800a716:	da05      	bge.n	800a724 <_vsniprintf_r+0x1a>
 800a718:	238b      	movs	r3, #139	@ 0x8b
 800a71a:	6003      	str	r3, [r0, #0]
 800a71c:	f04f 30ff 	mov.w	r0, #4294967295
 800a720:	b01b      	add	sp, #108	@ 0x6c
 800a722:	bd30      	pop	{r4, r5, pc}
 800a724:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a728:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a72c:	bf14      	ite	ne
 800a72e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a732:	4623      	moveq	r3, r4
 800a734:	9302      	str	r3, [sp, #8]
 800a736:	9305      	str	r3, [sp, #20]
 800a738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a73c:	9100      	str	r1, [sp, #0]
 800a73e:	9104      	str	r1, [sp, #16]
 800a740:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a744:	4669      	mov	r1, sp
 800a746:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a748:	f001 fa56 	bl	800bbf8 <_svfiprintf_r>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	bfbc      	itt	lt
 800a750:	238b      	movlt	r3, #139	@ 0x8b
 800a752:	602b      	strlt	r3, [r5, #0]
 800a754:	2c00      	cmp	r4, #0
 800a756:	d0e3      	beq.n	800a720 <_vsniprintf_r+0x16>
 800a758:	9b00      	ldr	r3, [sp, #0]
 800a75a:	2200      	movs	r2, #0
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	e7df      	b.n	800a720 <_vsniprintf_r+0x16>

0800a760 <vsniprintf>:
 800a760:	b507      	push	{r0, r1, r2, lr}
 800a762:	9300      	str	r3, [sp, #0]
 800a764:	4613      	mov	r3, r2
 800a766:	460a      	mov	r2, r1
 800a768:	4601      	mov	r1, r0
 800a76a:	4803      	ldr	r0, [pc, #12]	@ (800a778 <vsniprintf+0x18>)
 800a76c:	6800      	ldr	r0, [r0, #0]
 800a76e:	f7ff ffcc 	bl	800a70a <_vsniprintf_r>
 800a772:	b003      	add	sp, #12
 800a774:	f85d fb04 	ldr.w	pc, [sp], #4
 800a778:	20000198 	.word	0x20000198

0800a77c <memset>:
 800a77c:	4402      	add	r2, r0
 800a77e:	4603      	mov	r3, r0
 800a780:	4293      	cmp	r3, r2
 800a782:	d100      	bne.n	800a786 <memset+0xa>
 800a784:	4770      	bx	lr
 800a786:	f803 1b01 	strb.w	r1, [r3], #1
 800a78a:	e7f9      	b.n	800a780 <memset+0x4>

0800a78c <strncmp>:
 800a78c:	b510      	push	{r4, lr}
 800a78e:	b16a      	cbz	r2, 800a7ac <strncmp+0x20>
 800a790:	3901      	subs	r1, #1
 800a792:	1884      	adds	r4, r0, r2
 800a794:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a798:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d103      	bne.n	800a7a8 <strncmp+0x1c>
 800a7a0:	42a0      	cmp	r0, r4
 800a7a2:	d001      	beq.n	800a7a8 <strncmp+0x1c>
 800a7a4:	2a00      	cmp	r2, #0
 800a7a6:	d1f5      	bne.n	800a794 <strncmp+0x8>
 800a7a8:	1ad0      	subs	r0, r2, r3
 800a7aa:	bd10      	pop	{r4, pc}
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	e7fc      	b.n	800a7aa <strncmp+0x1e>

0800a7b0 <__strtok_r>:
 800a7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	b908      	cbnz	r0, 800a7ba <__strtok_r+0xa>
 800a7b6:	6814      	ldr	r4, [r2, #0]
 800a7b8:	b144      	cbz	r4, 800a7cc <__strtok_r+0x1c>
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a7c6:	b91e      	cbnz	r6, 800a7d0 <__strtok_r+0x20>
 800a7c8:	b965      	cbnz	r5, 800a7e4 <__strtok_r+0x34>
 800a7ca:	6015      	str	r5, [r2, #0]
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	e005      	b.n	800a7dc <__strtok_r+0x2c>
 800a7d0:	42b5      	cmp	r5, r6
 800a7d2:	d1f6      	bne.n	800a7c2 <__strtok_r+0x12>
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1f0      	bne.n	800a7ba <__strtok_r+0xa>
 800a7d8:	6014      	str	r4, [r2, #0]
 800a7da:	7003      	strb	r3, [r0, #0]
 800a7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7de:	461c      	mov	r4, r3
 800a7e0:	e00c      	b.n	800a7fc <__strtok_r+0x4c>
 800a7e2:	b915      	cbnz	r5, 800a7ea <__strtok_r+0x3a>
 800a7e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7e8:	460e      	mov	r6, r1
 800a7ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a7ee:	42ab      	cmp	r3, r5
 800a7f0:	d1f7      	bne.n	800a7e2 <__strtok_r+0x32>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0f3      	beq.n	800a7de <__strtok_r+0x2e>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a7fc:	6014      	str	r4, [r2, #0]
 800a7fe:	e7ed      	b.n	800a7dc <__strtok_r+0x2c>

0800a800 <strtok_r>:
 800a800:	2301      	movs	r3, #1
 800a802:	f7ff bfd5 	b.w	800a7b0 <__strtok_r>
	...

0800a808 <_close_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d06      	ldr	r5, [pc, #24]	@ (800a824 <_close_r+0x1c>)
 800a80c:	2300      	movs	r3, #0
 800a80e:	4604      	mov	r4, r0
 800a810:	4608      	mov	r0, r1
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	f7fa fe06 	bl	8005424 <_close>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_close_r+0x1a>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_close_r+0x1a>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	20003818 	.word	0x20003818

0800a828 <_lseek_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4d07      	ldr	r5, [pc, #28]	@ (800a848 <_lseek_r+0x20>)
 800a82c:	4604      	mov	r4, r0
 800a82e:	4608      	mov	r0, r1
 800a830:	4611      	mov	r1, r2
 800a832:	2200      	movs	r2, #0
 800a834:	602a      	str	r2, [r5, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	f7fa fe1b 	bl	8005472 <_lseek>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d102      	bne.n	800a846 <_lseek_r+0x1e>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b103      	cbz	r3, 800a846 <_lseek_r+0x1e>
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	bd38      	pop	{r3, r4, r5, pc}
 800a848:	20003818 	.word	0x20003818

0800a84c <_read_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	@ (800a86c <_read_r+0x20>)
 800a850:	4604      	mov	r4, r0
 800a852:	4608      	mov	r0, r1
 800a854:	4611      	mov	r1, r2
 800a856:	2200      	movs	r2, #0
 800a858:	602a      	str	r2, [r5, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	f7fa fda9 	bl	80053b2 <_read>
 800a860:	1c43      	adds	r3, r0, #1
 800a862:	d102      	bne.n	800a86a <_read_r+0x1e>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	b103      	cbz	r3, 800a86a <_read_r+0x1e>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	20003818 	.word	0x20003818

0800a870 <_write_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d07      	ldr	r5, [pc, #28]	@ (800a890 <_write_r+0x20>)
 800a874:	4604      	mov	r4, r0
 800a876:	4608      	mov	r0, r1
 800a878:	4611      	mov	r1, r2
 800a87a:	2200      	movs	r2, #0
 800a87c:	602a      	str	r2, [r5, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	f7fa fdb4 	bl	80053ec <_write>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_write_r+0x1e>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_write_r+0x1e>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	20003818 	.word	0x20003818

0800a894 <__errno>:
 800a894:	4b01      	ldr	r3, [pc, #4]	@ (800a89c <__errno+0x8>)
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	20000198 	.word	0x20000198

0800a8a0 <__libc_init_array>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	4d0d      	ldr	r5, [pc, #52]	@ (800a8d8 <__libc_init_array+0x38>)
 800a8a4:	4c0d      	ldr	r4, [pc, #52]	@ (800a8dc <__libc_init_array+0x3c>)
 800a8a6:	1b64      	subs	r4, r4, r5
 800a8a8:	10a4      	asrs	r4, r4, #2
 800a8aa:	2600      	movs	r6, #0
 800a8ac:	42a6      	cmp	r6, r4
 800a8ae:	d109      	bne.n	800a8c4 <__libc_init_array+0x24>
 800a8b0:	4d0b      	ldr	r5, [pc, #44]	@ (800a8e0 <__libc_init_array+0x40>)
 800a8b2:	4c0c      	ldr	r4, [pc, #48]	@ (800a8e4 <__libc_init_array+0x44>)
 800a8b4:	f002 f826 	bl	800c904 <_init>
 800a8b8:	1b64      	subs	r4, r4, r5
 800a8ba:	10a4      	asrs	r4, r4, #2
 800a8bc:	2600      	movs	r6, #0
 800a8be:	42a6      	cmp	r6, r4
 800a8c0:	d105      	bne.n	800a8ce <__libc_init_array+0x2e>
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c8:	4798      	blx	r3
 800a8ca:	3601      	adds	r6, #1
 800a8cc:	e7ee      	b.n	800a8ac <__libc_init_array+0xc>
 800a8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d2:	4798      	blx	r3
 800a8d4:	3601      	adds	r6, #1
 800a8d6:	e7f2      	b.n	800a8be <__libc_init_array+0x1e>
 800a8d8:	0800d8b0 	.word	0x0800d8b0
 800a8dc:	0800d8b0 	.word	0x0800d8b0
 800a8e0:	0800d8b0 	.word	0x0800d8b0
 800a8e4:	0800d8b4 	.word	0x0800d8b4

0800a8e8 <__retarget_lock_init_recursive>:
 800a8e8:	4770      	bx	lr

0800a8ea <__retarget_lock_acquire_recursive>:
 800a8ea:	4770      	bx	lr

0800a8ec <__retarget_lock_release_recursive>:
 800a8ec:	4770      	bx	lr

0800a8ee <strcpy>:
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8f4:	f803 2b01 	strb.w	r2, [r3], #1
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	d1f9      	bne.n	800a8f0 <strcpy+0x2>
 800a8fc:	4770      	bx	lr

0800a8fe <memcpy>:
 800a8fe:	440a      	add	r2, r1
 800a900:	4291      	cmp	r1, r2
 800a902:	f100 33ff 	add.w	r3, r0, #4294967295
 800a906:	d100      	bne.n	800a90a <memcpy+0xc>
 800a908:	4770      	bx	lr
 800a90a:	b510      	push	{r4, lr}
 800a90c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a910:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a914:	4291      	cmp	r1, r2
 800a916:	d1f9      	bne.n	800a90c <memcpy+0xe>
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	0000      	movs	r0, r0
 800a91c:	0000      	movs	r0, r0
	...

0800a920 <nan>:
 800a920:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a928 <nan+0x8>
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	00000000 	.word	0x00000000
 800a92c:	7ff80000 	.word	0x7ff80000

0800a930 <nanf>:
 800a930:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a938 <nanf+0x8>
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	7fc00000 	.word	0x7fc00000

0800a93c <_free_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4605      	mov	r5, r0
 800a940:	2900      	cmp	r1, #0
 800a942:	d041      	beq.n	800a9c8 <_free_r+0x8c>
 800a944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a948:	1f0c      	subs	r4, r1, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	bfb8      	it	lt
 800a94e:	18e4      	addlt	r4, r4, r3
 800a950:	f000 fc2c 	bl	800b1ac <__malloc_lock>
 800a954:	4a1d      	ldr	r2, [pc, #116]	@ (800a9cc <_free_r+0x90>)
 800a956:	6813      	ldr	r3, [r2, #0]
 800a958:	b933      	cbnz	r3, 800a968 <_free_r+0x2c>
 800a95a:	6063      	str	r3, [r4, #4]
 800a95c:	6014      	str	r4, [r2, #0]
 800a95e:	4628      	mov	r0, r5
 800a960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a964:	f000 bc28 	b.w	800b1b8 <__malloc_unlock>
 800a968:	42a3      	cmp	r3, r4
 800a96a:	d908      	bls.n	800a97e <_free_r+0x42>
 800a96c:	6820      	ldr	r0, [r4, #0]
 800a96e:	1821      	adds	r1, r4, r0
 800a970:	428b      	cmp	r3, r1
 800a972:	bf01      	itttt	eq
 800a974:	6819      	ldreq	r1, [r3, #0]
 800a976:	685b      	ldreq	r3, [r3, #4]
 800a978:	1809      	addeq	r1, r1, r0
 800a97a:	6021      	streq	r1, [r4, #0]
 800a97c:	e7ed      	b.n	800a95a <_free_r+0x1e>
 800a97e:	461a      	mov	r2, r3
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	b10b      	cbz	r3, 800a988 <_free_r+0x4c>
 800a984:	42a3      	cmp	r3, r4
 800a986:	d9fa      	bls.n	800a97e <_free_r+0x42>
 800a988:	6811      	ldr	r1, [r2, #0]
 800a98a:	1850      	adds	r0, r2, r1
 800a98c:	42a0      	cmp	r0, r4
 800a98e:	d10b      	bne.n	800a9a8 <_free_r+0x6c>
 800a990:	6820      	ldr	r0, [r4, #0]
 800a992:	4401      	add	r1, r0
 800a994:	1850      	adds	r0, r2, r1
 800a996:	4283      	cmp	r3, r0
 800a998:	6011      	str	r1, [r2, #0]
 800a99a:	d1e0      	bne.n	800a95e <_free_r+0x22>
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	6053      	str	r3, [r2, #4]
 800a9a2:	4408      	add	r0, r1
 800a9a4:	6010      	str	r0, [r2, #0]
 800a9a6:	e7da      	b.n	800a95e <_free_r+0x22>
 800a9a8:	d902      	bls.n	800a9b0 <_free_r+0x74>
 800a9aa:	230c      	movs	r3, #12
 800a9ac:	602b      	str	r3, [r5, #0]
 800a9ae:	e7d6      	b.n	800a95e <_free_r+0x22>
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	1821      	adds	r1, r4, r0
 800a9b4:	428b      	cmp	r3, r1
 800a9b6:	bf04      	itt	eq
 800a9b8:	6819      	ldreq	r1, [r3, #0]
 800a9ba:	685b      	ldreq	r3, [r3, #4]
 800a9bc:	6063      	str	r3, [r4, #4]
 800a9be:	bf04      	itt	eq
 800a9c0:	1809      	addeq	r1, r1, r0
 800a9c2:	6021      	streq	r1, [r4, #0]
 800a9c4:	6054      	str	r4, [r2, #4]
 800a9c6:	e7ca      	b.n	800a95e <_free_r+0x22>
 800a9c8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20003824 	.word	0x20003824

0800a9d0 <rshift>:
 800a9d0:	6903      	ldr	r3, [r0, #16]
 800a9d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9de:	f100 0414 	add.w	r4, r0, #20
 800a9e2:	dd45      	ble.n	800aa70 <rshift+0xa0>
 800a9e4:	f011 011f 	ands.w	r1, r1, #31
 800a9e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9f0:	d10c      	bne.n	800aa0c <rshift+0x3c>
 800a9f2:	f100 0710 	add.w	r7, r0, #16
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	42b1      	cmp	r1, r6
 800a9fa:	d334      	bcc.n	800aa66 <rshift+0x96>
 800a9fc:	1a9b      	subs	r3, r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	1eea      	subs	r2, r5, #3
 800aa02:	4296      	cmp	r6, r2
 800aa04:	bf38      	it	cc
 800aa06:	2300      	movcc	r3, #0
 800aa08:	4423      	add	r3, r4
 800aa0a:	e015      	b.n	800aa38 <rshift+0x68>
 800aa0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa10:	f1c1 0820 	rsb	r8, r1, #32
 800aa14:	40cf      	lsrs	r7, r1
 800aa16:	f105 0e04 	add.w	lr, r5, #4
 800aa1a:	46a1      	mov	r9, r4
 800aa1c:	4576      	cmp	r6, lr
 800aa1e:	46f4      	mov	ip, lr
 800aa20:	d815      	bhi.n	800aa4e <rshift+0x7e>
 800aa22:	1a9a      	subs	r2, r3, r2
 800aa24:	0092      	lsls	r2, r2, #2
 800aa26:	3a04      	subs	r2, #4
 800aa28:	3501      	adds	r5, #1
 800aa2a:	42ae      	cmp	r6, r5
 800aa2c:	bf38      	it	cc
 800aa2e:	2200      	movcc	r2, #0
 800aa30:	18a3      	adds	r3, r4, r2
 800aa32:	50a7      	str	r7, [r4, r2]
 800aa34:	b107      	cbz	r7, 800aa38 <rshift+0x68>
 800aa36:	3304      	adds	r3, #4
 800aa38:	1b1a      	subs	r2, r3, r4
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa40:	bf08      	it	eq
 800aa42:	2300      	moveq	r3, #0
 800aa44:	6102      	str	r2, [r0, #16]
 800aa46:	bf08      	it	eq
 800aa48:	6143      	streq	r3, [r0, #20]
 800aa4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa4e:	f8dc c000 	ldr.w	ip, [ip]
 800aa52:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa56:	ea4c 0707 	orr.w	r7, ip, r7
 800aa5a:	f849 7b04 	str.w	r7, [r9], #4
 800aa5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa62:	40cf      	lsrs	r7, r1
 800aa64:	e7da      	b.n	800aa1c <rshift+0x4c>
 800aa66:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa6e:	e7c3      	b.n	800a9f8 <rshift+0x28>
 800aa70:	4623      	mov	r3, r4
 800aa72:	e7e1      	b.n	800aa38 <rshift+0x68>

0800aa74 <__hexdig_fun>:
 800aa74:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa78:	2b09      	cmp	r3, #9
 800aa7a:	d802      	bhi.n	800aa82 <__hexdig_fun+0xe>
 800aa7c:	3820      	subs	r0, #32
 800aa7e:	b2c0      	uxtb	r0, r0
 800aa80:	4770      	bx	lr
 800aa82:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa86:	2b05      	cmp	r3, #5
 800aa88:	d801      	bhi.n	800aa8e <__hexdig_fun+0x1a>
 800aa8a:	3847      	subs	r0, #71	@ 0x47
 800aa8c:	e7f7      	b.n	800aa7e <__hexdig_fun+0xa>
 800aa8e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	d801      	bhi.n	800aa9a <__hexdig_fun+0x26>
 800aa96:	3827      	subs	r0, #39	@ 0x27
 800aa98:	e7f1      	b.n	800aa7e <__hexdig_fun+0xa>
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	4770      	bx	lr
	...

0800aaa0 <__gethex>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	b085      	sub	sp, #20
 800aaa6:	468a      	mov	sl, r1
 800aaa8:	9302      	str	r3, [sp, #8]
 800aaaa:	680b      	ldr	r3, [r1, #0]
 800aaac:	9001      	str	r0, [sp, #4]
 800aaae:	4690      	mov	r8, r2
 800aab0:	1c9c      	adds	r4, r3, #2
 800aab2:	46a1      	mov	r9, r4
 800aab4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aab8:	2830      	cmp	r0, #48	@ 0x30
 800aaba:	d0fa      	beq.n	800aab2 <__gethex+0x12>
 800aabc:	eba9 0303 	sub.w	r3, r9, r3
 800aac0:	f1a3 0b02 	sub.w	fp, r3, #2
 800aac4:	f7ff ffd6 	bl	800aa74 <__hexdig_fun>
 800aac8:	4605      	mov	r5, r0
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d168      	bne.n	800aba0 <__gethex+0x100>
 800aace:	49a0      	ldr	r1, [pc, #640]	@ (800ad50 <__gethex+0x2b0>)
 800aad0:	2201      	movs	r2, #1
 800aad2:	4648      	mov	r0, r9
 800aad4:	f7ff fe5a 	bl	800a78c <strncmp>
 800aad8:	4607      	mov	r7, r0
 800aada:	2800      	cmp	r0, #0
 800aadc:	d167      	bne.n	800abae <__gethex+0x10e>
 800aade:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aae2:	4626      	mov	r6, r4
 800aae4:	f7ff ffc6 	bl	800aa74 <__hexdig_fun>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d062      	beq.n	800abb2 <__gethex+0x112>
 800aaec:	4623      	mov	r3, r4
 800aaee:	7818      	ldrb	r0, [r3, #0]
 800aaf0:	2830      	cmp	r0, #48	@ 0x30
 800aaf2:	4699      	mov	r9, r3
 800aaf4:	f103 0301 	add.w	r3, r3, #1
 800aaf8:	d0f9      	beq.n	800aaee <__gethex+0x4e>
 800aafa:	f7ff ffbb 	bl	800aa74 <__hexdig_fun>
 800aafe:	fab0 f580 	clz	r5, r0
 800ab02:	096d      	lsrs	r5, r5, #5
 800ab04:	f04f 0b01 	mov.w	fp, #1
 800ab08:	464a      	mov	r2, r9
 800ab0a:	4616      	mov	r6, r2
 800ab0c:	3201      	adds	r2, #1
 800ab0e:	7830      	ldrb	r0, [r6, #0]
 800ab10:	f7ff ffb0 	bl	800aa74 <__hexdig_fun>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d1f8      	bne.n	800ab0a <__gethex+0x6a>
 800ab18:	498d      	ldr	r1, [pc, #564]	@ (800ad50 <__gethex+0x2b0>)
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f7ff fe35 	bl	800a78c <strncmp>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d13f      	bne.n	800aba6 <__gethex+0x106>
 800ab26:	b944      	cbnz	r4, 800ab3a <__gethex+0x9a>
 800ab28:	1c74      	adds	r4, r6, #1
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	4616      	mov	r6, r2
 800ab2e:	3201      	adds	r2, #1
 800ab30:	7830      	ldrb	r0, [r6, #0]
 800ab32:	f7ff ff9f 	bl	800aa74 <__hexdig_fun>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d1f8      	bne.n	800ab2c <__gethex+0x8c>
 800ab3a:	1ba4      	subs	r4, r4, r6
 800ab3c:	00a7      	lsls	r7, r4, #2
 800ab3e:	7833      	ldrb	r3, [r6, #0]
 800ab40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab44:	2b50      	cmp	r3, #80	@ 0x50
 800ab46:	d13e      	bne.n	800abc6 <__gethex+0x126>
 800ab48:	7873      	ldrb	r3, [r6, #1]
 800ab4a:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab4c:	d033      	beq.n	800abb6 <__gethex+0x116>
 800ab4e:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab50:	d034      	beq.n	800abbc <__gethex+0x11c>
 800ab52:	1c71      	adds	r1, r6, #1
 800ab54:	2400      	movs	r4, #0
 800ab56:	7808      	ldrb	r0, [r1, #0]
 800ab58:	f7ff ff8c 	bl	800aa74 <__hexdig_fun>
 800ab5c:	1e43      	subs	r3, r0, #1
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b18      	cmp	r3, #24
 800ab62:	d830      	bhi.n	800abc6 <__gethex+0x126>
 800ab64:	f1a0 0210 	sub.w	r2, r0, #16
 800ab68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab6c:	f7ff ff82 	bl	800aa74 <__hexdig_fun>
 800ab70:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab74:	fa5f fc8c 	uxtb.w	ip, ip
 800ab78:	f1bc 0f18 	cmp.w	ip, #24
 800ab7c:	f04f 030a 	mov.w	r3, #10
 800ab80:	d91e      	bls.n	800abc0 <__gethex+0x120>
 800ab82:	b104      	cbz	r4, 800ab86 <__gethex+0xe6>
 800ab84:	4252      	negs	r2, r2
 800ab86:	4417      	add	r7, r2
 800ab88:	f8ca 1000 	str.w	r1, [sl]
 800ab8c:	b1ed      	cbz	r5, 800abca <__gethex+0x12a>
 800ab8e:	f1bb 0f00 	cmp.w	fp, #0
 800ab92:	bf0c      	ite	eq
 800ab94:	2506      	moveq	r5, #6
 800ab96:	2500      	movne	r5, #0
 800ab98:	4628      	mov	r0, r5
 800ab9a:	b005      	add	sp, #20
 800ab9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba0:	2500      	movs	r5, #0
 800aba2:	462c      	mov	r4, r5
 800aba4:	e7b0      	b.n	800ab08 <__gethex+0x68>
 800aba6:	2c00      	cmp	r4, #0
 800aba8:	d1c7      	bne.n	800ab3a <__gethex+0x9a>
 800abaa:	4627      	mov	r7, r4
 800abac:	e7c7      	b.n	800ab3e <__gethex+0x9e>
 800abae:	464e      	mov	r6, r9
 800abb0:	462f      	mov	r7, r5
 800abb2:	2501      	movs	r5, #1
 800abb4:	e7c3      	b.n	800ab3e <__gethex+0x9e>
 800abb6:	2400      	movs	r4, #0
 800abb8:	1cb1      	adds	r1, r6, #2
 800abba:	e7cc      	b.n	800ab56 <__gethex+0xb6>
 800abbc:	2401      	movs	r4, #1
 800abbe:	e7fb      	b.n	800abb8 <__gethex+0x118>
 800abc0:	fb03 0002 	mla	r0, r3, r2, r0
 800abc4:	e7ce      	b.n	800ab64 <__gethex+0xc4>
 800abc6:	4631      	mov	r1, r6
 800abc8:	e7de      	b.n	800ab88 <__gethex+0xe8>
 800abca:	eba6 0309 	sub.w	r3, r6, r9
 800abce:	3b01      	subs	r3, #1
 800abd0:	4629      	mov	r1, r5
 800abd2:	2b07      	cmp	r3, #7
 800abd4:	dc0a      	bgt.n	800abec <__gethex+0x14c>
 800abd6:	9801      	ldr	r0, [sp, #4]
 800abd8:	f000 faf4 	bl	800b1c4 <_Balloc>
 800abdc:	4604      	mov	r4, r0
 800abde:	b940      	cbnz	r0, 800abf2 <__gethex+0x152>
 800abe0:	4b5c      	ldr	r3, [pc, #368]	@ (800ad54 <__gethex+0x2b4>)
 800abe2:	4602      	mov	r2, r0
 800abe4:	21e4      	movs	r1, #228	@ 0xe4
 800abe6:	485c      	ldr	r0, [pc, #368]	@ (800ad58 <__gethex+0x2b8>)
 800abe8:	f001 fb66 	bl	800c2b8 <__assert_func>
 800abec:	3101      	adds	r1, #1
 800abee:	105b      	asrs	r3, r3, #1
 800abf0:	e7ef      	b.n	800abd2 <__gethex+0x132>
 800abf2:	f100 0a14 	add.w	sl, r0, #20
 800abf6:	2300      	movs	r3, #0
 800abf8:	4655      	mov	r5, sl
 800abfa:	469b      	mov	fp, r3
 800abfc:	45b1      	cmp	r9, r6
 800abfe:	d337      	bcc.n	800ac70 <__gethex+0x1d0>
 800ac00:	f845 bb04 	str.w	fp, [r5], #4
 800ac04:	eba5 050a 	sub.w	r5, r5, sl
 800ac08:	10ad      	asrs	r5, r5, #2
 800ac0a:	6125      	str	r5, [r4, #16]
 800ac0c:	4658      	mov	r0, fp
 800ac0e:	f000 fbcb 	bl	800b3a8 <__hi0bits>
 800ac12:	016d      	lsls	r5, r5, #5
 800ac14:	f8d8 6000 	ldr.w	r6, [r8]
 800ac18:	1a2d      	subs	r5, r5, r0
 800ac1a:	42b5      	cmp	r5, r6
 800ac1c:	dd54      	ble.n	800acc8 <__gethex+0x228>
 800ac1e:	1bad      	subs	r5, r5, r6
 800ac20:	4629      	mov	r1, r5
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 ff5f 	bl	800bae6 <__any_on>
 800ac28:	4681      	mov	r9, r0
 800ac2a:	b178      	cbz	r0, 800ac4c <__gethex+0x1ac>
 800ac2c:	1e6b      	subs	r3, r5, #1
 800ac2e:	1159      	asrs	r1, r3, #5
 800ac30:	f003 021f 	and.w	r2, r3, #31
 800ac34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac38:	f04f 0901 	mov.w	r9, #1
 800ac3c:	fa09 f202 	lsl.w	r2, r9, r2
 800ac40:	420a      	tst	r2, r1
 800ac42:	d003      	beq.n	800ac4c <__gethex+0x1ac>
 800ac44:	454b      	cmp	r3, r9
 800ac46:	dc36      	bgt.n	800acb6 <__gethex+0x216>
 800ac48:	f04f 0902 	mov.w	r9, #2
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7ff febe 	bl	800a9d0 <rshift>
 800ac54:	442f      	add	r7, r5
 800ac56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac5a:	42bb      	cmp	r3, r7
 800ac5c:	da42      	bge.n	800ace4 <__gethex+0x244>
 800ac5e:	9801      	ldr	r0, [sp, #4]
 800ac60:	4621      	mov	r1, r4
 800ac62:	f000 faef 	bl	800b244 <_Bfree>
 800ac66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac68:	2300      	movs	r3, #0
 800ac6a:	6013      	str	r3, [r2, #0]
 800ac6c:	25a3      	movs	r5, #163	@ 0xa3
 800ac6e:	e793      	b.n	800ab98 <__gethex+0xf8>
 800ac70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac74:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac76:	d012      	beq.n	800ac9e <__gethex+0x1fe>
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d104      	bne.n	800ac86 <__gethex+0x1e6>
 800ac7c:	f845 bb04 	str.w	fp, [r5], #4
 800ac80:	f04f 0b00 	mov.w	fp, #0
 800ac84:	465b      	mov	r3, fp
 800ac86:	7830      	ldrb	r0, [r6, #0]
 800ac88:	9303      	str	r3, [sp, #12]
 800ac8a:	f7ff fef3 	bl	800aa74 <__hexdig_fun>
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	f000 000f 	and.w	r0, r0, #15
 800ac94:	4098      	lsls	r0, r3
 800ac96:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	e7ae      	b.n	800abfc <__gethex+0x15c>
 800ac9e:	45b1      	cmp	r9, r6
 800aca0:	d8ea      	bhi.n	800ac78 <__gethex+0x1d8>
 800aca2:	492b      	ldr	r1, [pc, #172]	@ (800ad50 <__gethex+0x2b0>)
 800aca4:	9303      	str	r3, [sp, #12]
 800aca6:	2201      	movs	r2, #1
 800aca8:	4630      	mov	r0, r6
 800acaa:	f7ff fd6f 	bl	800a78c <strncmp>
 800acae:	9b03      	ldr	r3, [sp, #12]
 800acb0:	2800      	cmp	r0, #0
 800acb2:	d1e1      	bne.n	800ac78 <__gethex+0x1d8>
 800acb4:	e7a2      	b.n	800abfc <__gethex+0x15c>
 800acb6:	1ea9      	subs	r1, r5, #2
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 ff14 	bl	800bae6 <__any_on>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d0c2      	beq.n	800ac48 <__gethex+0x1a8>
 800acc2:	f04f 0903 	mov.w	r9, #3
 800acc6:	e7c1      	b.n	800ac4c <__gethex+0x1ac>
 800acc8:	da09      	bge.n	800acde <__gethex+0x23e>
 800acca:	1b75      	subs	r5, r6, r5
 800accc:	4621      	mov	r1, r4
 800acce:	9801      	ldr	r0, [sp, #4]
 800acd0:	462a      	mov	r2, r5
 800acd2:	f000 fccf 	bl	800b674 <__lshift>
 800acd6:	1b7f      	subs	r7, r7, r5
 800acd8:	4604      	mov	r4, r0
 800acda:	f100 0a14 	add.w	sl, r0, #20
 800acde:	f04f 0900 	mov.w	r9, #0
 800ace2:	e7b8      	b.n	800ac56 <__gethex+0x1b6>
 800ace4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ace8:	42bd      	cmp	r5, r7
 800acea:	dd6f      	ble.n	800adcc <__gethex+0x32c>
 800acec:	1bed      	subs	r5, r5, r7
 800acee:	42ae      	cmp	r6, r5
 800acf0:	dc34      	bgt.n	800ad5c <__gethex+0x2bc>
 800acf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d022      	beq.n	800ad40 <__gethex+0x2a0>
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d024      	beq.n	800ad48 <__gethex+0x2a8>
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d115      	bne.n	800ad2e <__gethex+0x28e>
 800ad02:	42ae      	cmp	r6, r5
 800ad04:	d113      	bne.n	800ad2e <__gethex+0x28e>
 800ad06:	2e01      	cmp	r6, #1
 800ad08:	d10b      	bne.n	800ad22 <__gethex+0x282>
 800ad0a:	9a02      	ldr	r2, [sp, #8]
 800ad0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad10:	6013      	str	r3, [r2, #0]
 800ad12:	2301      	movs	r3, #1
 800ad14:	6123      	str	r3, [r4, #16]
 800ad16:	f8ca 3000 	str.w	r3, [sl]
 800ad1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad1c:	2562      	movs	r5, #98	@ 0x62
 800ad1e:	601c      	str	r4, [r3, #0]
 800ad20:	e73a      	b.n	800ab98 <__gethex+0xf8>
 800ad22:	1e71      	subs	r1, r6, #1
 800ad24:	4620      	mov	r0, r4
 800ad26:	f000 fede 	bl	800bae6 <__any_on>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d1ed      	bne.n	800ad0a <__gethex+0x26a>
 800ad2e:	9801      	ldr	r0, [sp, #4]
 800ad30:	4621      	mov	r1, r4
 800ad32:	f000 fa87 	bl	800b244 <_Bfree>
 800ad36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad38:	2300      	movs	r3, #0
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	2550      	movs	r5, #80	@ 0x50
 800ad3e:	e72b      	b.n	800ab98 <__gethex+0xf8>
 800ad40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1f3      	bne.n	800ad2e <__gethex+0x28e>
 800ad46:	e7e0      	b.n	800ad0a <__gethex+0x26a>
 800ad48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1dd      	bne.n	800ad0a <__gethex+0x26a>
 800ad4e:	e7ee      	b.n	800ad2e <__gethex+0x28e>
 800ad50:	0800d4ec 	.word	0x0800d4ec
 800ad54:	0800d659 	.word	0x0800d659
 800ad58:	0800d66a 	.word	0x0800d66a
 800ad5c:	1e6f      	subs	r7, r5, #1
 800ad5e:	f1b9 0f00 	cmp.w	r9, #0
 800ad62:	d130      	bne.n	800adc6 <__gethex+0x326>
 800ad64:	b127      	cbz	r7, 800ad70 <__gethex+0x2d0>
 800ad66:	4639      	mov	r1, r7
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f000 febc 	bl	800bae6 <__any_on>
 800ad6e:	4681      	mov	r9, r0
 800ad70:	117a      	asrs	r2, r7, #5
 800ad72:	2301      	movs	r3, #1
 800ad74:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad78:	f007 071f 	and.w	r7, r7, #31
 800ad7c:	40bb      	lsls	r3, r7
 800ad7e:	4213      	tst	r3, r2
 800ad80:	4629      	mov	r1, r5
 800ad82:	4620      	mov	r0, r4
 800ad84:	bf18      	it	ne
 800ad86:	f049 0902 	orrne.w	r9, r9, #2
 800ad8a:	f7ff fe21 	bl	800a9d0 <rshift>
 800ad8e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad92:	1b76      	subs	r6, r6, r5
 800ad94:	2502      	movs	r5, #2
 800ad96:	f1b9 0f00 	cmp.w	r9, #0
 800ad9a:	d047      	beq.n	800ae2c <__gethex+0x38c>
 800ad9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d015      	beq.n	800add0 <__gethex+0x330>
 800ada4:	2b03      	cmp	r3, #3
 800ada6:	d017      	beq.n	800add8 <__gethex+0x338>
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d109      	bne.n	800adc0 <__gethex+0x320>
 800adac:	f019 0f02 	tst.w	r9, #2
 800adb0:	d006      	beq.n	800adc0 <__gethex+0x320>
 800adb2:	f8da 3000 	ldr.w	r3, [sl]
 800adb6:	ea49 0903 	orr.w	r9, r9, r3
 800adba:	f019 0f01 	tst.w	r9, #1
 800adbe:	d10e      	bne.n	800adde <__gethex+0x33e>
 800adc0:	f045 0510 	orr.w	r5, r5, #16
 800adc4:	e032      	b.n	800ae2c <__gethex+0x38c>
 800adc6:	f04f 0901 	mov.w	r9, #1
 800adca:	e7d1      	b.n	800ad70 <__gethex+0x2d0>
 800adcc:	2501      	movs	r5, #1
 800adce:	e7e2      	b.n	800ad96 <__gethex+0x2f6>
 800add0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800add2:	f1c3 0301 	rsb	r3, r3, #1
 800add6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800add8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0f0      	beq.n	800adc0 <__gethex+0x320>
 800adde:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ade2:	f104 0314 	add.w	r3, r4, #20
 800ade6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adee:	f04f 0c00 	mov.w	ip, #0
 800adf2:	4618      	mov	r0, r3
 800adf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adfc:	d01b      	beq.n	800ae36 <__gethex+0x396>
 800adfe:	3201      	adds	r2, #1
 800ae00:	6002      	str	r2, [r0, #0]
 800ae02:	2d02      	cmp	r5, #2
 800ae04:	f104 0314 	add.w	r3, r4, #20
 800ae08:	d13c      	bne.n	800ae84 <__gethex+0x3e4>
 800ae0a:	f8d8 2000 	ldr.w	r2, [r8]
 800ae0e:	3a01      	subs	r2, #1
 800ae10:	42b2      	cmp	r2, r6
 800ae12:	d109      	bne.n	800ae28 <__gethex+0x388>
 800ae14:	1171      	asrs	r1, r6, #5
 800ae16:	2201      	movs	r2, #1
 800ae18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae1c:	f006 061f 	and.w	r6, r6, #31
 800ae20:	fa02 f606 	lsl.w	r6, r2, r6
 800ae24:	421e      	tst	r6, r3
 800ae26:	d13a      	bne.n	800ae9e <__gethex+0x3fe>
 800ae28:	f045 0520 	orr.w	r5, r5, #32
 800ae2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae2e:	601c      	str	r4, [r3, #0]
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	601f      	str	r7, [r3, #0]
 800ae34:	e6b0      	b.n	800ab98 <__gethex+0xf8>
 800ae36:	4299      	cmp	r1, r3
 800ae38:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae3c:	d8d9      	bhi.n	800adf2 <__gethex+0x352>
 800ae3e:	68a3      	ldr	r3, [r4, #8]
 800ae40:	459b      	cmp	fp, r3
 800ae42:	db17      	blt.n	800ae74 <__gethex+0x3d4>
 800ae44:	6861      	ldr	r1, [r4, #4]
 800ae46:	9801      	ldr	r0, [sp, #4]
 800ae48:	3101      	adds	r1, #1
 800ae4a:	f000 f9bb 	bl	800b1c4 <_Balloc>
 800ae4e:	4681      	mov	r9, r0
 800ae50:	b918      	cbnz	r0, 800ae5a <__gethex+0x3ba>
 800ae52:	4b1a      	ldr	r3, [pc, #104]	@ (800aebc <__gethex+0x41c>)
 800ae54:	4602      	mov	r2, r0
 800ae56:	2184      	movs	r1, #132	@ 0x84
 800ae58:	e6c5      	b.n	800abe6 <__gethex+0x146>
 800ae5a:	6922      	ldr	r2, [r4, #16]
 800ae5c:	3202      	adds	r2, #2
 800ae5e:	f104 010c 	add.w	r1, r4, #12
 800ae62:	0092      	lsls	r2, r2, #2
 800ae64:	300c      	adds	r0, #12
 800ae66:	f7ff fd4a 	bl	800a8fe <memcpy>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	9801      	ldr	r0, [sp, #4]
 800ae6e:	f000 f9e9 	bl	800b244 <_Bfree>
 800ae72:	464c      	mov	r4, r9
 800ae74:	6923      	ldr	r3, [r4, #16]
 800ae76:	1c5a      	adds	r2, r3, #1
 800ae78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae7c:	6122      	str	r2, [r4, #16]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	615a      	str	r2, [r3, #20]
 800ae82:	e7be      	b.n	800ae02 <__gethex+0x362>
 800ae84:	6922      	ldr	r2, [r4, #16]
 800ae86:	455a      	cmp	r2, fp
 800ae88:	dd0b      	ble.n	800aea2 <__gethex+0x402>
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f7ff fd9f 	bl	800a9d0 <rshift>
 800ae92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae96:	3701      	adds	r7, #1
 800ae98:	42bb      	cmp	r3, r7
 800ae9a:	f6ff aee0 	blt.w	800ac5e <__gethex+0x1be>
 800ae9e:	2501      	movs	r5, #1
 800aea0:	e7c2      	b.n	800ae28 <__gethex+0x388>
 800aea2:	f016 061f 	ands.w	r6, r6, #31
 800aea6:	d0fa      	beq.n	800ae9e <__gethex+0x3fe>
 800aea8:	4453      	add	r3, sl
 800aeaa:	f1c6 0620 	rsb	r6, r6, #32
 800aeae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aeb2:	f000 fa79 	bl	800b3a8 <__hi0bits>
 800aeb6:	42b0      	cmp	r0, r6
 800aeb8:	dbe7      	blt.n	800ae8a <__gethex+0x3ea>
 800aeba:	e7f0      	b.n	800ae9e <__gethex+0x3fe>
 800aebc:	0800d659 	.word	0x0800d659

0800aec0 <L_shift>:
 800aec0:	f1c2 0208 	rsb	r2, r2, #8
 800aec4:	0092      	lsls	r2, r2, #2
 800aec6:	b570      	push	{r4, r5, r6, lr}
 800aec8:	f1c2 0620 	rsb	r6, r2, #32
 800aecc:	6843      	ldr	r3, [r0, #4]
 800aece:	6804      	ldr	r4, [r0, #0]
 800aed0:	fa03 f506 	lsl.w	r5, r3, r6
 800aed4:	432c      	orrs	r4, r5
 800aed6:	40d3      	lsrs	r3, r2
 800aed8:	6004      	str	r4, [r0, #0]
 800aeda:	f840 3f04 	str.w	r3, [r0, #4]!
 800aede:	4288      	cmp	r0, r1
 800aee0:	d3f4      	bcc.n	800aecc <L_shift+0xc>
 800aee2:	bd70      	pop	{r4, r5, r6, pc}

0800aee4 <__match>:
 800aee4:	b530      	push	{r4, r5, lr}
 800aee6:	6803      	ldr	r3, [r0, #0]
 800aee8:	3301      	adds	r3, #1
 800aeea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeee:	b914      	cbnz	r4, 800aef6 <__match+0x12>
 800aef0:	6003      	str	r3, [r0, #0]
 800aef2:	2001      	movs	r0, #1
 800aef4:	bd30      	pop	{r4, r5, pc}
 800aef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aefa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aefe:	2d19      	cmp	r5, #25
 800af00:	bf98      	it	ls
 800af02:	3220      	addls	r2, #32
 800af04:	42a2      	cmp	r2, r4
 800af06:	d0f0      	beq.n	800aeea <__match+0x6>
 800af08:	2000      	movs	r0, #0
 800af0a:	e7f3      	b.n	800aef4 <__match+0x10>

0800af0c <__hexnan>:
 800af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af10:	680b      	ldr	r3, [r1, #0]
 800af12:	6801      	ldr	r1, [r0, #0]
 800af14:	115e      	asrs	r6, r3, #5
 800af16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af1a:	f013 031f 	ands.w	r3, r3, #31
 800af1e:	b087      	sub	sp, #28
 800af20:	bf18      	it	ne
 800af22:	3604      	addne	r6, #4
 800af24:	2500      	movs	r5, #0
 800af26:	1f37      	subs	r7, r6, #4
 800af28:	4682      	mov	sl, r0
 800af2a:	4690      	mov	r8, r2
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	f846 5c04 	str.w	r5, [r6, #-4]
 800af32:	46b9      	mov	r9, r7
 800af34:	463c      	mov	r4, r7
 800af36:	9502      	str	r5, [sp, #8]
 800af38:	46ab      	mov	fp, r5
 800af3a:	784a      	ldrb	r2, [r1, #1]
 800af3c:	1c4b      	adds	r3, r1, #1
 800af3e:	9303      	str	r3, [sp, #12]
 800af40:	b342      	cbz	r2, 800af94 <__hexnan+0x88>
 800af42:	4610      	mov	r0, r2
 800af44:	9105      	str	r1, [sp, #20]
 800af46:	9204      	str	r2, [sp, #16]
 800af48:	f7ff fd94 	bl	800aa74 <__hexdig_fun>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d151      	bne.n	800aff4 <__hexnan+0xe8>
 800af50:	9a04      	ldr	r2, [sp, #16]
 800af52:	9905      	ldr	r1, [sp, #20]
 800af54:	2a20      	cmp	r2, #32
 800af56:	d818      	bhi.n	800af8a <__hexnan+0x7e>
 800af58:	9b02      	ldr	r3, [sp, #8]
 800af5a:	459b      	cmp	fp, r3
 800af5c:	dd13      	ble.n	800af86 <__hexnan+0x7a>
 800af5e:	454c      	cmp	r4, r9
 800af60:	d206      	bcs.n	800af70 <__hexnan+0x64>
 800af62:	2d07      	cmp	r5, #7
 800af64:	dc04      	bgt.n	800af70 <__hexnan+0x64>
 800af66:	462a      	mov	r2, r5
 800af68:	4649      	mov	r1, r9
 800af6a:	4620      	mov	r0, r4
 800af6c:	f7ff ffa8 	bl	800aec0 <L_shift>
 800af70:	4544      	cmp	r4, r8
 800af72:	d952      	bls.n	800b01a <__hexnan+0x10e>
 800af74:	2300      	movs	r3, #0
 800af76:	f1a4 0904 	sub.w	r9, r4, #4
 800af7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800af7e:	f8cd b008 	str.w	fp, [sp, #8]
 800af82:	464c      	mov	r4, r9
 800af84:	461d      	mov	r5, r3
 800af86:	9903      	ldr	r1, [sp, #12]
 800af88:	e7d7      	b.n	800af3a <__hexnan+0x2e>
 800af8a:	2a29      	cmp	r2, #41	@ 0x29
 800af8c:	d157      	bne.n	800b03e <__hexnan+0x132>
 800af8e:	3102      	adds	r1, #2
 800af90:	f8ca 1000 	str.w	r1, [sl]
 800af94:	f1bb 0f00 	cmp.w	fp, #0
 800af98:	d051      	beq.n	800b03e <__hexnan+0x132>
 800af9a:	454c      	cmp	r4, r9
 800af9c:	d206      	bcs.n	800afac <__hexnan+0xa0>
 800af9e:	2d07      	cmp	r5, #7
 800afa0:	dc04      	bgt.n	800afac <__hexnan+0xa0>
 800afa2:	462a      	mov	r2, r5
 800afa4:	4649      	mov	r1, r9
 800afa6:	4620      	mov	r0, r4
 800afa8:	f7ff ff8a 	bl	800aec0 <L_shift>
 800afac:	4544      	cmp	r4, r8
 800afae:	d936      	bls.n	800b01e <__hexnan+0x112>
 800afb0:	f1a8 0204 	sub.w	r2, r8, #4
 800afb4:	4623      	mov	r3, r4
 800afb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800afba:	f842 1f04 	str.w	r1, [r2, #4]!
 800afbe:	429f      	cmp	r7, r3
 800afc0:	d2f9      	bcs.n	800afb6 <__hexnan+0xaa>
 800afc2:	1b3b      	subs	r3, r7, r4
 800afc4:	f023 0303 	bic.w	r3, r3, #3
 800afc8:	3304      	adds	r3, #4
 800afca:	3401      	adds	r4, #1
 800afcc:	3e03      	subs	r6, #3
 800afce:	42b4      	cmp	r4, r6
 800afd0:	bf88      	it	hi
 800afd2:	2304      	movhi	r3, #4
 800afd4:	4443      	add	r3, r8
 800afd6:	2200      	movs	r2, #0
 800afd8:	f843 2b04 	str.w	r2, [r3], #4
 800afdc:	429f      	cmp	r7, r3
 800afde:	d2fb      	bcs.n	800afd8 <__hexnan+0xcc>
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	b91b      	cbnz	r3, 800afec <__hexnan+0xe0>
 800afe4:	4547      	cmp	r7, r8
 800afe6:	d128      	bne.n	800b03a <__hexnan+0x12e>
 800afe8:	2301      	movs	r3, #1
 800afea:	603b      	str	r3, [r7, #0]
 800afec:	2005      	movs	r0, #5
 800afee:	b007      	add	sp, #28
 800aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff4:	3501      	adds	r5, #1
 800aff6:	2d08      	cmp	r5, #8
 800aff8:	f10b 0b01 	add.w	fp, fp, #1
 800affc:	dd06      	ble.n	800b00c <__hexnan+0x100>
 800affe:	4544      	cmp	r4, r8
 800b000:	d9c1      	bls.n	800af86 <__hexnan+0x7a>
 800b002:	2300      	movs	r3, #0
 800b004:	f844 3c04 	str.w	r3, [r4, #-4]
 800b008:	2501      	movs	r5, #1
 800b00a:	3c04      	subs	r4, #4
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	f000 000f 	and.w	r0, r0, #15
 800b012:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b016:	6020      	str	r0, [r4, #0]
 800b018:	e7b5      	b.n	800af86 <__hexnan+0x7a>
 800b01a:	2508      	movs	r5, #8
 800b01c:	e7b3      	b.n	800af86 <__hexnan+0x7a>
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0dd      	beq.n	800afe0 <__hexnan+0xd4>
 800b024:	f1c3 0320 	rsb	r3, r3, #32
 800b028:	f04f 32ff 	mov.w	r2, #4294967295
 800b02c:	40da      	lsrs	r2, r3
 800b02e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b032:	4013      	ands	r3, r2
 800b034:	f846 3c04 	str.w	r3, [r6, #-4]
 800b038:	e7d2      	b.n	800afe0 <__hexnan+0xd4>
 800b03a:	3f04      	subs	r7, #4
 800b03c:	e7d0      	b.n	800afe0 <__hexnan+0xd4>
 800b03e:	2004      	movs	r0, #4
 800b040:	e7d5      	b.n	800afee <__hexnan+0xe2>
	...

0800b044 <sbrk_aligned>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	4e0f      	ldr	r6, [pc, #60]	@ (800b084 <sbrk_aligned+0x40>)
 800b048:	460c      	mov	r4, r1
 800b04a:	6831      	ldr	r1, [r6, #0]
 800b04c:	4605      	mov	r5, r0
 800b04e:	b911      	cbnz	r1, 800b056 <sbrk_aligned+0x12>
 800b050:	f001 f922 	bl	800c298 <_sbrk_r>
 800b054:	6030      	str	r0, [r6, #0]
 800b056:	4621      	mov	r1, r4
 800b058:	4628      	mov	r0, r5
 800b05a:	f001 f91d 	bl	800c298 <_sbrk_r>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	d103      	bne.n	800b06a <sbrk_aligned+0x26>
 800b062:	f04f 34ff 	mov.w	r4, #4294967295
 800b066:	4620      	mov	r0, r4
 800b068:	bd70      	pop	{r4, r5, r6, pc}
 800b06a:	1cc4      	adds	r4, r0, #3
 800b06c:	f024 0403 	bic.w	r4, r4, #3
 800b070:	42a0      	cmp	r0, r4
 800b072:	d0f8      	beq.n	800b066 <sbrk_aligned+0x22>
 800b074:	1a21      	subs	r1, r4, r0
 800b076:	4628      	mov	r0, r5
 800b078:	f001 f90e 	bl	800c298 <_sbrk_r>
 800b07c:	3001      	adds	r0, #1
 800b07e:	d1f2      	bne.n	800b066 <sbrk_aligned+0x22>
 800b080:	e7ef      	b.n	800b062 <sbrk_aligned+0x1e>
 800b082:	bf00      	nop
 800b084:	20003820 	.word	0x20003820

0800b088 <_malloc_r>:
 800b088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b08c:	1ccd      	adds	r5, r1, #3
 800b08e:	f025 0503 	bic.w	r5, r5, #3
 800b092:	3508      	adds	r5, #8
 800b094:	2d0c      	cmp	r5, #12
 800b096:	bf38      	it	cc
 800b098:	250c      	movcc	r5, #12
 800b09a:	2d00      	cmp	r5, #0
 800b09c:	4606      	mov	r6, r0
 800b09e:	db01      	blt.n	800b0a4 <_malloc_r+0x1c>
 800b0a0:	42a9      	cmp	r1, r5
 800b0a2:	d904      	bls.n	800b0ae <_malloc_r+0x26>
 800b0a4:	230c      	movs	r3, #12
 800b0a6:	6033      	str	r3, [r6, #0]
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b184 <_malloc_r+0xfc>
 800b0b2:	f000 f87b 	bl	800b1ac <__malloc_lock>
 800b0b6:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ba:	461c      	mov	r4, r3
 800b0bc:	bb44      	cbnz	r4, 800b110 <_malloc_r+0x88>
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f7ff ffbf 	bl	800b044 <sbrk_aligned>
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	d158      	bne.n	800b17e <_malloc_r+0xf6>
 800b0cc:	f8d8 4000 	ldr.w	r4, [r8]
 800b0d0:	4627      	mov	r7, r4
 800b0d2:	2f00      	cmp	r7, #0
 800b0d4:	d143      	bne.n	800b15e <_malloc_r+0xd6>
 800b0d6:	2c00      	cmp	r4, #0
 800b0d8:	d04b      	beq.n	800b172 <_malloc_r+0xea>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	4639      	mov	r1, r7
 800b0de:	4630      	mov	r0, r6
 800b0e0:	eb04 0903 	add.w	r9, r4, r3
 800b0e4:	f001 f8d8 	bl	800c298 <_sbrk_r>
 800b0e8:	4581      	cmp	r9, r0
 800b0ea:	d142      	bne.n	800b172 <_malloc_r+0xea>
 800b0ec:	6821      	ldr	r1, [r4, #0]
 800b0ee:	1a6d      	subs	r5, r5, r1
 800b0f0:	4629      	mov	r1, r5
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7ff ffa6 	bl	800b044 <sbrk_aligned>
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	d03a      	beq.n	800b172 <_malloc_r+0xea>
 800b0fc:	6823      	ldr	r3, [r4, #0]
 800b0fe:	442b      	add	r3, r5
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	f8d8 3000 	ldr.w	r3, [r8]
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	bb62      	cbnz	r2, 800b164 <_malloc_r+0xdc>
 800b10a:	f8c8 7000 	str.w	r7, [r8]
 800b10e:	e00f      	b.n	800b130 <_malloc_r+0xa8>
 800b110:	6822      	ldr	r2, [r4, #0]
 800b112:	1b52      	subs	r2, r2, r5
 800b114:	d420      	bmi.n	800b158 <_malloc_r+0xd0>
 800b116:	2a0b      	cmp	r2, #11
 800b118:	d917      	bls.n	800b14a <_malloc_r+0xc2>
 800b11a:	1961      	adds	r1, r4, r5
 800b11c:	42a3      	cmp	r3, r4
 800b11e:	6025      	str	r5, [r4, #0]
 800b120:	bf18      	it	ne
 800b122:	6059      	strne	r1, [r3, #4]
 800b124:	6863      	ldr	r3, [r4, #4]
 800b126:	bf08      	it	eq
 800b128:	f8c8 1000 	streq.w	r1, [r8]
 800b12c:	5162      	str	r2, [r4, r5]
 800b12e:	604b      	str	r3, [r1, #4]
 800b130:	4630      	mov	r0, r6
 800b132:	f000 f841 	bl	800b1b8 <__malloc_unlock>
 800b136:	f104 000b 	add.w	r0, r4, #11
 800b13a:	1d23      	adds	r3, r4, #4
 800b13c:	f020 0007 	bic.w	r0, r0, #7
 800b140:	1ac2      	subs	r2, r0, r3
 800b142:	bf1c      	itt	ne
 800b144:	1a1b      	subne	r3, r3, r0
 800b146:	50a3      	strne	r3, [r4, r2]
 800b148:	e7af      	b.n	800b0aa <_malloc_r+0x22>
 800b14a:	6862      	ldr	r2, [r4, #4]
 800b14c:	42a3      	cmp	r3, r4
 800b14e:	bf0c      	ite	eq
 800b150:	f8c8 2000 	streq.w	r2, [r8]
 800b154:	605a      	strne	r2, [r3, #4]
 800b156:	e7eb      	b.n	800b130 <_malloc_r+0xa8>
 800b158:	4623      	mov	r3, r4
 800b15a:	6864      	ldr	r4, [r4, #4]
 800b15c:	e7ae      	b.n	800b0bc <_malloc_r+0x34>
 800b15e:	463c      	mov	r4, r7
 800b160:	687f      	ldr	r7, [r7, #4]
 800b162:	e7b6      	b.n	800b0d2 <_malloc_r+0x4a>
 800b164:	461a      	mov	r2, r3
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	42a3      	cmp	r3, r4
 800b16a:	d1fb      	bne.n	800b164 <_malloc_r+0xdc>
 800b16c:	2300      	movs	r3, #0
 800b16e:	6053      	str	r3, [r2, #4]
 800b170:	e7de      	b.n	800b130 <_malloc_r+0xa8>
 800b172:	230c      	movs	r3, #12
 800b174:	6033      	str	r3, [r6, #0]
 800b176:	4630      	mov	r0, r6
 800b178:	f000 f81e 	bl	800b1b8 <__malloc_unlock>
 800b17c:	e794      	b.n	800b0a8 <_malloc_r+0x20>
 800b17e:	6005      	str	r5, [r0, #0]
 800b180:	e7d6      	b.n	800b130 <_malloc_r+0xa8>
 800b182:	bf00      	nop
 800b184:	20003824 	.word	0x20003824

0800b188 <__ascii_mbtowc>:
 800b188:	b082      	sub	sp, #8
 800b18a:	b901      	cbnz	r1, 800b18e <__ascii_mbtowc+0x6>
 800b18c:	a901      	add	r1, sp, #4
 800b18e:	b142      	cbz	r2, 800b1a2 <__ascii_mbtowc+0x1a>
 800b190:	b14b      	cbz	r3, 800b1a6 <__ascii_mbtowc+0x1e>
 800b192:	7813      	ldrb	r3, [r2, #0]
 800b194:	600b      	str	r3, [r1, #0]
 800b196:	7812      	ldrb	r2, [r2, #0]
 800b198:	1e10      	subs	r0, r2, #0
 800b19a:	bf18      	it	ne
 800b19c:	2001      	movne	r0, #1
 800b19e:	b002      	add	sp, #8
 800b1a0:	4770      	bx	lr
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	e7fb      	b.n	800b19e <__ascii_mbtowc+0x16>
 800b1a6:	f06f 0001 	mvn.w	r0, #1
 800b1aa:	e7f8      	b.n	800b19e <__ascii_mbtowc+0x16>

0800b1ac <__malloc_lock>:
 800b1ac:	4801      	ldr	r0, [pc, #4]	@ (800b1b4 <__malloc_lock+0x8>)
 800b1ae:	f7ff bb9c 	b.w	800a8ea <__retarget_lock_acquire_recursive>
 800b1b2:	bf00      	nop
 800b1b4:	2000381c 	.word	0x2000381c

0800b1b8 <__malloc_unlock>:
 800b1b8:	4801      	ldr	r0, [pc, #4]	@ (800b1c0 <__malloc_unlock+0x8>)
 800b1ba:	f7ff bb97 	b.w	800a8ec <__retarget_lock_release_recursive>
 800b1be:	bf00      	nop
 800b1c0:	2000381c 	.word	0x2000381c

0800b1c4 <_Balloc>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	69c6      	ldr	r6, [r0, #28]
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	460d      	mov	r5, r1
 800b1cc:	b976      	cbnz	r6, 800b1ec <_Balloc+0x28>
 800b1ce:	2010      	movs	r0, #16
 800b1d0:	f001 f8a4 	bl	800c31c <malloc>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	61e0      	str	r0, [r4, #28]
 800b1d8:	b920      	cbnz	r0, 800b1e4 <_Balloc+0x20>
 800b1da:	4b18      	ldr	r3, [pc, #96]	@ (800b23c <_Balloc+0x78>)
 800b1dc:	4818      	ldr	r0, [pc, #96]	@ (800b240 <_Balloc+0x7c>)
 800b1de:	216b      	movs	r1, #107	@ 0x6b
 800b1e0:	f001 f86a 	bl	800c2b8 <__assert_func>
 800b1e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1e8:	6006      	str	r6, [r0, #0]
 800b1ea:	60c6      	str	r6, [r0, #12]
 800b1ec:	69e6      	ldr	r6, [r4, #28]
 800b1ee:	68f3      	ldr	r3, [r6, #12]
 800b1f0:	b183      	cbz	r3, 800b214 <_Balloc+0x50>
 800b1f2:	69e3      	ldr	r3, [r4, #28]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1fa:	b9b8      	cbnz	r0, 800b22c <_Balloc+0x68>
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	fa01 f605 	lsl.w	r6, r1, r5
 800b202:	1d72      	adds	r2, r6, #5
 800b204:	0092      	lsls	r2, r2, #2
 800b206:	4620      	mov	r0, r4
 800b208:	f001 f874 	bl	800c2f4 <_calloc_r>
 800b20c:	b160      	cbz	r0, 800b228 <_Balloc+0x64>
 800b20e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b212:	e00e      	b.n	800b232 <_Balloc+0x6e>
 800b214:	2221      	movs	r2, #33	@ 0x21
 800b216:	2104      	movs	r1, #4
 800b218:	4620      	mov	r0, r4
 800b21a:	f001 f86b 	bl	800c2f4 <_calloc_r>
 800b21e:	69e3      	ldr	r3, [r4, #28]
 800b220:	60f0      	str	r0, [r6, #12]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e4      	bne.n	800b1f2 <_Balloc+0x2e>
 800b228:	2000      	movs	r0, #0
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
 800b22c:	6802      	ldr	r2, [r0, #0]
 800b22e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b232:	2300      	movs	r3, #0
 800b234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b238:	e7f7      	b.n	800b22a <_Balloc+0x66>
 800b23a:	bf00      	nop
 800b23c:	0800d6ca 	.word	0x0800d6ca
 800b240:	0800d6e1 	.word	0x0800d6e1

0800b244 <_Bfree>:
 800b244:	b570      	push	{r4, r5, r6, lr}
 800b246:	69c6      	ldr	r6, [r0, #28]
 800b248:	4605      	mov	r5, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	b976      	cbnz	r6, 800b26c <_Bfree+0x28>
 800b24e:	2010      	movs	r0, #16
 800b250:	f001 f864 	bl	800c31c <malloc>
 800b254:	4602      	mov	r2, r0
 800b256:	61e8      	str	r0, [r5, #28]
 800b258:	b920      	cbnz	r0, 800b264 <_Bfree+0x20>
 800b25a:	4b09      	ldr	r3, [pc, #36]	@ (800b280 <_Bfree+0x3c>)
 800b25c:	4809      	ldr	r0, [pc, #36]	@ (800b284 <_Bfree+0x40>)
 800b25e:	218f      	movs	r1, #143	@ 0x8f
 800b260:	f001 f82a 	bl	800c2b8 <__assert_func>
 800b264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b268:	6006      	str	r6, [r0, #0]
 800b26a:	60c6      	str	r6, [r0, #12]
 800b26c:	b13c      	cbz	r4, 800b27e <_Bfree+0x3a>
 800b26e:	69eb      	ldr	r3, [r5, #28]
 800b270:	6862      	ldr	r2, [r4, #4]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b278:	6021      	str	r1, [r4, #0]
 800b27a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b27e:	bd70      	pop	{r4, r5, r6, pc}
 800b280:	0800d6ca 	.word	0x0800d6ca
 800b284:	0800d6e1 	.word	0x0800d6e1

0800b288 <__multadd>:
 800b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b28c:	690d      	ldr	r5, [r1, #16]
 800b28e:	4607      	mov	r7, r0
 800b290:	460c      	mov	r4, r1
 800b292:	461e      	mov	r6, r3
 800b294:	f101 0c14 	add.w	ip, r1, #20
 800b298:	2000      	movs	r0, #0
 800b29a:	f8dc 3000 	ldr.w	r3, [ip]
 800b29e:	b299      	uxth	r1, r3
 800b2a0:	fb02 6101 	mla	r1, r2, r1, r6
 800b2a4:	0c1e      	lsrs	r6, r3, #16
 800b2a6:	0c0b      	lsrs	r3, r1, #16
 800b2a8:	fb02 3306 	mla	r3, r2, r6, r3
 800b2ac:	b289      	uxth	r1, r1
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2b4:	4285      	cmp	r5, r0
 800b2b6:	f84c 1b04 	str.w	r1, [ip], #4
 800b2ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2be:	dcec      	bgt.n	800b29a <__multadd+0x12>
 800b2c0:	b30e      	cbz	r6, 800b306 <__multadd+0x7e>
 800b2c2:	68a3      	ldr	r3, [r4, #8]
 800b2c4:	42ab      	cmp	r3, r5
 800b2c6:	dc19      	bgt.n	800b2fc <__multadd+0x74>
 800b2c8:	6861      	ldr	r1, [r4, #4]
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	3101      	adds	r1, #1
 800b2ce:	f7ff ff79 	bl	800b1c4 <_Balloc>
 800b2d2:	4680      	mov	r8, r0
 800b2d4:	b928      	cbnz	r0, 800b2e2 <__multadd+0x5a>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b30c <__multadd+0x84>)
 800b2da:	480d      	ldr	r0, [pc, #52]	@ (800b310 <__multadd+0x88>)
 800b2dc:	21ba      	movs	r1, #186	@ 0xba
 800b2de:	f000 ffeb 	bl	800c2b8 <__assert_func>
 800b2e2:	6922      	ldr	r2, [r4, #16]
 800b2e4:	3202      	adds	r2, #2
 800b2e6:	f104 010c 	add.w	r1, r4, #12
 800b2ea:	0092      	lsls	r2, r2, #2
 800b2ec:	300c      	adds	r0, #12
 800b2ee:	f7ff fb06 	bl	800a8fe <memcpy>
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	f7ff ffa5 	bl	800b244 <_Bfree>
 800b2fa:	4644      	mov	r4, r8
 800b2fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b300:	3501      	adds	r5, #1
 800b302:	615e      	str	r6, [r3, #20]
 800b304:	6125      	str	r5, [r4, #16]
 800b306:	4620      	mov	r0, r4
 800b308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b30c:	0800d659 	.word	0x0800d659
 800b310:	0800d6e1 	.word	0x0800d6e1

0800b314 <__s2b>:
 800b314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b318:	460c      	mov	r4, r1
 800b31a:	4615      	mov	r5, r2
 800b31c:	461f      	mov	r7, r3
 800b31e:	2209      	movs	r2, #9
 800b320:	3308      	adds	r3, #8
 800b322:	4606      	mov	r6, r0
 800b324:	fb93 f3f2 	sdiv	r3, r3, r2
 800b328:	2100      	movs	r1, #0
 800b32a:	2201      	movs	r2, #1
 800b32c:	429a      	cmp	r2, r3
 800b32e:	db09      	blt.n	800b344 <__s2b+0x30>
 800b330:	4630      	mov	r0, r6
 800b332:	f7ff ff47 	bl	800b1c4 <_Balloc>
 800b336:	b940      	cbnz	r0, 800b34a <__s2b+0x36>
 800b338:	4602      	mov	r2, r0
 800b33a:	4b19      	ldr	r3, [pc, #100]	@ (800b3a0 <__s2b+0x8c>)
 800b33c:	4819      	ldr	r0, [pc, #100]	@ (800b3a4 <__s2b+0x90>)
 800b33e:	21d3      	movs	r1, #211	@ 0xd3
 800b340:	f000 ffba 	bl	800c2b8 <__assert_func>
 800b344:	0052      	lsls	r2, r2, #1
 800b346:	3101      	adds	r1, #1
 800b348:	e7f0      	b.n	800b32c <__s2b+0x18>
 800b34a:	9b08      	ldr	r3, [sp, #32]
 800b34c:	6143      	str	r3, [r0, #20]
 800b34e:	2d09      	cmp	r5, #9
 800b350:	f04f 0301 	mov.w	r3, #1
 800b354:	6103      	str	r3, [r0, #16]
 800b356:	dd16      	ble.n	800b386 <__s2b+0x72>
 800b358:	f104 0909 	add.w	r9, r4, #9
 800b35c:	46c8      	mov	r8, r9
 800b35e:	442c      	add	r4, r5
 800b360:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b364:	4601      	mov	r1, r0
 800b366:	3b30      	subs	r3, #48	@ 0x30
 800b368:	220a      	movs	r2, #10
 800b36a:	4630      	mov	r0, r6
 800b36c:	f7ff ff8c 	bl	800b288 <__multadd>
 800b370:	45a0      	cmp	r8, r4
 800b372:	d1f5      	bne.n	800b360 <__s2b+0x4c>
 800b374:	f1a5 0408 	sub.w	r4, r5, #8
 800b378:	444c      	add	r4, r9
 800b37a:	1b2d      	subs	r5, r5, r4
 800b37c:	1963      	adds	r3, r4, r5
 800b37e:	42bb      	cmp	r3, r7
 800b380:	db04      	blt.n	800b38c <__s2b+0x78>
 800b382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b386:	340a      	adds	r4, #10
 800b388:	2509      	movs	r5, #9
 800b38a:	e7f6      	b.n	800b37a <__s2b+0x66>
 800b38c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b390:	4601      	mov	r1, r0
 800b392:	3b30      	subs	r3, #48	@ 0x30
 800b394:	220a      	movs	r2, #10
 800b396:	4630      	mov	r0, r6
 800b398:	f7ff ff76 	bl	800b288 <__multadd>
 800b39c:	e7ee      	b.n	800b37c <__s2b+0x68>
 800b39e:	bf00      	nop
 800b3a0:	0800d659 	.word	0x0800d659
 800b3a4:	0800d6e1 	.word	0x0800d6e1

0800b3a8 <__hi0bits>:
 800b3a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	bf36      	itet	cc
 800b3b0:	0403      	lslcc	r3, r0, #16
 800b3b2:	2000      	movcs	r0, #0
 800b3b4:	2010      	movcc	r0, #16
 800b3b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3ba:	bf3c      	itt	cc
 800b3bc:	021b      	lslcc	r3, r3, #8
 800b3be:	3008      	addcc	r0, #8
 800b3c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3c4:	bf3c      	itt	cc
 800b3c6:	011b      	lslcc	r3, r3, #4
 800b3c8:	3004      	addcc	r0, #4
 800b3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ce:	bf3c      	itt	cc
 800b3d0:	009b      	lslcc	r3, r3, #2
 800b3d2:	3002      	addcc	r0, #2
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	db05      	blt.n	800b3e4 <__hi0bits+0x3c>
 800b3d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b3dc:	f100 0001 	add.w	r0, r0, #1
 800b3e0:	bf08      	it	eq
 800b3e2:	2020      	moveq	r0, #32
 800b3e4:	4770      	bx	lr

0800b3e6 <__lo0bits>:
 800b3e6:	6803      	ldr	r3, [r0, #0]
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	f013 0007 	ands.w	r0, r3, #7
 800b3ee:	d00b      	beq.n	800b408 <__lo0bits+0x22>
 800b3f0:	07d9      	lsls	r1, r3, #31
 800b3f2:	d421      	bmi.n	800b438 <__lo0bits+0x52>
 800b3f4:	0798      	lsls	r0, r3, #30
 800b3f6:	bf49      	itett	mi
 800b3f8:	085b      	lsrmi	r3, r3, #1
 800b3fa:	089b      	lsrpl	r3, r3, #2
 800b3fc:	2001      	movmi	r0, #1
 800b3fe:	6013      	strmi	r3, [r2, #0]
 800b400:	bf5c      	itt	pl
 800b402:	6013      	strpl	r3, [r2, #0]
 800b404:	2002      	movpl	r0, #2
 800b406:	4770      	bx	lr
 800b408:	b299      	uxth	r1, r3
 800b40a:	b909      	cbnz	r1, 800b410 <__lo0bits+0x2a>
 800b40c:	0c1b      	lsrs	r3, r3, #16
 800b40e:	2010      	movs	r0, #16
 800b410:	b2d9      	uxtb	r1, r3
 800b412:	b909      	cbnz	r1, 800b418 <__lo0bits+0x32>
 800b414:	3008      	adds	r0, #8
 800b416:	0a1b      	lsrs	r3, r3, #8
 800b418:	0719      	lsls	r1, r3, #28
 800b41a:	bf04      	itt	eq
 800b41c:	091b      	lsreq	r3, r3, #4
 800b41e:	3004      	addeq	r0, #4
 800b420:	0799      	lsls	r1, r3, #30
 800b422:	bf04      	itt	eq
 800b424:	089b      	lsreq	r3, r3, #2
 800b426:	3002      	addeq	r0, #2
 800b428:	07d9      	lsls	r1, r3, #31
 800b42a:	d403      	bmi.n	800b434 <__lo0bits+0x4e>
 800b42c:	085b      	lsrs	r3, r3, #1
 800b42e:	f100 0001 	add.w	r0, r0, #1
 800b432:	d003      	beq.n	800b43c <__lo0bits+0x56>
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	4770      	bx	lr
 800b438:	2000      	movs	r0, #0
 800b43a:	4770      	bx	lr
 800b43c:	2020      	movs	r0, #32
 800b43e:	4770      	bx	lr

0800b440 <__i2b>:
 800b440:	b510      	push	{r4, lr}
 800b442:	460c      	mov	r4, r1
 800b444:	2101      	movs	r1, #1
 800b446:	f7ff febd 	bl	800b1c4 <_Balloc>
 800b44a:	4602      	mov	r2, r0
 800b44c:	b928      	cbnz	r0, 800b45a <__i2b+0x1a>
 800b44e:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <__i2b+0x24>)
 800b450:	4805      	ldr	r0, [pc, #20]	@ (800b468 <__i2b+0x28>)
 800b452:	f240 1145 	movw	r1, #325	@ 0x145
 800b456:	f000 ff2f 	bl	800c2b8 <__assert_func>
 800b45a:	2301      	movs	r3, #1
 800b45c:	6144      	str	r4, [r0, #20]
 800b45e:	6103      	str	r3, [r0, #16]
 800b460:	bd10      	pop	{r4, pc}
 800b462:	bf00      	nop
 800b464:	0800d659 	.word	0x0800d659
 800b468:	0800d6e1 	.word	0x0800d6e1

0800b46c <__multiply>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	4614      	mov	r4, r2
 800b472:	690a      	ldr	r2, [r1, #16]
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	429a      	cmp	r2, r3
 800b478:	bfa8      	it	ge
 800b47a:	4623      	movge	r3, r4
 800b47c:	460f      	mov	r7, r1
 800b47e:	bfa4      	itt	ge
 800b480:	460c      	movge	r4, r1
 800b482:	461f      	movge	r7, r3
 800b484:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b488:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b48c:	68a3      	ldr	r3, [r4, #8]
 800b48e:	6861      	ldr	r1, [r4, #4]
 800b490:	eb0a 0609 	add.w	r6, sl, r9
 800b494:	42b3      	cmp	r3, r6
 800b496:	b085      	sub	sp, #20
 800b498:	bfb8      	it	lt
 800b49a:	3101      	addlt	r1, #1
 800b49c:	f7ff fe92 	bl	800b1c4 <_Balloc>
 800b4a0:	b930      	cbnz	r0, 800b4b0 <__multiply+0x44>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	4b44      	ldr	r3, [pc, #272]	@ (800b5b8 <__multiply+0x14c>)
 800b4a6:	4845      	ldr	r0, [pc, #276]	@ (800b5bc <__multiply+0x150>)
 800b4a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b4ac:	f000 ff04 	bl	800c2b8 <__assert_func>
 800b4b0:	f100 0514 	add.w	r5, r0, #20
 800b4b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	4543      	cmp	r3, r8
 800b4be:	d321      	bcc.n	800b504 <__multiply+0x98>
 800b4c0:	f107 0114 	add.w	r1, r7, #20
 800b4c4:	f104 0214 	add.w	r2, r4, #20
 800b4c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b4cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	1b13      	subs	r3, r2, r4
 800b4d4:	3b15      	subs	r3, #21
 800b4d6:	f023 0303 	bic.w	r3, r3, #3
 800b4da:	3304      	adds	r3, #4
 800b4dc:	f104 0715 	add.w	r7, r4, #21
 800b4e0:	42ba      	cmp	r2, r7
 800b4e2:	bf38      	it	cc
 800b4e4:	2304      	movcc	r3, #4
 800b4e6:	9301      	str	r3, [sp, #4]
 800b4e8:	9b02      	ldr	r3, [sp, #8]
 800b4ea:	9103      	str	r1, [sp, #12]
 800b4ec:	428b      	cmp	r3, r1
 800b4ee:	d80c      	bhi.n	800b50a <__multiply+0x9e>
 800b4f0:	2e00      	cmp	r6, #0
 800b4f2:	dd03      	ble.n	800b4fc <__multiply+0x90>
 800b4f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d05b      	beq.n	800b5b4 <__multiply+0x148>
 800b4fc:	6106      	str	r6, [r0, #16]
 800b4fe:	b005      	add	sp, #20
 800b500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b504:	f843 2b04 	str.w	r2, [r3], #4
 800b508:	e7d8      	b.n	800b4bc <__multiply+0x50>
 800b50a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b50e:	f1ba 0f00 	cmp.w	sl, #0
 800b512:	d024      	beq.n	800b55e <__multiply+0xf2>
 800b514:	f104 0e14 	add.w	lr, r4, #20
 800b518:	46a9      	mov	r9, r5
 800b51a:	f04f 0c00 	mov.w	ip, #0
 800b51e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b522:	f8d9 3000 	ldr.w	r3, [r9]
 800b526:	fa1f fb87 	uxth.w	fp, r7
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b530:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b534:	f8d9 7000 	ldr.w	r7, [r9]
 800b538:	4463      	add	r3, ip
 800b53a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b53e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b542:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b546:	b29b      	uxth	r3, r3
 800b548:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b54c:	4572      	cmp	r2, lr
 800b54e:	f849 3b04 	str.w	r3, [r9], #4
 800b552:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b556:	d8e2      	bhi.n	800b51e <__multiply+0xb2>
 800b558:	9b01      	ldr	r3, [sp, #4]
 800b55a:	f845 c003 	str.w	ip, [r5, r3]
 800b55e:	9b03      	ldr	r3, [sp, #12]
 800b560:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b564:	3104      	adds	r1, #4
 800b566:	f1b9 0f00 	cmp.w	r9, #0
 800b56a:	d021      	beq.n	800b5b0 <__multiply+0x144>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	f104 0c14 	add.w	ip, r4, #20
 800b572:	46ae      	mov	lr, r5
 800b574:	f04f 0a00 	mov.w	sl, #0
 800b578:	f8bc b000 	ldrh.w	fp, [ip]
 800b57c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b580:	fb09 770b 	mla	r7, r9, fp, r7
 800b584:	4457      	add	r7, sl
 800b586:	b29b      	uxth	r3, r3
 800b588:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b58c:	f84e 3b04 	str.w	r3, [lr], #4
 800b590:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b598:	f8be 3000 	ldrh.w	r3, [lr]
 800b59c:	fb09 330a 	mla	r3, r9, sl, r3
 800b5a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b5a4:	4562      	cmp	r2, ip
 800b5a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5aa:	d8e5      	bhi.n	800b578 <__multiply+0x10c>
 800b5ac:	9f01      	ldr	r7, [sp, #4]
 800b5ae:	51eb      	str	r3, [r5, r7]
 800b5b0:	3504      	adds	r5, #4
 800b5b2:	e799      	b.n	800b4e8 <__multiply+0x7c>
 800b5b4:	3e01      	subs	r6, #1
 800b5b6:	e79b      	b.n	800b4f0 <__multiply+0x84>
 800b5b8:	0800d659 	.word	0x0800d659
 800b5bc:	0800d6e1 	.word	0x0800d6e1

0800b5c0 <__pow5mult>:
 800b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	4615      	mov	r5, r2
 800b5c6:	f012 0203 	ands.w	r2, r2, #3
 800b5ca:	4607      	mov	r7, r0
 800b5cc:	460e      	mov	r6, r1
 800b5ce:	d007      	beq.n	800b5e0 <__pow5mult+0x20>
 800b5d0:	4c25      	ldr	r4, [pc, #148]	@ (800b668 <__pow5mult+0xa8>)
 800b5d2:	3a01      	subs	r2, #1
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5da:	f7ff fe55 	bl	800b288 <__multadd>
 800b5de:	4606      	mov	r6, r0
 800b5e0:	10ad      	asrs	r5, r5, #2
 800b5e2:	d03d      	beq.n	800b660 <__pow5mult+0xa0>
 800b5e4:	69fc      	ldr	r4, [r7, #28]
 800b5e6:	b97c      	cbnz	r4, 800b608 <__pow5mult+0x48>
 800b5e8:	2010      	movs	r0, #16
 800b5ea:	f000 fe97 	bl	800c31c <malloc>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	61f8      	str	r0, [r7, #28]
 800b5f2:	b928      	cbnz	r0, 800b600 <__pow5mult+0x40>
 800b5f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b66c <__pow5mult+0xac>)
 800b5f6:	481e      	ldr	r0, [pc, #120]	@ (800b670 <__pow5mult+0xb0>)
 800b5f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b5fc:	f000 fe5c 	bl	800c2b8 <__assert_func>
 800b600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b604:	6004      	str	r4, [r0, #0]
 800b606:	60c4      	str	r4, [r0, #12]
 800b608:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b60c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b610:	b94c      	cbnz	r4, 800b626 <__pow5mult+0x66>
 800b612:	f240 2171 	movw	r1, #625	@ 0x271
 800b616:	4638      	mov	r0, r7
 800b618:	f7ff ff12 	bl	800b440 <__i2b>
 800b61c:	2300      	movs	r3, #0
 800b61e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b622:	4604      	mov	r4, r0
 800b624:	6003      	str	r3, [r0, #0]
 800b626:	f04f 0900 	mov.w	r9, #0
 800b62a:	07eb      	lsls	r3, r5, #31
 800b62c:	d50a      	bpl.n	800b644 <__pow5mult+0x84>
 800b62e:	4631      	mov	r1, r6
 800b630:	4622      	mov	r2, r4
 800b632:	4638      	mov	r0, r7
 800b634:	f7ff ff1a 	bl	800b46c <__multiply>
 800b638:	4631      	mov	r1, r6
 800b63a:	4680      	mov	r8, r0
 800b63c:	4638      	mov	r0, r7
 800b63e:	f7ff fe01 	bl	800b244 <_Bfree>
 800b642:	4646      	mov	r6, r8
 800b644:	106d      	asrs	r5, r5, #1
 800b646:	d00b      	beq.n	800b660 <__pow5mult+0xa0>
 800b648:	6820      	ldr	r0, [r4, #0]
 800b64a:	b938      	cbnz	r0, 800b65c <__pow5mult+0x9c>
 800b64c:	4622      	mov	r2, r4
 800b64e:	4621      	mov	r1, r4
 800b650:	4638      	mov	r0, r7
 800b652:	f7ff ff0b 	bl	800b46c <__multiply>
 800b656:	6020      	str	r0, [r4, #0]
 800b658:	f8c0 9000 	str.w	r9, [r0]
 800b65c:	4604      	mov	r4, r0
 800b65e:	e7e4      	b.n	800b62a <__pow5mult+0x6a>
 800b660:	4630      	mov	r0, r6
 800b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b666:	bf00      	nop
 800b668:	0800d73c 	.word	0x0800d73c
 800b66c:	0800d6ca 	.word	0x0800d6ca
 800b670:	0800d6e1 	.word	0x0800d6e1

0800b674 <__lshift>:
 800b674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b678:	460c      	mov	r4, r1
 800b67a:	6849      	ldr	r1, [r1, #4]
 800b67c:	6923      	ldr	r3, [r4, #16]
 800b67e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	4607      	mov	r7, r0
 800b686:	4691      	mov	r9, r2
 800b688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b68c:	f108 0601 	add.w	r6, r8, #1
 800b690:	42b3      	cmp	r3, r6
 800b692:	db0b      	blt.n	800b6ac <__lshift+0x38>
 800b694:	4638      	mov	r0, r7
 800b696:	f7ff fd95 	bl	800b1c4 <_Balloc>
 800b69a:	4605      	mov	r5, r0
 800b69c:	b948      	cbnz	r0, 800b6b2 <__lshift+0x3e>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	4b28      	ldr	r3, [pc, #160]	@ (800b744 <__lshift+0xd0>)
 800b6a2:	4829      	ldr	r0, [pc, #164]	@ (800b748 <__lshift+0xd4>)
 800b6a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b6a8:	f000 fe06 	bl	800c2b8 <__assert_func>
 800b6ac:	3101      	adds	r1, #1
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	e7ee      	b.n	800b690 <__lshift+0x1c>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f100 0114 	add.w	r1, r0, #20
 800b6b8:	f100 0210 	add.w	r2, r0, #16
 800b6bc:	4618      	mov	r0, r3
 800b6be:	4553      	cmp	r3, sl
 800b6c0:	db33      	blt.n	800b72a <__lshift+0xb6>
 800b6c2:	6920      	ldr	r0, [r4, #16]
 800b6c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6c8:	f104 0314 	add.w	r3, r4, #20
 800b6cc:	f019 091f 	ands.w	r9, r9, #31
 800b6d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6d8:	d02b      	beq.n	800b732 <__lshift+0xbe>
 800b6da:	f1c9 0e20 	rsb	lr, r9, #32
 800b6de:	468a      	mov	sl, r1
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	6818      	ldr	r0, [r3, #0]
 800b6e4:	fa00 f009 	lsl.w	r0, r0, r9
 800b6e8:	4310      	orrs	r0, r2
 800b6ea:	f84a 0b04 	str.w	r0, [sl], #4
 800b6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f2:	459c      	cmp	ip, r3
 800b6f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6f8:	d8f3      	bhi.n	800b6e2 <__lshift+0x6e>
 800b6fa:	ebac 0304 	sub.w	r3, ip, r4
 800b6fe:	3b15      	subs	r3, #21
 800b700:	f023 0303 	bic.w	r3, r3, #3
 800b704:	3304      	adds	r3, #4
 800b706:	f104 0015 	add.w	r0, r4, #21
 800b70a:	4584      	cmp	ip, r0
 800b70c:	bf38      	it	cc
 800b70e:	2304      	movcc	r3, #4
 800b710:	50ca      	str	r2, [r1, r3]
 800b712:	b10a      	cbz	r2, 800b718 <__lshift+0xa4>
 800b714:	f108 0602 	add.w	r6, r8, #2
 800b718:	3e01      	subs	r6, #1
 800b71a:	4638      	mov	r0, r7
 800b71c:	612e      	str	r6, [r5, #16]
 800b71e:	4621      	mov	r1, r4
 800b720:	f7ff fd90 	bl	800b244 <_Bfree>
 800b724:	4628      	mov	r0, r5
 800b726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b72e:	3301      	adds	r3, #1
 800b730:	e7c5      	b.n	800b6be <__lshift+0x4a>
 800b732:	3904      	subs	r1, #4
 800b734:	f853 2b04 	ldr.w	r2, [r3], #4
 800b738:	f841 2f04 	str.w	r2, [r1, #4]!
 800b73c:	459c      	cmp	ip, r3
 800b73e:	d8f9      	bhi.n	800b734 <__lshift+0xc0>
 800b740:	e7ea      	b.n	800b718 <__lshift+0xa4>
 800b742:	bf00      	nop
 800b744:	0800d659 	.word	0x0800d659
 800b748:	0800d6e1 	.word	0x0800d6e1

0800b74c <__mcmp>:
 800b74c:	690a      	ldr	r2, [r1, #16]
 800b74e:	4603      	mov	r3, r0
 800b750:	6900      	ldr	r0, [r0, #16]
 800b752:	1a80      	subs	r0, r0, r2
 800b754:	b530      	push	{r4, r5, lr}
 800b756:	d10e      	bne.n	800b776 <__mcmp+0x2a>
 800b758:	3314      	adds	r3, #20
 800b75a:	3114      	adds	r1, #20
 800b75c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b760:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b764:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b768:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b76c:	4295      	cmp	r5, r2
 800b76e:	d003      	beq.n	800b778 <__mcmp+0x2c>
 800b770:	d205      	bcs.n	800b77e <__mcmp+0x32>
 800b772:	f04f 30ff 	mov.w	r0, #4294967295
 800b776:	bd30      	pop	{r4, r5, pc}
 800b778:	42a3      	cmp	r3, r4
 800b77a:	d3f3      	bcc.n	800b764 <__mcmp+0x18>
 800b77c:	e7fb      	b.n	800b776 <__mcmp+0x2a>
 800b77e:	2001      	movs	r0, #1
 800b780:	e7f9      	b.n	800b776 <__mcmp+0x2a>
	...

0800b784 <__mdiff>:
 800b784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	4689      	mov	r9, r1
 800b78a:	4606      	mov	r6, r0
 800b78c:	4611      	mov	r1, r2
 800b78e:	4648      	mov	r0, r9
 800b790:	4614      	mov	r4, r2
 800b792:	f7ff ffdb 	bl	800b74c <__mcmp>
 800b796:	1e05      	subs	r5, r0, #0
 800b798:	d112      	bne.n	800b7c0 <__mdiff+0x3c>
 800b79a:	4629      	mov	r1, r5
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff fd11 	bl	800b1c4 <_Balloc>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	b928      	cbnz	r0, 800b7b2 <__mdiff+0x2e>
 800b7a6:	4b3f      	ldr	r3, [pc, #252]	@ (800b8a4 <__mdiff+0x120>)
 800b7a8:	f240 2137 	movw	r1, #567	@ 0x237
 800b7ac:	483e      	ldr	r0, [pc, #248]	@ (800b8a8 <__mdiff+0x124>)
 800b7ae:	f000 fd83 	bl	800c2b8 <__assert_func>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	b003      	add	sp, #12
 800b7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c0:	bfbc      	itt	lt
 800b7c2:	464b      	movlt	r3, r9
 800b7c4:	46a1      	movlt	r9, r4
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b7cc:	bfba      	itte	lt
 800b7ce:	461c      	movlt	r4, r3
 800b7d0:	2501      	movlt	r5, #1
 800b7d2:	2500      	movge	r5, #0
 800b7d4:	f7ff fcf6 	bl	800b1c4 <_Balloc>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	b918      	cbnz	r0, 800b7e4 <__mdiff+0x60>
 800b7dc:	4b31      	ldr	r3, [pc, #196]	@ (800b8a4 <__mdiff+0x120>)
 800b7de:	f240 2145 	movw	r1, #581	@ 0x245
 800b7e2:	e7e3      	b.n	800b7ac <__mdiff+0x28>
 800b7e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b7e8:	6926      	ldr	r6, [r4, #16]
 800b7ea:	60c5      	str	r5, [r0, #12]
 800b7ec:	f109 0310 	add.w	r3, r9, #16
 800b7f0:	f109 0514 	add.w	r5, r9, #20
 800b7f4:	f104 0e14 	add.w	lr, r4, #20
 800b7f8:	f100 0b14 	add.w	fp, r0, #20
 800b7fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b800:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	46d9      	mov	r9, fp
 800b808:	f04f 0c00 	mov.w	ip, #0
 800b80c:	9b01      	ldr	r3, [sp, #4]
 800b80e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b812:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	fa1f f38a 	uxth.w	r3, sl
 800b81c:	4619      	mov	r1, r3
 800b81e:	b283      	uxth	r3, r0
 800b820:	1acb      	subs	r3, r1, r3
 800b822:	0c00      	lsrs	r0, r0, #16
 800b824:	4463      	add	r3, ip
 800b826:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b82a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b82e:	b29b      	uxth	r3, r3
 800b830:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b834:	4576      	cmp	r6, lr
 800b836:	f849 3b04 	str.w	r3, [r9], #4
 800b83a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b83e:	d8e5      	bhi.n	800b80c <__mdiff+0x88>
 800b840:	1b33      	subs	r3, r6, r4
 800b842:	3b15      	subs	r3, #21
 800b844:	f023 0303 	bic.w	r3, r3, #3
 800b848:	3415      	adds	r4, #21
 800b84a:	3304      	adds	r3, #4
 800b84c:	42a6      	cmp	r6, r4
 800b84e:	bf38      	it	cc
 800b850:	2304      	movcc	r3, #4
 800b852:	441d      	add	r5, r3
 800b854:	445b      	add	r3, fp
 800b856:	461e      	mov	r6, r3
 800b858:	462c      	mov	r4, r5
 800b85a:	4544      	cmp	r4, r8
 800b85c:	d30e      	bcc.n	800b87c <__mdiff+0xf8>
 800b85e:	f108 0103 	add.w	r1, r8, #3
 800b862:	1b49      	subs	r1, r1, r5
 800b864:	f021 0103 	bic.w	r1, r1, #3
 800b868:	3d03      	subs	r5, #3
 800b86a:	45a8      	cmp	r8, r5
 800b86c:	bf38      	it	cc
 800b86e:	2100      	movcc	r1, #0
 800b870:	440b      	add	r3, r1
 800b872:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b876:	b191      	cbz	r1, 800b89e <__mdiff+0x11a>
 800b878:	6117      	str	r7, [r2, #16]
 800b87a:	e79d      	b.n	800b7b8 <__mdiff+0x34>
 800b87c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b880:	46e6      	mov	lr, ip
 800b882:	0c08      	lsrs	r0, r1, #16
 800b884:	fa1c fc81 	uxtah	ip, ip, r1
 800b888:	4471      	add	r1, lr
 800b88a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b88e:	b289      	uxth	r1, r1
 800b890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b894:	f846 1b04 	str.w	r1, [r6], #4
 800b898:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b89c:	e7dd      	b.n	800b85a <__mdiff+0xd6>
 800b89e:	3f01      	subs	r7, #1
 800b8a0:	e7e7      	b.n	800b872 <__mdiff+0xee>
 800b8a2:	bf00      	nop
 800b8a4:	0800d659 	.word	0x0800d659
 800b8a8:	0800d6e1 	.word	0x0800d6e1

0800b8ac <__ulp>:
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	ed8d 0b00 	vstr	d0, [sp]
 800b8b2:	9a01      	ldr	r2, [sp, #4]
 800b8b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f4 <__ulp+0x48>)
 800b8b6:	4013      	ands	r3, r2
 800b8b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	dc08      	bgt.n	800b8d2 <__ulp+0x26>
 800b8c0:	425b      	negs	r3, r3
 800b8c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b8c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b8ca:	da04      	bge.n	800b8d6 <__ulp+0x2a>
 800b8cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b8d0:	4113      	asrs	r3, r2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	e008      	b.n	800b8e8 <__ulp+0x3c>
 800b8d6:	f1a2 0314 	sub.w	r3, r2, #20
 800b8da:	2b1e      	cmp	r3, #30
 800b8dc:	bfda      	itte	le
 800b8de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b8e2:	40da      	lsrle	r2, r3
 800b8e4:	2201      	movgt	r2, #1
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	ec41 0b10 	vmov	d0, r0, r1
 800b8f0:	b002      	add	sp, #8
 800b8f2:	4770      	bx	lr
 800b8f4:	7ff00000 	.word	0x7ff00000

0800b8f8 <__b2d>:
 800b8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fc:	6906      	ldr	r6, [r0, #16]
 800b8fe:	f100 0814 	add.w	r8, r0, #20
 800b902:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b906:	1f37      	subs	r7, r6, #4
 800b908:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b90c:	4610      	mov	r0, r2
 800b90e:	f7ff fd4b 	bl	800b3a8 <__hi0bits>
 800b912:	f1c0 0320 	rsb	r3, r0, #32
 800b916:	280a      	cmp	r0, #10
 800b918:	600b      	str	r3, [r1, #0]
 800b91a:	491b      	ldr	r1, [pc, #108]	@ (800b988 <__b2d+0x90>)
 800b91c:	dc15      	bgt.n	800b94a <__b2d+0x52>
 800b91e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b922:	fa22 f30c 	lsr.w	r3, r2, ip
 800b926:	45b8      	cmp	r8, r7
 800b928:	ea43 0501 	orr.w	r5, r3, r1
 800b92c:	bf34      	ite	cc
 800b92e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b932:	2300      	movcs	r3, #0
 800b934:	3015      	adds	r0, #21
 800b936:	fa02 f000 	lsl.w	r0, r2, r0
 800b93a:	fa23 f30c 	lsr.w	r3, r3, ip
 800b93e:	4303      	orrs	r3, r0
 800b940:	461c      	mov	r4, r3
 800b942:	ec45 4b10 	vmov	d0, r4, r5
 800b946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94a:	45b8      	cmp	r8, r7
 800b94c:	bf3a      	itte	cc
 800b94e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b952:	f1a6 0708 	subcc.w	r7, r6, #8
 800b956:	2300      	movcs	r3, #0
 800b958:	380b      	subs	r0, #11
 800b95a:	d012      	beq.n	800b982 <__b2d+0x8a>
 800b95c:	f1c0 0120 	rsb	r1, r0, #32
 800b960:	fa23 f401 	lsr.w	r4, r3, r1
 800b964:	4082      	lsls	r2, r0
 800b966:	4322      	orrs	r2, r4
 800b968:	4547      	cmp	r7, r8
 800b96a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b96e:	bf8c      	ite	hi
 800b970:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b974:	2200      	movls	r2, #0
 800b976:	4083      	lsls	r3, r0
 800b978:	40ca      	lsrs	r2, r1
 800b97a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b97e:	4313      	orrs	r3, r2
 800b980:	e7de      	b.n	800b940 <__b2d+0x48>
 800b982:	ea42 0501 	orr.w	r5, r2, r1
 800b986:	e7db      	b.n	800b940 <__b2d+0x48>
 800b988:	3ff00000 	.word	0x3ff00000

0800b98c <__d2b>:
 800b98c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b990:	460f      	mov	r7, r1
 800b992:	2101      	movs	r1, #1
 800b994:	ec59 8b10 	vmov	r8, r9, d0
 800b998:	4616      	mov	r6, r2
 800b99a:	f7ff fc13 	bl	800b1c4 <_Balloc>
 800b99e:	4604      	mov	r4, r0
 800b9a0:	b930      	cbnz	r0, 800b9b0 <__d2b+0x24>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	4b23      	ldr	r3, [pc, #140]	@ (800ba34 <__d2b+0xa8>)
 800b9a6:	4824      	ldr	r0, [pc, #144]	@ (800ba38 <__d2b+0xac>)
 800b9a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b9ac:	f000 fc84 	bl	800c2b8 <__assert_func>
 800b9b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9b8:	b10d      	cbz	r5, 800b9be <__d2b+0x32>
 800b9ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	f1b8 0300 	subs.w	r3, r8, #0
 800b9c4:	d023      	beq.n	800ba0e <__d2b+0x82>
 800b9c6:	4668      	mov	r0, sp
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	f7ff fd0c 	bl	800b3e6 <__lo0bits>
 800b9ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9d2:	b1d0      	cbz	r0, 800ba0a <__d2b+0x7e>
 800b9d4:	f1c0 0320 	rsb	r3, r0, #32
 800b9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9dc:	430b      	orrs	r3, r1
 800b9de:	40c2      	lsrs	r2, r0
 800b9e0:	6163      	str	r3, [r4, #20]
 800b9e2:	9201      	str	r2, [sp, #4]
 800b9e4:	9b01      	ldr	r3, [sp, #4]
 800b9e6:	61a3      	str	r3, [r4, #24]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bf0c      	ite	eq
 800b9ec:	2201      	moveq	r2, #1
 800b9ee:	2202      	movne	r2, #2
 800b9f0:	6122      	str	r2, [r4, #16]
 800b9f2:	b1a5      	cbz	r5, 800ba1e <__d2b+0x92>
 800b9f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b9f8:	4405      	add	r5, r0
 800b9fa:	603d      	str	r5, [r7, #0]
 800b9fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba00:	6030      	str	r0, [r6, #0]
 800ba02:	4620      	mov	r0, r4
 800ba04:	b003      	add	sp, #12
 800ba06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba0a:	6161      	str	r1, [r4, #20]
 800ba0c:	e7ea      	b.n	800b9e4 <__d2b+0x58>
 800ba0e:	a801      	add	r0, sp, #4
 800ba10:	f7ff fce9 	bl	800b3e6 <__lo0bits>
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	6163      	str	r3, [r4, #20]
 800ba18:	3020      	adds	r0, #32
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	e7e8      	b.n	800b9f0 <__d2b+0x64>
 800ba1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba26:	6038      	str	r0, [r7, #0]
 800ba28:	6918      	ldr	r0, [r3, #16]
 800ba2a:	f7ff fcbd 	bl	800b3a8 <__hi0bits>
 800ba2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba32:	e7e5      	b.n	800ba00 <__d2b+0x74>
 800ba34:	0800d659 	.word	0x0800d659
 800ba38:	0800d6e1 	.word	0x0800d6e1

0800ba3c <__ratio>:
 800ba3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba40:	b085      	sub	sp, #20
 800ba42:	e9cd 1000 	strd	r1, r0, [sp]
 800ba46:	a902      	add	r1, sp, #8
 800ba48:	f7ff ff56 	bl	800b8f8 <__b2d>
 800ba4c:	9800      	ldr	r0, [sp, #0]
 800ba4e:	a903      	add	r1, sp, #12
 800ba50:	ec55 4b10 	vmov	r4, r5, d0
 800ba54:	f7ff ff50 	bl	800b8f8 <__b2d>
 800ba58:	9b01      	ldr	r3, [sp, #4]
 800ba5a:	6919      	ldr	r1, [r3, #16]
 800ba5c:	9b00      	ldr	r3, [sp, #0]
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	1ac9      	subs	r1, r1, r3
 800ba62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ba66:	1a9b      	subs	r3, r3, r2
 800ba68:	ec5b ab10 	vmov	sl, fp, d0
 800ba6c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	bfce      	itee	gt
 800ba74:	462a      	movgt	r2, r5
 800ba76:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba7a:	465a      	movle	r2, fp
 800ba7c:	462f      	mov	r7, r5
 800ba7e:	46d9      	mov	r9, fp
 800ba80:	bfcc      	ite	gt
 800ba82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba86:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ba8a:	464b      	mov	r3, r9
 800ba8c:	4652      	mov	r2, sl
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4639      	mov	r1, r7
 800ba92:	f7f4 ff0b 	bl	80008ac <__aeabi_ddiv>
 800ba96:	ec41 0b10 	vmov	d0, r0, r1
 800ba9a:	b005      	add	sp, #20
 800ba9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800baa0 <__copybits>:
 800baa0:	3901      	subs	r1, #1
 800baa2:	b570      	push	{r4, r5, r6, lr}
 800baa4:	1149      	asrs	r1, r1, #5
 800baa6:	6914      	ldr	r4, [r2, #16]
 800baa8:	3101      	adds	r1, #1
 800baaa:	f102 0314 	add.w	r3, r2, #20
 800baae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bab2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bab6:	1f05      	subs	r5, r0, #4
 800bab8:	42a3      	cmp	r3, r4
 800baba:	d30c      	bcc.n	800bad6 <__copybits+0x36>
 800babc:	1aa3      	subs	r3, r4, r2
 800babe:	3b11      	subs	r3, #17
 800bac0:	f023 0303 	bic.w	r3, r3, #3
 800bac4:	3211      	adds	r2, #17
 800bac6:	42a2      	cmp	r2, r4
 800bac8:	bf88      	it	hi
 800baca:	2300      	movhi	r3, #0
 800bacc:	4418      	add	r0, r3
 800bace:	2300      	movs	r3, #0
 800bad0:	4288      	cmp	r0, r1
 800bad2:	d305      	bcc.n	800bae0 <__copybits+0x40>
 800bad4:	bd70      	pop	{r4, r5, r6, pc}
 800bad6:	f853 6b04 	ldr.w	r6, [r3], #4
 800bada:	f845 6f04 	str.w	r6, [r5, #4]!
 800bade:	e7eb      	b.n	800bab8 <__copybits+0x18>
 800bae0:	f840 3b04 	str.w	r3, [r0], #4
 800bae4:	e7f4      	b.n	800bad0 <__copybits+0x30>

0800bae6 <__any_on>:
 800bae6:	f100 0214 	add.w	r2, r0, #20
 800baea:	6900      	ldr	r0, [r0, #16]
 800baec:	114b      	asrs	r3, r1, #5
 800baee:	4298      	cmp	r0, r3
 800baf0:	b510      	push	{r4, lr}
 800baf2:	db11      	blt.n	800bb18 <__any_on+0x32>
 800baf4:	dd0a      	ble.n	800bb0c <__any_on+0x26>
 800baf6:	f011 011f 	ands.w	r1, r1, #31
 800bafa:	d007      	beq.n	800bb0c <__any_on+0x26>
 800bafc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb00:	fa24 f001 	lsr.w	r0, r4, r1
 800bb04:	fa00 f101 	lsl.w	r1, r0, r1
 800bb08:	428c      	cmp	r4, r1
 800bb0a:	d10b      	bne.n	800bb24 <__any_on+0x3e>
 800bb0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d803      	bhi.n	800bb1c <__any_on+0x36>
 800bb14:	2000      	movs	r0, #0
 800bb16:	bd10      	pop	{r4, pc}
 800bb18:	4603      	mov	r3, r0
 800bb1a:	e7f7      	b.n	800bb0c <__any_on+0x26>
 800bb1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb20:	2900      	cmp	r1, #0
 800bb22:	d0f5      	beq.n	800bb10 <__any_on+0x2a>
 800bb24:	2001      	movs	r0, #1
 800bb26:	e7f6      	b.n	800bb16 <__any_on+0x30>

0800bb28 <__ascii_wctomb>:
 800bb28:	4603      	mov	r3, r0
 800bb2a:	4608      	mov	r0, r1
 800bb2c:	b141      	cbz	r1, 800bb40 <__ascii_wctomb+0x18>
 800bb2e:	2aff      	cmp	r2, #255	@ 0xff
 800bb30:	d904      	bls.n	800bb3c <__ascii_wctomb+0x14>
 800bb32:	228a      	movs	r2, #138	@ 0x8a
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3a:	4770      	bx	lr
 800bb3c:	700a      	strb	r2, [r1, #0]
 800bb3e:	2001      	movs	r0, #1
 800bb40:	4770      	bx	lr

0800bb42 <__ssputs_r>:
 800bb42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb46:	688e      	ldr	r6, [r1, #8]
 800bb48:	461f      	mov	r7, r3
 800bb4a:	42be      	cmp	r6, r7
 800bb4c:	680b      	ldr	r3, [r1, #0]
 800bb4e:	4682      	mov	sl, r0
 800bb50:	460c      	mov	r4, r1
 800bb52:	4690      	mov	r8, r2
 800bb54:	d82d      	bhi.n	800bbb2 <__ssputs_r+0x70>
 800bb56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb5a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb5e:	d026      	beq.n	800bbae <__ssputs_r+0x6c>
 800bb60:	6965      	ldr	r5, [r4, #20]
 800bb62:	6909      	ldr	r1, [r1, #16]
 800bb64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb68:	eba3 0901 	sub.w	r9, r3, r1
 800bb6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb70:	1c7b      	adds	r3, r7, #1
 800bb72:	444b      	add	r3, r9
 800bb74:	106d      	asrs	r5, r5, #1
 800bb76:	429d      	cmp	r5, r3
 800bb78:	bf38      	it	cc
 800bb7a:	461d      	movcc	r5, r3
 800bb7c:	0553      	lsls	r3, r2, #21
 800bb7e:	d527      	bpl.n	800bbd0 <__ssputs_r+0x8e>
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7ff fa81 	bl	800b088 <_malloc_r>
 800bb86:	4606      	mov	r6, r0
 800bb88:	b360      	cbz	r0, 800bbe4 <__ssputs_r+0xa2>
 800bb8a:	6921      	ldr	r1, [r4, #16]
 800bb8c:	464a      	mov	r2, r9
 800bb8e:	f7fe feb6 	bl	800a8fe <memcpy>
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb9c:	81a3      	strh	r3, [r4, #12]
 800bb9e:	6126      	str	r6, [r4, #16]
 800bba0:	6165      	str	r5, [r4, #20]
 800bba2:	444e      	add	r6, r9
 800bba4:	eba5 0509 	sub.w	r5, r5, r9
 800bba8:	6026      	str	r6, [r4, #0]
 800bbaa:	60a5      	str	r5, [r4, #8]
 800bbac:	463e      	mov	r6, r7
 800bbae:	42be      	cmp	r6, r7
 800bbb0:	d900      	bls.n	800bbb4 <__ssputs_r+0x72>
 800bbb2:	463e      	mov	r6, r7
 800bbb4:	6820      	ldr	r0, [r4, #0]
 800bbb6:	4632      	mov	r2, r6
 800bbb8:	4641      	mov	r1, r8
 800bbba:	f000 fb53 	bl	800c264 <memmove>
 800bbbe:	68a3      	ldr	r3, [r4, #8]
 800bbc0:	1b9b      	subs	r3, r3, r6
 800bbc2:	60a3      	str	r3, [r4, #8]
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	4433      	add	r3, r6
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	2000      	movs	r0, #0
 800bbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbd0:	462a      	mov	r2, r5
 800bbd2:	f000 fbab 	bl	800c32c <_realloc_r>
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d1e0      	bne.n	800bb9e <__ssputs_r+0x5c>
 800bbdc:	6921      	ldr	r1, [r4, #16]
 800bbde:	4650      	mov	r0, sl
 800bbe0:	f7fe feac 	bl	800a93c <_free_r>
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	f8ca 3000 	str.w	r3, [sl]
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf6:	e7e9      	b.n	800bbcc <__ssputs_r+0x8a>

0800bbf8 <_svfiprintf_r>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	4698      	mov	r8, r3
 800bbfe:	898b      	ldrh	r3, [r1, #12]
 800bc00:	061b      	lsls	r3, r3, #24
 800bc02:	b09d      	sub	sp, #116	@ 0x74
 800bc04:	4607      	mov	r7, r0
 800bc06:	460d      	mov	r5, r1
 800bc08:	4614      	mov	r4, r2
 800bc0a:	d510      	bpl.n	800bc2e <_svfiprintf_r+0x36>
 800bc0c:	690b      	ldr	r3, [r1, #16]
 800bc0e:	b973      	cbnz	r3, 800bc2e <_svfiprintf_r+0x36>
 800bc10:	2140      	movs	r1, #64	@ 0x40
 800bc12:	f7ff fa39 	bl	800b088 <_malloc_r>
 800bc16:	6028      	str	r0, [r5, #0]
 800bc18:	6128      	str	r0, [r5, #16]
 800bc1a:	b930      	cbnz	r0, 800bc2a <_svfiprintf_r+0x32>
 800bc1c:	230c      	movs	r3, #12
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	f04f 30ff 	mov.w	r0, #4294967295
 800bc24:	b01d      	add	sp, #116	@ 0x74
 800bc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2a:	2340      	movs	r3, #64	@ 0x40
 800bc2c:	616b      	str	r3, [r5, #20]
 800bc2e:	2300      	movs	r3, #0
 800bc30:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc32:	2320      	movs	r3, #32
 800bc34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc38:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc3c:	2330      	movs	r3, #48	@ 0x30
 800bc3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bddc <_svfiprintf_r+0x1e4>
 800bc42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc46:	f04f 0901 	mov.w	r9, #1
 800bc4a:	4623      	mov	r3, r4
 800bc4c:	469a      	mov	sl, r3
 800bc4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc52:	b10a      	cbz	r2, 800bc58 <_svfiprintf_r+0x60>
 800bc54:	2a25      	cmp	r2, #37	@ 0x25
 800bc56:	d1f9      	bne.n	800bc4c <_svfiprintf_r+0x54>
 800bc58:	ebba 0b04 	subs.w	fp, sl, r4
 800bc5c:	d00b      	beq.n	800bc76 <_svfiprintf_r+0x7e>
 800bc5e:	465b      	mov	r3, fp
 800bc60:	4622      	mov	r2, r4
 800bc62:	4629      	mov	r1, r5
 800bc64:	4638      	mov	r0, r7
 800bc66:	f7ff ff6c 	bl	800bb42 <__ssputs_r>
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	f000 80a7 	beq.w	800bdbe <_svfiprintf_r+0x1c6>
 800bc70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc72:	445a      	add	r2, fp
 800bc74:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc76:	f89a 3000 	ldrb.w	r3, [sl]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 809f 	beq.w	800bdbe <_svfiprintf_r+0x1c6>
 800bc80:	2300      	movs	r3, #0
 800bc82:	f04f 32ff 	mov.w	r2, #4294967295
 800bc86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc8a:	f10a 0a01 	add.w	sl, sl, #1
 800bc8e:	9304      	str	r3, [sp, #16]
 800bc90:	9307      	str	r3, [sp, #28]
 800bc92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc96:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc98:	4654      	mov	r4, sl
 800bc9a:	2205      	movs	r2, #5
 800bc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca0:	484e      	ldr	r0, [pc, #312]	@ (800bddc <_svfiprintf_r+0x1e4>)
 800bca2:	f7f4 facd 	bl	8000240 <memchr>
 800bca6:	9a04      	ldr	r2, [sp, #16]
 800bca8:	b9d8      	cbnz	r0, 800bce2 <_svfiprintf_r+0xea>
 800bcaa:	06d0      	lsls	r0, r2, #27
 800bcac:	bf44      	itt	mi
 800bcae:	2320      	movmi	r3, #32
 800bcb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcb4:	0711      	lsls	r1, r2, #28
 800bcb6:	bf44      	itt	mi
 800bcb8:	232b      	movmi	r3, #43	@ 0x2b
 800bcba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcbe:	f89a 3000 	ldrb.w	r3, [sl]
 800bcc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcc4:	d015      	beq.n	800bcf2 <_svfiprintf_r+0xfa>
 800bcc6:	9a07      	ldr	r2, [sp, #28]
 800bcc8:	4654      	mov	r4, sl
 800bcca:	2000      	movs	r0, #0
 800bccc:	f04f 0c0a 	mov.w	ip, #10
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcd6:	3b30      	subs	r3, #48	@ 0x30
 800bcd8:	2b09      	cmp	r3, #9
 800bcda:	d94b      	bls.n	800bd74 <_svfiprintf_r+0x17c>
 800bcdc:	b1b0      	cbz	r0, 800bd0c <_svfiprintf_r+0x114>
 800bcde:	9207      	str	r2, [sp, #28]
 800bce0:	e014      	b.n	800bd0c <_svfiprintf_r+0x114>
 800bce2:	eba0 0308 	sub.w	r3, r0, r8
 800bce6:	fa09 f303 	lsl.w	r3, r9, r3
 800bcea:	4313      	orrs	r3, r2
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	46a2      	mov	sl, r4
 800bcf0:	e7d2      	b.n	800bc98 <_svfiprintf_r+0xa0>
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	1d19      	adds	r1, r3, #4
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	9103      	str	r1, [sp, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	bfbb      	ittet	lt
 800bcfe:	425b      	neglt	r3, r3
 800bd00:	f042 0202 	orrlt.w	r2, r2, #2
 800bd04:	9307      	strge	r3, [sp, #28]
 800bd06:	9307      	strlt	r3, [sp, #28]
 800bd08:	bfb8      	it	lt
 800bd0a:	9204      	strlt	r2, [sp, #16]
 800bd0c:	7823      	ldrb	r3, [r4, #0]
 800bd0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd10:	d10a      	bne.n	800bd28 <_svfiprintf_r+0x130>
 800bd12:	7863      	ldrb	r3, [r4, #1]
 800bd14:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd16:	d132      	bne.n	800bd7e <_svfiprintf_r+0x186>
 800bd18:	9b03      	ldr	r3, [sp, #12]
 800bd1a:	1d1a      	adds	r2, r3, #4
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	9203      	str	r2, [sp, #12]
 800bd20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd24:	3402      	adds	r4, #2
 800bd26:	9305      	str	r3, [sp, #20]
 800bd28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bdec <_svfiprintf_r+0x1f4>
 800bd2c:	7821      	ldrb	r1, [r4, #0]
 800bd2e:	2203      	movs	r2, #3
 800bd30:	4650      	mov	r0, sl
 800bd32:	f7f4 fa85 	bl	8000240 <memchr>
 800bd36:	b138      	cbz	r0, 800bd48 <_svfiprintf_r+0x150>
 800bd38:	9b04      	ldr	r3, [sp, #16]
 800bd3a:	eba0 000a 	sub.w	r0, r0, sl
 800bd3e:	2240      	movs	r2, #64	@ 0x40
 800bd40:	4082      	lsls	r2, r0
 800bd42:	4313      	orrs	r3, r2
 800bd44:	3401      	adds	r4, #1
 800bd46:	9304      	str	r3, [sp, #16]
 800bd48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd4c:	4824      	ldr	r0, [pc, #144]	@ (800bde0 <_svfiprintf_r+0x1e8>)
 800bd4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd52:	2206      	movs	r2, #6
 800bd54:	f7f4 fa74 	bl	8000240 <memchr>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d036      	beq.n	800bdca <_svfiprintf_r+0x1d2>
 800bd5c:	4b21      	ldr	r3, [pc, #132]	@ (800bde4 <_svfiprintf_r+0x1ec>)
 800bd5e:	bb1b      	cbnz	r3, 800bda8 <_svfiprintf_r+0x1b0>
 800bd60:	9b03      	ldr	r3, [sp, #12]
 800bd62:	3307      	adds	r3, #7
 800bd64:	f023 0307 	bic.w	r3, r3, #7
 800bd68:	3308      	adds	r3, #8
 800bd6a:	9303      	str	r3, [sp, #12]
 800bd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd6e:	4433      	add	r3, r6
 800bd70:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd72:	e76a      	b.n	800bc4a <_svfiprintf_r+0x52>
 800bd74:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd78:	460c      	mov	r4, r1
 800bd7a:	2001      	movs	r0, #1
 800bd7c:	e7a8      	b.n	800bcd0 <_svfiprintf_r+0xd8>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	3401      	adds	r4, #1
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	4619      	mov	r1, r3
 800bd86:	f04f 0c0a 	mov.w	ip, #10
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd90:	3a30      	subs	r2, #48	@ 0x30
 800bd92:	2a09      	cmp	r2, #9
 800bd94:	d903      	bls.n	800bd9e <_svfiprintf_r+0x1a6>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d0c6      	beq.n	800bd28 <_svfiprintf_r+0x130>
 800bd9a:	9105      	str	r1, [sp, #20]
 800bd9c:	e7c4      	b.n	800bd28 <_svfiprintf_r+0x130>
 800bd9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bda2:	4604      	mov	r4, r0
 800bda4:	2301      	movs	r3, #1
 800bda6:	e7f0      	b.n	800bd8a <_svfiprintf_r+0x192>
 800bda8:	ab03      	add	r3, sp, #12
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	462a      	mov	r2, r5
 800bdae:	4b0e      	ldr	r3, [pc, #56]	@ (800bde8 <_svfiprintf_r+0x1f0>)
 800bdb0:	a904      	add	r1, sp, #16
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	f3af 8000 	nop.w
 800bdb8:	1c42      	adds	r2, r0, #1
 800bdba:	4606      	mov	r6, r0
 800bdbc:	d1d6      	bne.n	800bd6c <_svfiprintf_r+0x174>
 800bdbe:	89ab      	ldrh	r3, [r5, #12]
 800bdc0:	065b      	lsls	r3, r3, #25
 800bdc2:	f53f af2d 	bmi.w	800bc20 <_svfiprintf_r+0x28>
 800bdc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdc8:	e72c      	b.n	800bc24 <_svfiprintf_r+0x2c>
 800bdca:	ab03      	add	r3, sp, #12
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	462a      	mov	r2, r5
 800bdd0:	4b05      	ldr	r3, [pc, #20]	@ (800bde8 <_svfiprintf_r+0x1f0>)
 800bdd2:	a904      	add	r1, sp, #16
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f000 f879 	bl	800becc <_printf_i>
 800bdda:	e7ed      	b.n	800bdb8 <_svfiprintf_r+0x1c0>
 800bddc:	0800d838 	.word	0x0800d838
 800bde0:	0800d842 	.word	0x0800d842
 800bde4:	00000000 	.word	0x00000000
 800bde8:	0800bb43 	.word	0x0800bb43
 800bdec:	0800d83e 	.word	0x0800d83e

0800bdf0 <_printf_common>:
 800bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf4:	4616      	mov	r6, r2
 800bdf6:	4698      	mov	r8, r3
 800bdf8:	688a      	ldr	r2, [r1, #8]
 800bdfa:	690b      	ldr	r3, [r1, #16]
 800bdfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be00:	4293      	cmp	r3, r2
 800be02:	bfb8      	it	lt
 800be04:	4613      	movlt	r3, r2
 800be06:	6033      	str	r3, [r6, #0]
 800be08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be0c:	4607      	mov	r7, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	b10a      	cbz	r2, 800be16 <_printf_common+0x26>
 800be12:	3301      	adds	r3, #1
 800be14:	6033      	str	r3, [r6, #0]
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	0699      	lsls	r1, r3, #26
 800be1a:	bf42      	ittt	mi
 800be1c:	6833      	ldrmi	r3, [r6, #0]
 800be1e:	3302      	addmi	r3, #2
 800be20:	6033      	strmi	r3, [r6, #0]
 800be22:	6825      	ldr	r5, [r4, #0]
 800be24:	f015 0506 	ands.w	r5, r5, #6
 800be28:	d106      	bne.n	800be38 <_printf_common+0x48>
 800be2a:	f104 0a19 	add.w	sl, r4, #25
 800be2e:	68e3      	ldr	r3, [r4, #12]
 800be30:	6832      	ldr	r2, [r6, #0]
 800be32:	1a9b      	subs	r3, r3, r2
 800be34:	42ab      	cmp	r3, r5
 800be36:	dc26      	bgt.n	800be86 <_printf_common+0x96>
 800be38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be3c:	6822      	ldr	r2, [r4, #0]
 800be3e:	3b00      	subs	r3, #0
 800be40:	bf18      	it	ne
 800be42:	2301      	movne	r3, #1
 800be44:	0692      	lsls	r2, r2, #26
 800be46:	d42b      	bmi.n	800bea0 <_printf_common+0xb0>
 800be48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be4c:	4641      	mov	r1, r8
 800be4e:	4638      	mov	r0, r7
 800be50:	47c8      	blx	r9
 800be52:	3001      	adds	r0, #1
 800be54:	d01e      	beq.n	800be94 <_printf_common+0xa4>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	6922      	ldr	r2, [r4, #16]
 800be5a:	f003 0306 	and.w	r3, r3, #6
 800be5e:	2b04      	cmp	r3, #4
 800be60:	bf02      	ittt	eq
 800be62:	68e5      	ldreq	r5, [r4, #12]
 800be64:	6833      	ldreq	r3, [r6, #0]
 800be66:	1aed      	subeq	r5, r5, r3
 800be68:	68a3      	ldr	r3, [r4, #8]
 800be6a:	bf0c      	ite	eq
 800be6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be70:	2500      	movne	r5, #0
 800be72:	4293      	cmp	r3, r2
 800be74:	bfc4      	itt	gt
 800be76:	1a9b      	subgt	r3, r3, r2
 800be78:	18ed      	addgt	r5, r5, r3
 800be7a:	2600      	movs	r6, #0
 800be7c:	341a      	adds	r4, #26
 800be7e:	42b5      	cmp	r5, r6
 800be80:	d11a      	bne.n	800beb8 <_printf_common+0xc8>
 800be82:	2000      	movs	r0, #0
 800be84:	e008      	b.n	800be98 <_printf_common+0xa8>
 800be86:	2301      	movs	r3, #1
 800be88:	4652      	mov	r2, sl
 800be8a:	4641      	mov	r1, r8
 800be8c:	4638      	mov	r0, r7
 800be8e:	47c8      	blx	r9
 800be90:	3001      	adds	r0, #1
 800be92:	d103      	bne.n	800be9c <_printf_common+0xac>
 800be94:	f04f 30ff 	mov.w	r0, #4294967295
 800be98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9c:	3501      	adds	r5, #1
 800be9e:	e7c6      	b.n	800be2e <_printf_common+0x3e>
 800bea0:	18e1      	adds	r1, r4, r3
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	2030      	movs	r0, #48	@ 0x30
 800bea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800beaa:	4422      	add	r2, r4
 800beac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800beb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800beb4:	3302      	adds	r3, #2
 800beb6:	e7c7      	b.n	800be48 <_printf_common+0x58>
 800beb8:	2301      	movs	r3, #1
 800beba:	4622      	mov	r2, r4
 800bebc:	4641      	mov	r1, r8
 800bebe:	4638      	mov	r0, r7
 800bec0:	47c8      	blx	r9
 800bec2:	3001      	adds	r0, #1
 800bec4:	d0e6      	beq.n	800be94 <_printf_common+0xa4>
 800bec6:	3601      	adds	r6, #1
 800bec8:	e7d9      	b.n	800be7e <_printf_common+0x8e>
	...

0800becc <_printf_i>:
 800becc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bed0:	7e0f      	ldrb	r7, [r1, #24]
 800bed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bed4:	2f78      	cmp	r7, #120	@ 0x78
 800bed6:	4691      	mov	r9, r2
 800bed8:	4680      	mov	r8, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	469a      	mov	sl, r3
 800bede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bee2:	d807      	bhi.n	800bef4 <_printf_i+0x28>
 800bee4:	2f62      	cmp	r7, #98	@ 0x62
 800bee6:	d80a      	bhi.n	800befe <_printf_i+0x32>
 800bee8:	2f00      	cmp	r7, #0
 800beea:	f000 80d2 	beq.w	800c092 <_printf_i+0x1c6>
 800beee:	2f58      	cmp	r7, #88	@ 0x58
 800bef0:	f000 80b9 	beq.w	800c066 <_printf_i+0x19a>
 800bef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800befc:	e03a      	b.n	800bf74 <_printf_i+0xa8>
 800befe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf02:	2b15      	cmp	r3, #21
 800bf04:	d8f6      	bhi.n	800bef4 <_printf_i+0x28>
 800bf06:	a101      	add	r1, pc, #4	@ (adr r1, 800bf0c <_printf_i+0x40>)
 800bf08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf0c:	0800bf65 	.word	0x0800bf65
 800bf10:	0800bf79 	.word	0x0800bf79
 800bf14:	0800bef5 	.word	0x0800bef5
 800bf18:	0800bef5 	.word	0x0800bef5
 800bf1c:	0800bef5 	.word	0x0800bef5
 800bf20:	0800bef5 	.word	0x0800bef5
 800bf24:	0800bf79 	.word	0x0800bf79
 800bf28:	0800bef5 	.word	0x0800bef5
 800bf2c:	0800bef5 	.word	0x0800bef5
 800bf30:	0800bef5 	.word	0x0800bef5
 800bf34:	0800bef5 	.word	0x0800bef5
 800bf38:	0800c079 	.word	0x0800c079
 800bf3c:	0800bfa3 	.word	0x0800bfa3
 800bf40:	0800c033 	.word	0x0800c033
 800bf44:	0800bef5 	.word	0x0800bef5
 800bf48:	0800bef5 	.word	0x0800bef5
 800bf4c:	0800c09b 	.word	0x0800c09b
 800bf50:	0800bef5 	.word	0x0800bef5
 800bf54:	0800bfa3 	.word	0x0800bfa3
 800bf58:	0800bef5 	.word	0x0800bef5
 800bf5c:	0800bef5 	.word	0x0800bef5
 800bf60:	0800c03b 	.word	0x0800c03b
 800bf64:	6833      	ldr	r3, [r6, #0]
 800bf66:	1d1a      	adds	r2, r3, #4
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6032      	str	r2, [r6, #0]
 800bf6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf74:	2301      	movs	r3, #1
 800bf76:	e09d      	b.n	800c0b4 <_printf_i+0x1e8>
 800bf78:	6833      	ldr	r3, [r6, #0]
 800bf7a:	6820      	ldr	r0, [r4, #0]
 800bf7c:	1d19      	adds	r1, r3, #4
 800bf7e:	6031      	str	r1, [r6, #0]
 800bf80:	0606      	lsls	r6, r0, #24
 800bf82:	d501      	bpl.n	800bf88 <_printf_i+0xbc>
 800bf84:	681d      	ldr	r5, [r3, #0]
 800bf86:	e003      	b.n	800bf90 <_printf_i+0xc4>
 800bf88:	0645      	lsls	r5, r0, #25
 800bf8a:	d5fb      	bpl.n	800bf84 <_printf_i+0xb8>
 800bf8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf90:	2d00      	cmp	r5, #0
 800bf92:	da03      	bge.n	800bf9c <_printf_i+0xd0>
 800bf94:	232d      	movs	r3, #45	@ 0x2d
 800bf96:	426d      	negs	r5, r5
 800bf98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf9c:	4859      	ldr	r0, [pc, #356]	@ (800c104 <_printf_i+0x238>)
 800bf9e:	230a      	movs	r3, #10
 800bfa0:	e011      	b.n	800bfc6 <_printf_i+0xfa>
 800bfa2:	6821      	ldr	r1, [r4, #0]
 800bfa4:	6833      	ldr	r3, [r6, #0]
 800bfa6:	0608      	lsls	r0, r1, #24
 800bfa8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfac:	d402      	bmi.n	800bfb4 <_printf_i+0xe8>
 800bfae:	0649      	lsls	r1, r1, #25
 800bfb0:	bf48      	it	mi
 800bfb2:	b2ad      	uxthmi	r5, r5
 800bfb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfb6:	4853      	ldr	r0, [pc, #332]	@ (800c104 <_printf_i+0x238>)
 800bfb8:	6033      	str	r3, [r6, #0]
 800bfba:	bf14      	ite	ne
 800bfbc:	230a      	movne	r3, #10
 800bfbe:	2308      	moveq	r3, #8
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfc6:	6866      	ldr	r6, [r4, #4]
 800bfc8:	60a6      	str	r6, [r4, #8]
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	bfa2      	ittt	ge
 800bfce:	6821      	ldrge	r1, [r4, #0]
 800bfd0:	f021 0104 	bicge.w	r1, r1, #4
 800bfd4:	6021      	strge	r1, [r4, #0]
 800bfd6:	b90d      	cbnz	r5, 800bfdc <_printf_i+0x110>
 800bfd8:	2e00      	cmp	r6, #0
 800bfda:	d04b      	beq.n	800c074 <_printf_i+0x1a8>
 800bfdc:	4616      	mov	r6, r2
 800bfde:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfe2:	fb03 5711 	mls	r7, r3, r1, r5
 800bfe6:	5dc7      	ldrb	r7, [r0, r7]
 800bfe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfec:	462f      	mov	r7, r5
 800bfee:	42bb      	cmp	r3, r7
 800bff0:	460d      	mov	r5, r1
 800bff2:	d9f4      	bls.n	800bfde <_printf_i+0x112>
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	d10b      	bne.n	800c010 <_printf_i+0x144>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	07df      	lsls	r7, r3, #31
 800bffc:	d508      	bpl.n	800c010 <_printf_i+0x144>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	6861      	ldr	r1, [r4, #4]
 800c002:	4299      	cmp	r1, r3
 800c004:	bfde      	ittt	le
 800c006:	2330      	movle	r3, #48	@ 0x30
 800c008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c00c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c010:	1b92      	subs	r2, r2, r6
 800c012:	6122      	str	r2, [r4, #16]
 800c014:	f8cd a000 	str.w	sl, [sp]
 800c018:	464b      	mov	r3, r9
 800c01a:	aa03      	add	r2, sp, #12
 800c01c:	4621      	mov	r1, r4
 800c01e:	4640      	mov	r0, r8
 800c020:	f7ff fee6 	bl	800bdf0 <_printf_common>
 800c024:	3001      	adds	r0, #1
 800c026:	d14a      	bne.n	800c0be <_printf_i+0x1f2>
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	b004      	add	sp, #16
 800c02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	f043 0320 	orr.w	r3, r3, #32
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	4833      	ldr	r0, [pc, #204]	@ (800c108 <_printf_i+0x23c>)
 800c03c:	2778      	movs	r7, #120	@ 0x78
 800c03e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	6831      	ldr	r1, [r6, #0]
 800c046:	061f      	lsls	r7, r3, #24
 800c048:	f851 5b04 	ldr.w	r5, [r1], #4
 800c04c:	d402      	bmi.n	800c054 <_printf_i+0x188>
 800c04e:	065f      	lsls	r7, r3, #25
 800c050:	bf48      	it	mi
 800c052:	b2ad      	uxthmi	r5, r5
 800c054:	6031      	str	r1, [r6, #0]
 800c056:	07d9      	lsls	r1, r3, #31
 800c058:	bf44      	itt	mi
 800c05a:	f043 0320 	orrmi.w	r3, r3, #32
 800c05e:	6023      	strmi	r3, [r4, #0]
 800c060:	b11d      	cbz	r5, 800c06a <_printf_i+0x19e>
 800c062:	2310      	movs	r3, #16
 800c064:	e7ac      	b.n	800bfc0 <_printf_i+0xf4>
 800c066:	4827      	ldr	r0, [pc, #156]	@ (800c104 <_printf_i+0x238>)
 800c068:	e7e9      	b.n	800c03e <_printf_i+0x172>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	f023 0320 	bic.w	r3, r3, #32
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	e7f6      	b.n	800c062 <_printf_i+0x196>
 800c074:	4616      	mov	r6, r2
 800c076:	e7bd      	b.n	800bff4 <_printf_i+0x128>
 800c078:	6833      	ldr	r3, [r6, #0]
 800c07a:	6825      	ldr	r5, [r4, #0]
 800c07c:	6961      	ldr	r1, [r4, #20]
 800c07e:	1d18      	adds	r0, r3, #4
 800c080:	6030      	str	r0, [r6, #0]
 800c082:	062e      	lsls	r6, r5, #24
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	d501      	bpl.n	800c08c <_printf_i+0x1c0>
 800c088:	6019      	str	r1, [r3, #0]
 800c08a:	e002      	b.n	800c092 <_printf_i+0x1c6>
 800c08c:	0668      	lsls	r0, r5, #25
 800c08e:	d5fb      	bpl.n	800c088 <_printf_i+0x1bc>
 800c090:	8019      	strh	r1, [r3, #0]
 800c092:	2300      	movs	r3, #0
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	4616      	mov	r6, r2
 800c098:	e7bc      	b.n	800c014 <_printf_i+0x148>
 800c09a:	6833      	ldr	r3, [r6, #0]
 800c09c:	1d1a      	adds	r2, r3, #4
 800c09e:	6032      	str	r2, [r6, #0]
 800c0a0:	681e      	ldr	r6, [r3, #0]
 800c0a2:	6862      	ldr	r2, [r4, #4]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7f4 f8ca 	bl	8000240 <memchr>
 800c0ac:	b108      	cbz	r0, 800c0b2 <_printf_i+0x1e6>
 800c0ae:	1b80      	subs	r0, r0, r6
 800c0b0:	6060      	str	r0, [r4, #4]
 800c0b2:	6863      	ldr	r3, [r4, #4]
 800c0b4:	6123      	str	r3, [r4, #16]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0bc:	e7aa      	b.n	800c014 <_printf_i+0x148>
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	4632      	mov	r2, r6
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	47d0      	blx	sl
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d0ad      	beq.n	800c028 <_printf_i+0x15c>
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	079b      	lsls	r3, r3, #30
 800c0d0:	d413      	bmi.n	800c0fa <_printf_i+0x22e>
 800c0d2:	68e0      	ldr	r0, [r4, #12]
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	4298      	cmp	r0, r3
 800c0d8:	bfb8      	it	lt
 800c0da:	4618      	movlt	r0, r3
 800c0dc:	e7a6      	b.n	800c02c <_printf_i+0x160>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	47d0      	blx	sl
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d09d      	beq.n	800c028 <_printf_i+0x15c>
 800c0ec:	3501      	adds	r5, #1
 800c0ee:	68e3      	ldr	r3, [r4, #12]
 800c0f0:	9903      	ldr	r1, [sp, #12]
 800c0f2:	1a5b      	subs	r3, r3, r1
 800c0f4:	42ab      	cmp	r3, r5
 800c0f6:	dcf2      	bgt.n	800c0de <_printf_i+0x212>
 800c0f8:	e7eb      	b.n	800c0d2 <_printf_i+0x206>
 800c0fa:	2500      	movs	r5, #0
 800c0fc:	f104 0619 	add.w	r6, r4, #25
 800c100:	e7f5      	b.n	800c0ee <_printf_i+0x222>
 800c102:	bf00      	nop
 800c104:	0800d849 	.word	0x0800d849
 800c108:	0800d85a 	.word	0x0800d85a

0800c10c <__sflush_r>:
 800c10c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	0716      	lsls	r6, r2, #28
 800c116:	4605      	mov	r5, r0
 800c118:	460c      	mov	r4, r1
 800c11a:	d454      	bmi.n	800c1c6 <__sflush_r+0xba>
 800c11c:	684b      	ldr	r3, [r1, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dc02      	bgt.n	800c128 <__sflush_r+0x1c>
 800c122:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c124:	2b00      	cmp	r3, #0
 800c126:	dd48      	ble.n	800c1ba <__sflush_r+0xae>
 800c128:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c12a:	2e00      	cmp	r6, #0
 800c12c:	d045      	beq.n	800c1ba <__sflush_r+0xae>
 800c12e:	2300      	movs	r3, #0
 800c130:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c134:	682f      	ldr	r7, [r5, #0]
 800c136:	6a21      	ldr	r1, [r4, #32]
 800c138:	602b      	str	r3, [r5, #0]
 800c13a:	d030      	beq.n	800c19e <__sflush_r+0x92>
 800c13c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	0759      	lsls	r1, r3, #29
 800c142:	d505      	bpl.n	800c150 <__sflush_r+0x44>
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	1ad2      	subs	r2, r2, r3
 800c148:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c14a:	b10b      	cbz	r3, 800c150 <__sflush_r+0x44>
 800c14c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c14e:	1ad2      	subs	r2, r2, r3
 800c150:	2300      	movs	r3, #0
 800c152:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c154:	6a21      	ldr	r1, [r4, #32]
 800c156:	4628      	mov	r0, r5
 800c158:	47b0      	blx	r6
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	d106      	bne.n	800c16e <__sflush_r+0x62>
 800c160:	6829      	ldr	r1, [r5, #0]
 800c162:	291d      	cmp	r1, #29
 800c164:	d82b      	bhi.n	800c1be <__sflush_r+0xb2>
 800c166:	4a2a      	ldr	r2, [pc, #168]	@ (800c210 <__sflush_r+0x104>)
 800c168:	410a      	asrs	r2, r1
 800c16a:	07d6      	lsls	r6, r2, #31
 800c16c:	d427      	bmi.n	800c1be <__sflush_r+0xb2>
 800c16e:	2200      	movs	r2, #0
 800c170:	6062      	str	r2, [r4, #4]
 800c172:	04d9      	lsls	r1, r3, #19
 800c174:	6922      	ldr	r2, [r4, #16]
 800c176:	6022      	str	r2, [r4, #0]
 800c178:	d504      	bpl.n	800c184 <__sflush_r+0x78>
 800c17a:	1c42      	adds	r2, r0, #1
 800c17c:	d101      	bne.n	800c182 <__sflush_r+0x76>
 800c17e:	682b      	ldr	r3, [r5, #0]
 800c180:	b903      	cbnz	r3, 800c184 <__sflush_r+0x78>
 800c182:	6560      	str	r0, [r4, #84]	@ 0x54
 800c184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c186:	602f      	str	r7, [r5, #0]
 800c188:	b1b9      	cbz	r1, 800c1ba <__sflush_r+0xae>
 800c18a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c18e:	4299      	cmp	r1, r3
 800c190:	d002      	beq.n	800c198 <__sflush_r+0x8c>
 800c192:	4628      	mov	r0, r5
 800c194:	f7fe fbd2 	bl	800a93c <_free_r>
 800c198:	2300      	movs	r3, #0
 800c19a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c19c:	e00d      	b.n	800c1ba <__sflush_r+0xae>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	47b0      	blx	r6
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	1c50      	adds	r0, r2, #1
 800c1a8:	d1c9      	bne.n	800c13e <__sflush_r+0x32>
 800c1aa:	682b      	ldr	r3, [r5, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d0c6      	beq.n	800c13e <__sflush_r+0x32>
 800c1b0:	2b1d      	cmp	r3, #29
 800c1b2:	d001      	beq.n	800c1b8 <__sflush_r+0xac>
 800c1b4:	2b16      	cmp	r3, #22
 800c1b6:	d11e      	bne.n	800c1f6 <__sflush_r+0xea>
 800c1b8:	602f      	str	r7, [r5, #0]
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e022      	b.n	800c204 <__sflush_r+0xf8>
 800c1be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1c2:	b21b      	sxth	r3, r3
 800c1c4:	e01b      	b.n	800c1fe <__sflush_r+0xf2>
 800c1c6:	690f      	ldr	r7, [r1, #16]
 800c1c8:	2f00      	cmp	r7, #0
 800c1ca:	d0f6      	beq.n	800c1ba <__sflush_r+0xae>
 800c1cc:	0793      	lsls	r3, r2, #30
 800c1ce:	680e      	ldr	r6, [r1, #0]
 800c1d0:	bf08      	it	eq
 800c1d2:	694b      	ldreq	r3, [r1, #20]
 800c1d4:	600f      	str	r7, [r1, #0]
 800c1d6:	bf18      	it	ne
 800c1d8:	2300      	movne	r3, #0
 800c1da:	eba6 0807 	sub.w	r8, r6, r7
 800c1de:	608b      	str	r3, [r1, #8]
 800c1e0:	f1b8 0f00 	cmp.w	r8, #0
 800c1e4:	dde9      	ble.n	800c1ba <__sflush_r+0xae>
 800c1e6:	6a21      	ldr	r1, [r4, #32]
 800c1e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1ea:	4643      	mov	r3, r8
 800c1ec:	463a      	mov	r2, r7
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	47b0      	blx	r6
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	dc08      	bgt.n	800c208 <__sflush_r+0xfc>
 800c1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	f04f 30ff 	mov.w	r0, #4294967295
 800c204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c208:	4407      	add	r7, r0
 800c20a:	eba8 0800 	sub.w	r8, r8, r0
 800c20e:	e7e7      	b.n	800c1e0 <__sflush_r+0xd4>
 800c210:	dfbffffe 	.word	0xdfbffffe

0800c214 <_fflush_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	690b      	ldr	r3, [r1, #16]
 800c218:	4605      	mov	r5, r0
 800c21a:	460c      	mov	r4, r1
 800c21c:	b913      	cbnz	r3, 800c224 <_fflush_r+0x10>
 800c21e:	2500      	movs	r5, #0
 800c220:	4628      	mov	r0, r5
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	b118      	cbz	r0, 800c22e <_fflush_r+0x1a>
 800c226:	6a03      	ldr	r3, [r0, #32]
 800c228:	b90b      	cbnz	r3, 800c22e <_fflush_r+0x1a>
 800c22a:	f7fe f9c1 	bl	800a5b0 <__sinit>
 800c22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0f3      	beq.n	800c21e <_fflush_r+0xa>
 800c236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c238:	07d0      	lsls	r0, r2, #31
 800c23a:	d404      	bmi.n	800c246 <_fflush_r+0x32>
 800c23c:	0599      	lsls	r1, r3, #22
 800c23e:	d402      	bmi.n	800c246 <_fflush_r+0x32>
 800c240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c242:	f7fe fb52 	bl	800a8ea <__retarget_lock_acquire_recursive>
 800c246:	4628      	mov	r0, r5
 800c248:	4621      	mov	r1, r4
 800c24a:	f7ff ff5f 	bl	800c10c <__sflush_r>
 800c24e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c250:	07da      	lsls	r2, r3, #31
 800c252:	4605      	mov	r5, r0
 800c254:	d4e4      	bmi.n	800c220 <_fflush_r+0xc>
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	059b      	lsls	r3, r3, #22
 800c25a:	d4e1      	bmi.n	800c220 <_fflush_r+0xc>
 800c25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c25e:	f7fe fb45 	bl	800a8ec <__retarget_lock_release_recursive>
 800c262:	e7dd      	b.n	800c220 <_fflush_r+0xc>

0800c264 <memmove>:
 800c264:	4288      	cmp	r0, r1
 800c266:	b510      	push	{r4, lr}
 800c268:	eb01 0402 	add.w	r4, r1, r2
 800c26c:	d902      	bls.n	800c274 <memmove+0x10>
 800c26e:	4284      	cmp	r4, r0
 800c270:	4623      	mov	r3, r4
 800c272:	d807      	bhi.n	800c284 <memmove+0x20>
 800c274:	1e43      	subs	r3, r0, #1
 800c276:	42a1      	cmp	r1, r4
 800c278:	d008      	beq.n	800c28c <memmove+0x28>
 800c27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c27e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c282:	e7f8      	b.n	800c276 <memmove+0x12>
 800c284:	4402      	add	r2, r0
 800c286:	4601      	mov	r1, r0
 800c288:	428a      	cmp	r2, r1
 800c28a:	d100      	bne.n	800c28e <memmove+0x2a>
 800c28c:	bd10      	pop	{r4, pc}
 800c28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c296:	e7f7      	b.n	800c288 <memmove+0x24>

0800c298 <_sbrk_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d06      	ldr	r5, [pc, #24]	@ (800c2b4 <_sbrk_r+0x1c>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	602b      	str	r3, [r5, #0]
 800c2a4:	f7f9 f8f2 	bl	800548c <_sbrk>
 800c2a8:	1c43      	adds	r3, r0, #1
 800c2aa:	d102      	bne.n	800c2b2 <_sbrk_r+0x1a>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	b103      	cbz	r3, 800c2b2 <_sbrk_r+0x1a>
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	20003818 	.word	0x20003818

0800c2b8 <__assert_func>:
 800c2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2ba:	4614      	mov	r4, r2
 800c2bc:	461a      	mov	r2, r3
 800c2be:	4b09      	ldr	r3, [pc, #36]	@ (800c2e4 <__assert_func+0x2c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	68d8      	ldr	r0, [r3, #12]
 800c2c6:	b954      	cbnz	r4, 800c2de <__assert_func+0x26>
 800c2c8:	4b07      	ldr	r3, [pc, #28]	@ (800c2e8 <__assert_func+0x30>)
 800c2ca:	461c      	mov	r4, r3
 800c2cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2d0:	9100      	str	r1, [sp, #0]
 800c2d2:	462b      	mov	r3, r5
 800c2d4:	4905      	ldr	r1, [pc, #20]	@ (800c2ec <__assert_func+0x34>)
 800c2d6:	f000 f857 	bl	800c388 <fiprintf>
 800c2da:	f000 f867 	bl	800c3ac <abort>
 800c2de:	4b04      	ldr	r3, [pc, #16]	@ (800c2f0 <__assert_func+0x38>)
 800c2e0:	e7f4      	b.n	800c2cc <__assert_func+0x14>
 800c2e2:	bf00      	nop
 800c2e4:	20000198 	.word	0x20000198
 800c2e8:	0800d8a6 	.word	0x0800d8a6
 800c2ec:	0800d878 	.word	0x0800d878
 800c2f0:	0800d86b 	.word	0x0800d86b

0800c2f4 <_calloc_r>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	fba1 5402 	umull	r5, r4, r1, r2
 800c2fa:	b93c      	cbnz	r4, 800c30c <_calloc_r+0x18>
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7fe fec3 	bl	800b088 <_malloc_r>
 800c302:	4606      	mov	r6, r0
 800c304:	b928      	cbnz	r0, 800c312 <_calloc_r+0x1e>
 800c306:	2600      	movs	r6, #0
 800c308:	4630      	mov	r0, r6
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	220c      	movs	r2, #12
 800c30e:	6002      	str	r2, [r0, #0]
 800c310:	e7f9      	b.n	800c306 <_calloc_r+0x12>
 800c312:	462a      	mov	r2, r5
 800c314:	4621      	mov	r1, r4
 800c316:	f7fe fa31 	bl	800a77c <memset>
 800c31a:	e7f5      	b.n	800c308 <_calloc_r+0x14>

0800c31c <malloc>:
 800c31c:	4b02      	ldr	r3, [pc, #8]	@ (800c328 <malloc+0xc>)
 800c31e:	4601      	mov	r1, r0
 800c320:	6818      	ldr	r0, [r3, #0]
 800c322:	f7fe beb1 	b.w	800b088 <_malloc_r>
 800c326:	bf00      	nop
 800c328:	20000198 	.word	0x20000198

0800c32c <_realloc_r>:
 800c32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c330:	4680      	mov	r8, r0
 800c332:	4615      	mov	r5, r2
 800c334:	460c      	mov	r4, r1
 800c336:	b921      	cbnz	r1, 800c342 <_realloc_r+0x16>
 800c338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c33c:	4611      	mov	r1, r2
 800c33e:	f7fe bea3 	b.w	800b088 <_malloc_r>
 800c342:	b92a      	cbnz	r2, 800c350 <_realloc_r+0x24>
 800c344:	f7fe fafa 	bl	800a93c <_free_r>
 800c348:	2400      	movs	r4, #0
 800c34a:	4620      	mov	r0, r4
 800c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c350:	f000 f833 	bl	800c3ba <_malloc_usable_size_r>
 800c354:	4285      	cmp	r5, r0
 800c356:	4606      	mov	r6, r0
 800c358:	d802      	bhi.n	800c360 <_realloc_r+0x34>
 800c35a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c35e:	d8f4      	bhi.n	800c34a <_realloc_r+0x1e>
 800c360:	4629      	mov	r1, r5
 800c362:	4640      	mov	r0, r8
 800c364:	f7fe fe90 	bl	800b088 <_malloc_r>
 800c368:	4607      	mov	r7, r0
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d0ec      	beq.n	800c348 <_realloc_r+0x1c>
 800c36e:	42b5      	cmp	r5, r6
 800c370:	462a      	mov	r2, r5
 800c372:	4621      	mov	r1, r4
 800c374:	bf28      	it	cs
 800c376:	4632      	movcs	r2, r6
 800c378:	f7fe fac1 	bl	800a8fe <memcpy>
 800c37c:	4621      	mov	r1, r4
 800c37e:	4640      	mov	r0, r8
 800c380:	f7fe fadc 	bl	800a93c <_free_r>
 800c384:	463c      	mov	r4, r7
 800c386:	e7e0      	b.n	800c34a <_realloc_r+0x1e>

0800c388 <fiprintf>:
 800c388:	b40e      	push	{r1, r2, r3}
 800c38a:	b503      	push	{r0, r1, lr}
 800c38c:	4601      	mov	r1, r0
 800c38e:	ab03      	add	r3, sp, #12
 800c390:	4805      	ldr	r0, [pc, #20]	@ (800c3a8 <fiprintf+0x20>)
 800c392:	f853 2b04 	ldr.w	r2, [r3], #4
 800c396:	6800      	ldr	r0, [r0, #0]
 800c398:	9301      	str	r3, [sp, #4]
 800c39a:	f000 f83f 	bl	800c41c <_vfiprintf_r>
 800c39e:	b002      	add	sp, #8
 800c3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3a4:	b003      	add	sp, #12
 800c3a6:	4770      	bx	lr
 800c3a8:	20000198 	.word	0x20000198

0800c3ac <abort>:
 800c3ac:	b508      	push	{r3, lr}
 800c3ae:	2006      	movs	r0, #6
 800c3b0:	f000 fa08 	bl	800c7c4 <raise>
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	f7f8 fff1 	bl	800539c <_exit>

0800c3ba <_malloc_usable_size_r>:
 800c3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3be:	1f18      	subs	r0, r3, #4
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	bfbc      	itt	lt
 800c3c4:	580b      	ldrlt	r3, [r1, r0]
 800c3c6:	18c0      	addlt	r0, r0, r3
 800c3c8:	4770      	bx	lr

0800c3ca <__sfputc_r>:
 800c3ca:	6893      	ldr	r3, [r2, #8]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	b410      	push	{r4}
 800c3d2:	6093      	str	r3, [r2, #8]
 800c3d4:	da08      	bge.n	800c3e8 <__sfputc_r+0x1e>
 800c3d6:	6994      	ldr	r4, [r2, #24]
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	db01      	blt.n	800c3e0 <__sfputc_r+0x16>
 800c3dc:	290a      	cmp	r1, #10
 800c3de:	d103      	bne.n	800c3e8 <__sfputc_r+0x1e>
 800c3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e4:	f000 b932 	b.w	800c64c <__swbuf_r>
 800c3e8:	6813      	ldr	r3, [r2, #0]
 800c3ea:	1c58      	adds	r0, r3, #1
 800c3ec:	6010      	str	r0, [r2, #0]
 800c3ee:	7019      	strb	r1, [r3, #0]
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <__sfputs_r>:
 800c3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460f      	mov	r7, r1
 800c3fe:	4614      	mov	r4, r2
 800c400:	18d5      	adds	r5, r2, r3
 800c402:	42ac      	cmp	r4, r5
 800c404:	d101      	bne.n	800c40a <__sfputs_r+0x12>
 800c406:	2000      	movs	r0, #0
 800c408:	e007      	b.n	800c41a <__sfputs_r+0x22>
 800c40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40e:	463a      	mov	r2, r7
 800c410:	4630      	mov	r0, r6
 800c412:	f7ff ffda 	bl	800c3ca <__sfputc_r>
 800c416:	1c43      	adds	r3, r0, #1
 800c418:	d1f3      	bne.n	800c402 <__sfputs_r+0xa>
 800c41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c41c <_vfiprintf_r>:
 800c41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c420:	460d      	mov	r5, r1
 800c422:	b09d      	sub	sp, #116	@ 0x74
 800c424:	4614      	mov	r4, r2
 800c426:	4698      	mov	r8, r3
 800c428:	4606      	mov	r6, r0
 800c42a:	b118      	cbz	r0, 800c434 <_vfiprintf_r+0x18>
 800c42c:	6a03      	ldr	r3, [r0, #32]
 800c42e:	b90b      	cbnz	r3, 800c434 <_vfiprintf_r+0x18>
 800c430:	f7fe f8be 	bl	800a5b0 <__sinit>
 800c434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c436:	07d9      	lsls	r1, r3, #31
 800c438:	d405      	bmi.n	800c446 <_vfiprintf_r+0x2a>
 800c43a:	89ab      	ldrh	r3, [r5, #12]
 800c43c:	059a      	lsls	r2, r3, #22
 800c43e:	d402      	bmi.n	800c446 <_vfiprintf_r+0x2a>
 800c440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c442:	f7fe fa52 	bl	800a8ea <__retarget_lock_acquire_recursive>
 800c446:	89ab      	ldrh	r3, [r5, #12]
 800c448:	071b      	lsls	r3, r3, #28
 800c44a:	d501      	bpl.n	800c450 <_vfiprintf_r+0x34>
 800c44c:	692b      	ldr	r3, [r5, #16]
 800c44e:	b99b      	cbnz	r3, 800c478 <_vfiprintf_r+0x5c>
 800c450:	4629      	mov	r1, r5
 800c452:	4630      	mov	r0, r6
 800c454:	f000 f938 	bl	800c6c8 <__swsetup_r>
 800c458:	b170      	cbz	r0, 800c478 <_vfiprintf_r+0x5c>
 800c45a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c45c:	07dc      	lsls	r4, r3, #31
 800c45e:	d504      	bpl.n	800c46a <_vfiprintf_r+0x4e>
 800c460:	f04f 30ff 	mov.w	r0, #4294967295
 800c464:	b01d      	add	sp, #116	@ 0x74
 800c466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	0598      	lsls	r0, r3, #22
 800c46e:	d4f7      	bmi.n	800c460 <_vfiprintf_r+0x44>
 800c470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c472:	f7fe fa3b 	bl	800a8ec <__retarget_lock_release_recursive>
 800c476:	e7f3      	b.n	800c460 <_vfiprintf_r+0x44>
 800c478:	2300      	movs	r3, #0
 800c47a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c47c:	2320      	movs	r3, #32
 800c47e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c482:	f8cd 800c 	str.w	r8, [sp, #12]
 800c486:	2330      	movs	r3, #48	@ 0x30
 800c488:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c638 <_vfiprintf_r+0x21c>
 800c48c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c490:	f04f 0901 	mov.w	r9, #1
 800c494:	4623      	mov	r3, r4
 800c496:	469a      	mov	sl, r3
 800c498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c49c:	b10a      	cbz	r2, 800c4a2 <_vfiprintf_r+0x86>
 800c49e:	2a25      	cmp	r2, #37	@ 0x25
 800c4a0:	d1f9      	bne.n	800c496 <_vfiprintf_r+0x7a>
 800c4a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c4a6:	d00b      	beq.n	800c4c0 <_vfiprintf_r+0xa4>
 800c4a8:	465b      	mov	r3, fp
 800c4aa:	4622      	mov	r2, r4
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f7ff ffa2 	bl	800c3f8 <__sfputs_r>
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	f000 80a7 	beq.w	800c608 <_vfiprintf_r+0x1ec>
 800c4ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4bc:	445a      	add	r2, fp
 800c4be:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 809f 	beq.w	800c608 <_vfiprintf_r+0x1ec>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4d4:	f10a 0a01 	add.w	sl, sl, #1
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	9307      	str	r3, [sp, #28]
 800c4dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4e2:	4654      	mov	r4, sl
 800c4e4:	2205      	movs	r2, #5
 800c4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ea:	4853      	ldr	r0, [pc, #332]	@ (800c638 <_vfiprintf_r+0x21c>)
 800c4ec:	f7f3 fea8 	bl	8000240 <memchr>
 800c4f0:	9a04      	ldr	r2, [sp, #16]
 800c4f2:	b9d8      	cbnz	r0, 800c52c <_vfiprintf_r+0x110>
 800c4f4:	06d1      	lsls	r1, r2, #27
 800c4f6:	bf44      	itt	mi
 800c4f8:	2320      	movmi	r3, #32
 800c4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c4fe:	0713      	lsls	r3, r2, #28
 800c500:	bf44      	itt	mi
 800c502:	232b      	movmi	r3, #43	@ 0x2b
 800c504:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c508:	f89a 3000 	ldrb.w	r3, [sl]
 800c50c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c50e:	d015      	beq.n	800c53c <_vfiprintf_r+0x120>
 800c510:	9a07      	ldr	r2, [sp, #28]
 800c512:	4654      	mov	r4, sl
 800c514:	2000      	movs	r0, #0
 800c516:	f04f 0c0a 	mov.w	ip, #10
 800c51a:	4621      	mov	r1, r4
 800c51c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c520:	3b30      	subs	r3, #48	@ 0x30
 800c522:	2b09      	cmp	r3, #9
 800c524:	d94b      	bls.n	800c5be <_vfiprintf_r+0x1a2>
 800c526:	b1b0      	cbz	r0, 800c556 <_vfiprintf_r+0x13a>
 800c528:	9207      	str	r2, [sp, #28]
 800c52a:	e014      	b.n	800c556 <_vfiprintf_r+0x13a>
 800c52c:	eba0 0308 	sub.w	r3, r0, r8
 800c530:	fa09 f303 	lsl.w	r3, r9, r3
 800c534:	4313      	orrs	r3, r2
 800c536:	9304      	str	r3, [sp, #16]
 800c538:	46a2      	mov	sl, r4
 800c53a:	e7d2      	b.n	800c4e2 <_vfiprintf_r+0xc6>
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	1d19      	adds	r1, r3, #4
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	9103      	str	r1, [sp, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	bfbb      	ittet	lt
 800c548:	425b      	neglt	r3, r3
 800c54a:	f042 0202 	orrlt.w	r2, r2, #2
 800c54e:	9307      	strge	r3, [sp, #28]
 800c550:	9307      	strlt	r3, [sp, #28]
 800c552:	bfb8      	it	lt
 800c554:	9204      	strlt	r2, [sp, #16]
 800c556:	7823      	ldrb	r3, [r4, #0]
 800c558:	2b2e      	cmp	r3, #46	@ 0x2e
 800c55a:	d10a      	bne.n	800c572 <_vfiprintf_r+0x156>
 800c55c:	7863      	ldrb	r3, [r4, #1]
 800c55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c560:	d132      	bne.n	800c5c8 <_vfiprintf_r+0x1ac>
 800c562:	9b03      	ldr	r3, [sp, #12]
 800c564:	1d1a      	adds	r2, r3, #4
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	9203      	str	r2, [sp, #12]
 800c56a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c56e:	3402      	adds	r4, #2
 800c570:	9305      	str	r3, [sp, #20]
 800c572:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c648 <_vfiprintf_r+0x22c>
 800c576:	7821      	ldrb	r1, [r4, #0]
 800c578:	2203      	movs	r2, #3
 800c57a:	4650      	mov	r0, sl
 800c57c:	f7f3 fe60 	bl	8000240 <memchr>
 800c580:	b138      	cbz	r0, 800c592 <_vfiprintf_r+0x176>
 800c582:	9b04      	ldr	r3, [sp, #16]
 800c584:	eba0 000a 	sub.w	r0, r0, sl
 800c588:	2240      	movs	r2, #64	@ 0x40
 800c58a:	4082      	lsls	r2, r0
 800c58c:	4313      	orrs	r3, r2
 800c58e:	3401      	adds	r4, #1
 800c590:	9304      	str	r3, [sp, #16]
 800c592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c596:	4829      	ldr	r0, [pc, #164]	@ (800c63c <_vfiprintf_r+0x220>)
 800c598:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c59c:	2206      	movs	r2, #6
 800c59e:	f7f3 fe4f 	bl	8000240 <memchr>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d03f      	beq.n	800c626 <_vfiprintf_r+0x20a>
 800c5a6:	4b26      	ldr	r3, [pc, #152]	@ (800c640 <_vfiprintf_r+0x224>)
 800c5a8:	bb1b      	cbnz	r3, 800c5f2 <_vfiprintf_r+0x1d6>
 800c5aa:	9b03      	ldr	r3, [sp, #12]
 800c5ac:	3307      	adds	r3, #7
 800c5ae:	f023 0307 	bic.w	r3, r3, #7
 800c5b2:	3308      	adds	r3, #8
 800c5b4:	9303      	str	r3, [sp, #12]
 800c5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b8:	443b      	add	r3, r7
 800c5ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5bc:	e76a      	b.n	800c494 <_vfiprintf_r+0x78>
 800c5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	2001      	movs	r0, #1
 800c5c6:	e7a8      	b.n	800c51a <_vfiprintf_r+0xfe>
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	3401      	adds	r4, #1
 800c5cc:	9305      	str	r3, [sp, #20]
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	f04f 0c0a 	mov.w	ip, #10
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5da:	3a30      	subs	r2, #48	@ 0x30
 800c5dc:	2a09      	cmp	r2, #9
 800c5de:	d903      	bls.n	800c5e8 <_vfiprintf_r+0x1cc>
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d0c6      	beq.n	800c572 <_vfiprintf_r+0x156>
 800c5e4:	9105      	str	r1, [sp, #20]
 800c5e6:	e7c4      	b.n	800c572 <_vfiprintf_r+0x156>
 800c5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e7f0      	b.n	800c5d4 <_vfiprintf_r+0x1b8>
 800c5f2:	ab03      	add	r3, sp, #12
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	462a      	mov	r2, r5
 800c5f8:	4b12      	ldr	r3, [pc, #72]	@ (800c644 <_vfiprintf_r+0x228>)
 800c5fa:	a904      	add	r1, sp, #16
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	f3af 8000 	nop.w
 800c602:	4607      	mov	r7, r0
 800c604:	1c78      	adds	r0, r7, #1
 800c606:	d1d6      	bne.n	800c5b6 <_vfiprintf_r+0x19a>
 800c608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c60a:	07d9      	lsls	r1, r3, #31
 800c60c:	d405      	bmi.n	800c61a <_vfiprintf_r+0x1fe>
 800c60e:	89ab      	ldrh	r3, [r5, #12]
 800c610:	059a      	lsls	r2, r3, #22
 800c612:	d402      	bmi.n	800c61a <_vfiprintf_r+0x1fe>
 800c614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c616:	f7fe f969 	bl	800a8ec <__retarget_lock_release_recursive>
 800c61a:	89ab      	ldrh	r3, [r5, #12]
 800c61c:	065b      	lsls	r3, r3, #25
 800c61e:	f53f af1f 	bmi.w	800c460 <_vfiprintf_r+0x44>
 800c622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c624:	e71e      	b.n	800c464 <_vfiprintf_r+0x48>
 800c626:	ab03      	add	r3, sp, #12
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	462a      	mov	r2, r5
 800c62c:	4b05      	ldr	r3, [pc, #20]	@ (800c644 <_vfiprintf_r+0x228>)
 800c62e:	a904      	add	r1, sp, #16
 800c630:	4630      	mov	r0, r6
 800c632:	f7ff fc4b 	bl	800becc <_printf_i>
 800c636:	e7e4      	b.n	800c602 <_vfiprintf_r+0x1e6>
 800c638:	0800d838 	.word	0x0800d838
 800c63c:	0800d842 	.word	0x0800d842
 800c640:	00000000 	.word	0x00000000
 800c644:	0800c3f9 	.word	0x0800c3f9
 800c648:	0800d83e 	.word	0x0800d83e

0800c64c <__swbuf_r>:
 800c64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64e:	460e      	mov	r6, r1
 800c650:	4614      	mov	r4, r2
 800c652:	4605      	mov	r5, r0
 800c654:	b118      	cbz	r0, 800c65e <__swbuf_r+0x12>
 800c656:	6a03      	ldr	r3, [r0, #32]
 800c658:	b90b      	cbnz	r3, 800c65e <__swbuf_r+0x12>
 800c65a:	f7fd ffa9 	bl	800a5b0 <__sinit>
 800c65e:	69a3      	ldr	r3, [r4, #24]
 800c660:	60a3      	str	r3, [r4, #8]
 800c662:	89a3      	ldrh	r3, [r4, #12]
 800c664:	071a      	lsls	r2, r3, #28
 800c666:	d501      	bpl.n	800c66c <__swbuf_r+0x20>
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	b943      	cbnz	r3, 800c67e <__swbuf_r+0x32>
 800c66c:	4621      	mov	r1, r4
 800c66e:	4628      	mov	r0, r5
 800c670:	f000 f82a 	bl	800c6c8 <__swsetup_r>
 800c674:	b118      	cbz	r0, 800c67e <__swbuf_r+0x32>
 800c676:	f04f 37ff 	mov.w	r7, #4294967295
 800c67a:	4638      	mov	r0, r7
 800c67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	6922      	ldr	r2, [r4, #16]
 800c682:	1a98      	subs	r0, r3, r2
 800c684:	6963      	ldr	r3, [r4, #20]
 800c686:	b2f6      	uxtb	r6, r6
 800c688:	4283      	cmp	r3, r0
 800c68a:	4637      	mov	r7, r6
 800c68c:	dc05      	bgt.n	800c69a <__swbuf_r+0x4e>
 800c68e:	4621      	mov	r1, r4
 800c690:	4628      	mov	r0, r5
 800c692:	f7ff fdbf 	bl	800c214 <_fflush_r>
 800c696:	2800      	cmp	r0, #0
 800c698:	d1ed      	bne.n	800c676 <__swbuf_r+0x2a>
 800c69a:	68a3      	ldr	r3, [r4, #8]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	60a3      	str	r3, [r4, #8]
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	6022      	str	r2, [r4, #0]
 800c6a6:	701e      	strb	r6, [r3, #0]
 800c6a8:	6962      	ldr	r2, [r4, #20]
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d004      	beq.n	800c6ba <__swbuf_r+0x6e>
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	07db      	lsls	r3, r3, #31
 800c6b4:	d5e1      	bpl.n	800c67a <__swbuf_r+0x2e>
 800c6b6:	2e0a      	cmp	r6, #10
 800c6b8:	d1df      	bne.n	800c67a <__swbuf_r+0x2e>
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f7ff fda9 	bl	800c214 <_fflush_r>
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	d0d9      	beq.n	800c67a <__swbuf_r+0x2e>
 800c6c6:	e7d6      	b.n	800c676 <__swbuf_r+0x2a>

0800c6c8 <__swsetup_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4b29      	ldr	r3, [pc, #164]	@ (800c770 <__swsetup_r+0xa8>)
 800c6cc:	4605      	mov	r5, r0
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	b118      	cbz	r0, 800c6dc <__swsetup_r+0x14>
 800c6d4:	6a03      	ldr	r3, [r0, #32]
 800c6d6:	b90b      	cbnz	r3, 800c6dc <__swsetup_r+0x14>
 800c6d8:	f7fd ff6a 	bl	800a5b0 <__sinit>
 800c6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6e0:	0719      	lsls	r1, r3, #28
 800c6e2:	d422      	bmi.n	800c72a <__swsetup_r+0x62>
 800c6e4:	06da      	lsls	r2, r3, #27
 800c6e6:	d407      	bmi.n	800c6f8 <__swsetup_r+0x30>
 800c6e8:	2209      	movs	r2, #9
 800c6ea:	602a      	str	r2, [r5, #0]
 800c6ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6f0:	81a3      	strh	r3, [r4, #12]
 800c6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f6:	e033      	b.n	800c760 <__swsetup_r+0x98>
 800c6f8:	0758      	lsls	r0, r3, #29
 800c6fa:	d512      	bpl.n	800c722 <__swsetup_r+0x5a>
 800c6fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6fe:	b141      	cbz	r1, 800c712 <__swsetup_r+0x4a>
 800c700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c704:	4299      	cmp	r1, r3
 800c706:	d002      	beq.n	800c70e <__swsetup_r+0x46>
 800c708:	4628      	mov	r0, r5
 800c70a:	f7fe f917 	bl	800a93c <_free_r>
 800c70e:	2300      	movs	r3, #0
 800c710:	6363      	str	r3, [r4, #52]	@ 0x34
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	2300      	movs	r3, #0
 800c71c:	6063      	str	r3, [r4, #4]
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	f043 0308 	orr.w	r3, r3, #8
 800c728:	81a3      	strh	r3, [r4, #12]
 800c72a:	6923      	ldr	r3, [r4, #16]
 800c72c:	b94b      	cbnz	r3, 800c742 <__swsetup_r+0x7a>
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c738:	d003      	beq.n	800c742 <__swsetup_r+0x7a>
 800c73a:	4621      	mov	r1, r4
 800c73c:	4628      	mov	r0, r5
 800c73e:	f000 f883 	bl	800c848 <__smakebuf_r>
 800c742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c746:	f013 0201 	ands.w	r2, r3, #1
 800c74a:	d00a      	beq.n	800c762 <__swsetup_r+0x9a>
 800c74c:	2200      	movs	r2, #0
 800c74e:	60a2      	str	r2, [r4, #8]
 800c750:	6962      	ldr	r2, [r4, #20]
 800c752:	4252      	negs	r2, r2
 800c754:	61a2      	str	r2, [r4, #24]
 800c756:	6922      	ldr	r2, [r4, #16]
 800c758:	b942      	cbnz	r2, 800c76c <__swsetup_r+0xa4>
 800c75a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c75e:	d1c5      	bne.n	800c6ec <__swsetup_r+0x24>
 800c760:	bd38      	pop	{r3, r4, r5, pc}
 800c762:	0799      	lsls	r1, r3, #30
 800c764:	bf58      	it	pl
 800c766:	6962      	ldrpl	r2, [r4, #20]
 800c768:	60a2      	str	r2, [r4, #8]
 800c76a:	e7f4      	b.n	800c756 <__swsetup_r+0x8e>
 800c76c:	2000      	movs	r0, #0
 800c76e:	e7f7      	b.n	800c760 <__swsetup_r+0x98>
 800c770:	20000198 	.word	0x20000198

0800c774 <_raise_r>:
 800c774:	291f      	cmp	r1, #31
 800c776:	b538      	push	{r3, r4, r5, lr}
 800c778:	4605      	mov	r5, r0
 800c77a:	460c      	mov	r4, r1
 800c77c:	d904      	bls.n	800c788 <_raise_r+0x14>
 800c77e:	2316      	movs	r3, #22
 800c780:	6003      	str	r3, [r0, #0]
 800c782:	f04f 30ff 	mov.w	r0, #4294967295
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c78a:	b112      	cbz	r2, 800c792 <_raise_r+0x1e>
 800c78c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c790:	b94b      	cbnz	r3, 800c7a6 <_raise_r+0x32>
 800c792:	4628      	mov	r0, r5
 800c794:	f000 f830 	bl	800c7f8 <_getpid_r>
 800c798:	4622      	mov	r2, r4
 800c79a:	4601      	mov	r1, r0
 800c79c:	4628      	mov	r0, r5
 800c79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7a2:	f000 b817 	b.w	800c7d4 <_kill_r>
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d00a      	beq.n	800c7c0 <_raise_r+0x4c>
 800c7aa:	1c59      	adds	r1, r3, #1
 800c7ac:	d103      	bne.n	800c7b6 <_raise_r+0x42>
 800c7ae:	2316      	movs	r3, #22
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	2001      	movs	r0, #1
 800c7b4:	e7e7      	b.n	800c786 <_raise_r+0x12>
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c7bc:	4620      	mov	r0, r4
 800c7be:	4798      	blx	r3
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	e7e0      	b.n	800c786 <_raise_r+0x12>

0800c7c4 <raise>:
 800c7c4:	4b02      	ldr	r3, [pc, #8]	@ (800c7d0 <raise+0xc>)
 800c7c6:	4601      	mov	r1, r0
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	f7ff bfd3 	b.w	800c774 <_raise_r>
 800c7ce:	bf00      	nop
 800c7d0:	20000198 	.word	0x20000198

0800c7d4 <_kill_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4d07      	ldr	r5, [pc, #28]	@ (800c7f4 <_kill_r+0x20>)
 800c7d8:	2300      	movs	r3, #0
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	4611      	mov	r1, r2
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	f7f8 fdcb 	bl	800537c <_kill>
 800c7e6:	1c43      	adds	r3, r0, #1
 800c7e8:	d102      	bne.n	800c7f0 <_kill_r+0x1c>
 800c7ea:	682b      	ldr	r3, [r5, #0]
 800c7ec:	b103      	cbz	r3, 800c7f0 <_kill_r+0x1c>
 800c7ee:	6023      	str	r3, [r4, #0]
 800c7f0:	bd38      	pop	{r3, r4, r5, pc}
 800c7f2:	bf00      	nop
 800c7f4:	20003818 	.word	0x20003818

0800c7f8 <_getpid_r>:
 800c7f8:	f7f8 bdb8 	b.w	800536c <_getpid>

0800c7fc <__swhatbuf_r>:
 800c7fc:	b570      	push	{r4, r5, r6, lr}
 800c7fe:	460c      	mov	r4, r1
 800c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c804:	2900      	cmp	r1, #0
 800c806:	b096      	sub	sp, #88	@ 0x58
 800c808:	4615      	mov	r5, r2
 800c80a:	461e      	mov	r6, r3
 800c80c:	da0d      	bge.n	800c82a <__swhatbuf_r+0x2e>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c814:	f04f 0100 	mov.w	r1, #0
 800c818:	bf14      	ite	ne
 800c81a:	2340      	movne	r3, #64	@ 0x40
 800c81c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c820:	2000      	movs	r0, #0
 800c822:	6031      	str	r1, [r6, #0]
 800c824:	602b      	str	r3, [r5, #0]
 800c826:	b016      	add	sp, #88	@ 0x58
 800c828:	bd70      	pop	{r4, r5, r6, pc}
 800c82a:	466a      	mov	r2, sp
 800c82c:	f000 f848 	bl	800c8c0 <_fstat_r>
 800c830:	2800      	cmp	r0, #0
 800c832:	dbec      	blt.n	800c80e <__swhatbuf_r+0x12>
 800c834:	9901      	ldr	r1, [sp, #4]
 800c836:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c83a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c83e:	4259      	negs	r1, r3
 800c840:	4159      	adcs	r1, r3
 800c842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c846:	e7eb      	b.n	800c820 <__swhatbuf_r+0x24>

0800c848 <__smakebuf_r>:
 800c848:	898b      	ldrh	r3, [r1, #12]
 800c84a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c84c:	079d      	lsls	r5, r3, #30
 800c84e:	4606      	mov	r6, r0
 800c850:	460c      	mov	r4, r1
 800c852:	d507      	bpl.n	800c864 <__smakebuf_r+0x1c>
 800c854:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	6123      	str	r3, [r4, #16]
 800c85c:	2301      	movs	r3, #1
 800c85e:	6163      	str	r3, [r4, #20]
 800c860:	b003      	add	sp, #12
 800c862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c864:	ab01      	add	r3, sp, #4
 800c866:	466a      	mov	r2, sp
 800c868:	f7ff ffc8 	bl	800c7fc <__swhatbuf_r>
 800c86c:	9f00      	ldr	r7, [sp, #0]
 800c86e:	4605      	mov	r5, r0
 800c870:	4639      	mov	r1, r7
 800c872:	4630      	mov	r0, r6
 800c874:	f7fe fc08 	bl	800b088 <_malloc_r>
 800c878:	b948      	cbnz	r0, 800c88e <__smakebuf_r+0x46>
 800c87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87e:	059a      	lsls	r2, r3, #22
 800c880:	d4ee      	bmi.n	800c860 <__smakebuf_r+0x18>
 800c882:	f023 0303 	bic.w	r3, r3, #3
 800c886:	f043 0302 	orr.w	r3, r3, #2
 800c88a:	81a3      	strh	r3, [r4, #12]
 800c88c:	e7e2      	b.n	800c854 <__smakebuf_r+0xc>
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	6020      	str	r0, [r4, #0]
 800c892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	9b01      	ldr	r3, [sp, #4]
 800c89a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c89e:	b15b      	cbz	r3, 800c8b8 <__smakebuf_r+0x70>
 800c8a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	f000 f81d 	bl	800c8e4 <_isatty_r>
 800c8aa:	b128      	cbz	r0, 800c8b8 <__smakebuf_r+0x70>
 800c8ac:	89a3      	ldrh	r3, [r4, #12]
 800c8ae:	f023 0303 	bic.w	r3, r3, #3
 800c8b2:	f043 0301 	orr.w	r3, r3, #1
 800c8b6:	81a3      	strh	r3, [r4, #12]
 800c8b8:	89a3      	ldrh	r3, [r4, #12]
 800c8ba:	431d      	orrs	r5, r3
 800c8bc:	81a5      	strh	r5, [r4, #12]
 800c8be:	e7cf      	b.n	800c860 <__smakebuf_r+0x18>

0800c8c0 <_fstat_r>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	4d07      	ldr	r5, [pc, #28]	@ (800c8e0 <_fstat_r+0x20>)
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	4608      	mov	r0, r1
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	602b      	str	r3, [r5, #0]
 800c8ce:	f7f8 fdb5 	bl	800543c <_fstat>
 800c8d2:	1c43      	adds	r3, r0, #1
 800c8d4:	d102      	bne.n	800c8dc <_fstat_r+0x1c>
 800c8d6:	682b      	ldr	r3, [r5, #0]
 800c8d8:	b103      	cbz	r3, 800c8dc <_fstat_r+0x1c>
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	bd38      	pop	{r3, r4, r5, pc}
 800c8de:	bf00      	nop
 800c8e0:	20003818 	.word	0x20003818

0800c8e4 <_isatty_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4d06      	ldr	r5, [pc, #24]	@ (800c900 <_isatty_r+0x1c>)
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	602b      	str	r3, [r5, #0]
 800c8f0:	f7f8 fdb4 	bl	800545c <_isatty>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d102      	bne.n	800c8fe <_isatty_r+0x1a>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	b103      	cbz	r3, 800c8fe <_isatty_r+0x1a>
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	bd38      	pop	{r3, r4, r5, pc}
 800c900:	20003818 	.word	0x20003818

0800c904 <_init>:
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c906:	bf00      	nop
 800c908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c90a:	bc08      	pop	{r3}
 800c90c:	469e      	mov	lr, r3
 800c90e:	4770      	bx	lr

0800c910 <_fini>:
 800c910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c912:	bf00      	nop
 800c914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c916:	bc08      	pop	{r3}
 800c918:	469e      	mov	lr, r3
 800c91a:	4770      	bx	lr
