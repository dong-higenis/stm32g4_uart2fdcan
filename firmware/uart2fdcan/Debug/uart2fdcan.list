
uart2fdcan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c924  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc0  0800cb08  0800cb08  0000db08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dac8  0800dac8  0000fa40  2**0
                  CONTENTS
  4 .ARM          00000008  0800dac8  0800dac8  0000eac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dad0  0800dad0  0000fa40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dad0  0800dad0  0000ead0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dad4  0800dad4  0000ead4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800dad8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .non_cache    00000858  200001e8  0800dcc0  0000f1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002de8  20000a40  0800e518  0000fa40  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003828  0800e518  00010828  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000fa40  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015459  00000000  00000000  0000fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038e3  00000000  00000000  00024ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  000287b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9a  00000000  00000000  00029978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002100d  00000000  00000000  0002a712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cb2  00000000  00000000  0004b71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf5ac  00000000  00000000  000643d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012397d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bf4  00000000  00000000  001239c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001295b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a40 	.word	0x20000a40
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800caec 	.word	0x0800caec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a44 	.word	0x20000a44
 800021c:	0800caec 	.word	0x0800caec

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <apInit>:
#include "ap.h"

bool led_blink_500ms_flag = false;

void apInit (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  cliOpen(HW_UART_CH_DEBUG, 115200);
 8000ff8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f9f1 	bl	80013e4 <cliOpen>
  logBoot(false);
 8001002:	2000      	movs	r0, #0
 8001004:	f003 f876 	bl	80040f4 <logBoot>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <canLedStatus>:

void canLedStatus()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	if(canIsOpen(0))
 8001012:	2000      	movs	r0, #0
 8001014:	f001 fb3c 	bl	8002690 <canIsOpen>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00a      	beq.n	8001034 <canLedStatus+0x28>
	{
		ledOn(LED_LINK_CH);
 800101e:	2001      	movs	r0, #1
 8001020:	f002 ff64 	bl	8003eec <ledOn>
		ledOff(LED_LINK_CH);
		ledOff(LED_ERROR_CH);
		return;
	}

	uint32_t err = canGetError(0);
 8001024:	2000      	movs	r0, #0
 8001026:	f001 fd3d 	bl	8002aa4 <canGetError>
 800102a:	6078      	str	r0, [r7, #4]

	if(err == CAN_ERR_BUS_OFF) //bus off
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b04      	cmp	r3, #4
 8001030:	d10b      	bne.n	800104a <canLedStatus+0x3e>
 8001032:	e006      	b.n	8001042 <canLedStatus+0x36>
		ledOff(LED_LINK_CH);
 8001034:	2001      	movs	r0, #1
 8001036:	f002 ff79 	bl	8003f2c <ledOff>
		ledOff(LED_ERROR_CH);
 800103a:	2002      	movs	r0, #2
 800103c:	f002 ff76 	bl	8003f2c <ledOff>
		return;
 8001040:	e015      	b.n	800106e <canLedStatus+0x62>
	{
		ledOn(LED_ERROR_CH);
 8001042:	2002      	movs	r0, #2
 8001044:	f002 ff52 	bl	8003eec <ledOn>
 8001048:	e011      	b.n	800106e <canLedStatus+0x62>
	}
	else if(err != CAN_ERR_NONE) //CAN_ERR_WARNING or CAN_ERR_PASSIVE
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <canLedStatus+0x5c>
	{
		if(led_blink_500ms_flag)
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <canLedStatus+0x68>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <canLedStatus+0x54>
		{
			ledOn(LED_ERROR_CH);
 8001058:	2002      	movs	r0, #2
 800105a:	f002 ff47 	bl	8003eec <ledOn>
 800105e:	e006      	b.n	800106e <canLedStatus+0x62>
		}
		else
		{
			ledOff(LED_ERROR_CH);
 8001060:	2002      	movs	r0, #2
 8001062:	f002 ff63 	bl	8003f2c <ledOff>
 8001066:	e002      	b.n	800106e <canLedStatus+0x62>
		}
	}
	else
	{
		ledOff(LED_ERROR_CH);
 8001068:	2002      	movs	r0, #2
 800106a:	f002 ff5f 	bl	8003f2c <ledOff>
	}
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000a5c 	.word	0x20000a5c

08001078 <apMain>:

void apMain (void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	pre_time = millis ();
 800107e:	f000 f83c 	bl	80010fa <millis>
 8001082:	6078      	str	r0, [r7, #4]
	ledOff(LED_STATUS_CH);
 8001084:	2000      	movs	r0, #0
 8001086:	f002 ff51 	bl	8003f2c <ledOff>
	while (1)
	{
		if (millis () - pre_time >= 500)
 800108a:	f000 f836 	bl	80010fa <millis>
 800108e:	4602      	mov	r2, r0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001098:	d311      	bcc.n	80010be <apMain+0x46>
		{
			pre_time = millis ();
 800109a:	f000 f82e 	bl	80010fa <millis>
 800109e:	6078      	str	r0, [r7, #4]
			led_blink_500ms_flag = !led_blink_500ms_flag;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <apMain+0x68>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f083 0301 	eor.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <apMain+0x68>)
 80010bc:	701a      	strb	r2, [r3, #0]
		}
		if(led_blink_500ms_flag)
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <apMain+0x68>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <apMain+0x56>
		{
			ledOn(LED_STATUS_CH);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f002 ff10 	bl	8003eec <ledOn>
 80010cc:	e002      	b.n	80010d4 <apMain+0x5c>
		}
		else
		{
			ledOff(LED_STATUS_CH);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f002 ff2c 	bl	8003f2c <ledOff>
		}
		canLedStatus();
 80010d4:	f7ff ff9a 	bl	800100c <canLedStatus>
		cliMain();
 80010d8:	f000 fa56 	bl	8001588 <cliMain>
		if (millis () - pre_time >= 500)
 80010dc:	e7d5      	b.n	800108a <apMain+0x12>
 80010de:	bf00      	nop
 80010e0:	20000a5c 	.word	0x20000a5c

080010e4 <delay>:
{
  return true;
}

void delay(uint32_t ms)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f004 fba3 	bl	8005838 <HAL_Delay>
#endif
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <millis>:

uint32_t millis(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010fe:	f004 fb8f 	bl	8005820 <HAL_GetTick>
 8001102:	4603      	mov	r3, r0
}
 8001104:	4618      	mov	r0, r3
 8001106:	bd80      	pop	{r7, pc}

08001108 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001114:	2301      	movs	r3, #1
 8001116:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2201      	movs	r2, #1
 800112e:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	611a      	str	r2, [r3, #16]

  return ret;
 8001136:	7dfb      	ldrb	r3, [r7, #23]
}
 8001138:	4618      	mov	r0, r3
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <qbufferCreateBySize>:

bool qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
  bool ret = true;
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	611a      	str	r2, [r3, #16]

  return ret;
 8001174:	7dfb      	ldrb	r3, [r7, #23]
}
 8001176:	4618      	mov	r0, r3
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001182:	b480      	push	{r7}
 8001184:	b08b      	sub	sp, #44	@ 0x2c
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800118e:	2301      	movs	r3, #1
 8001190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t next_in;


  for (uint32_t i=0; i<length; i++)
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	e043      	b.n	8001222 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	6892      	ldr	r2, [r2, #8]
 80011a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80011a8:	fb01 f202 	mul.w	r2, r1, r2
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d02c      	beq.n	8001214 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d024      	beq.n	800120c <qbufferWrite+0x8a>
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d021      	beq.n	800120c <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68f9      	ldr	r1, [r7, #12]
 80011d2:	68c9      	ldr	r1, [r1, #12]
 80011d4:	fb01 f303 	mul.w	r3, r1, r3
 80011d8:	4413      	add	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
        for (uint32_t j=0; j<p_node->size; j++)
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	e00a      	b.n	80011f8 <qbufferWrite+0x76>
        {
          p_buf[j] = p_data[j];
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	441a      	add	r2, r3
 80011e8:	6979      	ldr	r1, [r7, #20]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	440b      	add	r3, r1
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	701a      	strb	r2, [r3, #0]
        for (uint32_t j=0; j<p_node->size; j++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d3ef      	bcc.n	80011e2 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e003      	b.n	800121c <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800121a:	e006      	b.n	800122a <qbufferWrite+0xa8>
  for (uint32_t i=0; i<length; i++)
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	3301      	adds	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
 8001222:	6a3a      	ldr	r2, [r7, #32]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3b7      	bcc.n	800119a <qbufferWrite+0x18>
    }
  }

  return ret;
 800122a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800122e:	4618      	mov	r0, r3
 8001230:	372c      	adds	r7, #44	@ 0x2c
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800123a:	b480      	push	{r7}
 800123c:	b089      	sub	sp, #36	@ 0x24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001246:	2301      	movs	r3, #1
 8001248:	77fb      	strb	r3, [r7, #31]


  for (uint32_t i=0; i<length; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	e041      	b.n	80012d4 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d024      	beq.n	80012a2 <qbufferRead+0x68>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d021      	beq.n	80012a2 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	68c9      	ldr	r1, [r1, #12]
 800126a:	fb01 f303 	mul.w	r3, r1, r3
 800126e:	4413      	add	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
      for (uint32_t j=0; j<p_node->size; j++)
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e00a      	b.n	800128e <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	441a      	add	r2, r3
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	440b      	add	r3, r1
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	701a      	strb	r2, [r3, #0]
      for (uint32_t j=0; j<p_node->size; j++)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	429a      	cmp	r2, r3
 8001296:	d3ef      	bcc.n	8001278 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d00c      	beq.n	80012c8 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	6892      	ldr	r2, [r2, #8]
 80012b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80012bc:	fb01 f202 	mul.w	r2, r1, r2
 80012c0:	1a9a      	subs	r2, r3, r2
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	e002      	b.n	80012ce <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 80012c8:	2300      	movs	r3, #0
 80012ca:	77fb      	strb	r3, [r7, #31]
      break;
 80012cc:	e006      	b.n	80012dc <qbufferRead+0xa2>
  for (uint32_t i=0; i<length; i++)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3b9      	bcc.n	8001250 <qbufferRead+0x16>
    }
  }

  return ret;
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	68c9      	ldr	r1, [r1, #12]
 80012fe:	fb01 f303 	mul.w	r3, r1, r3
 8001302:	4413      	add	r3, r2
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	441a      	add	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6892      	ldr	r2, [r2, #8]
 800132c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001330:	fb01 f202 	mul.w	r2, r1, r2
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

  return ret;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <cliInit+0x78>)
 800134e:	2200      	movs	r2, #0
 8001350:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <cliInit+0x78>)
 8001354:	2200      	movs	r2, #0
 8001356:	725a      	strb	r2, [r3, #9]
  cli_node.is_busy = false;
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <cliInit+0x78>)
 800135a:	2200      	movs	r2, #0
 800135c:	729a      	strb	r2, [r3, #10]
  cli_node.state   = CLI_RX_IDLE;
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <cliInit+0x78>)
 8001360:	2200      	movs	r2, #0
 8001362:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <cliInit+0x78>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <cliInit+0x78>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <cliInit+0x78>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <cliInit+0x78>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <cliInit+0x78>)
 8001386:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <cliInit+0x7c>)
 8001388:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <cliInit+0x78>)
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <cliInit+0x80>)
 8001390:	f8c3 2684 	str.w	r2, [r3, #1668]	@ 0x684
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <cliInit+0x78>)
 8001396:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <cliInit+0x84>)
 8001398:	f8c3 2688 	str.w	r2, [r3, #1672]	@ 0x688
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <cliInit+0x78>)
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <cliInit+0x88>)
 80013a0:	f8c3 268c 	str.w	r2, [r3, #1676]	@ 0x68c

  cliLineClean(&cli_node);
 80013a4:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <cliInit+0x78>)
 80013a6:	f000 fb9f 	bl	8001ae8 <cliLineClean>


  cliAdd("help", cliShowList);
 80013aa:	490a      	ldr	r1, [pc, #40]	@ (80013d4 <cliInit+0x8c>)
 80013ac:	480a      	ldr	r0, [pc, #40]	@ (80013d8 <cliInit+0x90>)
 80013ae:	f000 fe3b 	bl	8002028 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80013b2:	490a      	ldr	r1, [pc, #40]	@ (80013dc <cliInit+0x94>)
 80013b4:	480a      	ldr	r0, [pc, #40]	@ (80013e0 <cliInit+0x98>)
 80013b6:	f000 fe37 	bl	8002028 <cliAdd>

  return true;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000a60 	.word	0x20000a60
 80013c4:	08001eb9 	.word	0x08001eb9
 80013c8:	08001f09 	.word	0x08001f09
 80013cc:	08001f61 	.word	0x08001f61
 80013d0:	08001fa9 	.word	0x08001fa9
 80013d4:	080020b9 	.word	0x080020b9
 80013d8:	0800cb08 	.word	0x0800cb08
 80013dc:	08002129 	.word	0x08002129
 80013e0:	0800cb10 	.word	0x0800cb10

080013e4 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <cliOpen+0x54>)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	7013      	strb	r3, [r2, #0]


  if (cli_node.is_open == false || cli_node.baud != baud)
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <cliOpen+0x54>)
 80013f8:	7a1b      	ldrb	r3, [r3, #8]
 80013fa:	f083 0301 	eor.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d104      	bne.n	800140e <cliOpen+0x2a>
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <cliOpen+0x54>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d00e      	beq.n	800142c <cliOpen+0x48>
  {
    if (baud > 0)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <cliOpen+0x48>
    {
      cli_node.baud = baud;
 8001414:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <cliOpen+0x54>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	6053      	str	r3, [r2, #4]
      cli_node.is_open = uartOpen(ch, baud);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 f8a2 	bl	8004568 <uartOpen>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <cliOpen+0x54>)
 800142a:	721a      	strb	r2, [r3, #8]
    }
  }

  return cli_node.is_open;
 800142c:	4b02      	ldr	r3, [pc, #8]	@ (8001438 <cliOpen+0x54>)
 800142e:	7a1b      	ldrb	r3, [r3, #8]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000a60 	.word	0x20000a60

0800143c <cliGetPort>:
  }
  return ret;
}

uint8_t cliGetPort(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return cli_node.ch;
 8001440:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <cliGetPort+0x14>)
 8001442:	781b      	ldrb	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000a60 	.word	0x20000a60

08001454 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <cliShowLog+0xdc>)
 800145e:	7a5b      	ldrb	r3, [r3, #9]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d061      	beq.n	8001528 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7ad8      	ldrb	r0, [r3, #11]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 800146e:	461a      	mov	r2, r3
 8001470:	4930      	ldr	r1, [pc, #192]	@ (8001534 <cliShowLog+0xe0>)
 8001472:	f003 faf1 	bl	8004a58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7ad8      	ldrb	r0, [r3, #11]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001480:	461a      	mov	r2, r3
 8001482:	492d      	ldr	r1, [pc, #180]	@ (8001538 <cliShowLog+0xe4>)
 8001484:	f003 fae8 	bl	8004a58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7ad8      	ldrb	r0, [r3, #11]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 8001492:	461a      	mov	r2, r3
 8001494:	4929      	ldr	r1, [pc, #164]	@ (800153c <cliShowLog+0xe8>)
 8001496:	f003 fadf 	bl	8004a58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7ad8      	ldrb	r0, [r3, #11]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4926      	ldr	r1, [pc, #152]	@ (8001540 <cliShowLog+0xec>)
 80014a8:	f003 fad6 	bl	8004a58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7ad8      	ldrb	r0, [r3, #11]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 80014b6:	461a      	mov	r2, r3
 80014b8:	4922      	ldr	r1, [pc, #136]	@ (8001544 <cliShowLog+0xf0>)
 80014ba:	f003 facd 	bl	8004a58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7ad8      	ldrb	r0, [r3, #11]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80014c8:	461a      	mov	r2, r3
 80014ca:	491f      	ldr	r1, [pc, #124]	@ (8001548 <cliShowLog+0xf4>)
 80014cc:	f003 fac4 	bl	8004a58 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7ad8      	ldrb	r0, [r3, #11]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80014da:	461a      	mov	r2, r3
 80014dc:	491b      	ldr	r1, [pc, #108]	@ (800154c <cliShowLog+0xf8>)
 80014de:	f003 fabb 	bl	8004a58 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e012      	b.n	800150e <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7ad8      	ldrb	r0, [r3, #11]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4613      	mov	r3, r2
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4913      	ldr	r1, [pc, #76]	@ (8001550 <cliShowLog+0xfc>)
 8001504:	f003 faa8 	bl	8004a58 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3301      	adds	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001514:	461a      	mov	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4293      	cmp	r3, r2
 800151a:	dbe5      	blt.n	80014e8 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7adb      	ldrb	r3, [r3, #11]
 8001520:	490c      	ldr	r1, [pc, #48]	@ (8001554 <cliShowLog+0x100>)
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fa98 	bl	8004a58 <uartPrintf>
  }
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000a60 	.word	0x20000a60
 8001534:	0800cb14 	.word	0x0800cb14
 8001538:	0800cb24 	.word	0x0800cb24
 800153c:	0800cb34 	.word	0x0800cb34
 8001540:	0800cb44 	.word	0x0800cb44
 8001544:	0800cb54 	.word	0x0800cb54
 8001548:	0800cb64 	.word	0x0800cb64
 800154c:	0800cb74 	.word	0x0800cb74
 8001550:	0800cb84 	.word	0x0800cb84
 8001554:	0800cb94 	.word	0x0800cb94

08001558 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4906      	ldr	r1, [pc, #24]	@ (8001580 <cliShowPrompt+0x28>)
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fa76 	bl	8004a58 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4904      	ldr	r1, [pc, #16]	@ (8001584 <cliShowPrompt+0x2c>)
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fa70 	bl	8004a58 <uartPrintf>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	0800cb98 	.word	0x0800cb98
 8001584:	0800cb9c 	.word	0x0800cb9c

08001588 <cliMain>:

bool cliMain(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <cliMain+0x40>)
 800158e:	7a1b      	ldrb	r3, [r3, #8]
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <cliMain+0x16>
  {
    return false;
 800159a:	2300      	movs	r3, #0
 800159c:	e012      	b.n	80015c4 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <cliMain+0x40>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 f994 	bl	80048d0 <uartAvailable>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <cliMain+0x40>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 f9d2 	bl	800495c <uartRead>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <cliMain+0x40>)
 80015be:	f000 f831 	bl	8001624 <cliUpdate>
  }

  return true;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000a60 	.word	0x20000a60

080015cc <cliAvailable>:

uint32_t cliAvailable(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  return uartAvailable(cli_node.ch);
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <cliAvailable+0x14>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 f97b 	bl	80048d0 <uartAvailable>
 80015da:	4603      	mov	r3, r0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000a60 	.word	0x20000a60

080015e4 <cliRead>:

uint8_t cliRead(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  return uartRead(cli_node.ch);
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <cliRead+0x14>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 f9b5 	bl	800495c <uartRead>
 80015f2:	4603      	mov	r3, r0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000a60 	.word	0x20000a60

080015fc <cliWrite>:

uint32_t cliWrite(uint8_t *p_data, uint32_t length)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  return uartWrite(cli_node.ch, p_data, length);
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <cliWrite+0x24>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4618      	mov	r0, r3
 8001610:	f003 f9de 	bl	80049d0 <uartWrite>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000a60 	.word	0x20000a60

08001624 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	@ 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800163c:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7c1b      	ldrb	r3, [r3, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 816d 	bne.w	8001922 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	2b7f      	cmp	r3, #127	@ 0x7f
 800164c:	d02a      	beq.n	80016a4 <cliUpdate+0x80>
 800164e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001650:	f300 80da 	bgt.w	8001808 <cliUpdate+0x1e4>
 8001654:	2b1b      	cmp	r3, #27
 8001656:	d021      	beq.n	800169c <cliUpdate+0x78>
 8001658:	2b1b      	cmp	r3, #27
 800165a:	f300 80d5 	bgt.w	8001808 <cliUpdate+0x1e4>
 800165e:	2b08      	cmp	r3, #8
 8001660:	d062      	beq.n	8001728 <cliUpdate+0x104>
 8001662:	2b0d      	cmp	r3, #13
 8001664:	f040 80d0 	bne.w	8001808 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fa52 	bl	8001b1c <cliLineAdd>
          cliRunCmd(p_cli);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fb1d 	bl	8001cb8 <cliRunCmd>
        }

        line->count = 0;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff5f 	bl	8001558 <cliShowPrompt>
        break;
 800169a:	e142      	b.n	8001922 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	741a      	strb	r2, [r3, #16]
        break;
 80016a2:	e13e      	b.n	8001922 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f080 8131 	bcs.w	8001918 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 80016c6:	2301      	movs	r3, #1
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ca:	e013      	b.n	80016f4 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d2:	461a      	mov	r2, r3
 80016d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d6:	441a      	add	r2, r3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016de:	4619      	mov	r1, r3
 80016e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e2:	440b      	add	r3, r1
 80016e4:	3b01      	subs	r3, #1
 80016e6:	69f9      	ldr	r1, [r7, #28]
 80016e8:	5c89      	ldrb	r1, [r1, r2]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 80016ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016f0:	3301      	adds	r3, #1
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016f4:	7efb      	ldrb	r3, [r7, #27]
 80016f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbe7      	blt.n	80016cc <cliUpdate+0xa8>
          }

          line->count--;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001702:	3b01      	subs	r3, #1
 8001704:	b2da      	uxtb	r2, r3
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001712:	461a      	mov	r2, r3
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	498d      	ldr	r1, [pc, #564]	@ (8001954 <cliUpdate+0x330>)
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f999 	bl	8004a58 <uartPrintf>
        }
        break;
 8001726:	e0f7      	b.n	8001918 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800172e:	2b00      	cmp	r3, #0
 8001730:	d055      	beq.n	80017de <cliUpdate+0x1ba>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001738:	2b00      	cmp	r3, #0
 800173a:	d050      	beq.n	80017de <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001748:	429a      	cmp	r2, r3
 800174a:	d10e      	bne.n	800176a <cliUpdate+0x146>
          {
            line->count--;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001752:	3b01      	subs	r3, #1
 8001754:	b2da      	uxtb	r2, r3
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001762:	461a      	mov	r2, r3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001776:	429a      	cmp	r2, r3
 8001778:	d231      	bcs.n	80017de <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800178e:	e013      	b.n	80017b8 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001796:	461a      	mov	r2, r3
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179a:	441a      	add	r2, r3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a2:	4619      	mov	r1, r3
 80017a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a6:	440b      	add	r3, r1
 80017a8:	3b01      	subs	r3, #1
 80017aa:	69f9      	ldr	r1, [r7, #28]
 80017ac:	5c89      	ldrb	r1, [r1, r2]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80017b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b4:	3301      	adds	r3, #1
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b8:	7ebb      	ldrb	r3, [r7, #26]
 80017ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbe7      	blt.n	8001790 <cliUpdate+0x16c>
            }

            line->count--;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017d6:	461a      	mov	r2, r3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 8099 	beq.w	800191c <cliUpdate+0x2f8>
        {
          line->cursor--;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4956      	ldr	r1, [pc, #344]	@ (8001958 <cliUpdate+0x334>)
 8001800:	4618      	mov	r0, r3
 8001802:	f003 f929 	bl	8004a58 <uartPrintf>
        }
        break;
 8001806:	e089      	b.n	800191c <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800180e:	3301      	adds	r3, #1
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8001816:	4293      	cmp	r3, r2
 8001818:	f280 8082 	bge.w	8001920 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001828:	429a      	cmp	r2, r3
 800182a:	d124      	bne.n	8001876 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	1cf9      	adds	r1, r7, #3
 8001832:	2201      	movs	r2, #1
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f8cb 	bl	80049d0 <uartWrite>

            line->buf[line->cursor] = rx_data;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001840:	461a      	mov	r2, r3
 8001842:	78f9      	ldrb	r1, [r7, #3]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800184e:	3301      	adds	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800185e:	3301      	adds	r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800186e:	461a      	mov	r2, r3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2100      	movs	r1, #0
 8001874:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001882:	429a      	cmp	r2, r3
 8001884:	d24c      	bcs.n	8001920 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
 800189a:	e013      	b.n	80018c4 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018a2:	461a      	mov	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	1e5a      	subs	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018b0:	4619      	mov	r1, r3
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	1acb      	subs	r3, r1, r3
 80018b6:	69f9      	ldr	r1, [r7, #28]
 80018b8:	5c89      	ldrb	r1, [r1, r2]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c4:	7e7b      	ldrb	r3, [r7, #25]
 80018c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbe7      	blt.n	800189c <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018d2:	461a      	mov	r2, r3
 80018d4:	78f9      	ldrb	r1, [r7, #3]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	5499      	strb	r1, [r3, r2]
            line->count++;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018f0:	3301      	adds	r3, #1
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001900:	461a      	mov	r2, r3
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2100      	movs	r1, #0
 8001906:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	4913      	ldr	r1, [pc, #76]	@ (800195c <cliUpdate+0x338>)
 8001910:	4618      	mov	r0, r3
 8001912:	f003 f8a1 	bl	8004a58 <uartPrintf>
          }
        }
        break;
 8001916:	e003      	b.n	8001920 <cliUpdate+0x2fc>
        break;
 8001918:	bf00      	nop
 800191a:	e002      	b.n	8001922 <cliUpdate+0x2fe>
        break;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <cliUpdate+0x2fe>
        break;
 8001920:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7c1b      	ldrb	r3, [r3, #16]
 8001926:	3b01      	subs	r3, #1
 8001928:	2b03      	cmp	r3, #3
 800192a:	f200 80d0 	bhi.w	8001ace <cliUpdate+0x4aa>
 800192e:	a201      	add	r2, pc, #4	@ (adr r2, 8001934 <cliUpdate+0x310>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	08001945 	.word	0x08001945
 8001938:	0800194d 	.word	0x0800194d
 800193c:	08001961 	.word	0x08001961
 8001940:	08001ac5 	.word	0x08001ac5
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	741a      	strb	r2, [r3, #16]
      break;
 800194a:	e0c0      	b.n	8001ace <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	741a      	strb	r2, [r3, #16]
      break;
 8001952:	e0bc      	b.n	8001ace <cliUpdate+0x4aa>
 8001954:	0800cba4 	.word	0x0800cba4
 8001958:	0800cbac 	.word	0x0800cbac
 800195c:	0800cbb4 	.word	0x0800cbb4

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	2b44      	cmp	r3, #68	@ 0x44
 800196a:	d11a      	bne.n	80019a2 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001972:	2b00      	cmp	r3, #0
 8001974:	d015      	beq.n	80019a2 <cliUpdate+0x37e>
        {
          line->cursor--;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800197c:	3b01      	subs	r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 8001986:	231b      	movs	r3, #27
 8001988:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800198a:	235b      	movs	r3, #91	@ 0x5b
 800198c:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f107 010c 	add.w	r1, r7, #12
 800199a:	2203      	movs	r2, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f003 f817 	bl	80049d0 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	2b43      	cmp	r3, #67	@ 0x43
 80019a6:	d11d      	bne.n	80019e4 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d215      	bcs.n	80019e4 <cliUpdate+0x3c0>
        {
          line->cursor++;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 80019c8:	231b      	movs	r3, #27
 80019ca:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80019cc:	235b      	movs	r3, #91	@ 0x5b
 80019ce:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	f107 010c 	add.w	r1, r7, #12
 80019dc:	2203      	movs	r2, #3
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fff6 	bl	80049d0 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	2b41      	cmp	r3, #65	@ 0x41
 80019e8:	d10c      	bne.n	8001a04 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 80019ea:	2101      	movs	r1, #1
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f8d9 	bl	8001ba4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80019fc:	4619      	mov	r1, r3
 80019fe:	4610      	mov	r0, r2
 8001a00:	f003 f82a 	bl	8004a58 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b42      	cmp	r3, #66	@ 0x42
 8001a08:	d10c      	bne.n	8001a24 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f8c9 	bl	8001ba4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f003 f81a 	bl	8004a58 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	2b31      	cmp	r3, #49	@ 0x31
 8001a28:	d10f      	bne.n	8001a4a <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7818      	ldrb	r0, [r3, #0]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a34:	461a      	mov	r2, r3
 8001a36:	492a      	ldr	r1, [pc, #168]	@ (8001ae0 <cliUpdate+0x4bc>)
 8001a38:	f003 f80e 	bl	8004a58 <uartPrintf>
        line->cursor = 0;
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2204      	movs	r2, #4
 8001a48:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	2b34      	cmp	r3, #52	@ 0x34
 8001a4e:	d13d      	bne.n	8001acc <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d20f      	bcs.n	8001a80 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a66:	461a      	mov	r2, r3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	8afa      	ldrh	r2, [r7, #22]
 8001a78:	491a      	ldr	r1, [pc, #104]	@ (8001ae4 <cliUpdate+0x4c0>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 ffec 	bl	8004a58 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d90f      	bls.n	8001ab0 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a96:	461a      	mov	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	8afa      	ldrh	r2, [r7, #22]
 8001aa8:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <cliUpdate+0x4bc>)
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 ffd4 	bl	8004a58 <uartPrintf>
        }
        line->cursor = line->count;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2204      	movs	r2, #4
 8001ac0:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001ac2:	e003      	b.n	8001acc <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	741a      	strb	r2, [r3, #16]
      break;
 8001aca:	e000      	b.n	8001ace <cliUpdate+0x4aa>
      break;
 8001acc:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fcc0 	bl	8001454 <cliShowLog>

  return ret;
 8001ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3730      	adds	r7, #48	@ 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0800cbc0 	.word	0x0800cbc0
 8001ae4:	0800cbc8 	.word	0x0800cbc8

08001ae8 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
  p_cli->line.cursor  = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	223f      	movs	r2, #63	@ 0x3f
 8001b04:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
  p_cli->line.buf[0]  = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	015b      	lsls	r3, r3, #5
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4610      	mov	r0, r2
 8001b42:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001b46:	2243      	movs	r2, #67	@ 0x43
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f008 ffcc 	bl	800aae6 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b54:	2b07      	cmp	r3, #7
 8001b56:	d807      	bhi.n	8001b68 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b5e:	3301      	adds	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b6e:	b25a      	sxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	425a      	negs	r2, r3
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	f002 0207 	and.w	r2, r2, #7
 8001b88:	bf58      	it	pl
 8001b8a:	4253      	negpl	r3, r2
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d076      	beq.n	8001ca8 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7818      	ldrb	r0, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4937      	ldr	r1, [pc, #220]	@ (8001cb0 <cliLineChange+0x10c>)
 8001bd2:	f002 ff41 	bl	8004a58 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7818      	ldrb	r0, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001bea:	461a      	mov	r2, r3
 8001bec:	4931      	ldr	r1, [pc, #196]	@ (8001cb4 <cliLineChange+0x110>)
 8001bee:	f002 ff33 	bl	8004a58 <uartPrintf>
  }


  if (key_up == true)
 8001bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d125      	bne.n	8001c46 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001c0a:	b25a      	sxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001c20:	4413      	add	r3, r2
 8001c22:	3b01      	subs	r3, #1
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001c2a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c2e:	fb01 f202 	mul.w	r2, r1, r2
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	b25a      	sxtb	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e013      	b.n	8001c6e <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001c54:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c58:	fb01 f202 	mul.w	r2, r1, r2
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	b25a      	sxtb	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001c6c:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	015b      	lsls	r3, r3, #5
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4403      	add	r3, r0
 8001c80:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001c84:	f501 736c 	add.w	r3, r1, #944	@ 0x3b0
 8001c88:	4611      	mov	r1, r2
 8001c8a:	2243      	movs	r2, #67	@ 0x43
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f008 ff2a 	bl	800aae6 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 23f2 	ldrb.w	r2, [r3, #1010]	@ 0x3f2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1

  p_cli->hist_line_new = false;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001ca6:	e000      	b.n	8001caa <cliLineChange+0x106>
    return;
 8001ca8:	bf00      	nop
}
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	0800cbc0 	.word	0x0800cbc0
 8001cb4:	0800cbd0 	.word	0x0800cbd0

08001cb8 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f857 	bl	8001d78 <cliParseArgs>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d04b      	beq.n	8001d68 <cliRunCmd+0xb0>
  {
    cliPrintf("\r\n");
 8001cd0:	4828      	ldr	r0, [pc, #160]	@ (8001d74 <cliRunCmd+0xbc>)
 8001cd2:	f000 f899 	bl	8001e08 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f8b7 	bl	8001e50 <cliToUpper>

    p_cli->is_busy = true;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	729a      	strb	r2, [r3, #10]
    for (int i=0; i<p_cli->cmd_count; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e032      	b.n	8001d54 <cliRunCmd+0x9c>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe fa8a 	bl	8000220 <strcmp>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d11d      	bne.n	8001d4e <cliRunCmd+0x96>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8a3 2678 	strh.w	r2, [r3, #1656]	@ 0x678
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	f502 62cf 	add.w	r2, r2, #1656	@ 0x678
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4798      	blx	r3
        break;
 8001d4c:	e009      	b.n	8001d62 <cliRunCmd+0xaa>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	dbc5      	blt.n	8001cee <cliRunCmd+0x36>
      }
    }
    p_cli->is_busy = false;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	729a      	strb	r2, [r3, #10]
  }

  return ret;
 8001d68:	7afb      	ldrb	r3, [r7, #11]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	0800cbd8 	.word	0x0800cbd8

08001d78 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001d80:	2300      	movs	r3, #0
 8001d82:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001d96:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001d9e:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001da0:	8afb      	ldrh	r3, [r7, #22]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <cliParseArgs+0x8c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f107 0208 	add.w	r2, r7, #8
 8001db4:	4619      	mov	r1, r3
 8001db6:	6938      	ldr	r0, [r7, #16]
 8001db8:	f008 fe16 	bl	800a9e8 <strtok_r>
 8001dbc:	61b8      	str	r0, [r7, #24]
 8001dbe:	e010      	b.n	8001de2 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001dc0:	8afb      	ldrh	r3, [r7, #22]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	82fa      	strh	r2, [r7, #22]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <cliParseArgs+0x8c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f107 0208 	add.w	r2, r7, #8
 8001dd8:	4619      	mov	r1, r3
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f008 fe04 	bl	800a9e8 <strtok_r>
 8001de0:	61b8      	str	r0, [r7, #24]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1eb      	bne.n	8001dc0 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	8afa      	ldrh	r2, [r7, #22]
 8001dec:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001df0:	8afb      	ldrh	r3, [r7, #22]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <cliParseArgs+0x82>
  {
    ret = true;
 8001df6:	2301      	movs	r3, #1
 8001df8:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001dfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000

08001e08 <cliPrintf>:
  
  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8001e08:	b40f      	push	{r0, r1, r2, r3}
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <cliPrintf+0x44>)
 8001e18:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f103 0011 	add.w	r0, r3, #17
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e28:	f008 fd8e 	bl	800a948 <vsniprintf>
 8001e2c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	7818      	ldrb	r0, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3311      	adds	r3, #17
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f002 fdc9 	bl	80049d0 <uartWrite>
}
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e48:	b004      	add	sp, #16
 8001e4a:	4770      	bx	lr
 8001e4c:	20000a60 	.word	0x20000a60

08001e50 <cliToUpper>:
  
  uartWrite(p_cli->ch, &data, 1);
}

void cliToUpper(char *str)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	81fb      	strh	r3, [r7, #14]
 8001e5c:	e018      	b.n	8001e90 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001e5e:	89fb      	ldrh	r3, [r7, #14]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001e68:	7b7b      	ldrb	r3, [r7, #13]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d014      	beq.n	8001e98 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001e6e:	7b7b      	ldrb	r3, [r7, #13]
 8001e70:	2b60      	cmp	r3, #96	@ 0x60
 8001e72:	d905      	bls.n	8001e80 <cliToUpper+0x30>
 8001e74:	7b7b      	ldrb	r3, [r7, #13]
 8001e76:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e78:	d802      	bhi.n	8001e80 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001e7a:	7b7b      	ldrb	r3, [r7, #13]
 8001e7c:	3b20      	subs	r3, #32
 8001e7e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001e80:	89fb      	ldrh	r3, [r7, #14]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	7b7a      	ldrb	r2, [r7, #13]
 8001e88:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	81fb      	strh	r3, [r7, #14]
 8001e90:	89fb      	ldrh	r3, [r7, #14]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	d9e3      	bls.n	8001e5e <cliToUpper+0xe>
 8001e96:	e000      	b.n	8001e9a <cliToUpper+0x4a>
      break;
 8001e98:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001e9a:	89fb      	ldrh	r3, [r7, #14]
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d105      	bne.n	8001eac <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001ea0:	89fb      	ldrh	r3, [r7, #14]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
  }
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <cliArgsGetData+0x4c>)
 8001ec8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d301      	bcc.n	8001edc <cliArgsGetData+0x24>
  {
    return 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e00e      	b.n	8001efa <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f008 fbbc 	bl	800a66c <strtoul>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60fb      	str	r3, [r7, #12]

  return ret;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000a60 	.word	0x20000a60

08001f08 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001f18:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <cliArgsGetFloat+0x54>)
 8001f1a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d302      	bcc.n	8001f30 <cliArgsGetFloat+0x28>
  {
    return 0;
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	e00d      	b.n	8001f4c <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f008 fac1 	bl	800a4c8 <strtof>
 8001f46:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000a60 	.word	0x20000a60

08001f60 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <cliArgsGetStr+0x44>)
 8001f70:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d301      	bcc.n	8001f84 <cliArgsGetStr+0x24>
  {
    return 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e008      	b.n	8001f96 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  return ret;
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000a60 	.word	0x20000a60

08001fa8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, const char *p_str)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <cliArgsIsStr+0x50>)
 8001fba:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d301      	bcc.n	8001fce <cliArgsIsStr+0x26>
  {
    return 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e010      	b.n	8001ff0 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	f7fe f91e 	bl	8000220 <strcmp>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <cliArgsIsStr+0x46>
  {
    ret = true;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000a60 	.word	0x20000a60

08001ffc <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002002:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <cliKeepLoop+0x28>)
 8002004:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fc60 	bl	80048d0 <uartAvailable>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <cliKeepLoop+0x1e>
  {
    return true;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800201a:	2300      	movs	r3, #0
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000a60 	.word	0x20000a60

08002028 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002036:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <cliAdd+0x8c>)
 8002038:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8002040:	2b1f      	cmp	r3, #31
 8002042:	d901      	bls.n	8002048 <cliAdd+0x20>
  {
    return false;
 8002044:	2300      	movs	r3, #0
 8002046:	e030      	b.n	80020aa <cliAdd+0x82>
  }

  index = p_cli->cmd_count;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 800204e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002050:	89fa      	ldrh	r2, [r7, #14]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4413      	add	r3, r2
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	f008 fd36 	bl	800aad6 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800206a:	89fa      	ldrh	r2, [r7, #14]
 800206c:	6939      	ldr	r1, [r7, #16]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002080:	89fa      	ldrh	r2, [r7, #14]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fedc 	bl	8001e50 <cliToUpper>

  p_cli->cmd_count++;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 800209e:	3301      	adds	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f8a3 23f4 	strh.w	r2, [r3, #1012]	@ 0x3f4

  return ret;
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000a60 	.word	0x20000a60

080020b8 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80020c0:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <cliShowList+0x60>)
 80020c2:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80020c4:	4815      	ldr	r0, [pc, #84]	@ (800211c <cliShowList+0x64>)
 80020c6:	f7ff fe9f 	bl	8001e08 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80020ca:	4815      	ldr	r0, [pc, #84]	@ (8002120 <cliShowList+0x68>)
 80020cc:	f7ff fe9c 	bl	8001e08 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e011      	b.n	80020fa <cliShowList+0x42>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fe8d 	bl	8001e08 <cliPrintf>
    cliPrintf("\r\n");
 80020ee:	480b      	ldr	r0, [pc, #44]	@ (800211c <cliShowList+0x64>)
 80020f0:	f7ff fe8a 	bl	8001e08 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3301      	adds	r3, #1
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8002100:	461a      	mov	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4293      	cmp	r3, r2
 8002106:	dbe6      	blt.n	80020d6 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8002108:	4806      	ldr	r0, [pc, #24]	@ (8002124 <cliShowList+0x6c>)
 800210a:	f7ff fe7d 	bl	8001e08 <cliPrintf>
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000a60 	.word	0x20000a60
 800211c:	0800cbd8 	.word	0x0800cbd8
 8002120:	0800cbdc 	.word	0x0800cbdc
 8002124:	0800cbfc 	.word	0x0800cbfc

08002128 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	@ 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002130:	2310      	movs	r3, #16
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002148:	4842      	ldr	r0, [pc, #264]	@ (8002254 <cliMemoryDump+0x12c>)
 800214a:	f7ff fe5d 	bl	8001e08 <cliPrintf>
 800214e:	e07d      	b.n	800224c <cliMemoryDump+0x124>
    return;
  }

  if(argc > 1)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b01      	cmp	r3, #1
 8002154:	dd09      	ble.n	800216a <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	3304      	adds	r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f008 fa83 	bl	800a66c <strtoul>
 8002166:	4603      	mov	r3, r0
 8002168:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f008 fa7a 	bl	800a66c <strtoul>
 8002178:	4603      	mov	r3, r0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002180:	4835      	ldr	r0, [pc, #212]	@ (8002258 <cliMemoryDump+0x130>)
 8002182:	f7ff fe41 	bl	8001e08 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800218a:	e05b      	b.n	8002244 <cliMemoryDump+0x11c>
  {
    if((idx%4) == 0)
 800218c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	4619      	mov	r1, r3
 800219a:	4830      	ldr	r0, [pc, #192]	@ (800225c <cliMemoryDump+0x134>)
 800219c:	f7ff fe34 	bl	8001e08 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	482e      	ldr	r0, [pc, #184]	@ (8002260 <cliMemoryDump+0x138>)
 80021a8:	f7ff fe2e 	bl	8001e08 <cliPrintf>

    if ((idx%4) == 3)
 80021ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ae:	425a      	negs	r2, r3
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	bf58      	it	pl
 80021ba:	4253      	negpl	r3, r2
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d13b      	bne.n	8002238 <cliMemoryDump+0x110>
    {
      cliPrintf ("  |");
 80021c0:	4828      	ldr	r0, [pc, #160]	@ (8002264 <cliMemoryDump+0x13c>)
 80021c2:	f7ff fe21 	bl	8001e08 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
 80021ca:	e02c      	b.n	8002226 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	e01d      	b.n	8002214 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80021d8:	f107 020c 	add.w	r2, r7, #12
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b1f      	cmp	r3, #31
 80021e4:	d910      	bls.n	8002208 <cliMemoryDump+0xe0>
 80021e6:	f107 020c 	add.w	r2, r7, #12
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80021f2:	d809      	bhi.n	8002208 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4819      	ldr	r0, [pc, #100]	@ (8002268 <cliMemoryDump+0x140>)
 8002202:	f7ff fe01 	bl	8001e08 <cliPrintf>
 8002206:	e002      	b.n	800220e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002208:	4818      	ldr	r0, [pc, #96]	@ (800226c <cliMemoryDump+0x144>)
 800220a:	f7ff fdfd 	bl	8001e08 <cliPrintf>
        for (i=0;i<4;i++)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3301      	adds	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b03      	cmp	r3, #3
 8002218:	ddde      	ble.n	80021d8 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3304      	adds	r3, #4
 800221e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	3301      	adds	r3, #1
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2b03      	cmp	r3, #3
 800222a:	ddcf      	ble.n	80021cc <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800222c:	4810      	ldr	r0, [pc, #64]	@ (8002270 <cliMemoryDump+0x148>)
 800222e:	f7ff fdeb 	bl	8001e08 <cliPrintf>
      delay(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f7fe ff56 	bl	80010e4 <delay>
    }
    addr++;
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	3304      	adds	r3, #4
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	3301      	adds	r3, #1
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002248:	429a      	cmp	r2, r3
 800224a:	db9f      	blt.n	800218c <cliMemoryDump+0x64>
  }
}
 800224c:	3730      	adds	r7, #48	@ 0x30
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	0800cc1c 	.word	0x0800cc1c
 8002258:	0800cc30 	.word	0x0800cc30
 800225c:	0800cc38 	.word	0x0800cc38
 8002260:	0800cc44 	.word	0x0800cc44
 8002264:	0800cc4c 	.word	0x0800cc4c
 8002268:	0800cc50 	.word	0x0800cc50
 800226c:	0800cc54 	.word	0x0800cc54
 8002270:	0800cc58 	.word	0x0800cc58

08002274 <canInit>:
static void cliCan(cli_args_t *args);
#endif

static void canErrUpdate(uint8_t ch);

bool canInit(void) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
	bool ret = true;
 800227a:	2301      	movs	r3, #1
 800227c:	71bb      	strb	r3, [r7, #6]

	uint8_t i;

	for (i = 0; i < CAN_MAX_CH; i++) {
 800227e:	2300      	movs	r3, #0
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	e070      	b.n	8002366 <canInit+0xf2>
		can_tbl[i].is_init = true;
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4a3f      	ldr	r2, [pc, #252]	@ (8002384 <canInit+0x110>)
 8002288:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
		can_tbl[i].is_open = false;
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	4a3a      	ldr	r2, [pc, #232]	@ (8002384 <canInit+0x110>)
 800229a:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3301      	adds	r3, #1
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
		can_tbl[i].err_code = CAN_ERR_NONE;
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	4a35      	ldr	r2, [pc, #212]	@ (8002384 <canInit+0x110>)
 80022ae:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
		can_tbl[i].state = 0;
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	4a30      	ldr	r2, [pc, #192]	@ (8002384 <canInit+0x110>)
 80022c2:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3308      	adds	r3, #8
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
		can_tbl[i].recovery_cnt = 0;
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <canInit+0x110>)
 80022d6:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	330c      	adds	r3, #12
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

		can_tbl[i].q_rx_full_cnt = 0;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	4a26      	ldr	r2, [pc, #152]	@ (8002384 <canInit+0x110>)
 80022ea:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3310      	adds	r3, #16
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
		can_tbl[i].q_tx_full_cnt = 0;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4a21      	ldr	r2, [pc, #132]	@ (8002384 <canInit+0x110>)
 80022fe:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3314      	adds	r3, #20
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
		can_tbl[i].fifo_full_cnt = 0;
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4a1c      	ldr	r2, [pc, #112]	@ (8002384 <canInit+0x110>)
 8002312:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3318      	adds	r3, #24
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
		can_tbl[i].fifo_lost_cnt = 0;
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <canInit+0x110>)
 8002326:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	331c      	adds	r3, #28
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

		qbufferCreateBySize(&can_tbl[i].q_msg,
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 800233c:	fb02 f303 	mul.w	r3, r2, r3
 8002340:	3338      	adds	r3, #56	@ 0x38
 8002342:	4a10      	ldr	r2, [pc, #64]	@ (8002384 <canInit+0x110>)
 8002344:	4413      	add	r3, r2
 8002346:	1d18      	adds	r0, r3, #4
				(uint8_t*) &can_tbl[i].can_msg[0], sizeof(can_msg_t),
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	3350      	adds	r3, #80	@ 0x50
 8002354:	4a0b      	ldr	r2, [pc, #44]	@ (8002384 <canInit+0x110>)
 8002356:	1899      	adds	r1, r3, r2
		qbufferCreateBySize(&can_tbl[i].q_msg,
 8002358:	2320      	movs	r3, #32
 800235a:	224c      	movs	r2, #76	@ 0x4c
 800235c:	f7fe fef2 	bl	8001144 <qbufferCreateBySize>
	for (i = 0; i < CAN_MAX_CH; i++) {
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	3301      	adds	r3, #1
 8002364:	71fb      	strb	r3, [r7, #7]
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d08b      	beq.n	8002284 <canInit+0x10>
				CAN_MSG_RX_BUF_MAX);
	}

	logPrintf("[OK] canInit()\n");
 800236c:	4806      	ldr	r0, [pc, #24]	@ (8002388 <canInit+0x114>)
 800236e:	f001 ff5b 	bl	8004228 <logPrintf>

#ifdef _USE_HW_CLI
	cliAdd("can", cliCan);
 8002372:	4906      	ldr	r1, [pc, #24]	@ (800238c <canInit+0x118>)
 8002374:	4806      	ldr	r0, [pc, #24]	@ (8002390 <canInit+0x11c>)
 8002376:	f7ff fe57 	bl	8002028 <cliAdd>
#endif
	return ret;
 800237a:	79bb      	ldrb	r3, [r7, #6]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200010f0 	.word	0x200010f0
 8002388:	0800cc68 	.word	0x0800cc68
 800238c:	0800326d 	.word	0x0800326d
 8002390:	0800cc78 	.word	0x0800cc78

08002394 <canLock>:

bool canLock(void) {
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
	bool ret = true;
 800239a:	2301      	movs	r3, #1
 800239c:	71fb      	strb	r3, [r7, #7]
	return ret;
 800239e:	79fb      	ldrb	r3, [r7, #7]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <canUnLock>:

bool canUnLock(void) {
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
	return true;
 80023b0:	2301      	movs	r3, #1
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <canOpen>:

bool canOpen(uint8_t ch, CanMode_t mode, CanFrame_t frame, CanBaud_t baud,
		CanBaud_t baud_data) {
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	4604      	mov	r4, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	71fb      	strb	r3, [r7, #7]
 80023ce:	4603      	mov	r3, r0
 80023d0:	71bb      	strb	r3, [r7, #6]
 80023d2:	460b      	mov	r3, r1
 80023d4:	717b      	strb	r3, [r7, #5]
 80023d6:	4613      	mov	r3, r2
 80023d8:	713b      	strb	r3, [r7, #4]
	bool ret = true;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
	FDCAN_HandleTypeDef *p_can;
	uint32_t tdc_offset;

	if (ch >= CAN_MAX_CH)
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 8130 	bne.w	8002646 <canOpen+0x28a>
	{
		goto open_error;
	}
	can_tbl[ch].p_hfdcan = &hfdcan1;
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	4aa1      	ldr	r2, [pc, #644]	@ (8002670 <canOpen+0x2b4>)
 80023ea:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3334      	adds	r3, #52	@ 0x34
 80023f6:	4a9f      	ldr	r2, [pc, #636]	@ (8002674 <canOpen+0x2b8>)
 80023f8:	601a      	str	r2, [r3, #0]
	p_can = can_tbl[ch].p_hfdcan;
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	4a9c      	ldr	r2, [pc, #624]	@ (8002670 <canOpen+0x2b4>)
 80023fe:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3334      	adds	r3, #52	@ 0x34
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]

	switch (ch) {
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 80b6 	bne.w	8002582 <canOpen+0x1c6>
	case _DEF_CAN1:
		p_can->Instance = FDCAN1;
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4a97      	ldr	r2, [pc, #604]	@ (8002678 <canOpen+0x2bc>)
 800241a:	601a      	str	r2, [r3, #0]
		p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2200      	movs	r2, #0
 8002420:	605a      	str	r2, [r3, #4]
		p_can->Init.FrameFormat = frame_tbl[frame];
 8002422:	797b      	ldrb	r3, [r7, #5]
 8002424:	4a95      	ldr	r2, [pc, #596]	@ (800267c <canOpen+0x2c0>)
 8002426:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]
		p_can->Init.Mode = mode_tbl[mode];
 800242e:	79bb      	ldrb	r3, [r7, #6]
 8002430:	4a93      	ldr	r2, [pc, #588]	@ (8002680 <canOpen+0x2c4>)
 8002432:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	60da      	str	r2, [r3, #12]
		p_can->Init.AutoRetransmission = DISABLE;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2200      	movs	r2, #0
 800243e:	741a      	strb	r2, [r3, #16]
		p_can->Init.TransmitPause = ENABLE;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2201      	movs	r2, #1
 8002444:	745a      	strb	r2, [r3, #17]
		p_can->Init.ProtocolException = ENABLE;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2201      	movs	r2, #1
 800244a:	749a      	strb	r2, [r3, #18]
		p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 800244c:	4b8d      	ldr	r3, [pc, #564]	@ (8002684 <canOpen+0x2c8>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	793b      	ldrb	r3, [r7, #4]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	615a      	str	r2, [r3, #20]
		p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 800245c:	4b89      	ldr	r3, [pc, #548]	@ (8002684 <canOpen+0x2c8>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	793b      	ldrb	r3, [r7, #4]
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	4413      	add	r3, r2
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	619a      	str	r2, [r3, #24]
		p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 800246c:	4b85      	ldr	r3, [pc, #532]	@ (8002684 <canOpen+0x2c8>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	793b      	ldrb	r3, [r7, #4]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	4413      	add	r3, r2
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	61da      	str	r2, [r3, #28]
		p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 800247c:	4b81      	ldr	r3, [pc, #516]	@ (8002684 <canOpen+0x2c8>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	793b      	ldrb	r3, [r7, #4]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4413      	add	r3, r2
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	621a      	str	r2, [r3, #32]
		p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 800248c:	4b7e      	ldr	r3, [pc, #504]	@ (8002688 <canOpen+0x2cc>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	4413      	add	r3, r2
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24
		p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 800249e:	4b7a      	ldr	r3, [pc, #488]	@ (8002688 <canOpen+0x2cc>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	4413      	add	r3, r2
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28
		p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 80024b0:	4b75      	ldr	r3, [pc, #468]	@ (8002688 <canOpen+0x2cc>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	4413      	add	r3, r2
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	62da      	str	r2, [r3, #44]	@ 0x2c
		p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 80024c2:	4b71      	ldr	r3, [pc, #452]	@ (8002688 <canOpen+0x2cc>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	4413      	add	r3, r2
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
		p_can->Init.StdFiltersNbr = 28;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	221c      	movs	r2, #28
 80024d8:	635a      	str	r2, [r3, #52]	@ 0x34
		p_can->Init.ExtFiltersNbr = 8;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2208      	movs	r2, #8
 80024de:	639a      	str	r2, [r3, #56]	@ 0x38
		p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2200      	movs	r2, #0
 80024e4:	63da      	str	r2, [r3, #60]	@ 0x3c

		can_tbl[ch].mode = mode;
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4a61      	ldr	r2, [pc, #388]	@ (8002670 <canOpen+0x2b4>)
 80024ea:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3328      	adds	r3, #40	@ 0x28
 80024f6:	79ba      	ldrb	r2, [r7, #6]
 80024f8:	701a      	strb	r2, [r3, #0]
		can_tbl[ch].frame = frame;
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002670 <canOpen+0x2b4>)
 80024fe:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3329      	adds	r3, #41	@ 0x29
 800250a:	797a      	ldrb	r2, [r7, #5]
 800250c:	701a      	strb	r2, [r3, #0]
		can_tbl[ch].baud = baud;
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	4a57      	ldr	r2, [pc, #348]	@ (8002670 <canOpen+0x2b4>)
 8002512:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	332a      	adds	r3, #42	@ 0x2a
 800251e:	793a      	ldrb	r2, [r7, #4]
 8002520:	701a      	strb	r2, [r3, #0]
		can_tbl[ch].baud_data = baud_data;
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <canOpen+0x2b4>)
 8002526:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	332b      	adds	r3, #43	@ 0x2b
 8002532:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002536:	701a      	strb	r2, [r3, #0]
		can_tbl[ch].fifo_idx = FDCAN_RX_FIFO0;
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	4a4d      	ldr	r2, [pc, #308]	@ (8002670 <canOpen+0x2b4>)
 800253c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3320      	adds	r3, #32
 8002548:	2240      	movs	r2, #64	@ 0x40
 800254a:	601a      	str	r2, [r3, #0]
		can_tbl[ch].enable_int = FDCAN_IT_LIST_RX_FIFO0 |
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	4a48      	ldr	r2, [pc, #288]	@ (8002670 <canOpen+0x2b4>)
 8002550:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3324      	adds	r3, #36	@ 0x24
 800255c:	4a4b      	ldr	r2, [pc, #300]	@ (800268c <canOpen+0x2d0>)
 800255e:	601a      	str	r2, [r3, #0]
		FDCAN_IT_BUS_OFF |
		FDCAN_IT_ERROR_WARNING |
		FDCAN_IT_ERROR_PASSIVE;

		can_tbl[ch].err_code = CAN_ERR_NONE;
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	4a43      	ldr	r2, [pc, #268]	@ (8002670 <canOpen+0x2b4>)
 8002564:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3304      	adds	r3, #4
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
		ret = true;
 8002574:	2301      	movs	r3, #1
 8002576:	75fb      	strb	r3, [r7, #23]
		gpioPinWrite(GPIO_CH_CAN_SLIENT, false); //on
 8002578:	2100      	movs	r1, #0
 800257a:	2000      	movs	r0, #0
 800257c:	f001 fb5a 	bl	8003c34 <gpioPinWrite>
		break;
 8002580:	bf00      	nop
	}

	if (ret != true) {
 8002582:	7dfb      	ldrb	r3, [r7, #23]
 8002584:	f083 0301 	eor.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d15d      	bne.n	800264a <canOpen+0x28e>
		goto open_error;
	}

	if (HAL_FDCAN_Init(p_can) != HAL_OK) {
 800258e:	6938      	ldr	r0, [r7, #16]
 8002590:	f003 fd8c 	bl	80060ac <HAL_FDCAN_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d159      	bne.n	800264e <canOpen+0x292>
		goto open_error;
	}

	canSetFilterType(CAN_ID_MASK);
 800259a:	2000      	movs	r0, #0
 800259c:	f000 f8d2 	bl	8002744 <canSetFilterType>
	canConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 80025a0:	79f8      	ldrb	r0, [r7, #7]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2300      	movs	r3, #0
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	f000 f8dc 	bl	8002768 <canConfigFilter>
	canConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 80025b0:	79f8      	ldrb	r0, [r7, #7]
 80025b2:	2300      	movs	r3, #0
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2300      	movs	r3, #0
 80025b8:	2201      	movs	r2, #1
 80025ba:	2100      	movs	r1, #0
 80025bc:	f000 f8d4 	bl	8002768 <canConfigFilter>

	if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT,
 80025c0:	2300      	movs	r3, #0
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2300      	movs	r3, #0
 80025c6:	2202      	movs	r2, #2
 80025c8:	2102      	movs	r1, #2
 80025ca:	6938      	ldr	r0, [r7, #16]
 80025cc:	f003 ff22 	bl	8006414 <HAL_FDCAN_ConfigGlobalFilter>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d13d      	bne.n	8002652 <canOpen+0x296>
	FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
		goto open_error;
	}
	if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0)
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4a25      	ldr	r2, [pc, #148]	@ (8002670 <canOpen+0x2b4>)
 80025da:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3324      	adds	r3, #36	@ 0x24
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	6938      	ldr	r0, [r7, #16]
 80025ee:	f004 f9f0 	bl	80069d2 <HAL_FDCAN_ActivateNotification>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d12e      	bne.n	8002656 <canOpen+0x29a>
			!= HAL_OK) {
		goto open_error;
	}

	tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	60fb      	str	r3, [r7, #12]

	if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK)
 8002606:	2200      	movs	r2, #0
 8002608:	68f9      	ldr	r1, [r7, #12]
 800260a:	6938      	ldr	r0, [r7, #16]
 800260c:	f003 ff33 	bl	8006476 <HAL_FDCAN_ConfigTxDelayCompensation>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d121      	bne.n	800265a <canOpen+0x29e>
		goto open_error;
	if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)
 8002616:	6938      	ldr	r0, [r7, #16]
 8002618:	f003 ff4f 	bl	80064ba <HAL_FDCAN_EnableTxDelayCompensation>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11d      	bne.n	800265e <canOpen+0x2a2>
		goto open_error;

	if (HAL_FDCAN_Start(p_can) != HAL_OK) {
 8002622:	6938      	ldr	r0, [r7, #16]
 8002624:	f003 ff6a 	bl	80064fc <HAL_FDCAN_Start>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d119      	bne.n	8002662 <canOpen+0x2a6>
		goto open_error;
	}

	can_tbl[ch].is_open = true;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a0f      	ldr	r2, [pc, #60]	@ (8002670 <canOpen+0x2b4>)
 8002632:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	3301      	adds	r3, #1
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]

	return ret;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	e00f      	b.n	8002666 <canOpen+0x2aa>
		goto open_error;
 8002646:	bf00      	nop
 8002648:	e00c      	b.n	8002664 <canOpen+0x2a8>
		goto open_error;
 800264a:	bf00      	nop
 800264c:	e00a      	b.n	8002664 <canOpen+0x2a8>
		goto open_error;
 800264e:	bf00      	nop
 8002650:	e008      	b.n	8002664 <canOpen+0x2a8>
		goto open_error;
 8002652:	bf00      	nop
 8002654:	e006      	b.n	8002664 <canOpen+0x2a8>
		goto open_error;
 8002656:	bf00      	nop
 8002658:	e004      	b.n	8002664 <canOpen+0x2a8>
		goto open_error;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <canOpen+0x2a8>
		goto open_error;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <canOpen+0x2a8>
		goto open_error;
 8002662:	bf00      	nop

open_error:
	return false;
 8002664:	2300      	movs	r3, #0

}
 8002666:	4618      	mov	r0, r3
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	200010f0 	.word	0x200010f0
 8002674:	20003488 	.word	0x20003488
 8002678:	40006400 	.word	0x40006400
 800267c:	0800d64c 	.word	0x0800d64c
 8002680:	0800d658 	.word	0x0800d658
 8002684:	20000004 	.word	0x20000004
 8002688:	20000008 	.word	0x20000008
 800268c:	000e0007 	.word	0x000e0007

08002690 <canIsOpen>:

bool canIsOpen(uint8_t ch) {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	if (ch >= CAN_MAX_CH)
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <canIsOpen+0x14>
		return false;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e008      	b.n	80026b6 <canIsOpen+0x26>

	return can_tbl[ch].is_open;
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	4a07      	ldr	r2, [pc, #28]	@ (80026c4 <canIsOpen+0x34>)
 80026a8:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	3301      	adds	r3, #1
 80026b4:	781b      	ldrb	r3, [r3, #0]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	200010f0 	.word	0x200010f0

080026c8 <canGetDlc>:
	p_info->mode = can_tbl[ch].mode;

	return true;
}

CanDlc_t canGetDlc(uint8_t length) {
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
	CanDlc_t ret;

	if (length >= 64)
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026d6:	d902      	bls.n	80026de <canGetDlc+0x16>
		ret = CAN_DLC_64;
 80026d8:	230f      	movs	r3, #15
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e02b      	b.n	8002736 <canGetDlc+0x6e>
	else if (length >= 48)
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80026e2:	d902      	bls.n	80026ea <canGetDlc+0x22>
		ret = CAN_DLC_48;
 80026e4:	230e      	movs	r3, #14
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e025      	b.n	8002736 <canGetDlc+0x6e>
	else if (length >= 32)
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b1f      	cmp	r3, #31
 80026ee:	d902      	bls.n	80026f6 <canGetDlc+0x2e>
		ret = CAN_DLC_32;
 80026f0:	230d      	movs	r3, #13
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e01f      	b.n	8002736 <canGetDlc+0x6e>
	else if (length >= 24)
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2b17      	cmp	r3, #23
 80026fa:	d902      	bls.n	8002702 <canGetDlc+0x3a>
		ret = CAN_DLC_24;
 80026fc:	230c      	movs	r3, #12
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e019      	b.n	8002736 <canGetDlc+0x6e>
	else if (length >= 20)
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b13      	cmp	r3, #19
 8002706:	d902      	bls.n	800270e <canGetDlc+0x46>
		ret = CAN_DLC_20;
 8002708:	230b      	movs	r3, #11
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e013      	b.n	8002736 <canGetDlc+0x6e>
	else if (length >= 16)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b0f      	cmp	r3, #15
 8002712:	d902      	bls.n	800271a <canGetDlc+0x52>
		ret = CAN_DLC_16;
 8002714:	230a      	movs	r3, #10
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e00d      	b.n	8002736 <canGetDlc+0x6e>
	else if (length >= 12)
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	2b0b      	cmp	r3, #11
 800271e:	d902      	bls.n	8002726 <canGetDlc+0x5e>
		ret = CAN_DLC_12;
 8002720:	2309      	movs	r3, #9
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e007      	b.n	8002736 <canGetDlc+0x6e>
	else if (length >= 8)
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2b07      	cmp	r3, #7
 800272a:	d902      	bls.n	8002732 <canGetDlc+0x6a>
		ret = CAN_DLC_8;
 800272c:	2308      	movs	r3, #8
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	e001      	b.n	8002736 <canGetDlc+0x6e>
	else
		ret = (CanDlc_t) length;
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	73fb      	strb	r3, [r7, #15]

	return ret;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <canSetFilterType>:

uint8_t canGetLen(CanDlc_t dlc) {
	return dlc_len_tbl[(int) dlc];
}

bool canSetFilterType(CanFilterType_t filter_type) {
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
	can_filter_type = filter_type;
 800274e:	4a05      	ldr	r2, [pc, #20]	@ (8002764 <canSetFilterType+0x20>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	7013      	strb	r3, [r2, #0]
	return true;
 8002754:	2301      	movs	r3, #1
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20001ac4 	.word	0x20001ac4

08002768 <canConfigFilter>:
	*p_filter_type = can_filter_type;
	return true;
}

bool canConfigFilter(uint8_t ch, uint8_t index, CanIdType_t id_type,
		uint32_t id, uint32_t id_mask) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	460b      	mov	r3, r1
 8002776:	71bb      	strb	r3, [r7, #6]
 8002778:	4613      	mov	r3, r2
 800277a:	717b      	strb	r3, [r7, #5]
	bool ret = false;
 800277c:	2300      	movs	r3, #0
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	FDCAN_FilterTypeDef sFilterConfig;

	if (ch >= CAN_MAX_CH)
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <canConfigFilter+0x24>
		return false;
 8002788:	2300      	movs	r3, #0
 800278a:	e03e      	b.n	800280a <canConfigFilter+0xa2>

	if (id_type == CAN_STD) {
 800278c:	797b      	ldrb	r3, [r7, #5]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <canConfigFilter+0x30>
		sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e002      	b.n	800279e <canConfigFilter+0x36>
	} else {
		sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002798:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800279c:	60fb      	str	r3, [r7, #12]
	}

	if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0) {
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002814 <canConfigFilter+0xac>)
 80027a2:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3320      	adds	r3, #32
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b40      	cmp	r3, #64	@ 0x40
 80027b2:	d102      	bne.n	80027ba <canConfigFilter+0x52>
		sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80027b4:	2301      	movs	r3, #1
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e001      	b.n	80027be <canConfigFilter+0x56>
	} else {
		sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
	}

	sFilterConfig.FilterIndex = index;
 80027be:	79bb      	ldrb	r3, [r7, #6]
 80027c0:	613b      	str	r3, [r7, #16]
	if (can_filter_type == CAN_ID_MASK)
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <canConfigFilter+0xb0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <canConfigFilter+0x68>
		sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80027ca:	2302      	movs	r3, #2
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e001      	b.n	80027d4 <canConfigFilter+0x6c>
	else
		sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = id;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterID2 = id_mask;
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	623b      	str	r3, [r7, #32]

	if (HAL_FDCAN_ConfigFilter(can_tbl[ch].p_hfdcan, &sFilterConfig) == HAL_OK) {
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	4a0d      	ldr	r2, [pc, #52]	@ (8002814 <canConfigFilter+0xac>)
 80027e0:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3334      	adds	r3, #52	@ 0x34
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f107 020c 	add.w	r2, r7, #12
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 fdb3 	bl	8006360 <HAL_FDCAN_ConfigFilter>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <canConfigFilter+0x9e>
		ret = true;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return ret;
 8002806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800280a:	4618      	mov	r0, r3
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200010f0 	.word	0x200010f0
 8002818:	20001ac4 	.word	0x20001ac4

0800281c <canMsgAvailable>:

uint32_t canMsgAvailable(uint8_t ch) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
	if (ch > CAN_MAX_CH)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d901      	bls.n	8002830 <canMsgAvailable+0x14>
		return 0;
 800282c:	2300      	movs	r3, #0
 800282e:	e00c      	b.n	800284a <canMsgAvailable+0x2e>

	return qbufferAvailable(&can_tbl[ch].q_msg);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	3338      	adds	r3, #56	@ 0x38
 800283c:	4a05      	ldr	r2, [pc, #20]	@ (8002854 <canMsgAvailable+0x38>)
 800283e:	4413      	add	r3, r2
 8002840:	3304      	adds	r3, #4
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fd64 	bl	8001310 <qbufferAvailable>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200010f0 	.word	0x200010f0

08002858 <canMsgWrite>:
	p_msg->dlc = dlc;
	p_msg->length = dlc_len_tbl[dlc];
	return true;
}

bool canMsgWrite(uint8_t ch, can_msg_t *p_msg, uint32_t timeout) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b090      	sub	sp, #64	@ 0x40
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	73fb      	strb	r3, [r7, #15]
	FDCAN_HandleTypeDef *p_can;
	FDCAN_TxHeaderTypeDef tx_header;
	uint32_t pre_time;
	bool ret = true;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (ch > CAN_MAX_CH)
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d901      	bls.n	8002876 <canMsgWrite+0x1e>
		return false;
 8002872:	2300      	movs	r3, #0
 8002874:	e096      	b.n	80029a4 <canMsgWrite+0x14c>

	if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	4a4c      	ldr	r2, [pc, #304]	@ (80029ac <canMsgWrite+0x154>)
 800287a:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <canMsgWrite+0x3c>
		return false;
 8002890:	2300      	movs	r3, #0
 8002892:	e087      	b.n	80029a4 <canMsgWrite+0x14c>
	if (can_tbl[ch].err_code & CAN_ERR_PASSIVE)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	4a45      	ldr	r2, [pc, #276]	@ (80029ac <canMsgWrite+0x154>)
 8002898:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <canMsgWrite+0x5a>
		return false;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e078      	b.n	80029a4 <canMsgWrite+0x14c>

	p_can = can_tbl[ch].p_hfdcan;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	4a3d      	ldr	r2, [pc, #244]	@ (80029ac <canMsgWrite+0x154>)
 80028b6:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3334      	adds	r3, #52	@ 0x34
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	switch (p_msg->id_type) {
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <canMsgWrite+0x7e>
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d003      	beq.n	80028dc <canMsgWrite+0x84>
 80028d4:	e006      	b.n	80028e4 <canMsgWrite+0x8c>
	case CAN_STD:
		tx_header.IdType = FDCAN_STANDARD_ID;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
		break;
 80028da:	e003      	b.n	80028e4 <canMsgWrite+0x8c>

	case CAN_EXT:
		tx_header.IdType = FDCAN_EXTENDED_ID;
 80028dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028e0:	617b      	str	r3, [r7, #20]
		break;
 80028e2:	bf00      	nop
	}

	switch (p_msg->frame) {
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d011      	beq.n	8002912 <canMsgWrite+0xba>
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	dc16      	bgt.n	8002920 <canMsgWrite+0xc8>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <canMsgWrite+0xa4>
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d005      	beq.n	8002906 <canMsgWrite+0xae>
 80028fa:	e011      	b.n	8002920 <canMsgWrite+0xc8>
	case CAN_CLASSIC:
		tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	@ 0x28
		tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8002904:	e00c      	b.n	8002920 <canMsgWrite+0xc8>

	case CAN_FD_NO_BRS:
		tx_header.FDFormat = FDCAN_FD_CAN;
 8002906:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
		tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 8002910:	e006      	b.n	8002920 <canMsgWrite+0xc8>

	case CAN_FD_BRS:
		tx_header.FDFormat = FDCAN_FD_CAN;
 8002912:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
		tx_header.BitRateSwitch = FDCAN_BRS_ON;
 8002918:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
		break;
 800291e:	bf00      	nop
	}

	tx_header.Identifier = p_msg->id;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
	tx_header.MessageMarker = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	633b      	str	r3, [r7, #48]	@ 0x30
	tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800292a:	2300      	movs	r3, #0
 800292c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
	tx_header.TxFrameType = FDCAN_DATA_FRAME;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
	tx_header.DataLength = dlc_tbl[p_msg->dlc];
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800293c:	461a      	mov	r2, r3
 800293e:	4b1c      	ldr	r3, [pc, #112]	@ (80029b0 <canMsgWrite+0x158>)
 8002940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002944:	61fb      	str	r3, [r7, #28]

	if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0) {
 8002946:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002948:	f004 f831 	bl	80069ae <HAL_FDCAN_GetTxFifoFreeLevel>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <canMsgWrite+0xfe>
		return false;
 8002952:	2300      	movs	r3, #0
 8002954:	e026      	b.n	80029a4 <canMsgWrite+0x14c>
	}

	pre_time = millis();
 8002956:	f7fe fbd0 	bl	80010fa <millis>
 800295a:	6378      	str	r0, [r7, #52]	@ 0x34
	if (HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1d9a      	adds	r2, r3, #6
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	4619      	mov	r1, r3
 8002966:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002968:	f003 fe60 	bl	800662c <HAL_FDCAN_AddMessageToTxFifoQ>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d113      	bne.n	800299a <canMsgWrite+0x142>
			== HAL_OK) {
		/* Wait transmission complete */
		while (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0) {
 8002972:	e00b      	b.n	800298c <canMsgWrite+0x134>
			if (millis() - pre_time >= timeout) {
 8002974:	f7fe fbc1 	bl	80010fa <millis>
 8002978:	4602      	mov	r2, r0
 800297a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	429a      	cmp	r2, r3
 8002982:	d803      	bhi.n	800298c <canMsgWrite+0x134>
				ret = false;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				break;
 800298a:	e009      	b.n	80029a0 <canMsgWrite+0x148>
		while (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0) {
 800298c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800298e:	f004 f80e 	bl	80069ae <HAL_FDCAN_GetTxFifoFreeLevel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ed      	beq.n	8002974 <canMsgWrite+0x11c>
 8002998:	e002      	b.n	80029a0 <canMsgWrite+0x148>
			}
		}
	} else {
		ret = false;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	return ret;
 80029a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3740      	adds	r7, #64	@ 0x40
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200010f0 	.word	0x200010f0
 80029b0:	0800d60c 	.word	0x0800d60c

080029b4 <canMsgRead>:

bool canMsgRead(uint8_t ch, can_msg_t *p_msg) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
	bool ret = true;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]

	if (ch > CAN_MAX_CH)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d901      	bls.n	80029ce <canMsgRead+0x1a>
		return 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e010      	b.n	80029f0 <canMsgRead+0x3c>

	ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t*) p_msg, 1);
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	3338      	adds	r3, #56	@ 0x38
 80029da:	4a07      	ldr	r2, [pc, #28]	@ (80029f8 <canMsgRead+0x44>)
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	2201      	movs	r2, #1
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fc28 	bl	800123a <qbufferRead>
 80029ea:	4603      	mov	r3, r0
 80029ec:	73fb      	strb	r3, [r7, #15]

	return ret;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200010f0 	.word	0x200010f0

080029fc <canGetRxErrCount>:

uint16_t canGetRxErrCount(uint8_t ch) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
	uint16_t ret = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	83fb      	strh	r3, [r7, #30]
	HAL_StatusTypeDef status;
	FDCAN_ErrorCountersTypeDef error_counters;

	if (ch > CAN_MAX_CH)
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d901      	bls.n	8002a14 <canGetRxErrCount+0x18>
		return 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e016      	b.n	8002a42 <canGetRxErrCount+0x46>

	status = HAL_FDCAN_GetErrorCounters(can_tbl[ch].p_hfdcan, &error_counters);
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	4a0d      	ldr	r2, [pc, #52]	@ (8002a4c <canGetRxErrCount+0x50>)
 8002a18:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3334      	adds	r3, #52	@ 0x34
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f107 020c 	add.w	r2, r7, #12
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 ff99 	bl	8006964 <HAL_FDCAN_GetErrorCounters>
 8002a32:	4603      	mov	r3, r0
 8002a34:	777b      	strb	r3, [r7, #29]
	if (status == HAL_OK) {
 8002a36:	7f7b      	ldrb	r3, [r7, #29]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <canGetRxErrCount+0x44>
		ret = error_counters.RxErrorCnt;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	83fb      	strh	r3, [r7, #30]
	}

	return ret;
 8002a40:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200010f0 	.word	0x200010f0

08002a50 <canGetTxErrCount>:

uint16_t canGetTxErrCount(uint8_t ch) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
	uint16_t ret = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	83fb      	strh	r3, [r7, #30]
	HAL_StatusTypeDef status;
	FDCAN_ErrorCountersTypeDef error_counters;

	if (ch > CAN_MAX_CH)
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d901      	bls.n	8002a68 <canGetTxErrCount+0x18>
		return 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e016      	b.n	8002a96 <canGetTxErrCount+0x46>

	status = HAL_FDCAN_GetErrorCounters(can_tbl[ch].p_hfdcan, &error_counters);
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <canGetTxErrCount+0x50>)
 8002a6c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3334      	adds	r3, #52	@ 0x34
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f107 020c 	add.w	r2, r7, #12
 8002a7e:	4611      	mov	r1, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 ff6f 	bl	8006964 <HAL_FDCAN_GetErrorCounters>
 8002a86:	4603      	mov	r3, r0
 8002a88:	777b      	strb	r3, [r7, #29]
	if (status == HAL_OK) {
 8002a8a:	7f7b      	ldrb	r3, [r7, #29]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <canGetTxErrCount+0x44>
		ret = error_counters.TxErrorCnt;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	83fb      	strh	r3, [r7, #30]
	}

	return ret;
 8002a94:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200010f0 	.word	0x200010f0

08002aa4 <canGetError>:

uint32_t canGetError(uint8_t ch) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
	if (ch > CAN_MAX_CH)
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d901      	bls.n	8002ab8 <canGetError+0x14>
		return 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e008      	b.n	8002aca <canGetError+0x26>

	return can_tbl[ch].err_code;
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4a07      	ldr	r2, [pc, #28]	@ (8002ad8 <canGetError+0x34>)
 8002abc:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	200010f0 	.word	0x200010f0

08002adc <canRecovery>:
		return;

	can_tbl[ch].handler = NULL;
}

void canRecovery(uint8_t ch) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	if (ch > CAN_MAX_CH)
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d842      	bhi.n	8002b72 <canRecovery+0x96>
		return;
	if (can_tbl[ch].is_open != true)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	4a24      	ldr	r2, [pc, #144]	@ (8002b80 <canRecovery+0xa4>)
 8002af0:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3301      	adds	r3, #1
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	f083 0301 	eor.w	r3, r3, #1
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d136      	bne.n	8002b76 <canRecovery+0x9a>
		return;

	can_tbl[ch].err_code = CAN_ERR_NONE;
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b80 <canRecovery+0xa4>)
 8002b0c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3304      	adds	r3, #4
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

	HAL_FDCAN_Stop(can_tbl[ch].p_hfdcan);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <canRecovery+0xa4>)
 8002b20:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3334      	adds	r3, #52	@ 0x34
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 fd0c 	bl	800654c <HAL_FDCAN_Stop>
	HAL_FDCAN_Start(can_tbl[ch].p_hfdcan);
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <canRecovery+0xa4>)
 8002b38:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3334      	adds	r3, #52	@ 0x34
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fcd8 	bl	80064fc <HAL_FDCAN_Start>

	can_tbl[ch].recovery_cnt++;
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	490c      	ldr	r1, [pc, #48]	@ (8002b80 <canRecovery+0xa4>)
 8002b50:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002b54:	fb03 f202 	mul.w	r2, r3, r2
 8002b58:	440a      	add	r2, r1
 8002b5a:	320c      	adds	r2, #12
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	3201      	adds	r2, #1
 8002b60:	4907      	ldr	r1, [pc, #28]	@ (8002b80 <canRecovery+0xa4>)
 8002b62:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002b66:	fb00 f303 	mul.w	r3, r0, r3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e002      	b.n	8002b78 <canRecovery+0x9c>
		return;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <canRecovery+0x9c>
		return;
 8002b76:	bf00      	nop
}
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200010f0 	.word	0x200010f0

08002b84 <canUpdate>:

bool canUpdate(void) {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
	enum {
		CAN_STATE_IDLE, CAN_STATE_WAIT
	};
	bool ret = false;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
	can_tbl_t *p_can;

	for (int i = 0; i < CAN_MAX_CH; i++) {
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	e02f      	b.n	8002bf4 <canUpdate+0x70>
		p_can = &can_tbl[i];
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	4a19      	ldr	r2, [pc, #100]	@ (8002c04 <canUpdate+0x80>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	607b      	str	r3, [r7, #4]

		switch (p_can->state) {
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7a1b      	ldrb	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <canUpdate+0x2e>
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d011      	beq.n	8002bd4 <canUpdate+0x50>
 8002bb0:	e01d      	b.n	8002bee <canUpdate+0x6a>
		case CAN_STATE_IDLE:
			if (p_can->err_code & CAN_ERR_BUS_OFF) {
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <canUpdate+0x64>
				canRecovery(i);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff8a 	bl	8002adc <canRecovery>
				p_can->state = CAN_STATE_WAIT;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	721a      	strb	r2, [r3, #8]
				ret = true;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002bd2:	e009      	b.n	8002be8 <canUpdate+0x64>

		case CAN_STATE_WAIT:
			if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <canUpdate+0x68>
				p_can->state = CAN_STATE_IDLE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	721a      	strb	r2, [r3, #8]
			}
			break;
 8002be6:	e001      	b.n	8002bec <canUpdate+0x68>
			break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <canUpdate+0x6a>
			break;
 8002bec:	bf00      	nop
	for (int i = 0; i < CAN_MAX_CH; i++) {
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	ddcc      	ble.n	8002b94 <canUpdate+0x10>
		}
	}

	return ret;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200010f0 	.word	0x200010f0

08002c08 <canRxFifoCallback>:

void canRxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08e      	sub	sp, #56	@ 0x38
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	71fb      	strb	r3, [r7, #7]
	can_msg_t *rx_buf;
	FDCAN_RxHeaderTypeDef rx_header;

	rx_buf = (can_msg_t*) qbufferPeekWrite(&can_tbl[ch].q_msg);
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	3338      	adds	r3, #56	@ 0x38
 8002c20:	4a5e      	ldr	r2, [pc, #376]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002c22:	4413      	add	r3, r2
 8002c24:	3304      	adds	r3, #4
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fb5f 	bl	80012ea <qbufferPeekWrite>
 8002c2c:	6378      	str	r0, [r7, #52]	@ 0x34

	if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header,
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	4a5a      	ldr	r2, [pc, #360]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002c32:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3320      	adds	r3, #32
 8002c3e:	6819      	ldr	r1, [r3, #0]
			rx_buf->data) == HAL_OK) {
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	3306      	adds	r3, #6
	if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header,
 8002c44:	f107 020c 	add.w	r2, r7, #12
 8002c48:	6838      	ldr	r0, [r7, #0]
 8002c4a:	f003 fd33 	bl	80066b4 <HAL_FDCAN_GetRxMessage>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 809e 	bne.w	8002d92 <canRxFifoCallback+0x18a>
		if (rx_header.IdType == FDCAN_STANDARD_ID) {
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <canRxFifoCallback+0x64>
			rx_buf->id = rx_header.Identifier;
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c60:	601a      	str	r2, [r3, #0]
			rx_buf->id_type = CAN_STD;
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8002c6a:	e006      	b.n	8002c7a <canRxFifoCallback+0x72>
		} else {
			rx_buf->id = rx_header.Identifier;
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c70:	601a      	str	r2, [r3, #0]
			rx_buf->id_type = CAN_EXT;
 8002c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
		}
		rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	4a47      	ldr	r2, [pc, #284]	@ (8002da0 <canRxFifoCallback+0x198>)
 8002c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8c:	809a      	strh	r2, [r3, #4]
		rx_buf->dlc = canGetDlc(rx_buf->length);
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	889b      	ldrh	r3, [r3, #4]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fd17 	bl	80026c8 <canGetDlc>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

		if (rx_header.FDFormat == FDCAN_FD_CAN) {
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002caa:	d10d      	bne.n	8002cc8 <canRxFifoCallback+0xc0>
			if (rx_header.BitRateSwitch == FDCAN_BRS_ON) {
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cb2:	d104      	bne.n	8002cbe <canRxFifoCallback+0xb6>
				rx_buf->frame = CAN_FD_BRS;
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002cbc:	e008      	b.n	8002cd0 <canRxFifoCallback+0xc8>
			} else {
				rx_buf->frame = CAN_FD_NO_BRS;
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002cc6:	e003      	b.n	8002cd0 <canRxFifoCallback+0xc8>
			}
		} else {
			rx_buf->frame = CAN_CLASSIC;
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		}

		can_tbl[ch].rx_cnt++;
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	4932      	ldr	r1, [pc, #200]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002cd4:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002cd8:	fb03 f202 	mul.w	r2, r3, r2
 8002cdc:	440a      	add	r2, r1
 8002cde:	322c      	adds	r2, #44	@ 0x2c
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	3201      	adds	r2, #1
 8002ce4:	492d      	ldr	r1, [pc, #180]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002ce6:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	440b      	add	r3, r1
 8002cf0:	332c      	adds	r3, #44	@ 0x2c
 8002cf2:	601a      	str	r2, [r3, #0]

		if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != true) {
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	3338      	adds	r3, #56	@ 0x38
 8002d00:	4a26      	ldr	r2, [pc, #152]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002d02:	4413      	add	r3, r2
 8002d04:	3304      	adds	r3, #4
 8002d06:	2201      	movs	r2, #1
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fa39 	bl	8001182 <qbufferWrite>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d011      	beq.n	8002d40 <canRxFifoCallback+0x138>
			can_tbl[ch].q_rx_full_cnt++;
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	491f      	ldr	r1, [pc, #124]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002d20:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002d24:	fb03 f202 	mul.w	r2, r3, r2
 8002d28:	440a      	add	r2, r1
 8002d2a:	3210      	adds	r2, #16
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	3201      	adds	r2, #1
 8002d30:	491a      	ldr	r1, [pc, #104]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002d32:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002d36:	fb00 f303 	mul.w	r3, r0, r3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3310      	adds	r3, #16
 8002d3e:	601a      	str	r2, [r3, #0]
		}

		if (can_tbl[ch].handler != NULL) {
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4a16      	ldr	r2, [pc, #88]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002d44:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3338      	adds	r3, #56	@ 0x38
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01d      	beq.n	8002d92 <canRxFifoCallback+0x18a>
			if ((*can_tbl[ch].handler)(ch, CAN_EVT_MSG, (void*) rx_buf) == true) {
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	4a10      	ldr	r2, [pc, #64]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002d5a:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3338      	adds	r3, #56	@ 0x38
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	79f8      	ldrb	r0, [r7, #7]
 8002d6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	4798      	blx	r3
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00d      	beq.n	8002d92 <canRxFifoCallback+0x18a>
				qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	3338      	adds	r3, #56	@ 0x38
 8002d82:	4a06      	ldr	r2, [pc, #24]	@ (8002d9c <canRxFifoCallback+0x194>)
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fa54 	bl	800123a <qbufferRead>
			}
		}
	}
}
 8002d92:	bf00      	nop
 8002d94:	3738      	adds	r7, #56	@ 0x38
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200010f0 	.word	0x200010f0
 8002da0:	0800d5cc 	.word	0x0800d5cc

08002da4 <canErrPrint>:
		return;

	can_tbl[ch].err_code = CAN_ERR_NONE;
}

void canErrPrint(uint8_t ch) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
	uint32_t err_code;

	if (ch > CAN_MAX_CH)
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d822      	bhi.n	8002dfa <canErrPrint+0x56>
		return;

	err_code = can_tbl[ch].err_code;
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <canErrPrint+0x60>)
 8002db8:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

	if (err_code & CAN_ERR_PASSIVE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <canErrPrint+0x34>
		logPrintf("  ERR : CAN_ERR_PASSIVE\n");
 8002dd2:	480d      	ldr	r0, [pc, #52]	@ (8002e08 <canErrPrint+0x64>)
 8002dd4:	f001 fa28 	bl	8004228 <logPrintf>
	if (err_code & CAN_ERR_WARNING)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <canErrPrint+0x44>
		logPrintf("  ERR : CAN_ERR_WARNING\n");
 8002de2:	480a      	ldr	r0, [pc, #40]	@ (8002e0c <canErrPrint+0x68>)
 8002de4:	f001 fa20 	bl	8004228 <logPrintf>
	if (err_code & CAN_ERR_BUS_OFF)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <canErrPrint+0x58>
		logPrintf("  ERR : CAN_ERR_BUS_OFF\n");
 8002df2:	4807      	ldr	r0, [pc, #28]	@ (8002e10 <canErrPrint+0x6c>)
 8002df4:	f001 fa18 	bl	8004228 <logPrintf>
 8002df8:	e000      	b.n	8002dfc <canErrPrint+0x58>
		return;
 8002dfa:	bf00      	nop
}
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200010f0 	.word	0x200010f0
 8002e08:	0800cc7c 	.word	0x0800cc7c
 8002e0c:	0800cc98 	.word	0x0800cc98
 8002e10:	0800ccb4 	.word	0x0800ccb4

08002e14 <canErrUpdate>:

void canErrUpdate(uint8_t ch) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08e      	sub	sp, #56	@ 0x38
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
	FDCAN_ProtocolStatusTypeDef protocol_status;
	CanEvent_t can_evt = CAN_EVT_NONE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	HAL_FDCAN_GetProtocolStatus(can_tbl[ch].p_hfdcan, &protocol_status);
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	4a5e      	ldr	r2, [pc, #376]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002e28:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3334      	adds	r3, #52	@ 0x34
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f107 0208 	add.w	r2, r7, #8
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fd41 	bl	80068c4 <HAL_FDCAN_GetProtocolStatus>

	if (protocol_status.ErrorPassive) {
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d017      	beq.n	8002e78 <canErrUpdate+0x64>
		can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	4a55      	ldr	r2, [pc, #340]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002e4c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	494f      	ldr	r1, [pc, #316]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002e62:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002e66:	fb00 f303 	mul.w	r3, r0, r3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	601a      	str	r2, [r3, #0]
		can_evt = CAN_EVT_ERR_PASSIVE;
 8002e70:	2302      	movs	r3, #2
 8002e72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002e76:	e013      	b.n	8002ea0 <canErrUpdate+0x8c>
	} else {
		can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	4a49      	ldr	r2, [pc, #292]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002e7c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	4943      	ldr	r1, [pc, #268]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002e92:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	601a      	str	r2, [r3, #0]
	}

	if (protocol_status.Warning) {
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d017      	beq.n	8002ed6 <canErrUpdate+0xc2>
		can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002eaa:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f042 0202 	orr.w	r2, r2, #2
 8002ebe:	4938      	ldr	r1, [pc, #224]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002ec0:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002ec4:	fb00 f303 	mul.w	r3, r0, r3
 8002ec8:	440b      	add	r3, r1
 8002eca:	3304      	adds	r3, #4
 8002ecc:	601a      	str	r2, [r3, #0]
		can_evt = CAN_EVT_ERR_WARNING;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002ed4:	e013      	b.n	8002efe <canErrUpdate+0xea>
	} else {
		can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	4a31      	ldr	r2, [pc, #196]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002eda:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	f022 0202 	bic.w	r2, r2, #2
 8002eee:	492c      	ldr	r1, [pc, #176]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002ef0:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002ef4:	fb00 f303 	mul.w	r3, r0, r3
 8002ef8:	440b      	add	r3, r1
 8002efa:	3304      	adds	r3, #4
 8002efc:	601a      	str	r2, [r3, #0]
	}

	if (protocol_status.BusOff) {
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d017      	beq.n	8002f34 <canErrUpdate+0x120>
		can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	4a26      	ldr	r2, [pc, #152]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002f08:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f042 0204 	orr.w	r2, r2, #4
 8002f1c:	4920      	ldr	r1, [pc, #128]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002f1e:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002f22:	fb00 f303 	mul.w	r3, r0, r3
 8002f26:	440b      	add	r3, r1
 8002f28:	3304      	adds	r3, #4
 8002f2a:	601a      	str	r2, [r3, #0]
		can_evt = CAN_EVT_ERR_BUS_OFF;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002f32:	e013      	b.n	8002f5c <canErrUpdate+0x148>
	} else {
		can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002f38:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f022 0204 	bic.w	r2, r2, #4
 8002f4c:	4914      	ldr	r1, [pc, #80]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002f4e:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8002f52:	fb00 f303 	mul.w	r3, r0, r3
 8002f56:	440b      	add	r3, r1
 8002f58:	3304      	adds	r3, #4
 8002f5a:	601a      	str	r2, [r3, #0]
	}

	if (can_tbl[ch].handler != NULL) {
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002f60:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3338      	adds	r3, #56	@ 0x38
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d011      	beq.n	8002f96 <canErrUpdate+0x182>
		if (can_evt != CAN_EVT_NONE) {
 8002f72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <canErrUpdate+0x182>
			(*can_tbl[ch].handler)(ch, can_evt, NULL);
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	4a08      	ldr	r2, [pc, #32]	@ (8002fa0 <canErrUpdate+0x18c>)
 8002f7e:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3338      	adds	r3, #56	@ 0x38
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8002f90:	79f8      	ldrb	r0, [r7, #7]
 8002f92:	2200      	movs	r2, #0
 8002f94:	4798      	blx	r3
		}
	}
}
 8002f96:	bf00      	nop
 8002f98:	3738      	adds	r7, #56	@ 0x38
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200010f0 	.word	0x200010f0

08002fa4 <canInfoPrint>:

void canInfoPrint(uint8_t ch) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
	can_tbl_t *p_can = &can_tbl[ch];
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f44f 621d 	mov.w	r2, #2512	@ 0x9d0
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	4a60      	ldr	r2, [pc, #384]	@ (800313c <canInfoPrint+0x198>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
#define canPrintf   cliPrintf
#else
#define canPrintf   logPrintf
#endif

	canPrintf("ch            : ");
 8002fbe:	4860      	ldr	r0, [pc, #384]	@ (8003140 <canInfoPrint+0x19c>)
 8002fc0:	f7fe ff22 	bl	8001e08 <cliPrintf>
	switch (ch) {
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <canInfoPrint+0x2c>
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d004      	beq.n	8002fd8 <canInfoPrint+0x34>
 8002fce:	e007      	b.n	8002fe0 <canInfoPrint+0x3c>
	case _DEF_CAN1:
		canPrintf("_DEF_CAN1\n");
 8002fd0:	485c      	ldr	r0, [pc, #368]	@ (8003144 <canInfoPrint+0x1a0>)
 8002fd2:	f7fe ff19 	bl	8001e08 <cliPrintf>
		break;
 8002fd6:	e003      	b.n	8002fe0 <canInfoPrint+0x3c>
	case _DEF_CAN2:
		canPrintf("_DEF_CAN2\n");
 8002fd8:	485b      	ldr	r0, [pc, #364]	@ (8003148 <canInfoPrint+0x1a4>)
 8002fda:	f7fe ff15 	bl	8001e08 <cliPrintf>
		break;
 8002fde:	bf00      	nop
	}

	canPrintf("is_open       : ");
 8002fe0:	485a      	ldr	r0, [pc, #360]	@ (800314c <canInfoPrint+0x1a8>)
 8002fe2:	f7fe ff11 	bl	8001e08 <cliPrintf>
	if (p_can->is_open)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	785b      	ldrb	r3, [r3, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <canInfoPrint+0x52>
		canPrintf("true\n");
 8002fee:	4858      	ldr	r0, [pc, #352]	@ (8003150 <canInfoPrint+0x1ac>)
 8002ff0:	f7fe ff0a 	bl	8001e08 <cliPrintf>
 8002ff4:	e002      	b.n	8002ffc <canInfoPrint+0x58>
	else
		canPrintf("false\n");
 8002ff6:	4857      	ldr	r0, [pc, #348]	@ (8003154 <canInfoPrint+0x1b0>)
 8002ff8:	f7fe ff06 	bl	8001e08 <cliPrintf>

	canPrintf("baud          : ");
 8002ffc:	4856      	ldr	r0, [pc, #344]	@ (8003158 <canInfoPrint+0x1b4>)
 8002ffe:	f7fe ff03 	bl	8001e08 <cliPrintf>
	switch (p_can->baud) {
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003008:	2b04      	cmp	r3, #4
 800300a:	d821      	bhi.n	8003050 <canInfoPrint+0xac>
 800300c:	a201      	add	r2, pc, #4	@ (adr r2, 8003014 <canInfoPrint+0x70>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003029 	.word	0x08003029
 8003018:	08003031 	.word	0x08003031
 800301c:	08003039 	.word	0x08003039
 8003020:	08003041 	.word	0x08003041
 8003024:	08003049 	.word	0x08003049
	case CAN_100K:
		canPrintf("100K\n");
 8003028:	484c      	ldr	r0, [pc, #304]	@ (800315c <canInfoPrint+0x1b8>)
 800302a:	f7fe feed 	bl	8001e08 <cliPrintf>
		break;
 800302e:	e010      	b.n	8003052 <canInfoPrint+0xae>
	case CAN_125K:
		canPrintf("125K\n");
 8003030:	484b      	ldr	r0, [pc, #300]	@ (8003160 <canInfoPrint+0x1bc>)
 8003032:	f7fe fee9 	bl	8001e08 <cliPrintf>
		break;
 8003036:	e00c      	b.n	8003052 <canInfoPrint+0xae>
	case CAN_250K:
		canPrintf("250K\n");
 8003038:	484a      	ldr	r0, [pc, #296]	@ (8003164 <canInfoPrint+0x1c0>)
 800303a:	f7fe fee5 	bl	8001e08 <cliPrintf>
		break;
 800303e:	e008      	b.n	8003052 <canInfoPrint+0xae>
	case CAN_500K:
		canPrintf("500K\n");
 8003040:	4849      	ldr	r0, [pc, #292]	@ (8003168 <canInfoPrint+0x1c4>)
 8003042:	f7fe fee1 	bl	8001e08 <cliPrintf>
		break;
 8003046:	e004      	b.n	8003052 <canInfoPrint+0xae>
	case CAN_1M:
		canPrintf("1M\n");
 8003048:	4848      	ldr	r0, [pc, #288]	@ (800316c <canInfoPrint+0x1c8>)
 800304a:	f7fe fedd 	bl	8001e08 <cliPrintf>
		break;
 800304e:	e000      	b.n	8003052 <canInfoPrint+0xae>
	default:
		break;
 8003050:	bf00      	nop
	}

	canPrintf("baud data     : ");
 8003052:	4847      	ldr	r0, [pc, #284]	@ (8003170 <canInfoPrint+0x1cc>)
 8003054:	f7fe fed8 	bl	8001e08 <cliPrintf>
	switch (p_can->baud_data) {
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800305e:	2b07      	cmp	r3, #7
 8003060:	d832      	bhi.n	80030c8 <canInfoPrint+0x124>
 8003062:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <canInfoPrint+0xc4>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	08003089 	.word	0x08003089
 800306c:	08003091 	.word	0x08003091
 8003070:	08003099 	.word	0x08003099
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030a9 	.word	0x080030a9
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030b9 	.word	0x080030b9
 8003084:	080030c1 	.word	0x080030c1
	case CAN_100K:
		canPrintf("100K\n");
 8003088:	4834      	ldr	r0, [pc, #208]	@ (800315c <canInfoPrint+0x1b8>)
 800308a:	f7fe febd 	bl	8001e08 <cliPrintf>
		break;
 800308e:	e01b      	b.n	80030c8 <canInfoPrint+0x124>
	case CAN_125K:
		canPrintf("125K\n");
 8003090:	4833      	ldr	r0, [pc, #204]	@ (8003160 <canInfoPrint+0x1bc>)
 8003092:	f7fe feb9 	bl	8001e08 <cliPrintf>
		break;
 8003096:	e017      	b.n	80030c8 <canInfoPrint+0x124>
	case CAN_250K:
		canPrintf("250K\n");
 8003098:	4832      	ldr	r0, [pc, #200]	@ (8003164 <canInfoPrint+0x1c0>)
 800309a:	f7fe feb5 	bl	8001e08 <cliPrintf>
		break;
 800309e:	e013      	b.n	80030c8 <canInfoPrint+0x124>
	case CAN_500K:
		canPrintf("500K\n");
 80030a0:	4831      	ldr	r0, [pc, #196]	@ (8003168 <canInfoPrint+0x1c4>)
 80030a2:	f7fe feb1 	bl	8001e08 <cliPrintf>
		break;
 80030a6:	e00f      	b.n	80030c8 <canInfoPrint+0x124>
	case CAN_1M:
		canPrintf("1M\n");
 80030a8:	4830      	ldr	r0, [pc, #192]	@ (800316c <canInfoPrint+0x1c8>)
 80030aa:	f7fe fead 	bl	8001e08 <cliPrintf>
		break;
 80030ae:	e00b      	b.n	80030c8 <canInfoPrint+0x124>

	case CAN_2M:
		canPrintf("2M\n");
 80030b0:	4830      	ldr	r0, [pc, #192]	@ (8003174 <canInfoPrint+0x1d0>)
 80030b2:	f7fe fea9 	bl	8001e08 <cliPrintf>
		break;
 80030b6:	e007      	b.n	80030c8 <canInfoPrint+0x124>
	case CAN_4M:
		canPrintf("4M\n");
 80030b8:	482f      	ldr	r0, [pc, #188]	@ (8003178 <canInfoPrint+0x1d4>)
 80030ba:	f7fe fea5 	bl	8001e08 <cliPrintf>
		break;
 80030be:	e003      	b.n	80030c8 <canInfoPrint+0x124>
	case CAN_5M:
		canPrintf("5M\n");
 80030c0:	482e      	ldr	r0, [pc, #184]	@ (800317c <canInfoPrint+0x1d8>)
 80030c2:	f7fe fea1 	bl	8001e08 <cliPrintf>
		break;
 80030c6:	bf00      	nop
	}

	canPrintf("mode          : ");
 80030c8:	482d      	ldr	r0, [pc, #180]	@ (8003180 <canInfoPrint+0x1dc>)
 80030ca:	f7fe fe9d 	bl	8001e08 <cliPrintf>
	switch (p_can->mode) {
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d00e      	beq.n	80030f6 <canInfoPrint+0x152>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	dc10      	bgt.n	80030fe <canInfoPrint+0x15a>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <canInfoPrint+0x142>
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d004      	beq.n	80030ee <canInfoPrint+0x14a>
 80030e4:	e00b      	b.n	80030fe <canInfoPrint+0x15a>
	case CAN_NORMAL:
		canPrintf("NORMAL\n");
 80030e6:	4827      	ldr	r0, [pc, #156]	@ (8003184 <canInfoPrint+0x1e0>)
 80030e8:	f7fe fe8e 	bl	8001e08 <cliPrintf>
		break;
 80030ec:	e007      	b.n	80030fe <canInfoPrint+0x15a>
	case CAN_MONITOR:
		canPrintf("MONITOR\n");
 80030ee:	4826      	ldr	r0, [pc, #152]	@ (8003188 <canInfoPrint+0x1e4>)
 80030f0:	f7fe fe8a 	bl	8001e08 <cliPrintf>
		break;
 80030f4:	e003      	b.n	80030fe <canInfoPrint+0x15a>
	case CAN_LOOPBACK:
		canPrintf("LOOPBACK\n");
 80030f6:	4825      	ldr	r0, [pc, #148]	@ (800318c <canInfoPrint+0x1e8>)
 80030f8:	f7fe fe86 	bl	8001e08 <cliPrintf>
		break;
 80030fc:	bf00      	nop
	}

	canPrintf("frame         : ");
 80030fe:	4824      	ldr	r0, [pc, #144]	@ (8003190 <canInfoPrint+0x1ec>)
 8003100:	f7fe fe82 	bl	8001e08 <cliPrintf>
	switch (p_can->frame) {
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800310a:	2b02      	cmp	r3, #2
 800310c:	d00e      	beq.n	800312c <canInfoPrint+0x188>
 800310e:	2b02      	cmp	r3, #2
 8003110:	dc10      	bgt.n	8003134 <canInfoPrint+0x190>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <canInfoPrint+0x178>
 8003116:	2b01      	cmp	r3, #1
 8003118:	d004      	beq.n	8003124 <canInfoPrint+0x180>
		break;
	case CAN_FD_BRS:
		canPrintf("CAN_FD_BRS\n");
		break;
	}
}
 800311a:	e00b      	b.n	8003134 <canInfoPrint+0x190>
		canPrintf("CAN_CLASSIC\n");
 800311c:	481d      	ldr	r0, [pc, #116]	@ (8003194 <canInfoPrint+0x1f0>)
 800311e:	f7fe fe73 	bl	8001e08 <cliPrintf>
		break;
 8003122:	e007      	b.n	8003134 <canInfoPrint+0x190>
		canPrintf("CAN_FD_NO_BRS\n");
 8003124:	481c      	ldr	r0, [pc, #112]	@ (8003198 <canInfoPrint+0x1f4>)
 8003126:	f7fe fe6f 	bl	8001e08 <cliPrintf>
		break;
 800312a:	e003      	b.n	8003134 <canInfoPrint+0x190>
		canPrintf("CAN_FD_BRS\n");
 800312c:	481b      	ldr	r0, [pc, #108]	@ (800319c <canInfoPrint+0x1f8>)
 800312e:	f7fe fe6b 	bl	8001e08 <cliPrintf>
		break;
 8003132:	bf00      	nop
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200010f0 	.word	0x200010f0
 8003140:	0800ccd0 	.word	0x0800ccd0
 8003144:	0800cce4 	.word	0x0800cce4
 8003148:	0800ccf0 	.word	0x0800ccf0
 800314c:	0800ccfc 	.word	0x0800ccfc
 8003150:	0800cd10 	.word	0x0800cd10
 8003154:	0800cd18 	.word	0x0800cd18
 8003158:	0800cd20 	.word	0x0800cd20
 800315c:	0800cd34 	.word	0x0800cd34
 8003160:	0800cd3c 	.word	0x0800cd3c
 8003164:	0800cd44 	.word	0x0800cd44
 8003168:	0800cd4c 	.word	0x0800cd4c
 800316c:	0800cd54 	.word	0x0800cd54
 8003170:	0800cd58 	.word	0x0800cd58
 8003174:	0800cd6c 	.word	0x0800cd6c
 8003178:	0800cd70 	.word	0x0800cd70
 800317c:	0800cd74 	.word	0x0800cd74
 8003180:	0800cd78 	.word	0x0800cd78
 8003184:	0800cd8c 	.word	0x0800cd8c
 8003188:	0800cd94 	.word	0x0800cd94
 800318c:	0800cda0 	.word	0x0800cda0
 8003190:	0800cdac 	.word	0x0800cdac
 8003194:	0800cdc0 	.word	0x0800cdc0
 8003198:	0800cdd0 	.word	0x0800cdd0
 800319c:	0800cde0 	.word	0x0800cde0

080031a0 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan,
		uint32_t ErrorStatusITs) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	uint8_t ch = _DEF_CAN1;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]

	canErrUpdate(ch);
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fe2f 	bl	8002e14 <canErrUpdate>
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_FDCAN_ErrorCallback>:

void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan) {
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	uint8_t ch = _DEF_CAN1;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]

	err_int_cnt++;
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_FDCAN_ErrorCallback+0x54>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	4a10      	ldr	r2, [pc, #64]	@ (8003214 <HAL_FDCAN_ErrorCallback+0x54>)
 80031d4:	6013      	str	r3, [r2, #0]

	if (hfdcan->ErrorCode > 0) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d013      	beq.n	8003206 <HAL_FDCAN_ErrorCallback+0x46>
		can_tbl[ch].err_code |= CAN_ERR_ETC;
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003218 <HAL_FDCAN_ErrorCallback+0x58>)
 80031e2:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	f042 0210 	orr.w	r2, r2, #16
 80031f6:	4908      	ldr	r1, [pc, #32]	@ (8003218 <HAL_FDCAN_ErrorCallback+0x58>)
 80031f8:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 80031fc:	fb00 f303 	mul.w	r3, r0, r3
 8003200:	440b      	add	r3, r1
 8003202:	3304      	adds	r3, #4
 8003204:	601a      	str	r2, [r3, #0]
	}
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20001ac0 	.word	0x20001ac0
 8003218:	200010f0 	.word	0x200010f0

0800321c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_FDCAN_RxFifo0Callback+0x1c>
		canRxFifoCallback(_DEF_CAN1, hfdcan);
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	2000      	movs	r0, #0
 8003234:	f7ff fce8 	bl	8002c08 <canRxFifoCallback>
	}

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET) {
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <HAL_FDCAN_RxFifo0Callback+0x30>
		can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	3301      	adds	r3, #1
 8003248:	4a07      	ldr	r2, [pc, #28]	@ (8003268 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800324a:	6193      	str	r3, [r2, #24]
	}

	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET) {
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <HAL_FDCAN_RxFifo0Callback+0x44>
		can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8003256:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	3301      	adds	r3, #1
 800325c:	4a02      	ldr	r2, [pc, #8]	@ (8003268 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800325e:	61d3      	str	r3, [r2, #28]
	}
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	200010f0 	.word	0x200010f0

0800326c <cliCan>:

#ifdef _USE_HW_CLI
void cliCan(cli_args_t *args) {
 800326c:	b5b0      	push	{r4, r5, r7, lr}
 800326e:	b0ae      	sub	sp, #184	@ 0xb8
 8003270:	af02      	add	r7, sp, #8
 8003272:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003274:	2300      	movs	r3, #0
 8003276:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	canLock();
 800327a:	f7ff f88b 	bl	8002394 <canLock>

	if (args->argc == 1 && args->isStr(0, "info")) {
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 809a 	bne.w	80033bc <cliCan+0x150>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	49b9      	ldr	r1, [pc, #740]	@ (8003574 <cliCan+0x308>)
 800328e:	2000      	movs	r0, #0
 8003290:	4798      	blx	r3
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8091 	beq.w	80033bc <cliCan+0x150>
		for (int i = 0; i < CAN_MAX_CH; i++) {
 800329a:	2300      	movs	r3, #0
 800329c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032a0:	e084      	b.n	80033ac <cliCan+0x140>
			if (can_tbl[i].is_open == true) {
 80032a2:	4ab5      	ldr	r2, [pc, #724]	@ (8003578 <cliCan+0x30c>)
 80032a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032a8:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	3301      	adds	r3, #1
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d06b      	beq.n	8003392 <cliCan+0x126>
				canInfoPrint(i);
 80032ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fe6f 	bl	8002fa4 <canInfoPrint>
				cliPrintf("is_open       : %d\n", can_tbl[i].is_open);
 80032c6:	4aac      	ldr	r2, [pc, #688]	@ (8003578 <cliCan+0x30c>)
 80032c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032cc:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3301      	adds	r3, #1
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	48a7      	ldr	r0, [pc, #668]	@ (800357c <cliCan+0x310>)
 80032de:	f7fe fd93 	bl	8001e08 <cliPrintf>

				cliPrintf("q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 80032e2:	4aa5      	ldr	r2, [pc, #660]	@ (8003578 <cliCan+0x30c>)
 80032e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032e8:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3310      	adds	r3, #16
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4619      	mov	r1, r3
 80032f8:	48a1      	ldr	r0, [pc, #644]	@ (8003580 <cliCan+0x314>)
 80032fa:	f7fe fd85 	bl	8001e08 <cliPrintf>
				cliPrintf("q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 80032fe:	4a9e      	ldr	r2, [pc, #632]	@ (8003578 <cliCan+0x30c>)
 8003300:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003304:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	3314      	adds	r3, #20
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	489b      	ldr	r0, [pc, #620]	@ (8003584 <cliCan+0x318>)
 8003316:	f7fe fd77 	bl	8001e08 <cliPrintf>
				cliPrintf("fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 800331a:	4a97      	ldr	r2, [pc, #604]	@ (8003578 <cliCan+0x30c>)
 800331c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003320:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	3318      	adds	r3, #24
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4619      	mov	r1, r3
 8003330:	4895      	ldr	r0, [pc, #596]	@ (8003588 <cliCan+0x31c>)
 8003332:	f7fe fd69 	bl	8001e08 <cliPrintf>
				cliPrintf("fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8003336:	4a90      	ldr	r2, [pc, #576]	@ (8003578 <cliCan+0x30c>)
 8003338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800333c:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	331c      	adds	r3, #28
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4619      	mov	r1, r3
 800334c:	488f      	ldr	r0, [pc, #572]	@ (800358c <cliCan+0x320>)
 800334e:	f7fe fd5b 	bl	8001e08 <cliPrintf>
				cliPrintf("rx error cnt  : %d\n", canGetRxErrCount(i));
 8003352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fb4f 	bl	80029fc <canGetRxErrCount>
 800335e:	4603      	mov	r3, r0
 8003360:	4619      	mov	r1, r3
 8003362:	488b      	ldr	r0, [pc, #556]	@ (8003590 <cliCan+0x324>)
 8003364:	f7fe fd50 	bl	8001e08 <cliPrintf>
				cliPrintf("tx error cnt  : %d\n", canGetTxErrCount(i));
 8003368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800336c:	b2db      	uxtb	r3, r3
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fb6e 	bl	8002a50 <canGetTxErrCount>
 8003374:	4603      	mov	r3, r0
 8003376:	4619      	mov	r1, r3
 8003378:	4886      	ldr	r0, [pc, #536]	@ (8003594 <cliCan+0x328>)
 800337a:	f7fe fd45 	bl	8001e08 <cliPrintf>
				canErrPrint(i);
 800337e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fd0d 	bl	8002da4 <canErrPrint>
				cliPrintf("\n");
 800338a:	4883      	ldr	r0, [pc, #524]	@ (8003598 <cliCan+0x32c>)
 800338c:	f7fe fd3c 	bl	8001e08 <cliPrintf>
 8003390:	e007      	b.n	80033a2 <cliCan+0x136>
			} else {
				cliPrintf("%d not open\n", i);
 8003392:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003396:	4881      	ldr	r0, [pc, #516]	@ (800359c <cliCan+0x330>)
 8003398:	f7fe fd36 	bl	8001e08 <cliPrintf>
				cliPrintf("\n");
 800339c:	487e      	ldr	r0, [pc, #504]	@ (8003598 <cliCan+0x32c>)
 800339e:	f7fe fd33 	bl	8001e08 <cliPrintf>
		for (int i = 0; i < CAN_MAX_CH; i++) {
 80033a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033a6:	3301      	adds	r3, #1
 80033a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f77f af76 	ble.w	80032a2 <cliCan+0x36>
			}
		}
		ret = true;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 1 && args->isStr(0, "open")) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d138      	bne.n	8003436 <cliCan+0x1ca>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	4975      	ldr	r1, [pc, #468]	@ (80035a0 <cliCan+0x334>)
 80033ca:	2000      	movs	r0, #0
 80033cc:	4798      	blx	r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d030      	beq.n	8003436 <cliCan+0x1ca>
		cliPrintf("ch    : 0~%d\n\n", CAN_MAX_CH - 1);
 80033d4:	2100      	movs	r1, #0
 80033d6:	4873      	ldr	r0, [pc, #460]	@ (80035a4 <cliCan+0x338>)
 80033d8:	f7fe fd16 	bl	8001e08 <cliPrintf>
		cliPrintf("mode  : CAN_NORMAL\n");
 80033dc:	4872      	ldr	r0, [pc, #456]	@ (80035a8 <cliCan+0x33c>)
 80033de:	f7fe fd13 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_MONITOR\n");
 80033e2:	4872      	ldr	r0, [pc, #456]	@ (80035ac <cliCan+0x340>)
 80033e4:	f7fe fd10 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_LOOPBACK\n\n");
 80033e8:	4871      	ldr	r0, [pc, #452]	@ (80035b0 <cliCan+0x344>)
 80033ea:	f7fe fd0d 	bl	8001e08 <cliPrintf>
		cliPrintf("frame : CAN_CLASSIC\n");
 80033ee:	4871      	ldr	r0, [pc, #452]	@ (80035b4 <cliCan+0x348>)
 80033f0:	f7fe fd0a 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_FD_NO_BRS\n");
 80033f4:	4870      	ldr	r0, [pc, #448]	@ (80035b8 <cliCan+0x34c>)
 80033f6:	f7fe fd07 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_FD_BRS\n\n");
 80033fa:	4870      	ldr	r0, [pc, #448]	@ (80035bc <cliCan+0x350>)
 80033fc:	f7fe fd04 	bl	8001e08 <cliPrintf>
		cliPrintf("baud  : CAN_100K\n");
 8003400:	486f      	ldr	r0, [pc, #444]	@ (80035c0 <cliCan+0x354>)
 8003402:	f7fe fd01 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_125K\n");
 8003406:	486f      	ldr	r0, [pc, #444]	@ (80035c4 <cliCan+0x358>)
 8003408:	f7fe fcfe 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_250K\n");
 800340c:	486e      	ldr	r0, [pc, #440]	@ (80035c8 <cliCan+0x35c>)
 800340e:	f7fe fcfb 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_500K\n");
 8003412:	486e      	ldr	r0, [pc, #440]	@ (80035cc <cliCan+0x360>)
 8003414:	f7fe fcf8 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_1M\n");
 8003418:	486d      	ldr	r0, [pc, #436]	@ (80035d0 <cliCan+0x364>)
 800341a:	f7fe fcf5 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_2M\n");
 800341e:	486d      	ldr	r0, [pc, #436]	@ (80035d4 <cliCan+0x368>)
 8003420:	f7fe fcf2 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_4M\n");
 8003424:	486c      	ldr	r0, [pc, #432]	@ (80035d8 <cliCan+0x36c>)
 8003426:	f7fe fcef 	bl	8001e08 <cliPrintf>
		cliPrintf("        CAN_5M\n");
 800342a:	486c      	ldr	r0, [pc, #432]	@ (80035dc <cliCan+0x370>)
 800342c:	f7fe fcec 	bl	8001e08 <cliPrintf>
		ret = true;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 2 && args->isStr(0, "open") && args->isStr(1, "test")) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d12b      	bne.n	8003496 <cliCan+0x22a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4957      	ldr	r1, [pc, #348]	@ (80035a0 <cliCan+0x334>)
 8003444:	2000      	movs	r0, #0
 8003446:	4798      	blx	r3
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d023      	beq.n	8003496 <cliCan+0x22a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4963      	ldr	r1, [pc, #396]	@ (80035e0 <cliCan+0x374>)
 8003454:	2001      	movs	r0, #1
 8003456:	4798      	blx	r3
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01b      	beq.n	8003496 <cliCan+0x22a>
		bool can_ret;

		//can_ret = canOpen(_DEF_CAN1, CAN_LOOPBACK, CAN_FD_BRS, CAN_1M, CAN_5M);
		can_ret = canOpen(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_500K,
 800345e:	2303      	movs	r3, #3
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2303      	movs	r3, #3
 8003464:	2200      	movs	r2, #0
 8003466:	2100      	movs	r1, #0
 8003468:	2000      	movs	r0, #0
 800346a:	f7fe ffa7 	bl	80023bc <canOpen>
 800346e:	4603      	mov	r3, r0
 8003470:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
				CAN_500K);
		cliPrintf("canOpen() : %s\n", can_ret ? "True" : "False");
 8003474:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <cliCan+0x214>
 800347c:	4b59      	ldr	r3, [pc, #356]	@ (80035e4 <cliCan+0x378>)
 800347e:	e000      	b.n	8003482 <cliCan+0x216>
 8003480:	4b59      	ldr	r3, [pc, #356]	@ (80035e8 <cliCan+0x37c>)
 8003482:	4619      	mov	r1, r3
 8003484:	4859      	ldr	r0, [pc, #356]	@ (80035ec <cliCan+0x380>)
 8003486:	f7fe fcbf 	bl	8001e08 <cliPrintf>
		canInfoPrint(_DEF_CAN1);
 800348a:	2000      	movs	r0, #0
 800348c:	f7ff fd8a 	bl	8002fa4 <canInfoPrint>
		ret = true;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 6 && args->isStr(0, "open")) {
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	2b06      	cmp	r3, #6
 800349c:	f040 812c 	bne.w	80036f8 <cliCan+0x48c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	493e      	ldr	r1, [pc, #248]	@ (80035a0 <cliCan+0x334>)
 80034a6:	2000      	movs	r0, #0
 80034a8:	4798      	blx	r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8123 	beq.w	80036f8 <cliCan+0x48c>
		uint8_t ch;
		CanMode_t mode = CAN_NORMAL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		CanFrame_t frame = CAN_CLASSIC;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
		CanBaud_t baud = CAN_500K; //CAN_1M;
 80034be:	2303      	movs	r3, #3
 80034c0:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
		CanBaud_t baud_data = CAN_500K; //CAN_1M;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
		const char *mode_str[] = { "CAN_NORMAL", "CAN_MONITOR", "CAN_LOOPBACK" };
 80034ca:	4a49      	ldr	r2, [pc, #292]	@ (80035f0 <cliCan+0x384>)
 80034cc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80034d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80034d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		const char *frame_str[] =
 80034d6:	4a47      	ldr	r2, [pc, #284]	@ (80035f4 <cliCan+0x388>)
 80034d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80034de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				{ "CAN_CLASSIC", "CAN_FD_NO_BRS", "CAN_FD_BRS" };
		const char *baud_str[] = { "CAN_100K", "CAN_125K", "CAN_250K",
 80034e2:	4b45      	ldr	r3, [pc, #276]	@ (80035f8 <cliCan+0x38c>)
 80034e4:	f107 0408 	add.w	r4, r7, #8
 80034e8:	461d      	mov	r5, r3
 80034ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				"CAN_500K", "CAN_1M", "CAN_2M", "CAN_4M", "CAN_5M" };

		ch = constrain(args->getData(1), 0, CAN_MAX_CH - 1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2001      	movs	r0, #1
 80034fc:	4798      	blx	r3
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0f      	blt.n	8003524 <cliCan+0x2b8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2001      	movs	r0, #1
 800350a:	4798      	blx	r3
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	dc06      	bgt.n	8003520 <cliCan+0x2b4>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2001      	movs	r0, #1
 8003518:	4798      	blx	r3
 800351a:	4603      	mov	r3, r0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e002      	b.n	8003526 <cliCan+0x2ba>
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <cliCan+0x2ba>
 8003524:	2300      	movs	r3, #0
 8003526:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72

		for (int i = 0; i < 3; i++) {
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003530:	e018      	b.n	8003564 <cliCan+0x2f8>
			if (args->isStr(2, mode_str[i])) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	33b0      	adds	r3, #176	@ 0xb0
 800353e:	443b      	add	r3, r7
 8003540:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8003544:	4619      	mov	r1, r3
 8003546:	2002      	movs	r0, #2
 8003548:	4790      	blx	r2
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <cliCan+0x2ee>
				mode = i;
 8003550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003554:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				break;
 8003558:	e008      	b.n	800356c <cliCan+0x300>
		for (int i = 0; i < 3; i++) {
 800355a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800355e:	3301      	adds	r3, #1
 8003560:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003568:	2b02      	cmp	r3, #2
 800356a:	dde2      	ble.n	8003532 <cliCan+0x2c6>
			}
		}
		for (int i = 0; i < 3; i++) {
 800356c:	2300      	movs	r3, #0
 800356e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003572:	e05c      	b.n	800362e <cliCan+0x3c2>
 8003574:	0800cdec 	.word	0x0800cdec
 8003578:	200010f0 	.word	0x200010f0
 800357c:	0800cdf4 	.word	0x0800cdf4
 8003580:	0800ce08 	.word	0x0800ce08
 8003584:	0800ce1c 	.word	0x0800ce1c
 8003588:	0800ce30 	.word	0x0800ce30
 800358c:	0800ce44 	.word	0x0800ce44
 8003590:	0800ce58 	.word	0x0800ce58
 8003594:	0800ce6c 	.word	0x0800ce6c
 8003598:	0800ce80 	.word	0x0800ce80
 800359c:	0800ce84 	.word	0x0800ce84
 80035a0:	0800ce94 	.word	0x0800ce94
 80035a4:	0800ce9c 	.word	0x0800ce9c
 80035a8:	0800ceac 	.word	0x0800ceac
 80035ac:	0800cec0 	.word	0x0800cec0
 80035b0:	0800ced8 	.word	0x0800ced8
 80035b4:	0800cef0 	.word	0x0800cef0
 80035b8:	0800cf08 	.word	0x0800cf08
 80035bc:	0800cf20 	.word	0x0800cf20
 80035c0:	0800cf38 	.word	0x0800cf38
 80035c4:	0800cf4c 	.word	0x0800cf4c
 80035c8:	0800cf60 	.word	0x0800cf60
 80035cc:	0800cf74 	.word	0x0800cf74
 80035d0:	0800cf88 	.word	0x0800cf88
 80035d4:	0800cf98 	.word	0x0800cf98
 80035d8:	0800cfa8 	.word	0x0800cfa8
 80035dc:	0800cfb8 	.word	0x0800cfb8
 80035e0:	0800cfc8 	.word	0x0800cfc8
 80035e4:	0800cfd0 	.word	0x0800cfd0
 80035e8:	0800cfd8 	.word	0x0800cfd8
 80035ec:	0800cfe0 	.word	0x0800cfe0
 80035f0:	0800d178 	.word	0x0800d178
 80035f4:	0800d1ac 	.word	0x0800d1ac
 80035f8:	0800d208 	.word	0x0800d208
			if (args->isStr(3, frame_str[i])) {
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	33b0      	adds	r3, #176	@ 0xb0
 8003608:	443b      	add	r3, r7
 800360a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800360e:	4619      	mov	r1, r3
 8003610:	2003      	movs	r0, #3
 8003612:	4790      	blx	r2
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <cliCan+0x3b8>
				frame = i;
 800361a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800361e:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
				break;
 8003622:	e008      	b.n	8003636 <cliCan+0x3ca>
		for (int i = 0; i < 3; i++) {
 8003624:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003628:	3301      	adds	r3, #1
 800362a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800362e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003632:	2b02      	cmp	r3, #2
 8003634:	dde2      	ble.n	80035fc <cliCan+0x390>
			}
		}
		for (int i = 0; i < 8; i++) {
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800363c:	e018      	b.n	8003670 <cliCan+0x404>
			if (args->isStr(4, baud_str[i])) {
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	33b0      	adds	r3, #176	@ 0xb0
 800364a:	443b      	add	r3, r7
 800364c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003650:	4619      	mov	r1, r3
 8003652:	2004      	movs	r0, #4
 8003654:	4790      	blx	r2
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d004      	beq.n	8003666 <cliCan+0x3fa>
				baud = i;
 800365c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003660:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
				break;
 8003664:	e008      	b.n	8003678 <cliCan+0x40c>
		for (int i = 0; i < 8; i++) {
 8003666:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800366a:	3301      	adds	r3, #1
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003670:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003674:	2b07      	cmp	r3, #7
 8003676:	dde2      	ble.n	800363e <cliCan+0x3d2>
			}
		}
		for (int i = 0; i < 8; i++) {
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800367e:	e018      	b.n	80036b2 <cliCan+0x446>
			if (args->isStr(5, baud_str[i])) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	33b0      	adds	r3, #176	@ 0xb0
 800368c:	443b      	add	r3, r7
 800368e:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8003692:	4619      	mov	r1, r3
 8003694:	2005      	movs	r0, #5
 8003696:	4790      	blx	r2
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <cliCan+0x43c>
				baud_data = i;
 800369e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036a2:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
				break;
 80036a6:	e008      	b.n	80036ba <cliCan+0x44e>
		for (int i = 0; i < 8; i++) {
 80036a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036ac:	3301      	adds	r3, #1
 80036ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036b6:	2b07      	cmp	r3, #7
 80036b8:	dde2      	ble.n	8003680 <cliCan+0x414>
			}
		}

		bool can_ret;

		can_ret = canOpen(ch, mode, frame, baud, baud_data);
 80036ba:	f897 40a5 	ldrb.w	r4, [r7, #165]	@ 0xa5
 80036be:	f897 20a6 	ldrb.w	r2, [r7, #166]	@ 0xa6
 80036c2:	f897 10a7 	ldrb.w	r1, [r7, #167]	@ 0xa7
 80036c6:	f897 0072 	ldrb.w	r0, [r7, #114]	@ 0x72
 80036ca:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4623      	mov	r3, r4
 80036d2:	f7fe fe73 	bl	80023bc <canOpen>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
		cliPrintf("canOpen() : %s\n", can_ret ? "True" : "False");
 80036dc:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <cliCan+0x47c>
 80036e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003968 <cliCan+0x6fc>)
 80036e6:	e000      	b.n	80036ea <cliCan+0x47e>
 80036e8:	4ba0      	ldr	r3, [pc, #640]	@ (800396c <cliCan+0x700>)
 80036ea:	4619      	mov	r1, r3
 80036ec:	48a0      	ldr	r0, [pc, #640]	@ (8003970 <cliCan+0x704>)
 80036ee:	f7fe fb8b 	bl	8001e08 <cliPrintf>
		ret = true;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 2 && args->isStr(0, "read_test")) {
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f040 808f 	bne.w	8003820 <cliCan+0x5b4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	499b      	ldr	r1, [pc, #620]	@ (8003974 <cliCan+0x708>)
 8003708:	2000      	movs	r0, #0
 800370a:	4798      	blx	r3
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8086 	beq.w	8003820 <cliCan+0x5b4>
		uint32_t index = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		uint8_t ch;

		ch = constrain(args->getData(1), 0, CAN_MAX_CH - 1);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2001      	movs	r0, #1
 8003720:	4798      	blx	r3
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	db0f      	blt.n	8003748 <cliCan+0x4dc>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2001      	movs	r0, #1
 800372e:	4798      	blx	r3
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	dc06      	bgt.n	8003744 <cliCan+0x4d8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2001      	movs	r0, #1
 800373c:	4798      	blx	r3
 800373e:	4603      	mov	r3, r0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e002      	b.n	800374a <cliCan+0x4de>
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <cliCan+0x4de>
 8003748:	2300      	movs	r3, #0
 800374a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

		while (cliKeepLoop()) {
 800374e:	e05f      	b.n	8003810 <cliCan+0x5a4>
			if (canMsgAvailable(ch)) {
 8003750:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff f861 	bl	800281c <canMsgAvailable>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d057      	beq.n	8003810 <cliCan+0x5a4>
				can_msg_t msg;

				canMsgRead(ch, &msg);
 8003760:	f107 0208 	add.w	r2, r7, #8
 8003764:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f922 	bl	80029b4 <canMsgRead>

				index %= 1000;
 8003770:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003774:	4a80      	ldr	r2, [pc, #512]	@ (8003978 <cliCan+0x70c>)
 8003776:	fba2 1203 	umull	r1, r2, r2, r3
 800377a:	0992      	lsrs	r2, r2, #6
 800377c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003780:	fb01 f202 	mul.w	r2, r1, r2
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				cliPrintf("ch %d %03d(R) <- id ", ch, index++);
 800378a:	f897 1070 	ldrb.w	r1, [r7, #112]	@ 0x70
 800378e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003798:	461a      	mov	r2, r3
 800379a:	4878      	ldr	r0, [pc, #480]	@ (800397c <cliCan+0x710>)
 800379c:	f7fe fb34 	bl	8001e08 <cliPrintf>
				if (msg.frame != CAN_CLASSIC) {
 80037a0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <cliCan+0x544>
					cliPrintf("fd ");
 80037a8:	4875      	ldr	r0, [pc, #468]	@ (8003980 <cliCan+0x714>)
 80037aa:	f7fe fb2d 	bl	8001e08 <cliPrintf>
 80037ae:	e002      	b.n	80037b6 <cliCan+0x54a>
				} else {
					cliPrintf("   ");
 80037b0:	4874      	ldr	r0, [pc, #464]	@ (8003984 <cliCan+0x718>)
 80037b2:	f7fe fb29 	bl	8001e08 <cliPrintf>
				}
				if (msg.id_type == CAN_STD) {
 80037b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <cliCan+0x55a>
					cliPrintf("std ");
 80037be:	4872      	ldr	r0, [pc, #456]	@ (8003988 <cliCan+0x71c>)
 80037c0:	f7fe fb22 	bl	8001e08 <cliPrintf>
 80037c4:	e002      	b.n	80037cc <cliCan+0x560>
				} else {
					cliPrintf("ext ");
 80037c6:	4871      	ldr	r0, [pc, #452]	@ (800398c <cliCan+0x720>)
 80037c8:	f7fe fb1e 	bl	8001e08 <cliPrintf>
				}
				cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	89ba      	ldrh	r2, [r7, #12]
 80037d0:	4619      	mov	r1, r3
 80037d2:	486f      	ldr	r0, [pc, #444]	@ (8003990 <cliCan+0x724>)
 80037d4:	f7fe fb18 	bl	8001e08 <cliPrintf>
				for (int i = 0; i < msg.length; i++) {
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037de:	e00e      	b.n	80037fe <cliCan+0x592>
					cliPrintf("0x%02X ", msg.data[i]);
 80037e0:	f107 020e 	add.w	r2, r7, #14
 80037e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	4869      	ldr	r0, [pc, #420]	@ (8003994 <cliCan+0x728>)
 80037f0:	f7fe fb0a 	bl	8001e08 <cliPrintf>
				for (int i = 0; i < msg.length; i++) {
 80037f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037fe:	89bb      	ldrh	r3, [r7, #12]
 8003800:	461a      	mov	r2, r3
 8003802:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003806:	4293      	cmp	r3, r2
 8003808:	dbea      	blt.n	80037e0 <cliCan+0x574>
				}
				cliPrintf("\n");
 800380a:	4863      	ldr	r0, [pc, #396]	@ (8003998 <cliCan+0x72c>)
 800380c:	f7fe fafc 	bl	8001e08 <cliPrintf>
		while (cliKeepLoop()) {
 8003810:	f7fe fbf4 	bl	8001ffc <cliKeepLoop>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d19a      	bne.n	8003750 <cliCan+0x4e4>
			}
		}
		ret = true;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	if (args->argc == 3 && args->isStr(0, "send_test")) {
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	2b03      	cmp	r3, #3
 8003826:	f040 81a6 	bne.w	8003b76 <cliCan+0x90a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	495b      	ldr	r1, [pc, #364]	@ (800399c <cliCan+0x730>)
 8003830:	2000      	movs	r0, #0
 8003832:	4798      	blx	r3
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 819d 	beq.w	8003b76 <cliCan+0x90a>
		uint32_t pre_time;
		uint32_t index = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		uint32_t err_code;
		uint8_t ch;
		CanFrame_t frame;

		ch = constrain(args->getData(1), 0, CAN_MAX_CH - 1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2001      	movs	r0, #1
 8003848:	4798      	blx	r3
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	db0f      	blt.n	8003870 <cliCan+0x604>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2001      	movs	r0, #1
 8003856:	4798      	blx	r3
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	dc06      	bgt.n	800386c <cliCan+0x600>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2001      	movs	r0, #1
 8003864:	4798      	blx	r3
 8003866:	4603      	mov	r3, r0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e002      	b.n	8003872 <cliCan+0x606>
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <cliCan+0x606>
 8003870:	2300      	movs	r3, #0
 8003872:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		if (args->isStr(2, "can"))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	4949      	ldr	r1, [pc, #292]	@ (80039a0 <cliCan+0x734>)
 800387c:	2002      	movs	r0, #2
 800387e:	4798      	blx	r3
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <cliCan+0x622>
			frame = CAN_CLASSIC;
 8003886:	2300      	movs	r3, #0
 8003888:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800388c:	e002      	b.n	8003894 <cliCan+0x628>
		else
			frame = CAN_FD_BRS;
 800388e:	2302      	movs	r3, #2
 8003890:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		err_code = can_tbl[_DEF_CAN1].err_code;
 8003894:	4b43      	ldr	r3, [pc, #268]	@ (80039a4 <cliCan+0x738>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

		pre_time = millis();
 800389c:	f7fd fc2d 	bl	80010fa <millis>
 80038a0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		while (cliKeepLoop()) {
 80038a4:	e15e      	b.n	8003b64 <cliCan+0x8f8>
			can_msg_t msg;

			if (millis() - pre_time >= 1) {
 80038a6:	f7fd fc28 	bl	80010fa <millis>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038b0:	4293      	cmp	r3, r2
 80038b2:	f000 80c2 	beq.w	8003a3a <cliCan+0x7ce>
				pre_time = millis();
 80038b6:	f7fd fc20 	bl	80010fa <millis>
 80038ba:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

				msg.frame = frame;
 80038be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80038c2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
				msg.id_type = CAN_EXT;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				msg.dlc = CAN_DLC_2;
 80038cc:	2302      	movs	r3, #2
 80038ce:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
				msg.id = 0x314;
 80038d2:	f44f 7345 	mov.w	r3, #788	@ 0x314
 80038d6:	60bb      	str	r3, [r7, #8]
				msg.length = 2;
 80038d8:	2302      	movs	r3, #2
 80038da:	81bb      	strh	r3, [r7, #12]
				msg.data[0] = 1;
 80038dc:	2301      	movs	r3, #1
 80038de:	73bb      	strb	r3, [r7, #14]
				msg.data[1] = 2;
 80038e0:	2302      	movs	r3, #2
 80038e2:	73fb      	strb	r3, [r7, #15]
				if (canMsgWrite(ch, &msg, 10) > 0) {
 80038e4:	f107 0108 	add.w	r1, r7, #8
 80038e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80038ec:	220a      	movs	r2, #10
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe ffb2 	bl	8002858 <canMsgWrite>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d06c      	beq.n	80039d4 <cliCan+0x768>
					index %= 1000;
 80038fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <cliCan+0x70c>)
 8003900:	fba2 1203 	umull	r1, r2, r2, r3
 8003904:	0992      	lsrs	r2, r2, #6
 8003906:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800390a:	fb01 f202 	mul.w	r2, r1, r2
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					cliPrintf("ch %d %03d(T) -> id ", ch, index++);
 8003914:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8003918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003922:	461a      	mov	r2, r3
 8003924:	4820      	ldr	r0, [pc, #128]	@ (80039a8 <cliCan+0x73c>)
 8003926:	f7fe fa6f 	bl	8001e08 <cliPrintf>
					if (msg.frame != CAN_CLASSIC) {
 800392a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <cliCan+0x6ce>
						cliPrintf("fd ");
 8003932:	4813      	ldr	r0, [pc, #76]	@ (8003980 <cliCan+0x714>)
 8003934:	f7fe fa68 	bl	8001e08 <cliPrintf>
 8003938:	e002      	b.n	8003940 <cliCan+0x6d4>
					} else {
						cliPrintf("   ");
 800393a:	4812      	ldr	r0, [pc, #72]	@ (8003984 <cliCan+0x718>)
 800393c:	f7fe fa64 	bl	8001e08 <cliPrintf>
					}

					if (msg.id_type == CAN_STD) {
 8003940:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003944:	2b00      	cmp	r3, #0
 8003946:	d103      	bne.n	8003950 <cliCan+0x6e4>
						cliPrintf("std ");
 8003948:	480f      	ldr	r0, [pc, #60]	@ (8003988 <cliCan+0x71c>)
 800394a:	f7fe fa5d 	bl	8001e08 <cliPrintf>
 800394e:	e002      	b.n	8003956 <cliCan+0x6ea>
					} else {
						cliPrintf("ext ");
 8003950:	480e      	ldr	r0, [pc, #56]	@ (800398c <cliCan+0x720>)
 8003952:	f7fe fa59 	bl	8001e08 <cliPrintf>
					}
					cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	89ba      	ldrh	r2, [r7, #12]
 800395a:	4619      	mov	r1, r3
 800395c:	480c      	ldr	r0, [pc, #48]	@ (8003990 <cliCan+0x724>)
 800395e:	f7fe fa53 	bl	8001e08 <cliPrintf>
					for (int i = 0; i < msg.length; i++) {
 8003962:	2300      	movs	r3, #0
 8003964:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003966:	e02d      	b.n	80039c4 <cliCan+0x758>
 8003968:	0800cfd0 	.word	0x0800cfd0
 800396c:	0800cfd8 	.word	0x0800cfd8
 8003970:	0800cfe0 	.word	0x0800cfe0
 8003974:	0800cff0 	.word	0x0800cff0
 8003978:	10624dd3 	.word	0x10624dd3
 800397c:	0800cffc 	.word	0x0800cffc
 8003980:	0800d014 	.word	0x0800d014
 8003984:	0800d018 	.word	0x0800d018
 8003988:	0800d01c 	.word	0x0800d01c
 800398c:	0800d024 	.word	0x0800d024
 8003990:	0800d02c 	.word	0x0800d02c
 8003994:	0800d040 	.word	0x0800d040
 8003998:	0800ce80 	.word	0x0800ce80
 800399c:	0800d048 	.word	0x0800d048
 80039a0:	0800cc78 	.word	0x0800cc78
 80039a4:	200010f0 	.word	0x200010f0
 80039a8:	0800d054 	.word	0x0800d054
						cliPrintf("0x%02X ", msg.data[i]);
 80039ac:	f107 020e 	add.w	r2, r7, #14
 80039b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039b2:	4413      	add	r3, r2
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	4619      	mov	r1, r3
 80039b8:	4880      	ldr	r0, [pc, #512]	@ (8003bbc <cliCan+0x950>)
 80039ba:	f7fe fa25 	bl	8001e08 <cliPrintf>
					for (int i = 0; i < msg.length; i++) {
 80039be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039c0:	3301      	adds	r3, #1
 80039c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039c4:	89bb      	ldrh	r3, [r7, #12]
 80039c6:	461a      	mov	r2, r3
 80039c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ca:	4293      	cmp	r3, r2
 80039cc:	dbee      	blt.n	80039ac <cliCan+0x740>
					}
					cliPrintf("\n");
 80039ce:	487c      	ldr	r0, [pc, #496]	@ (8003bc0 <cliCan+0x954>)
 80039d0:	f7fe fa1a 	bl	8001e08 <cliPrintf>
				}

				if (canGetRxErrCount(ch) > 0 || canGetTxErrCount(ch) > 0) {
 80039d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff f80f 	bl	80029fc <canGetRxErrCount>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <cliCan+0x788>
 80039e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff f831 	bl	8002a50 <canGetTxErrCount>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <cliCan+0x7b0>
					cliPrintf("ch %d ErrCnt : %d, %d\n", ch,
 80039f4:	f897 406f 	ldrb.w	r4, [r7, #111]	@ 0x6f
							canGetRxErrCount(ch), canGetTxErrCount(ch));
 80039f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fffd 	bl	80029fc <canGetRxErrCount>
 8003a02:	4603      	mov	r3, r0
					cliPrintf("ch %d ErrCnt : %d, %d\n", ch,
 8003a04:	461d      	mov	r5, r3
							canGetRxErrCount(ch), canGetTxErrCount(ch));
 8003a06:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f820 	bl	8002a50 <canGetTxErrCount>
 8003a10:	4603      	mov	r3, r0
					cliPrintf("ch %d ErrCnt : %d, %d\n", ch,
 8003a12:	462a      	mov	r2, r5
 8003a14:	4621      	mov	r1, r4
 8003a16:	486b      	ldr	r0, [pc, #428]	@ (8003bc4 <cliCan+0x958>)
 8003a18:	f7fe f9f6 	bl	8001e08 <cliPrintf>
				}

				if (err_int_cnt > 0) {
 8003a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc8 <cliCan+0x95c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <cliCan+0x7ce>
					cliPrintf("ch %d Cnt : %d\n", ch, err_int_cnt);
 8003a24:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a28:	4a67      	ldr	r2, [pc, #412]	@ (8003bc8 <cliCan+0x95c>)
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4867      	ldr	r0, [pc, #412]	@ (8003bcc <cliCan+0x960>)
 8003a30:	f7fe f9ea 	bl	8001e08 <cliPrintf>
					err_int_cnt = 0;
 8003a34:	4b64      	ldr	r3, [pc, #400]	@ (8003bc8 <cliCan+0x95c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
				}
			}

			if (can_tbl[ch].err_code != err_code) {
 8003a3a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a3e:	4a64      	ldr	r2, [pc, #400]	@ (8003bd0 <cliCan+0x964>)
 8003a40:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d020      	beq.n	8003a98 <cliCan+0x82c>
				cliPrintf("ch %d ErrCode : 0x%X\n", ch, can_tbl[ch].err_code);
 8003a56:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8003a5a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd0 <cliCan+0x964>)
 8003a60:	f44f 601d 	mov.w	r0, #2512	@ 0x9d0
 8003a64:	fb00 f303 	mul.w	r3, r0, r3
 8003a68:	4413      	add	r3, r2
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4858      	ldr	r0, [pc, #352]	@ (8003bd4 <cliCan+0x968>)
 8003a72:	f7fe f9c9 	bl	8001e08 <cliPrintf>
				canErrPrint(ch);
 8003a76:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f992 	bl	8002da4 <canErrPrint>
				err_code = can_tbl[ch].err_code;
 8003a80:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003a84:	4a52      	ldr	r2, [pc, #328]	@ (8003bd0 <cliCan+0x964>)
 8003a86:	f44f 611d 	mov.w	r1, #2512	@ 0x9d0
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	3304      	adds	r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			}

			if (canUpdate()) {
 8003a98:	f7ff f874 	bl	8002b84 <canUpdate>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <cliCan+0x842>
				cliPrintf("ch %d BusOff Recovery\n", ch);
 8003aa2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	484b      	ldr	r0, [pc, #300]	@ (8003bd8 <cliCan+0x96c>)
 8003aaa:	f7fe f9ad 	bl	8001e08 <cliPrintf>
			}

			if (canMsgAvailable(ch)) {
 8003aae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe feb2 	bl	800281c <canMsgAvailable>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d052      	beq.n	8003b64 <cliCan+0x8f8>
				canMsgRead(ch, &msg);
 8003abe:	f107 0208 	add.w	r2, r7, #8
 8003ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe ff73 	bl	80029b4 <canMsgRead>

				index %= 1000;
 8003ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ad2:	4a42      	ldr	r2, [pc, #264]	@ (8003bdc <cliCan+0x970>)
 8003ad4:	fba2 1203 	umull	r1, r2, r2, r3
 8003ad8:	0992      	lsrs	r2, r2, #6
 8003ada:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ade:	fb01 f202 	mul.w	r2, r1, r2
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				cliPrintf("ch %d %03d(R) <- id ", ch, index++);
 8003ae8:	f897 106f 	ldrb.w	r1, [r7, #111]	@ 0x6f
 8003aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003af6:	461a      	mov	r2, r3
 8003af8:	4839      	ldr	r0, [pc, #228]	@ (8003be0 <cliCan+0x974>)
 8003afa:	f7fe f985 	bl	8001e08 <cliPrintf>
				if (msg.frame != CAN_CLASSIC) {
 8003afe:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <cliCan+0x8a2>
					cliPrintf("fd ");
 8003b06:	4837      	ldr	r0, [pc, #220]	@ (8003be4 <cliCan+0x978>)
 8003b08:	f7fe f97e 	bl	8001e08 <cliPrintf>
 8003b0c:	e002      	b.n	8003b14 <cliCan+0x8a8>
				} else {
					cliPrintf("   ");
 8003b0e:	4836      	ldr	r0, [pc, #216]	@ (8003be8 <cliCan+0x97c>)
 8003b10:	f7fe f97a 	bl	8001e08 <cliPrintf>
				}
				if (msg.id_type == CAN_STD) {
 8003b14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d103      	bne.n	8003b24 <cliCan+0x8b8>
					cliPrintf("std ");
 8003b1c:	4833      	ldr	r0, [pc, #204]	@ (8003bec <cliCan+0x980>)
 8003b1e:	f7fe f973 	bl	8001e08 <cliPrintf>
 8003b22:	e002      	b.n	8003b2a <cliCan+0x8be>
				} else {
					cliPrintf("ext ");
 8003b24:	4832      	ldr	r0, [pc, #200]	@ (8003bf0 <cliCan+0x984>)
 8003b26:	f7fe f96f 	bl	8001e08 <cliPrintf>
				}
				cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	89ba      	ldrh	r2, [r7, #12]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4830      	ldr	r0, [pc, #192]	@ (8003bf4 <cliCan+0x988>)
 8003b32:	f7fe f969 	bl	8001e08 <cliPrintf>
				for (int i = 0; i < msg.length; i++) {
 8003b36:	2300      	movs	r3, #0
 8003b38:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b3a:	e00b      	b.n	8003b54 <cliCan+0x8e8>
					cliPrintf("0x%02X ", msg.data[i]);
 8003b3c:	f107 020e 	add.w	r2, r7, #14
 8003b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b42:	4413      	add	r3, r2
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	4619      	mov	r1, r3
 8003b48:	481c      	ldr	r0, [pc, #112]	@ (8003bbc <cliCan+0x950>)
 8003b4a:	f7fe f95d 	bl	8001e08 <cliPrintf>
				for (int i = 0; i < msg.length; i++) {
 8003b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b50:	3301      	adds	r3, #1
 8003b52:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b54:	89bb      	ldrh	r3, [r7, #12]
 8003b56:	461a      	mov	r2, r3
 8003b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	dbee      	blt.n	8003b3c <cliCan+0x8d0>
				}
				cliPrintf("\n");
 8003b5e:	4818      	ldr	r0, [pc, #96]	@ (8003bc0 <cliCan+0x954>)
 8003b60:	f7fe f952 	bl	8001e08 <cliPrintf>
		while (cliKeepLoop()) {
 8003b64:	f7fe fa4a 	bl	8001ffc <cliKeepLoop>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f47f ae9b 	bne.w	80038a6 <cliCan+0x63a>
			}
		}
		ret = true;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	}

	canUnLock();
 8003b76:	f7fe fc19 	bl	80023ac <canUnLock>

	if (ret == false) {
 8003b7a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003b7e:	f083 0301 	eor.w	r3, r3, #1
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d014      	beq.n	8003bb2 <cliCan+0x946>
		cliPrintf("can info\n");
 8003b88:	481b      	ldr	r0, [pc, #108]	@ (8003bf8 <cliCan+0x98c>)
 8003b8a:	f7fe f93d 	bl	8001e08 <cliPrintf>
		cliPrintf("can open\n");
 8003b8e:	481b      	ldr	r0, [pc, #108]	@ (8003bfc <cliCan+0x990>)
 8003b90:	f7fe f93a 	bl	8001e08 <cliPrintf>
		cliPrintf("can open ch[0~%d] mode frame baud fd_baud\n",
 8003b94:	2100      	movs	r1, #0
 8003b96:	481a      	ldr	r0, [pc, #104]	@ (8003c00 <cliCan+0x994>)
 8003b98:	f7fe f936 	bl	8001e08 <cliPrintf>
		CAN_MAX_CH - 1);
		cliPrintf("can open test\n");
 8003b9c:	4819      	ldr	r0, [pc, #100]	@ (8003c04 <cliCan+0x998>)
 8003b9e:	f7fe f933 	bl	8001e08 <cliPrintf>
		cliPrintf("can read_test ch[0~%d]\n", CAN_MAX_CH - 1);
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4818      	ldr	r0, [pc, #96]	@ (8003c08 <cliCan+0x99c>)
 8003ba6:	f7fe f92f 	bl	8001e08 <cliPrintf>
		cliPrintf("can send_test ch[0~%d] can:fd\n", CAN_MAX_CH - 1);
 8003baa:	2100      	movs	r1, #0
 8003bac:	4817      	ldr	r0, [pc, #92]	@ (8003c0c <cliCan+0x9a0>)
 8003bae:	f7fe f92b 	bl	8001e08 <cliPrintf>
	}
}
 8003bb2:	bf00      	nop
 8003bb4:	37b0      	adds	r7, #176	@ 0xb0
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	0800d040 	.word	0x0800d040
 8003bc0:	0800ce80 	.word	0x0800ce80
 8003bc4:	0800d06c 	.word	0x0800d06c
 8003bc8:	20001ac0 	.word	0x20001ac0
 8003bcc:	0800d084 	.word	0x0800d084
 8003bd0:	200010f0 	.word	0x200010f0
 8003bd4:	0800d094 	.word	0x0800d094
 8003bd8:	0800d0ac 	.word	0x0800d0ac
 8003bdc:	10624dd3 	.word	0x10624dd3
 8003be0:	0800cffc 	.word	0x0800cffc
 8003be4:	0800d014 	.word	0x0800d014
 8003be8:	0800d018 	.word	0x0800d018
 8003bec:	0800d01c 	.word	0x0800d01c
 8003bf0:	0800d024 	.word	0x0800d024
 8003bf4:	0800d02c 	.word	0x0800d02c
 8003bf8:	0800d0c4 	.word	0x0800d0c4
 8003bfc:	0800d0d0 	.word	0x0800d0d0
 8003c00:	0800d0dc 	.word	0x0800d0dc
 8003c04:	0800d108 	.word	0x0800d108
 8003c08:	0800d118 	.word	0x0800d118
 8003c0c:	0800d130 	.word	0x0800d130

08003c10 <gpioInit>:
#endif



bool gpioInit(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
  bool ret = true;
 8003c16:	2301      	movs	r3, #1
 8003c18:	71fb      	strb	r3, [r7, #7]

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8003c1a:	4904      	ldr	r1, [pc, #16]	@ (8003c2c <gpioInit+0x1c>)
 8003c1c:	4804      	ldr	r0, [pc, #16]	@ (8003c30 <gpioInit+0x20>)
 8003c1e:	f7fe fa03 	bl	8002028 <cliAdd>
#endif

  return ret;
 8003c22:	79fb      	ldrb	r3, [r7, #7]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	08003d15 	.word	0x08003d15
 8003c30:	0800d234 	.word	0x0800d234

08003c34 <gpioPinWrite>:

  return ret;
}

void gpioPinWrite(uint8_t ch, bool value)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	460a      	mov	r2, r1
 8003c3e:	71fb      	strb	r3, [r7, #7]
 8003c40:	4613      	mov	r3, r2
 8003c42:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d12e      	bne.n	8003ca8 <gpioPinWrite+0x74>
  {
    return;
  }

  if (value)
 8003c4a:	79bb      	ldrb	r3, [r7, #6]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <gpioPinWrite+0x48>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	4a17      	ldr	r2, [pc, #92]	@ (8003cb0 <gpioPinWrite+0x7c>)
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4413      	add	r3, r2
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	@ (8003cb0 <gpioPinWrite+0x7c>)
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	4413      	add	r3, r2
 8003c62:	3304      	adds	r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	b299      	uxth	r1, r3
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	4a11      	ldr	r2, [pc, #68]	@ (8003cb0 <gpioPinWrite+0x7c>)
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	3309      	adds	r3, #9
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	f003 fc59 	bl	800752c <HAL_GPIO_WritePin>
 8003c7a:	e016      	b.n	8003caa <gpioPinWrite+0x76>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003cb0 <gpioPinWrite+0x7c>)
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	4413      	add	r3, r2
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	4a09      	ldr	r2, [pc, #36]	@ (8003cb0 <gpioPinWrite+0x7c>)
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3304      	adds	r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	b299      	uxth	r1, r3
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	4a06      	ldr	r2, [pc, #24]	@ (8003cb0 <gpioPinWrite+0x7c>)
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	4413      	add	r3, r2
 8003c9c:	330a      	adds	r3, #10
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f003 fc43 	bl	800752c <HAL_GPIO_WritePin>
 8003ca6:	e000      	b.n	8003caa <gpioPinWrite+0x76>
    return;
 8003ca8:	bf00      	nop
  }
}
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	0800d664 	.word	0x0800d664

08003cb4 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <gpioPinRead+0x18>
  {
    return false;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e01c      	b.n	8003d06 <gpioPinRead+0x52>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	4a10      	ldr	r2, [pc, #64]	@ (8003d10 <gpioPinRead+0x5c>)
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	4413      	add	r3, r2
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	490d      	ldr	r1, [pc, #52]	@ (8003d10 <gpioPinRead+0x5c>)
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	440b      	add	r3, r1
 8003cde:	3304      	adds	r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f003 fc08 	bl	80074fc <HAL_GPIO_ReadPin>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4619      	mov	r1, r3
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	4a07      	ldr	r2, [pc, #28]	@ (8003d10 <gpioPinRead+0x5c>)
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3309      	adds	r3, #9
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	4299      	cmp	r1, r3
 8003cfe:	d101      	bne.n	8003d04 <gpioPinRead+0x50>
  {
    ret = true;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	0800d664 	.word	0x0800d664

08003d14 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d11e      	bne.n	8003d66 <cliGpio+0x52>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	495a      	ldr	r1, [pc, #360]	@ (8003e98 <cliGpio+0x184>)
 8003d2e:	2000      	movs	r0, #0
 8003d30:	4798      	blx	r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d016      	beq.n	8003d66 <cliGpio+0x52>
  {
    for (int i=0; i<GPIO_MAX_CH; i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e00e      	b.n	8003d5c <cliGpio+0x48>
    {
      cliPrintf("%d %-16s - %d\n", i, gpio_tbl[i].p_name, gpioPinRead(i));
 8003d3e:	4c57      	ldr	r4, [pc, #348]	@ (8003e9c <cliGpio+0x188>)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ffb5 	bl	8003cb4 <gpioPinRead>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	6939      	ldr	r1, [r7, #16]
 8003d50:	4853      	ldr	r0, [pc, #332]	@ (8003ea0 <cliGpio+0x18c>)
 8003d52:	f7fe f859 	bl	8001e08 <cliPrintf>
    for (int i=0; i<GPIO_MAX_CH; i++)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	dded      	ble.n	8003d3e <cliGpio+0x2a>
    }
    ret = true;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 1 && args->isStr(0, "show") == true)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d128      	bne.n	8003dc0 <cliGpio+0xac>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	494c      	ldr	r1, [pc, #304]	@ (8003ea4 <cliGpio+0x190>)
 8003d74:	2000      	movs	r0, #0
 8003d76:	4798      	blx	r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d020      	beq.n	8003dc0 <cliGpio+0xac>
  {
    while(cliKeepLoop())
 8003d7e:	e018      	b.n	8003db2 <cliGpio+0x9e>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e00c      	b.n	8003da0 <cliGpio+0x8c>
      {
        cliPrintf("%d", gpioPinRead(i));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff92 	bl	8003cb4 <gpioPinRead>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4619      	mov	r1, r3
 8003d94:	4844      	ldr	r0, [pc, #272]	@ (8003ea8 <cliGpio+0x194>)
 8003d96:	f7fe f837 	bl	8001e08 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	ddef      	ble.n	8003d86 <cliGpio+0x72>
      }
      cliPrintf("\n");
 8003da6:	4841      	ldr	r0, [pc, #260]	@ (8003eac <cliGpio+0x198>)
 8003da8:	f7fe f82e 	bl	8001e08 <cliPrintf>
      delay(100);
 8003dac:	2064      	movs	r0, #100	@ 0x64
 8003dae:	f7fd f999 	bl	80010e4 <delay>
    while(cliKeepLoop())
 8003db2:	f7fe f923 	bl	8001ffc <cliKeepLoop>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e1      	bne.n	8003d80 <cliGpio+0x6c>
    }
    ret = true;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d123      	bne.n	8003e10 <cliGpio+0xfc>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	4938      	ldr	r1, [pc, #224]	@ (8003eb0 <cliGpio+0x19c>)
 8003dce:	2000      	movs	r0, #0
 8003dd0:	4798      	blx	r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <cliGpio+0xfc>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2001      	movs	r0, #1
 8003dde:	4798      	blx	r3
 8003de0:	4603      	mov	r3, r0
 8003de2:	72fb      	strb	r3, [r7, #11]

    while(cliKeepLoop())
 8003de4:	e00d      	b.n	8003e02 <cliGpio+0xee>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8003de6:	7afc      	ldrb	r4, [r7, #11]
 8003de8:	7afb      	ldrb	r3, [r7, #11]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff62 	bl	8003cb4 <gpioPinRead>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	4621      	mov	r1, r4
 8003df6:	482f      	ldr	r0, [pc, #188]	@ (8003eb4 <cliGpio+0x1a0>)
 8003df8:	f7fe f806 	bl	8001e08 <cliPrintf>
      delay(100);
 8003dfc:	2064      	movs	r0, #100	@ 0x64
 8003dfe:	f7fd f971 	bl	80010e4 <delay>
    while(cliKeepLoop())
 8003e02:	f7fe f8fb 	bl	8001ffc <cliKeepLoop>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1ec      	bne.n	8003de6 <cliGpio+0xd2>
    }

    ret = true;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d126      	bne.n	8003e66 <cliGpio+0x152>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	4926      	ldr	r1, [pc, #152]	@ (8003eb8 <cliGpio+0x1a4>)
 8003e1e:	2000      	movs	r0, #0
 8003e20:	4798      	blx	r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01e      	beq.n	8003e66 <cliGpio+0x152>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	4798      	blx	r3
 8003e30:	4603      	mov	r3, r0
 8003e32:	72bb      	strb	r3, [r7, #10]
    data = (uint8_t)args->getData(2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2002      	movs	r0, #2
 8003e3a:	4798      	blx	r3
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	727b      	strb	r3, [r7, #9]

    gpioPinWrite(ch, data);
 8003e40:	7a7b      	ldrb	r3, [r7, #9]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	7abb      	ldrb	r3, [r7, #10]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff feef 	bl	8003c34 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8003e56:	7abb      	ldrb	r3, [r7, #10]
 8003e58:	7a7a      	ldrb	r2, [r7, #9]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4817      	ldr	r0, [pc, #92]	@ (8003ebc <cliGpio+0x1a8>)
 8003e5e:	f7fd ffd3 	bl	8001e08 <cliPrintf>
    ret = true;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	f083 0301 	eor.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <cliGpio+0x17a>
  {
    cliPrintf("gpio info\n");
 8003e72:	4813      	ldr	r0, [pc, #76]	@ (8003ec0 <cliGpio+0x1ac>)
 8003e74:	f7fd ffc8 	bl	8001e08 <cliPrintf>
    cliPrintf("gpio show\n");
 8003e78:	4812      	ldr	r0, [pc, #72]	@ (8003ec4 <cliGpio+0x1b0>)
 8003e7a:	f7fd ffc5 	bl	8001e08 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4811      	ldr	r0, [pc, #68]	@ (8003ec8 <cliGpio+0x1b4>)
 8003e82:	f7fd ffc1 	bl	8001e08 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8003e86:	2100      	movs	r1, #0
 8003e88:	4810      	ldr	r0, [pc, #64]	@ (8003ecc <cliGpio+0x1b8>)
 8003e8a:	f7fd ffbd 	bl	8001e08 <cliPrintf>
  }
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd90      	pop	{r4, r7, pc}
 8003e96:	bf00      	nop
 8003e98:	0800d23c 	.word	0x0800d23c
 8003e9c:	0800d228 	.word	0x0800d228
 8003ea0:	0800d244 	.word	0x0800d244
 8003ea4:	0800d254 	.word	0x0800d254
 8003ea8:	0800d25c 	.word	0x0800d25c
 8003eac:	0800d260 	.word	0x0800d260
 8003eb0:	0800d264 	.word	0x0800d264
 8003eb4:	0800d26c 	.word	0x0800d26c
 8003eb8:	0800d280 	.word	0x0800d280
 8003ebc:	0800d288 	.word	0x0800d288
 8003ec0:	0800d29c 	.word	0x0800d29c
 8003ec4:	0800d2a8 	.word	0x0800d2a8
 8003ec8:	0800d2b4 	.word	0x0800d2b4
 8003ecc:	0800d2c8 	.word	0x0800d2c8

08003ed0 <ledInit>:
#endif



bool ledInit(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8003ed4:	4903      	ldr	r1, [pc, #12]	@ (8003ee4 <ledInit+0x14>)
 8003ed6:	4804      	ldr	r0, [pc, #16]	@ (8003ee8 <ledInit+0x18>)
 8003ed8:	f7fe f8a6 	bl	8002028 <cliAdd>
#endif
  return true;
 8003edc:	2301      	movs	r3, #1
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	08003fa5 	.word	0x08003fa5
 8003ee8:	0800d2e4 	.word	0x0800d2e4

08003eec <ledOn>:

void ledOn(uint8_t ch)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d811      	bhi.n	8003f20 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	4a0a      	ldr	r2, [pc, #40]	@ (8003f28 <ledOn+0x3c>)
 8003f00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	4a08      	ldr	r2, [pc, #32]	@ (8003f28 <ledOn+0x3c>)
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	8899      	ldrh	r1, [r3, #4]
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	4a05      	ldr	r2, [pc, #20]	@ (8003f28 <ledOn+0x3c>)
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	799b      	ldrb	r3, [r3, #6]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f003 fb07 	bl	800752c <HAL_GPIO_WritePin>
 8003f1e:	e000      	b.n	8003f22 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8003f20:	bf00      	nop
}
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	0800d674 	.word	0x0800d674

08003f2c <ledOff>:

void ledOff(uint8_t ch)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d811      	bhi.n	8003f60 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f68 <ledOff+0x3c>)
 8003f40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	4a08      	ldr	r2, [pc, #32]	@ (8003f68 <ledOff+0x3c>)
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	8899      	ldrh	r1, [r3, #4]
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	4a05      	ldr	r2, [pc, #20]	@ (8003f68 <ledOff+0x3c>)
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	79db      	ldrb	r3, [r3, #7]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f003 fae7 	bl	800752c <HAL_GPIO_WritePin>
 8003f5e:	e000      	b.n	8003f62 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8003f60:	bf00      	nop
}
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	0800d674 	.word	0x0800d674

08003f6c <ledToggle>:

void ledToggle(uint8_t ch)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d80d      	bhi.n	8003f98 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <ledToggle+0x34>)
 8003f80:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	4906      	ldr	r1, [pc, #24]	@ (8003fa0 <ledToggle+0x34>)
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	889b      	ldrh	r3, [r3, #4]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f003 fae3 	bl	800755c <HAL_GPIO_TogglePin>
 8003f96:	e000      	b.n	8003f9a <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8003f98:	bf00      	nop
}
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	0800d674 	.word	0x0800d674

08003fa4 <cliLed>:

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003fac:	2300      	movs	r3, #0
 8003fae:	75fb      	strb	r3, [r7, #23]

  if (args->argc == 1 && args->isStr(0, "info"))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d118      	bne.n	8003fea <cliLed+0x46>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	492a      	ldr	r1, [pc, #168]	@ (8004068 <cliLed+0xc4>)
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	4798      	blx	r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <cliLed+0x46>
  {
    for (int i=0; i<LED_MAX_CH; i++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e008      	b.n	8003fe0 <cliLed+0x3c>
    {
      cliPrintf("_DEF_LED%d\n", i+1);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4825      	ldr	r0, [pc, #148]	@ (800406c <cliLed+0xc8>)
 8003fd6:	f7fd ff17 	bl	8001e08 <cliPrintf>
    for (int i=0; i<LED_MAX_CH; i++)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	ddf3      	ble.n	8003fce <cliLed+0x2a>
    }
    ret = true;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 1 && args->isStr(0, "test"))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d129      	bne.n	8004046 <cliLed+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	491e      	ldr	r1, [pc, #120]	@ (8004070 <cliLed+0xcc>)
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	4798      	blx	r3
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d021      	beq.n	8004046 <cliLed+0xa2>
  {
	uint8_t index = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
	while (cliKeepLoop()) {
 8004006:	e017      	b.n	8004038 <cliLed+0x94>
		ledToggle(index);
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ffae 	bl	8003f6c <ledToggle>
		delay(100);
 8004010:	2064      	movs	r0, #100	@ 0x64
 8004012:	f7fd f867 	bl	80010e4 <delay>
		ledToggle(index);
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ffa7 	bl	8003f6c <ledToggle>
		index = (index+1) % LED_MAX_CH;
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <cliLed+0xd0>)
 8004024:	fb83 3102 	smull	r3, r1, r3, r2
 8004028:	17d3      	asrs	r3, r2, #31
 800402a:	1ac9      	subs	r1, r1, r3
 800402c:	460b      	mov	r3, r1
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	440b      	add	r3, r1
 8004032:	1ad1      	subs	r1, r2, r3
 8004034:	460b      	mov	r3, r1
 8004036:	73fb      	strb	r3, [r7, #15]
	while (cliKeepLoop()) {
 8004038:	f7fd ffe0 	bl	8001ffc <cliKeepLoop>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e2      	bne.n	8004008 <cliLed+0x64>

	}
	ret = true;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
  }

  if (ret == false)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	f083 0301 	eor.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <cliLed+0xba>
  {
    cliPrintf("led info\n");
 8004052:	4809      	ldr	r0, [pc, #36]	@ (8004078 <cliLed+0xd4>)
 8004054:	f7fd fed8 	bl	8001e08 <cliPrintf>
    cliPrintf("led test\n");
 8004058:	4808      	ldr	r0, [pc, #32]	@ (800407c <cliLed+0xd8>)
 800405a:	f7fd fed5 	bl	8001e08 <cliPrintf>
  }
}
 800405e:	bf00      	nop
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	0800d2e8 	.word	0x0800d2e8
 800406c:	0800d2f0 	.word	0x0800d2f0
 8004070:	0800d2fc 	.word	0x0800d2fc
 8004074:	55555556 	.word	0x55555556
 8004078:	0800d304 	.word	0x0800d304
 800407c:	0800d310 	.word	0x0800d310

08004080 <logInit>:




bool logInit(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
#ifdef _USE_HW_RTOS
  mutex_lock = xSemaphoreCreateMutex();
#endif

  log_buf_boot.line_index     = 0;
 8004084:	4b14      	ldr	r3, [pc, #80]	@ (80040d8 <logInit+0x58>)
 8004086:	2200      	movs	r2, #0
 8004088:	801a      	strh	r2, [r3, #0]
  log_buf_boot.buf_length     = 0;
 800408a:	4b13      	ldr	r3, [pc, #76]	@ (80040d8 <logInit+0x58>)
 800408c:	2200      	movs	r2, #0
 800408e:	805a      	strh	r2, [r3, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 8004090:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <logInit+0x58>)
 8004092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004096:	809a      	strh	r2, [r3, #4]
  log_buf_boot.buf_index      = 0;
 8004098:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <logInit+0x58>)
 800409a:	2200      	movs	r2, #0
 800409c:	80da      	strh	r2, [r3, #6]
  log_buf_boot.buf            = buf_boot;
 800409e:	4b0e      	ldr	r3, [pc, #56]	@ (80040d8 <logInit+0x58>)
 80040a0:	4a0e      	ldr	r2, [pc, #56]	@ (80040dc <logInit+0x5c>)
 80040a2:	609a      	str	r2, [r3, #8]


  log_buf_list.line_index     = 0;
 80040a4:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <logInit+0x60>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	801a      	strh	r2, [r3, #0]
  log_buf_list.buf_length     = 0;
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <logInit+0x60>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	805a      	strh	r2, [r3, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <logInit+0x60>)
 80040b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040b6:	809a      	strh	r2, [r3, #4]
  log_buf_list.buf_index      = 0;
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <logInit+0x60>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	80da      	strh	r2, [r3, #6]
  log_buf_list.buf            = buf_list;
 80040be:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <logInit+0x60>)
 80040c0:	4a08      	ldr	r2, [pc, #32]	@ (80040e4 <logInit+0x64>)
 80040c2:	609a      	str	r2, [r3, #8]


  is_init = true;
 80040c4:	4b08      	ldr	r3, [pc, #32]	@ (80040e8 <logInit+0x68>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("log", cliCmd);
 80040ca:	4908      	ldr	r1, [pc, #32]	@ (80040ec <logInit+0x6c>)
 80040cc:	4808      	ldr	r0, [pc, #32]	@ (80040f0 <logInit+0x70>)
 80040ce:	f7fd ffab 	bl	8002028 <cliAdd>
#endif

  return true;
 80040d2:	2301      	movs	r3, #1
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20001ac8 	.word	0x20001ac8
 80040dc:	20001ae0 	.word	0x20001ae0
 80040e0:	20001ad4 	.word	0x20001ad4
 80040e4:	200022e0 	.word	0x200022e0
 80040e8:	200032e0 	.word	0x200032e0
 80040ec:	080042c5 	.word	0x080042c5
 80040f0:	0800d31c 	.word	0x0800d31c

080040f4 <logBoot>:
{
  is_enable = false;
}

void logBoot(uint8_t enable)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  is_boot_log = enable;
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b04      	ldr	r3, [pc, #16]	@ (800411c <logBoot+0x28>)
 800410c:	701a      	strb	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	2000000c 	.word	0x2000000c

08004120 <logOpen>:

bool logOpen(uint8_t ch, uint32_t baud)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	71fb      	strb	r3, [r7, #7]
  log_ch   = ch;
 800412c:	4a0b      	ldr	r2, [pc, #44]	@ (800415c <logOpen+0x3c>)
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	7013      	strb	r3, [r2, #0]
  log_baud = baud;
 8004132:	4a0b      	ldr	r2, [pc, #44]	@ (8004160 <logOpen+0x40>)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6013      	str	r3, [r2, #0]
  is_open  = true;
 8004138:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <logOpen+0x44>)
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]

  is_open = uartOpen(ch, baud);
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	6839      	ldr	r1, [r7, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa10 	bl	8004568 <uartOpen>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	4b05      	ldr	r3, [pc, #20]	@ (8004164 <logOpen+0x44>)
 800414e:	701a      	strb	r2, [r3, #0]

  return is_open;
 8004150:	4b04      	ldr	r3, [pc, #16]	@ (8004164 <logOpen+0x44>)
 8004152:	781b      	ldrb	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	200032e2 	.word	0x200032e2
 8004160:	20000010 	.word	0x20000010
 8004164:	200032e1 	.word	0x200032e1

08004168 <logBufPrintf>:

bool logBufPrintf(log_buf_t *p_log, char *p_data, uint32_t length)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	@ 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t buf_last;
  uint8_t *p_buf;
  int buf_len;


  buf_last = p_log->buf_index + length + 8;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	88db      	ldrh	r3, [r3, #6]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	3308      	adds	r3, #8
 8004180:	61fb      	str	r3, [r7, #28]
  if (buf_last > p_log->buf_length_max)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	889b      	ldrh	r3, [r3, #4]
 8004186:	461a      	mov	r2, r3
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	4293      	cmp	r3, r2
 800418c:	d911      	bls.n	80041b2 <logBufPrintf+0x4a>
  {
    p_log->buf_index = 0;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	80da      	strh	r2, [r3, #6]
    buf_last = p_log->buf_index + length + 8;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88db      	ldrh	r3, [r3, #6]
 8004198:	461a      	mov	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	3308      	adds	r3, #8
 80041a0:	61fb      	str	r3, [r7, #28]

    if (buf_last > p_log->buf_length_max)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	889b      	ldrh	r3, [r3, #4]
 80041a6:	461a      	mov	r2, r3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <logBufPrintf+0x4a>
    {
      return false;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e033      	b.n	800421a <logBufPrintf+0xb2>
    }
  }

  p_buf = &p_log->buf[p_log->buf_index];
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	88d2      	ldrh	r2, [r2, #6]
 80041ba:	4413      	add	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]

  buf_len = snprintf((char *)p_buf, length + 8, "%04X\t%s", p_log->line_index, p_data);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f103 0108 	add.w	r1, r3, #8
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	4a14      	ldr	r2, [pc, #80]	@ (8004224 <logBufPrintf+0xbc>)
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	f006 fb16 	bl	800a804 <sniprintf>
 80041d8:	6178      	str	r0, [r7, #20]
  p_log->line_index++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	3301      	adds	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	801a      	strh	r2, [r3, #0]
  p_log->buf_index += buf_len;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88da      	ldrh	r2, [r3, #6]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	80da      	strh	r2, [r3, #6]


  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	885b      	ldrh	r3, [r3, #2]
 80041fa:	461a      	mov	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4413      	add	r3, r2
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	8892      	ldrh	r2, [r2, #4]
 8004204:	4293      	cmp	r3, r2
 8004206:	dc07      	bgt.n	8004218 <logBufPrintf+0xb0>
  {
    p_log->buf_length += buf_len;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	885a      	ldrh	r2, [r3, #2]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	b29b      	uxth	r3, r3
 8004210:	4413      	add	r3, r2
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	805a      	strh	r2, [r3, #2]
  }

  return true;
 8004218:	2301      	movs	r3, #1
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	0800d320 	.word	0x0800d320

08004228 <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 8004228:	b40f      	push	{r0, r1, r2, r3}
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 8004230:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <logPrintf+0x7c>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d12a      	bne.n	8004294 <logPrintf+0x6c>


  va_start(args, fmt);
 800423e:	f107 0314 	add.w	r3, r7, #20
 8004242:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800424c:	4816      	ldr	r0, [pc, #88]	@ (80042a8 <logPrintf+0x80>)
 800424e:	f006 fb7b 	bl	800a948 <vsniprintf>
 8004252:	6078      	str	r0, [r7, #4]

  if (is_open == true && is_enable == true)
 8004254:	4b15      	ldr	r3, [pc, #84]	@ (80042ac <logPrintf+0x84>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <logPrintf+0x4a>
 800425c:	4b14      	ldr	r3, [pc, #80]	@ (80042b0 <logPrintf+0x88>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d006      	beq.n	8004272 <logPrintf+0x4a>
  {
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 8004264:	4b13      	ldr	r3, [pc, #76]	@ (80042b4 <logPrintf+0x8c>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	490f      	ldr	r1, [pc, #60]	@ (80042a8 <logPrintf+0x80>)
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fbaf 	bl	80049d0 <uartWrite>
  }

  if (is_boot_log)
 8004272:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <logPrintf+0x90>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <logPrintf+0x5e>
  {
    logBufPrintf(&log_buf_boot, print_buf, len);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	461a      	mov	r2, r3
 800427e:	490a      	ldr	r1, [pc, #40]	@ (80042a8 <logPrintf+0x80>)
 8004280:	480e      	ldr	r0, [pc, #56]	@ (80042bc <logPrintf+0x94>)
 8004282:	f7ff ff71 	bl	8004168 <logBufPrintf>
  }
  logBufPrintf(&log_buf_list, print_buf, len);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	461a      	mov	r2, r3
 800428a:	4907      	ldr	r1, [pc, #28]	@ (80042a8 <logPrintf+0x80>)
 800428c:	480c      	ldr	r0, [pc, #48]	@ (80042c0 <logPrintf+0x98>)
 800428e:	f7ff ff6b 	bl	8004168 <logBufPrintf>
 8004292:	e000      	b.n	8004296 <logPrintf+0x6e>
  if (is_init != true) return;
 8004294:	bf00      	nop
  va_end(args);

#ifdef _USE_HW_RTOS
  unLock();
#endif
}
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800429e:	b004      	add	sp, #16
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	200032e0 	.word	0x200032e0
 80042a8:	200032e4 	.word	0x200032e4
 80042ac:	200032e1 	.word	0x200032e1
 80042b0:	2000000d 	.word	0x2000000d
 80042b4:	200032e2 	.word	0x200032e2
 80042b8:	2000000c 	.word	0x2000000c
 80042bc:	20001ac8 	.word	0x20001ac8
 80042c0:	20001ad4 	.word	0x20001ad4

080042c4 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80042cc:	2300      	movs	r3, #0
 80042ce:	77fb      	strb	r3, [r7, #31]



  if (args->argc == 1 && args->isStr(0, "info"))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d124      	bne.n	8004322 <cliCmd+0x5e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	494c      	ldr	r1, [pc, #304]	@ (8004410 <cliCmd+0x14c>)
 80042de:	2000      	movs	r0, #0
 80042e0:	4798      	blx	r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01c      	beq.n	8004322 <cliCmd+0x5e>
  {
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 80042e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004414 <cliCmd+0x150>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	4619      	mov	r1, r3
 80042ee:	484a      	ldr	r0, [pc, #296]	@ (8004418 <cliCmd+0x154>)
 80042f0:	f7fd fd8a 	bl	8001e08 <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 80042f4:	4b47      	ldr	r3, [pc, #284]	@ (8004414 <cliCmd+0x150>)
 80042f6:	885b      	ldrh	r3, [r3, #2]
 80042f8:	4619      	mov	r1, r3
 80042fa:	4848      	ldr	r0, [pc, #288]	@ (800441c <cliCmd+0x158>)
 80042fc:	f7fd fd84 	bl	8001e08 <cliPrintf>
    cliPrintf("\n");
 8004300:	4847      	ldr	r0, [pc, #284]	@ (8004420 <cliCmd+0x15c>)
 8004302:	f7fd fd81 	bl	8001e08 <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 8004306:	4b47      	ldr	r3, [pc, #284]	@ (8004424 <cliCmd+0x160>)
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	4619      	mov	r1, r3
 800430c:	4846      	ldr	r0, [pc, #280]	@ (8004428 <cliCmd+0x164>)
 800430e:	f7fd fd7b 	bl	8001e08 <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 8004312:	4b44      	ldr	r3, [pc, #272]	@ (8004424 <cliCmd+0x160>)
 8004314:	885b      	ldrh	r3, [r3, #2]
 8004316:	4619      	mov	r1, r3
 8004318:	4844      	ldr	r0, [pc, #272]	@ (800442c <cliCmd+0x168>)
 800431a:	f7fd fd75 	bl	8001e08 <cliPrintf>

    ret = true;
 800431e:	2301      	movs	r3, #1
 8004320:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d12d      	bne.n	8004386 <cliCmd+0xc2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4940      	ldr	r1, [pc, #256]	@ (8004430 <cliCmd+0x16c>)
 8004330:	2000      	movs	r0, #0
 8004332:	4798      	blx	r3
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d025      	beq.n	8004386 <cliCmd+0xc2>
  {
    uint32_t index = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]

    while(cliKeepLoop())
 800433e:	e019      	b.n	8004374 <cliCmd+0xb0>
    {
      uint32_t buf_len;

      buf_len = log_buf_boot.buf_length - index;
 8004340:	4b34      	ldr	r3, [pc, #208]	@ (8004414 <cliCmd+0x150>)
 8004342:	885b      	ldrh	r3, [r3, #2]
 8004344:	461a      	mov	r2, r3
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	617b      	str	r3, [r7, #20]
      if (buf_len == 0)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d016      	beq.n	8004380 <cliCmd+0xbc>
      {
        break;
      }
      if (buf_len > 64)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b40      	cmp	r3, #64	@ 0x40
 8004356:	d901      	bls.n	800435c <cliCmd+0x98>
      {
        buf_len = 64;
 8004358:	2340      	movs	r3, #64	@ 0x40
 800435a:	617b      	str	r3, [r7, #20]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 800435c:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <cliCmd+0x150>)
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	4413      	add	r3, r2
 8004364:	6979      	ldr	r1, [r7, #20]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd f948 	bl	80015fc <cliWrite>
      index += buf_len;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	4413      	add	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
    while(cliKeepLoop())
 8004374:	f7fd fe42 	bl	8001ffc <cliKeepLoop>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e0      	bne.n	8004340 <cliCmd+0x7c>
 800437e:	e000      	b.n	8004382 <cliCmd+0xbe>
        break;
 8004380:	bf00      	nop

      #ifdef _USE_HW_RTOS
      unLock();
      #endif
    }
    ret = true;
 8004382:	2301      	movs	r3, #1
 8004384:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d12d      	bne.n	80043ea <cliCmd+0x126>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	4928      	ldr	r1, [pc, #160]	@ (8004434 <cliCmd+0x170>)
 8004394:	2000      	movs	r0, #0
 8004396:	4798      	blx	r3
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d025      	beq.n	80043ea <cliCmd+0x126>
  {
    uint32_t index = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]

    while(cliKeepLoop())
 80043a2:	e019      	b.n	80043d8 <cliCmd+0x114>
    {
      uint32_t buf_len;

      buf_len = log_buf_list.buf_length - index;
 80043a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <cliCmd+0x160>)
 80043a6:	885b      	ldrh	r3, [r3, #2]
 80043a8:	461a      	mov	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	60fb      	str	r3, [r7, #12]
      if (buf_len == 0)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <cliCmd+0x120>
      {
        break;
      }
      if (buf_len > 64)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b40      	cmp	r3, #64	@ 0x40
 80043ba:	d901      	bls.n	80043c0 <cliCmd+0xfc>
      {
        buf_len = 64;
 80043bc:	2340      	movs	r3, #64	@ 0x40
 80043be:	60fb      	str	r3, [r7, #12]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 80043c0:	4b18      	ldr	r3, [pc, #96]	@ (8004424 <cliCmd+0x160>)
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd f916 	bl	80015fc <cliWrite>
      index += buf_len;
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4413      	add	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
    while(cliKeepLoop())
 80043d8:	f7fd fe10 	bl	8001ffc <cliKeepLoop>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e0      	bne.n	80043a4 <cliCmd+0xe0>
 80043e2:	e000      	b.n	80043e6 <cliCmd+0x122>
        break;
 80043e4:	bf00      	nop
      #ifdef _USE_HW_RTOS
      unLock();
      #endif

    }
    ret = true;
 80043e6:	2301      	movs	r3, #1
 80043e8:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
 80043ec:	f083 0301 	eor.w	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <cliCmd+0x144>
  {
    cliPrintf("log info\n");
 80043f6:	4810      	ldr	r0, [pc, #64]	@ (8004438 <cliCmd+0x174>)
 80043f8:	f7fd fd06 	bl	8001e08 <cliPrintf>
    cliPrintf("log boot\n");
 80043fc:	480f      	ldr	r0, [pc, #60]	@ (800443c <cliCmd+0x178>)
 80043fe:	f7fd fd03 	bl	8001e08 <cliPrintf>
    cliPrintf("log list\n");
 8004402:	480f      	ldr	r0, [pc, #60]	@ (8004440 <cliCmd+0x17c>)
 8004404:	f7fd fd00 	bl	8001e08 <cliPrintf>
  }
}
 8004408:	bf00      	nop
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	0800d328 	.word	0x0800d328
 8004414:	20001ac8 	.word	0x20001ac8
 8004418:	0800d330 	.word	0x0800d330
 800441c:	0800d344 	.word	0x0800d344
 8004420:	0800d358 	.word	0x0800d358
 8004424:	20001ad4 	.word	0x20001ad4
 8004428:	0800d35c 	.word	0x0800d35c
 800442c:	0800d370 	.word	0x0800d370
 8004430:	0800d384 	.word	0x0800d384
 8004434:	0800d38c 	.word	0x0800d38c
 8004438:	0800d394 	.word	0x0800d394
 800443c:	0800d3a0 	.word	0x0800d3a0
 8004440:	0800d3ac 	.word	0x0800d3ac

08004444 <swtimerInit>:
//-- External Functions
//


bool swtimerInit(void)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 800444a:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <swtimerInit+0x88>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <swtimerInit+0x12>
  {
    return false;  // 이미 한번 실행했다면 정지.
 8004452:	2300      	movs	r3, #0
 8004454:	e033      	b.n	80044be <swtimerInit+0x7a>
  }


  // 구조체 초기화
  for(i=0; i<HW_SWTIMER_MAX_CH; i++)
 8004456:	2300      	movs	r3, #0
 8004458:	71fb      	strb	r3, [r7, #7]
 800445a:	e029      	b.n	80044b0 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 800445c:	79fa      	ldrb	r2, [r7, #7]
 800445e:	491c      	ldr	r1, [pc, #112]	@ (80044d0 <swtimerInit+0x8c>)
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 800446e:	79fa      	ldrb	r2, [r7, #7]
 8004470:	4917      	ldr	r1, [pc, #92]	@ (80044d0 <swtimerInit+0x8c>)
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3304      	adds	r3, #4
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 8004482:	79fa      	ldrb	r2, [r7, #7]
 8004484:	4912      	ldr	r1, [pc, #72]	@ (80044d0 <swtimerInit+0x8c>)
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	3308      	adds	r3, #8
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct    = NULL;
 8004496:	79fa      	ldrb	r2, [r7, #7]
 8004498:	490d      	ldr	r1, [pc, #52]	@ (80044d0 <swtimerInit+0x8c>)
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	330c      	adds	r3, #12
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
  for(i=0; i<HW_SWTIMER_MAX_CH; i++)
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	3301      	adds	r3, #1
 80044ae:	71fb      	strb	r3, [r7, #7]
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b07      	cmp	r3, #7
 80044b4:	d9d2      	bls.n	800445c <swtimerInit+0x18>
  }

  excute = 1;
 80044b6:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <swtimerInit+0x88>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]

  return true;
 80044bc:	2301      	movs	r3, #1
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20003484 	.word	0x20003484
 80044d0:	200033e4 	.word	0x200033e4

080044d4 <uartInit>:
    {"USART1 DEBUG ", USART1, &huart1, &hdma_usart1_rx, NULL, false},
    {"USART2 RS232 ", USART2, &huart2, &hdma_usart2_rx, NULL, false},
  };

bool uartInit(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	e02c      	b.n	800453a <uartInit+0x66>
  {
    uart_tbl[i].is_open = false;
 80044e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004558 <uartInit+0x84>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f240 412c 	movw	r1, #1068	@ 0x42c
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].baud = 115200;
 80044f2:	4a19      	ldr	r2, [pc, #100]	@ (8004558 <uartInit+0x84>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3304      	adds	r3, #4
 8004502:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004506:	601a      	str	r2, [r3, #0]
    uart_tbl[i].rx_cnt = 0;
 8004508:	4a13      	ldr	r2, [pc, #76]	@ (8004558 <uartInit+0x84>)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
    uart_tbl[i].tx_cnt = 0;    
 800451e:	4a0e      	ldr	r2, [pc, #56]	@ (8004558 <uartInit+0x84>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3301      	adds	r3, #1
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b01      	cmp	r3, #1
 800453e:	ddcf      	ble.n	80044e0 <uartInit+0xc>
  }

  is_init = true;
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <uartInit+0x88>)
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("uart", cliUart);
 8004546:	4906      	ldr	r1, [pc, #24]	@ (8004560 <uartInit+0x8c>)
 8004548:	4806      	ldr	r0, [pc, #24]	@ (8004564 <uartInit+0x90>)
 800454a:	f7fd fd6d 	bl	8002028 <cliAdd>
#endif

  return true;
 800454e:	2301      	movs	r3, #1
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	200001e8 	.word	0x200001e8
 800455c:	20003485 	.word	0x20003485
 8004560:	08004b09 	.word	0x08004b09
 8004564:	0800d3d8 	.word	0x0800d3d8

08004568 <uartOpen>:
{
  return is_init;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef ret_hal;


  if (ch >= UART_MAX_CH) return false;
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d901      	bls.n	8004582 <uartOpen+0x1a>
 800457e:	2300      	movs	r3, #0
 8004580:	e1a0      	b.n	80048c4 <uartOpen+0x35c>

  if (uart_tbl[ch].is_open == true && uart_tbl[ch].baud == baud)
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	4a93      	ldr	r2, [pc, #588]	@ (80047d4 <uartOpen+0x26c>)
 8004586:	f240 412c 	movw	r1, #1068	@ 0x42c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <uartOpen+0x4a>
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	4a8e      	ldr	r2, [pc, #568]	@ (80047d4 <uartOpen+0x26c>)
 800459a:	f240 412c 	movw	r1, #1068	@ 0x42c
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	4413      	add	r3, r2
 80045a4:	3304      	adds	r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d101      	bne.n	80045b2 <uartOpen+0x4a>
  {
    return true;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e188      	b.n	80048c4 <uartOpen+0x35c>
  }


  switch(ch)
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	dc02      	bgt.n	80045be <uartOpen+0x56>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da02      	bge.n	80045c2 <uartOpen+0x5a>
 80045bc:	e181      	b.n	80048c2 <uartOpen+0x35a>
 80045be:	2b02      	cmp	r3, #2
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
      }
      break;

		case _DEF_UART3:
			break;
 80045c0:	e17f      	b.n	80048c2 <uartOpen+0x35a>
      uart_tbl[ch].baud      = baud;
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	4a83      	ldr	r2, [pc, #524]	@ (80047d4 <uartOpen+0x26c>)
 80045c6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3304      	adds	r3, #4
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_huart   = uart_hw_tbl[ch].p_huart;
 80045d6:	79fa      	ldrb	r2, [r7, #7]
 80045d8:	79f9      	ldrb	r1, [r7, #7]
 80045da:	487f      	ldr	r0, [pc, #508]	@ (80047d8 <uartOpen+0x270>)
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4403      	add	r3, r0
 80045e6:	3308      	adds	r3, #8
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	487a      	ldr	r0, [pc, #488]	@ (80047d4 <uartOpen+0x26c>)
 80045ec:	f240 432c 	movw	r3, #1068	@ 0x42c
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	4403      	add	r3, r0
 80045f6:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80045fa:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_hdma_rx = uart_hw_tbl[ch].p_hdma_rx;
 80045fc:	79fa      	ldrb	r2, [r7, #7]
 80045fe:	79f9      	ldrb	r1, [r7, #7]
 8004600:	4875      	ldr	r0, [pc, #468]	@ (80047d8 <uartOpen+0x270>)
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4403      	add	r3, r0
 800460c:	330c      	adds	r3, #12
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4870      	ldr	r0, [pc, #448]	@ (80047d4 <uartOpen+0x26c>)
 8004612:	f240 432c 	movw	r3, #1068	@ 0x42c
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	4403      	add	r3, r0
 800461c:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8004620:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;    
 8004622:	79fa      	ldrb	r2, [r7, #7]
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	496b      	ldr	r1, [pc, #428]	@ (80047d4 <uartOpen+0x26c>)
 8004628:	f240 402c 	movw	r0, #1068	@ 0x42c
 800462c:	fb00 f303 	mul.w	r3, r0, r3
 8004630:	440b      	add	r3, r1
 8004632:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004636:	6819      	ldr	r1, [r3, #0]
 8004638:	4867      	ldr	r0, [pc, #412]	@ (80047d8 <uartOpen+0x270>)
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4403      	add	r3, r0
 8004644:	3304      	adds	r3, #4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	600b      	str	r3, [r1, #0]
      uart_tbl[ch].p_huart->Init.BaudRate       = baud;
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	4a61      	ldr	r2, [pc, #388]	@ (80047d4 <uartOpen+0x26c>)
 800464e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	605a      	str	r2, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength     = UART_WORDLENGTH_8B;
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	4a5b      	ldr	r2, [pc, #364]	@ (80047d4 <uartOpen+0x26c>)
 8004666:	f240 412c 	movw	r1, #1068	@ 0x42c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
      uart_tbl[ch].p_huart->Init.StopBits       = UART_STOPBITS_1;
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	4a55      	ldr	r2, [pc, #340]	@ (80047d4 <uartOpen+0x26c>)
 800467e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	60da      	str	r2, [r3, #12]
      uart_tbl[ch].p_huart->Init.Parity         = UART_PARITY_NONE;
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	4a4f      	ldr	r2, [pc, #316]	@ (80047d4 <uartOpen+0x26c>)
 8004696:	f240 412c 	movw	r1, #1068	@ 0x42c
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
      uart_tbl[ch].p_huart->Init.Mode           = UART_MODE_TX_RX;
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	4a49      	ldr	r2, [pc, #292]	@ (80047d4 <uartOpen+0x26c>)
 80046ae:	f240 412c 	movw	r1, #1068	@ 0x42c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	220c      	movs	r2, #12
 80046c0:	615a      	str	r2, [r3, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	4a43      	ldr	r2, [pc, #268]	@ (80047d4 <uartOpen+0x26c>)
 80046c6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2200      	movs	r2, #0
 80046d8:	619a      	str	r2, [r3, #24]
      uart_tbl[ch].p_huart->Init.OverSampling   = UART_OVERSAMPLING_16;
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4a3d      	ldr	r2, [pc, #244]	@ (80047d4 <uartOpen+0x26c>)
 80046de:	f240 412c 	movw	r1, #1068	@ 0x42c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	4a37      	ldr	r2, [pc, #220]	@ (80047d4 <uartOpen+0x26c>)
 80046f6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	4413      	add	r3, r2
 8004700:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	621a      	str	r2, [r3, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	4a31      	ldr	r2, [pc, #196]	@ (80047d4 <uartOpen+0x26c>)
 800470e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	625a      	str	r2, [r3, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	4a2b      	ldr	r2, [pc, #172]	@ (80047d4 <uartOpen+0x26c>)
 8004726:	f240 412c 	movw	r1, #1068	@ 0x42c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	629a      	str	r2, [r3, #40]	@ 0x28
      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	f240 422c 	movw	r2, #1068	@ 0x42c
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004748:	4a22      	ldr	r2, [pc, #136]	@ (80047d4 <uartOpen+0x26c>)
 800474a:	1898      	adds	r0, r3, r2
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	f240 422c 	movw	r2, #1068	@ 0x42c
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	3308      	adds	r3, #8
 8004758:	4a1e      	ldr	r2, [pc, #120]	@ (80047d4 <uartOpen+0x26c>)
 800475a:	4413      	add	r3, r2
 800475c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004760:	4619      	mov	r1, r3
 8004762:	f7fc fcd1 	bl	8001108 <qbufferCreate>
      __HAL_RCC_DMA1_CLK_ENABLE();
 8004766:	4b1d      	ldr	r3, [pc, #116]	@ (80047dc <uartOpen+0x274>)
 8004768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800476a:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <uartOpen+0x274>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	6493      	str	r3, [r2, #72]	@ 0x48
 8004772:	4b1a      	ldr	r3, [pc, #104]	@ (80047dc <uartOpen+0x274>)
 8004774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <uartOpen+0x26c>)
 8004782:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f003 ff1e 	bl	80085d4 <HAL_UART_DeInit>
      if (uart_hw_tbl[ch].is_rs485 == true)
 8004798:	79fa      	ldrb	r2, [r7, #7]
 800479a:	490f      	ldr	r1, [pc, #60]	@ (80047d8 <uartOpen+0x270>)
 800479c:	4613      	mov	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4413      	add	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	440b      	add	r3, r1
 80047a6:	3314      	adds	r3, #20
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d018      	beq.n	80047e0 <uartOpen+0x278>
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	4a08      	ldr	r2, [pc, #32]	@ (80047d4 <uartOpen+0x26c>)
 80047b2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	2300      	movs	r3, #0
 80047c4:	2200      	movs	r2, #0
 80047c6:	2100      	movs	r1, #0
 80047c8:	f004 ff10 	bl	80095ec <HAL_RS485Ex_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	73bb      	strb	r3, [r7, #14]
 80047d0:	e015      	b.n	80047fe <uartOpen+0x296>
 80047d2:	bf00      	nop
 80047d4:	200001e8 	.word	0x200001e8
 80047d8:	0800d68c 	.word	0x0800d68c
 80047dc:	40021000 	.word	0x40021000
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	4a3a      	ldr	r2, [pc, #232]	@ (80048cc <uartOpen+0x364>)
 80047e4:	f240 412c 	movw	r1, #1068	@ 0x42c
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f003 fe9d 	bl	8008534 <HAL_UART_Init>
 80047fa:	4603      	mov	r3, r0
 80047fc:	73bb      	strb	r3, [r7, #14]
      if (ret_hal == HAL_OK)
 80047fe:	7bbb      	ldrb	r3, [r7, #14]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d15d      	bne.n	80048c0 <uartOpen+0x358>
        ret = true;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
        uart_tbl[ch].is_open = true;
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	4a30      	ldr	r2, [pc, #192]	@ (80048cc <uartOpen+0x364>)
 800480c:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	4413      	add	r3, r2
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	4a2b      	ldr	r2, [pc, #172]	@ (80048cc <uartOpen+0x364>)
 800481e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	4413      	add	r3, r2
 8004828:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	f240 422c 	movw	r2, #1068	@ 0x42c
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	3308      	adds	r3, #8
 800483a:	4a24      	ldr	r2, [pc, #144]	@ (80048cc <uartOpen+0x364>)
 800483c:	4413      	add	r3, r2
 800483e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004842:	4619      	mov	r1, r3
 8004844:	f003 ff94 	bl	8008770 <HAL_UART_Receive_DMA>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <uartOpen+0x2ea>
          ret = false;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	4a1d      	ldr	r2, [pc, #116]	@ (80048cc <uartOpen+0x364>)
 8004856:	f240 412c 	movw	r1, #1068	@ 0x42c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <uartOpen+0x364>)
 800486a:	f240 402c 	movw	r0, #1068	@ 0x42c
 800486e:	fb00 f303 	mul.w	r3, r0, r3
 8004872:	4413      	add	r3, r2
 8004874:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	1a8a      	subs	r2, r1, r2
 8004886:	4911      	ldr	r1, [pc, #68]	@ (80048cc <uartOpen+0x364>)
 8004888:	f240 402c 	movw	r0, #1068	@ 0x42c
 800488c:	fb00 f303 	mul.w	r3, r0, r3
 8004890:	440b      	add	r3, r1
 8004892:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004896:	601a      	str	r2, [r3, #0]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8004898:	79fa      	ldrb	r2, [r7, #7]
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	490b      	ldr	r1, [pc, #44]	@ (80048cc <uartOpen+0x364>)
 800489e:	f240 402c 	movw	r0, #1068	@ 0x42c
 80048a2:	fb00 f202 	mul.w	r2, r0, r2
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	4907      	ldr	r1, [pc, #28]	@ (80048cc <uartOpen+0x364>)
 80048b0:	f240 402c 	movw	r0, #1068	@ 0x42c
 80048b4:	fb00 f303 	mul.w	r3, r0, r3
 80048b8:	440b      	add	r3, r1
 80048ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048be:	601a      	str	r2, [r3, #0]
      break;
 80048c0:	bf00      	nop
  }

  return ret;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	200001e8 	.word	0x200001e8

080048d0 <uartAvailable>:

  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]


  switch(ch)
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	dc02      	bgt.n	80048ea <uartAvailable+0x1a>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	da02      	bge.n	80048ee <uartAvailable+0x1e>
 80048e8:	e030      	b.n	800494c <uartAvailable+0x7c>
 80048ea:	2b02      	cmp	r3, #2
		}
		break;

    case _DEF_UART3:

      break;
 80048ec:	e02e      	b.n	800494c <uartAvailable+0x7c>
			uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	4a19      	ldr	r2, [pc, #100]	@ (8004958 <uartAvailable+0x88>)
 80048f2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	4a14      	ldr	r2, [pc, #80]	@ (8004958 <uartAvailable+0x88>)
 8004906:	f240 402c 	movw	r0, #1068	@ 0x42c
 800490a:	fb00 f303 	mul.w	r3, r0, r3
 800490e:	4413      	add	r3, r2
 8004910:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	1a8a      	subs	r2, r1, r2
 800491e:	490e      	ldr	r1, [pc, #56]	@ (8004958 <uartAvailable+0x88>)
 8004920:	f240 402c 	movw	r0, #1068	@ 0x42c
 8004924:	fb00 f303 	mul.w	r3, r0, r3
 8004928:	440b      	add	r3, r1
 800492a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800492e:	601a      	str	r2, [r3, #0]
			ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	f240 422c 	movw	r2, #1068	@ 0x42c
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800493e:	4a06      	ldr	r2, [pc, #24]	@ (8004958 <uartAvailable+0x88>)
 8004940:	4413      	add	r3, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f7fc fce4 	bl	8001310 <qbufferAvailable>
 8004948:	60f8      	str	r0, [r7, #12]
		break;
 800494a:	bf00      	nop
  }

  return ret;
 800494c:	68fb      	ldr	r3, [r7, #12]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200001e8 	.word	0x200001e8

0800495c <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	2b01      	cmp	r3, #1
 800496e:	dc02      	bgt.n	8004976 <uartRead+0x1a>
 8004970:	2b00      	cmp	r3, #0
 8004972:	da02      	bge.n	800497a <uartRead+0x1e>
 8004974:	e011      	b.n	800499a <uartRead+0x3e>
 8004976:	2b02      	cmp	r3, #2
    case _DEF_UART1:
    case _DEF_UART2:
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
      break;
    case _DEF_UART3:
      break;
 8004978:	e00f      	b.n	800499a <uartRead+0x3e>
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	f240 422c 	movw	r2, #1068	@ 0x42c
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004988:	4a10      	ldr	r2, [pc, #64]	@ (80049cc <uartRead+0x70>)
 800498a:	4413      	add	r3, r2
 800498c:	f107 010f 	add.w	r1, r7, #15
 8004990:	2201      	movs	r2, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f7fc fc51 	bl	800123a <qbufferRead>
      break;
 8004998:	bf00      	nop
  }
  uart_tbl[ch].rx_cnt++;
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	490b      	ldr	r1, [pc, #44]	@ (80049cc <uartRead+0x70>)
 800499e:	f240 422c 	movw	r2, #1068	@ 0x42c
 80049a2:	fb03 f202 	mul.w	r2, r3, r2
 80049a6:	440a      	add	r2, r1
 80049a8:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	3201      	adds	r2, #1
 80049b0:	4906      	ldr	r1, [pc, #24]	@ (80049cc <uartRead+0x70>)
 80049b2:	f240 402c 	movw	r0, #1068	@ 0x42c
 80049b6:	fb00 f303 	mul.w	r3, r0, r3
 80049ba:	440b      	add	r3, r1
 80049bc:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80049c0:	601a      	str	r2, [r3, #0]

  return ret;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	200001e8 	.word	0x200001e8

080049d0 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]


  switch(ch)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	dc02      	bgt.n	80049ee <uartWrite+0x1e>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	da02      	bge.n	80049f2 <uartWrite+0x22>
 80049ec:	e017      	b.n	8004a1e <uartWrite+0x4e>
 80049ee:	2b02      	cmp	r3, #2
				ret = length;
			}
    	break;
    case _DEF_UART3:

      break;
 80049f0:	e015      	b.n	8004a1e <uartWrite+0x4e>
    	if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	4a17      	ldr	r2, [pc, #92]	@ (8004a54 <uartWrite+0x84>)
 80049f6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	2364      	movs	r3, #100	@ 0x64
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	f003 fe20 	bl	8008652 <HAL_UART_Transmit>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <uartWrite+0x4c>
				ret = length;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	617b      	str	r3, [r7, #20]
    	break;
 8004a1c:	bf00      	nop
  }
  uart_tbl[ch].tx_cnt += ret;
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	4a0c      	ldr	r2, [pc, #48]	@ (8004a54 <uartWrite+0x84>)
 8004a22:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004a26:	fb01 f303 	mul.w	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	440a      	add	r2, r1
 8004a38:	4906      	ldr	r1, [pc, #24]	@ (8004a54 <uartWrite+0x84>)
 8004a3a:	f240 402c 	movw	r0, #1068	@ 0x42c
 8004a3e:	fb00 f303 	mul.w	r3, r0, r3
 8004a42:	440b      	add	r3, r1
 8004a44:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8004a48:	601a      	str	r2, [r3, #0]

  return ret;
 8004a4a:	697b      	ldr	r3, [r7, #20]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200001e8 	.word	0x200001e8

08004a58 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8004a58:	b40e      	push	{r1, r2, r3}
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b0c7      	sub	sp, #284	@ 0x11c
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	4602      	mov	r2, r0
 8004a62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a66:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8004a6a:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8004a6c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8004a70:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a78:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8004a7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a82:	f107 0010 	add.w	r0, r7, #16
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004a8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a90:	f005 ff5a 	bl	800a948 <vsniprintf>
 8004a94:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8004a98:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004a9c:	f107 0110 	add.w	r1, r7, #16
 8004aa0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004aa4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff ff90 	bl	80049d0 <uartWrite>
 8004ab0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8004ab4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac4:	b003      	add	sp, #12
 8004ac6:	4770      	bx	lr

08004ac8 <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]


  if (ch >= UART_MAX_CH) return 0;
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d901      	bls.n	8004ae0 <uartGetBaud+0x18>
 8004adc:	2300      	movs	r3, #0
 8004ade:	e00a      	b.n	8004af6 <uartGetBaud+0x2e>
  if (ch == HW_UART_CH_USB)
    ret = cdcGetBaud();
  else
    ret = uart_tbl[ch].baud;
  #else
  ret = uart_tbl[ch].baud;
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	4a08      	ldr	r2, [pc, #32]	@ (8004b04 <uartGetBaud+0x3c>)
 8004ae4:	f240 412c 	movw	r1, #1068	@ 0x42c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3304      	adds	r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]
  #endif
  
  return ret;
 8004af4:	68fb      	ldr	r3, [r7, #12]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	200001e8 	.word	0x200001e8

08004b08 <cliUart>:
  return uart_tbl[ch].tx_cnt;
}

#ifdef _USE_HW_CLI
void cliUart(cli_args_t *args)
{
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8004b10:	2300      	movs	r3, #0
 8004b12:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "info"))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d127      	bne.n	8004b6c <cliUart+0x64>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	494d      	ldr	r1, [pc, #308]	@ (8004c58 <cliUart+0x150>)
 8004b22:	2000      	movs	r0, #0
 8004b24:	4798      	blx	r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01f      	beq.n	8004b6c <cliUart+0x64>
  {
    for (int i=0; i<UART_MAX_CH; i++)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	e017      	b.n	8004b62 <cliUart+0x5a>
    {
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1c5c      	adds	r4, r3, #1
 8004b36:	4949      	ldr	r1, [pc, #292]	@ (8004c5c <cliUart+0x154>)
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ffbc 	bl	8004ac8 <uartGetBaud>
 8004b50:	4603      	mov	r3, r0
 8004b52:	462a      	mov	r2, r5
 8004b54:	4621      	mov	r1, r4
 8004b56:	4842      	ldr	r0, [pc, #264]	@ (8004c60 <cliUart+0x158>)
 8004b58:	f7fd f956 	bl	8001e08 <cliPrintf>
    for (int i=0; i<UART_MAX_CH; i++)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	dde4      	ble.n	8004b32 <cliUart+0x2a>
    }
    ret = true;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "test"))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d15f      	bne.n	8004c34 <cliUart+0x12c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	493a      	ldr	r1, [pc, #232]	@ (8004c64 <cliUart+0x15c>)
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	4798      	blx	r3
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d057      	beq.n	8004c34 <cliUart+0x12c>
  {
    uint8_t uart_ch;

    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2001      	movs	r0, #1
 8004b8a:	4798      	blx	r3
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	dd11      	ble.n	8004bb6 <cliUart+0xae>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2001      	movs	r0, #1
 8004b98:	4798      	blx	r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	dc08      	bgt.n	8004bb2 <cliUart+0xaa>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	4798      	blx	r3
 8004ba8:	4603      	mov	r3, r0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	e002      	b.n	8004bb8 <cliUart+0xb0>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <cliUart+0xb0>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]

    if (uart_ch != cliGetPort())
 8004bba:	f7fc fc3f 	bl	800143c <cliGetPort>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d02e      	beq.n	8004c26 <cliUart+0x11e>
    {
      uint8_t rx_data;

      while(1)
      {
        if (uartAvailable(uart_ch) > 0)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fe80 	bl	80048d0 <uartAvailable>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <cliUart+0xe8>
        {
          rx_data = uartRead(uart_ch);
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff febf 	bl	800495c <uartRead>
 8004bde:	4603      	mov	r3, r0
 8004be0:	73bb      	strb	r3, [r7, #14]
          cliPrintf("<- _DEF_UART%d RX : 0x%X\n", uart_ch + 1, rx_data);
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	3301      	adds	r3, #1
 8004be6:	7bba      	ldrb	r2, [r7, #14]
 8004be8:	4619      	mov	r1, r3
 8004bea:	481f      	ldr	r0, [pc, #124]	@ (8004c68 <cliUart+0x160>)
 8004bec:	f7fd f90c 	bl	8001e08 <cliPrintf>
        }

        if (cliAvailable() > 0)
 8004bf0:	f7fc fcec 	bl	80015cc <cliAvailable>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0e6      	beq.n	8004bc8 <cliUart+0xc0>
        {
          rx_data = cliRead();
 8004bfa:	f7fc fcf3 	bl	80015e4 <cliRead>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	73bb      	strb	r3, [r7, #14]
          if (rx_data == 'q')
 8004c02:	7bbb      	ldrb	r3, [r7, #14]
 8004c04:	2b71      	cmp	r3, #113	@ 0x71
 8004c06:	d012      	beq.n	8004c2e <cliUart+0x126>
          {
            break;
          }
          else
          {
            uartWrite(uart_ch, &rx_data, 1);
 8004c08:	f107 010e 	add.w	r1, r7, #14
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fedd 	bl	80049d0 <uartWrite>
            cliPrintf("-> _DEF_UART%d TX : 0x%X\n", uart_ch + 1, rx_data);            
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	7bba      	ldrb	r2, [r7, #14]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4813      	ldr	r0, [pc, #76]	@ (8004c6c <cliUart+0x164>)
 8004c20:	f7fd f8f2 	bl	8001e08 <cliPrintf>
        if (uartAvailable(uart_ch) > 0)
 8004c24:	e7d0      	b.n	8004bc8 <cliUart+0xc0>
        }
      }
    }
    else
    {
      cliPrintf("This is cliPort\n");
 8004c26:	4812      	ldr	r0, [pc, #72]	@ (8004c70 <cliUart+0x168>)
 8004c28:	f7fd f8ee 	bl	8001e08 <cliPrintf>
 8004c2c:	e000      	b.n	8004c30 <cliUart+0x128>
            break;
 8004c2e:	bf00      	nop
    }
    ret = true;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
  }

  if (ret == false)
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	f083 0301 	eor.w	r3, r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d006      	beq.n	8004c4e <cliUart+0x146>
  {
    cliPrintf("uart info\n");
 8004c40:	480c      	ldr	r0, [pc, #48]	@ (8004c74 <cliUart+0x16c>)
 8004c42:	f7fd f8e1 	bl	8001e08 <cliPrintf>
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
 8004c46:	2102      	movs	r1, #2
 8004c48:	480b      	ldr	r0, [pc, #44]	@ (8004c78 <cliUart+0x170>)
 8004c4a:	f7fd f8dd 	bl	8001e08 <cliPrintf>
  }
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bdb0      	pop	{r4, r5, r7, pc}
 8004c56:	bf00      	nop
 8004c58:	0800d3e0 	.word	0x0800d3e0
 8004c5c:	0800d68c 	.word	0x0800d68c
 8004c60:	0800d3e8 	.word	0x0800d3e8
 8004c64:	0800d404 	.word	0x0800d404
 8004c68:	0800d40c 	.word	0x0800d40c
 8004c6c:	0800d428 	.word	0x0800d428
 8004c70:	0800d444 	.word	0x0800d444
 8004c74:	0800d458 	.word	0x0800d458
 8004c78:	0800d464 	.word	0x0800d464

08004c7c <hwInit>:




bool hwInit(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
	cliInit();
 8004c82:	f7fc fb61 	bl	8001348 <cliInit>
	logInit();
 8004c86:	f7ff f9fb 	bl	8004080 <logInit>
	swtimerInit();
 8004c8a:	f7ff fbdb 	bl	8004444 <swtimerInit>
	gpioInit();
 8004c8e:	f7fe ffbf 	bl	8003c10 <gpioInit>
	ledInit();
 8004c92:	f7ff f91d 	bl	8003ed0 <ledInit>
	uartInit();
 8004c96:	f7ff fc1d 	bl	80044d4 <uartInit>
	for (int i=0; i<HW_UART_MAX_CH; i++)
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	e009      	b.n	8004cb4 <hwInit+0x38>
	{
		uartOpen(i, 115200);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fc5d 	bl	8004568 <uartOpen>
	for (int i=0; i<HW_UART_MAX_CH; i++)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	607b      	str	r3, [r7, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	ddf2      	ble.n	8004ca0 <hwInit+0x24>
	}
	logOpen(HW_UART_CH_DEBUG, 115200);
 8004cba:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f7ff fa2e 	bl	8004120 <logOpen>
	logPrintf("\r\n[ Firmware Begin... ]\r\n");
 8004cc4:	4810      	ldr	r0, [pc, #64]	@ (8004d08 <hwInit+0x8c>)
 8004cc6:	f7ff faaf 	bl	8004228 <logPrintf>
	logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 8004cca:	4910      	ldr	r1, [pc, #64]	@ (8004d0c <hwInit+0x90>)
 8004ccc:	4810      	ldr	r0, [pc, #64]	@ (8004d10 <hwInit+0x94>)
 8004cce:	f7ff faab 	bl	8004228 <logPrintf>
	logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8004cd2:	4910      	ldr	r1, [pc, #64]	@ (8004d14 <hwInit+0x98>)
 8004cd4:	4810      	ldr	r0, [pc, #64]	@ (8004d18 <hwInit+0x9c>)
 8004cd6:	f7ff faa7 	bl	8004228 <logPrintf>
	logPrintf("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq()/1000000);
 8004cda:	f003 f95b 	bl	8007f94 <HAL_RCC_GetSysClockFreq>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8004d1c <hwInit+0xa0>)
 8004ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8004ce6:	1492      	asrs	r2, r2, #18
 8004ce8:	17db      	asrs	r3, r3, #31
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	4619      	mov	r1, r3
 8004cee:	480c      	ldr	r0, [pc, #48]	@ (8004d20 <hwInit+0xa4>)
 8004cf0:	f7ff fa9a 	bl	8004228 <logPrintf>
	logPrintf("\n");
 8004cf4:	480b      	ldr	r0, [pc, #44]	@ (8004d24 <hwInit+0xa8>)
 8004cf6:	f7ff fa97 	bl	8004228 <logPrintf>

	  canInit();
 8004cfa:	f7fd fabb 	bl	8002274 <canInit>
  return true;
 8004cfe:	2301      	movs	r3, #1
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	0800d478 	.word	0x0800d478
 8004d0c:	0800d494 	.word	0x0800d494
 8004d10:	0800d4a0 	.word	0x0800d4a0
 8004d14:	0800d4b8 	.word	0x0800d4b8
 8004d18:	0800d4c4 	.word	0x0800d4c4
 8004d1c:	431bde83 	.word	0x431bde83
 8004d20:	0800d4dc 	.word	0x0800d4dc
 8004d24:	0800d4f8 	.word	0x0800d4f8

08004d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d2c:	f000 fd13 	bl	8005756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d30:	f000 f812 	bl	8004d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d34:	f000 f96a 	bl	800500c <MX_GPIO_Init>
  MX_DMA_Init();
 8004d38:	f000 f936 	bl	8004fa8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004d3c:	f000 f856 	bl	8004dec <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 8004d40:	f000 f89a 	bl	8004e78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004d44:	f000 f8e4 	bl	8004f10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  hwInit();
 8004d48:	f7ff ff98 	bl	8004c7c <hwInit>
  apInit();
 8004d4c:	f7fc f952 	bl	8000ff4 <apInit>
  apMain();
 8004d50:	f7fc f992 	bl	8001078 <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d54:	bf00      	nop
 8004d56:	e7fd      	b.n	8004d54 <main+0x2c>

08004d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b094      	sub	sp, #80	@ 0x50
 8004d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d5e:	f107 0318 	add.w	r3, r7, #24
 8004d62:	2238      	movs	r2, #56	@ 0x38
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f005 fdfc 	bl	800a964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
 8004d74:	609a      	str	r2, [r3, #8]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d7a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004d7e:	f002 fc07 	bl	8007590 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d90:	2303      	movs	r3, #3
 8004d92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004d94:	2301      	movs	r3, #1
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8004d98:	2314      	movs	r3, #20
 8004d9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004da0:	2302      	movs	r3, #2
 8004da2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004da4:	2302      	movs	r3, #2
 8004da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004da8:	f107 0318 	add.w	r3, r7, #24
 8004dac:	4618      	mov	r0, r3
 8004dae:	f002 fca3 	bl	80076f8 <HAL_RCC_OscConfig>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <SystemClock_Config+0x64>
  {
    Error_Handler();
 8004db8:	f000 f98a 	bl	80050d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004dbc:	230f      	movs	r3, #15
 8004dbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004dd0:	1d3b      	adds	r3, r7, #4
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f002 ffa1 	bl	8007d1c <HAL_RCC_ClockConfig>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004de0:	f000 f976 	bl	80050d0 <Error_Handler>
  }
}
 8004de4:	bf00      	nop
 8004de6:	3750      	adds	r7, #80	@ 0x50
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004df0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004df2:	4a20      	ldr	r2, [pc, #128]	@ (8004e74 <MX_FDCAN1_Init+0x88>)
 8004df4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004df6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004e02:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004e08:	4b19      	ldr	r3, [pc, #100]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8004e0e:	4b18      	ldr	r3, [pc, #96]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004e14:	4b16      	ldr	r3, [pc, #88]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 15;
 8004e1a:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e1c:	220f      	movs	r2, #15
 8004e1e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8004e26:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e28:	220e      	movs	r2, #14
 8004e2a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8004e2c:	4b10      	ldr	r3, [pc, #64]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e2e:	2205      	movs	r2, #5
 8004e30:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 8004e32:	4b0f      	ldr	r3, [pc, #60]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e34:	2214      	movs	r2, #20
 8004e36:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 8004e38:	4b0d      	ldr	r3, [pc, #52]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e3a:	220f      	movs	r2, #15
 8004e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e40:	220c      	movs	r2, #12
 8004e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e46:	2202      	movs	r2, #2
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 28;
 8004e4a:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e4c:	221c      	movs	r2, #28
 8004e4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 8;
 8004e50:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e52:	2208      	movs	r2, #8
 8004e54:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004e56:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8004e5c:	4804      	ldr	r0, [pc, #16]	@ (8004e70 <MX_FDCAN1_Init+0x84>)
 8004e5e:	f001 f925 	bl	80060ac <HAL_FDCAN_Init>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8004e68:	f000 f932 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20003488 	.word	0x20003488
 8004e74:	40006400 	.word	0x40006400

08004e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e7c:	4b22      	ldr	r3, [pc, #136]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004e7e:	4a23      	ldr	r2, [pc, #140]	@ (8004f0c <MX_USART1_UART_Init+0x94>)
 8004e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e82:	4b21      	ldr	r3, [pc, #132]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e90:	4b1d      	ldr	r3, [pc, #116]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e96:	4b1c      	ldr	r3, [pc, #112]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004e9e:	220c      	movs	r2, #12
 8004ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ea2:	4b19      	ldr	r3, [pc, #100]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ea8:	4b17      	ldr	r3, [pc, #92]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004eae:	4b16      	ldr	r3, [pc, #88]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004eb4:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004eba:	4b13      	ldr	r3, [pc, #76]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ec0:	4811      	ldr	r0, [pc, #68]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004ec2:	f003 fb37 	bl	8008534 <HAL_UART_Init>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004ecc:	f000 f900 	bl	80050d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	480d      	ldr	r0, [pc, #52]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004ed4:	f004 fc2c 	bl	8009730 <HAL_UARTEx_SetTxFifoThreshold>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004ede:	f000 f8f7 	bl	80050d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4808      	ldr	r0, [pc, #32]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004ee6:	f004 fc61 	bl	80097ac <HAL_UARTEx_SetRxFifoThreshold>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004ef0:	f000 f8ee 	bl	80050d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004ef4:	4804      	ldr	r0, [pc, #16]	@ (8004f08 <MX_USART1_UART_Init+0x90>)
 8004ef6:	f004 fbe2 	bl	80096be <HAL_UARTEx_DisableFifoMode>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004f00:	f000 f8e6 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f04:	bf00      	nop
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	200034ec 	.word	0x200034ec
 8004f0c:	40013800 	.word	0x40013800

08004f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f14:	4b22      	ldr	r3, [pc, #136]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f16:	4a23      	ldr	r2, [pc, #140]	@ (8004fa4 <MX_USART2_UART_Init+0x94>)
 8004f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f1a:	4b21      	ldr	r3, [pc, #132]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f22:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f28:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f34:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f36:	220c      	movs	r2, #12
 8004f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f3a:	4b19      	ldr	r3, [pc, #100]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f40:	4b17      	ldr	r3, [pc, #92]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f46:	4b16      	ldr	r3, [pc, #88]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f4c:	4b14      	ldr	r3, [pc, #80]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f52:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f58:	4811      	ldr	r0, [pc, #68]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f5a:	f003 faeb 	bl	8008534 <HAL_UART_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004f64:	f000 f8b4 	bl	80050d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f68:	2100      	movs	r1, #0
 8004f6a:	480d      	ldr	r0, [pc, #52]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f6c:	f004 fbe0 	bl	8009730 <HAL_UARTEx_SetTxFifoThreshold>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004f76:	f000 f8ab 	bl	80050d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4808      	ldr	r0, [pc, #32]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f7e:	f004 fc15 	bl	80097ac <HAL_UARTEx_SetRxFifoThreshold>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004f88:	f000 f8a2 	bl	80050d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004f8c:	4804      	ldr	r0, [pc, #16]	@ (8004fa0 <MX_USART2_UART_Init+0x90>)
 8004f8e:	f004 fb96 	bl	80096be <HAL_UARTEx_DisableFifoMode>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004f98:	f000 f89a 	bl	80050d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f9c:	bf00      	nop
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20003580 	.word	0x20003580
 8004fa4:	40004400 	.word	0x40004400

08004fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004fae:	4b16      	ldr	r3, [pc, #88]	@ (8005008 <MX_DMA_Init+0x60>)
 8004fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb2:	4a15      	ldr	r2, [pc, #84]	@ (8005008 <MX_DMA_Init+0x60>)
 8004fb4:	f043 0304 	orr.w	r3, r3, #4
 8004fb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8004fba:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <MX_DMA_Init+0x60>)
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	@ (8005008 <MX_DMA_Init+0x60>)
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fca:	4a0f      	ldr	r2, [pc, #60]	@ (8005008 <MX_DMA_Init+0x60>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <MX_DMA_Init+0x60>)
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	200b      	movs	r0, #11
 8004fe4:	f000 fd25 	bl	8005a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004fe8:	200b      	movs	r0, #11
 8004fea:	f000 fd3c 	bl	8005a66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	200c      	movs	r0, #12
 8004ff4:	f000 fd1d 	bl	8005a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004ff8:	200c      	movs	r0, #12
 8004ffa:	f000 fd34 	bl	8005a66 <HAL_NVIC_EnableIRQ>

}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000

0800500c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005012:	f107 030c 	add.w	r3, r7, #12
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	609a      	str	r2, [r3, #8]
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005022:	4b29      	ldr	r3, [pc, #164]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005026:	4a28      	ldr	r2, [pc, #160]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 8005028:	f043 0320 	orr.w	r3, r3, #32
 800502c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800502e:	4b26      	ldr	r3, [pc, #152]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 8005030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	60bb      	str	r3, [r7, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800503a:	4b23      	ldr	r3, [pc, #140]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 800503c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503e:	4a22      	ldr	r2, [pc, #136]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005046:	4b20      	ldr	r3, [pc, #128]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 8005048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005052:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 8005054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005056:	4a1c      	ldr	r2, [pc, #112]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 8005058:	f043 0302 	orr.w	r3, r3, #2
 800505c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800505e:	4b1a      	ldr	r3, [pc, #104]	@ (80050c8 <MX_GPIO_Init+0xbc>)
 8005060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800506a:	2200      	movs	r2, #0
 800506c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005074:	f002 fa5a 	bl	800752c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8005078:	2200      	movs	r2, #0
 800507a:	2170      	movs	r1, #112	@ 0x70
 800507c:	4813      	ldr	r0, [pc, #76]	@ (80050cc <MX_GPIO_Init+0xc0>)
 800507e:	f002 fa55 	bl	800752c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005082:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005088:	2301      	movs	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005090:	2300      	movs	r3, #0
 8005092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005094:	f107 030c 	add.w	r3, r7, #12
 8005098:	4619      	mov	r1, r3
 800509a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800509e:	f001 ffc9 	bl	8007034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80050a2:	2370      	movs	r3, #112	@ 0x70
 80050a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050a6:	2301      	movs	r3, #1
 80050a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b2:	f107 030c 	add.w	r3, r7, #12
 80050b6:	4619      	mov	r1, r3
 80050b8:	4804      	ldr	r0, [pc, #16]	@ (80050cc <MX_GPIO_Init+0xc0>)
 80050ba:	f001 ffbb 	bl	8007034 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80050be:	bf00      	nop
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	48000400 	.word	0x48000400

080050d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050d4:	b672      	cpsid	i
}
 80050d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <Error_Handler+0x8>

080050dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005120 <HAL_MspInit+0x44>)
 80050e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005120 <HAL_MspInit+0x44>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80050ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005120 <HAL_MspInit+0x44>)
 80050f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	4b09      	ldr	r3, [pc, #36]	@ (8005120 <HAL_MspInit+0x44>)
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fe:	4a08      	ldr	r2, [pc, #32]	@ (8005120 <HAL_MspInit+0x44>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005104:	6593      	str	r3, [r2, #88]	@ 0x58
 8005106:	4b06      	ldr	r3, [pc, #24]	@ (8005120 <HAL_MspInit+0x44>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005112:	f002 fae1 	bl	80076d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000

08005124 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b09a      	sub	sp, #104	@ 0x68
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800512c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	609a      	str	r2, [r3, #8]
 8005138:	60da      	str	r2, [r3, #12]
 800513a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800513c:	f107 0310 	add.w	r3, r7, #16
 8005140:	2244      	movs	r2, #68	@ 0x44
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f005 fc0d 	bl	800a964 <memset>
  if(hfdcan->Instance==FDCAN1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a24      	ldr	r2, [pc, #144]	@ (80051e0 <HAL_FDCAN_MspInit+0xbc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d141      	bne.n	80051d8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005158:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800515a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800515e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005160:	f107 0310 	add.w	r3, r7, #16
 8005164:	4618      	mov	r0, r3
 8005166:	f002 fff5 	bl	8008154 <HAL_RCCEx_PeriphCLKConfig>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8005170:	f7ff ffae 	bl	80050d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005174:	4b1b      	ldr	r3, [pc, #108]	@ (80051e4 <HAL_FDCAN_MspInit+0xc0>)
 8005176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005178:	4a1a      	ldr	r2, [pc, #104]	@ (80051e4 <HAL_FDCAN_MspInit+0xc0>)
 800517a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800517e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005180:	4b18      	ldr	r3, [pc, #96]	@ (80051e4 <HAL_FDCAN_MspInit+0xc0>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800518c:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <HAL_FDCAN_MspInit+0xc0>)
 800518e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005190:	4a14      	ldr	r2, [pc, #80]	@ (80051e4 <HAL_FDCAN_MspInit+0xc0>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005198:	4b12      	ldr	r3, [pc, #72]	@ (80051e4 <HAL_FDCAN_MspInit+0xc0>)
 800519a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80051a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80051a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b2:	2300      	movs	r3, #0
 80051b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80051b6:	2309      	movs	r3, #9
 80051b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80051be:	4619      	mov	r1, r3
 80051c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051c4:	f001 ff36 	bl	8007034 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80051c8:	2200      	movs	r2, #0
 80051ca:	2100      	movs	r1, #0
 80051cc:	2015      	movs	r0, #21
 80051ce:	f000 fc30 	bl	8005a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80051d2:	2015      	movs	r0, #21
 80051d4:	f000 fc47 	bl	8005a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80051d8:	bf00      	nop
 80051da:	3768      	adds	r7, #104	@ 0x68
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40006400 	.word	0x40006400
 80051e4:	40021000 	.word	0x40021000

080051e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b09e      	sub	sp, #120	@ 0x78
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	609a      	str	r2, [r3, #8]
 80051fc:	60da      	str	r2, [r3, #12]
 80051fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005200:	f107 0320 	add.w	r3, r7, #32
 8005204:	2244      	movs	r2, #68	@ 0x44
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f005 fbab 	bl	800a964 <memset>
  if(huart->Instance==USART1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7f      	ldr	r2, [pc, #508]	@ (8005410 <HAL_UART_MspInit+0x228>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d174      	bne.n	8005302 <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005218:	2301      	movs	r3, #1
 800521a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800521c:	2300      	movs	r3, #0
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005220:	f107 0320 	add.w	r3, r7, #32
 8005224:	4618      	mov	r0, r3
 8005226:	f002 ff95 	bl	8008154 <HAL_RCCEx_PeriphCLKConfig>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005230:	f7ff ff4e 	bl	80050d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005234:	4b77      	ldr	r3, [pc, #476]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 8005236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005238:	4a76      	ldr	r2, [pc, #472]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 800523a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800523e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005240:	4b74      	ldr	r3, [pc, #464]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 8005242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005244:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800524c:	4b71      	ldr	r3, [pc, #452]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 800524e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005250:	4a70      	ldr	r2, [pc, #448]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005258:	4b6e      	ldr	r3, [pc, #440]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 800525a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005264:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005268:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526a:	2302      	movs	r3, #2
 800526c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005272:	2300      	movs	r3, #0
 8005274:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005276:	2307      	movs	r3, #7
 8005278:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800527e:	4619      	mov	r1, r3
 8005280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005284:	f001 fed6 	bl	8007034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800528c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528e:	2302      	movs	r3, #2
 8005290:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005292:	2301      	movs	r3, #1
 8005294:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005296:	2300      	movs	r3, #0
 8005298:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800529a:	2307      	movs	r3, #7
 800529c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052a2:	4619      	mov	r1, r3
 80052a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052a8:	f001 fec4 	bl	8007034 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80052ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052ae:	4a5b      	ldr	r2, [pc, #364]	@ (800541c <HAL_UART_MspInit+0x234>)
 80052b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80052b2:	4b59      	ldr	r3, [pc, #356]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052b4:	2218      	movs	r2, #24
 80052b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052b8:	4b57      	ldr	r3, [pc, #348]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052be:	4b56      	ldr	r3, [pc, #344]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052c4:	4b54      	ldr	r3, [pc, #336]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052c6:	2280      	movs	r2, #128	@ 0x80
 80052c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052ca:	4b53      	ldr	r3, [pc, #332]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052d0:	4b51      	ldr	r3, [pc, #324]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80052d6:	4b50      	ldr	r3, [pc, #320]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052d8:	2220      	movs	r2, #32
 80052da:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052de:	2200      	movs	r2, #0
 80052e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80052e2:	484d      	ldr	r0, [pc, #308]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052e4:	f000 fbda 	bl	8005a9c <HAL_DMA_Init>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80052ee:	f7ff feef 	bl	80050d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a48      	ldr	r2, [pc, #288]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80052fa:	4a47      	ldr	r2, [pc, #284]	@ (8005418 <HAL_UART_MspInit+0x230>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005300:	e082      	b.n	8005408 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a46      	ldr	r2, [pc, #280]	@ (8005420 <HAL_UART_MspInit+0x238>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d17d      	bne.n	8005408 <HAL_UART_MspInit+0x220>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800530c:	2302      	movs	r3, #2
 800530e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005310:	2300      	movs	r3, #0
 8005312:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005314:	f107 0320 	add.w	r3, r7, #32
 8005318:	4618      	mov	r0, r3
 800531a:	f002 ff1b 	bl	8008154 <HAL_RCCEx_PeriphCLKConfig>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8005324:	f7ff fed4 	bl	80050d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005328:	4b3a      	ldr	r3, [pc, #232]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 800532a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532c:	4a39      	ldr	r2, [pc, #228]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 800532e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005332:	6593      	str	r3, [r2, #88]	@ 0x58
 8005334:	4b37      	ldr	r3, [pc, #220]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005340:	4b34      	ldr	r3, [pc, #208]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 8005342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005344:	4a33      	ldr	r2, [pc, #204]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800534c:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 800534e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005358:	4b2e      	ldr	r3, [pc, #184]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 800535a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535c:	4a2d      	ldr	r2, [pc, #180]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 800535e:	f043 0302 	orr.w	r3, r3, #2
 8005362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005364:	4b2b      	ldr	r3, [pc, #172]	@ (8005414 <HAL_UART_MspInit+0x22c>)
 8005366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005370:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005374:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005376:	2302      	movs	r3, #2
 8005378:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800537a:	2301      	movs	r3, #1
 800537c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800537e:	2300      	movs	r3, #0
 8005380:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005382:	2307      	movs	r3, #7
 8005384:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005386:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800538a:	4619      	mov	r1, r3
 800538c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005390:	f001 fe50 	bl	8007034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005394:	2308      	movs	r3, #8
 8005396:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a0:	2300      	movs	r3, #0
 80053a2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053a4:	2307      	movs	r3, #7
 80053a6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80053ac:	4619      	mov	r1, r3
 80053ae:	481d      	ldr	r0, [pc, #116]	@ (8005424 <HAL_UART_MspInit+0x23c>)
 80053b0:	f001 fe40 	bl	8007034 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80053b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053b6:	4a1d      	ldr	r2, [pc, #116]	@ (800542c <HAL_UART_MspInit+0x244>)
 80053b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80053ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053bc:	221a      	movs	r2, #26
 80053be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053c0:	4b19      	ldr	r3, [pc, #100]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c6:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053cc:	4b16      	ldr	r3, [pc, #88]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053ce:	2280      	movs	r2, #128	@ 0x80
 80053d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d2:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053d8:	4b13      	ldr	r3, [pc, #76]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053da:	2200      	movs	r2, #0
 80053dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80053de:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053e0:	2220      	movs	r2, #32
 80053e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053e4:	4b10      	ldr	r3, [pc, #64]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80053ea:	480f      	ldr	r0, [pc, #60]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053ec:	f000 fb56 	bl	8005a9c <HAL_DMA_Init>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_UART_MspInit+0x212>
      Error_Handler();
 80053f6:	f7ff fe6b 	bl	80050d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005428 <HAL_UART_MspInit+0x240>)
 80053fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005402:	4a09      	ldr	r2, [pc, #36]	@ (8005428 <HAL_UART_MspInit+0x240>)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8005408:	bf00      	nop
 800540a:	3778      	adds	r7, #120	@ 0x78
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40013800 	.word	0x40013800
 8005414:	40021000 	.word	0x40021000
 8005418:	20003614 	.word	0x20003614
 800541c:	40020008 	.word	0x40020008
 8005420:	40004400 	.word	0x40004400
 8005424:	48000400 	.word	0x48000400
 8005428:	20003674 	.word	0x20003674
 800542c:	4002001c 	.word	0x4002001c

08005430 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1a      	ldr	r2, [pc, #104]	@ (80054a8 <HAL_UART_MspDeInit+0x78>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d112      	bne.n	8005468 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005442:	4b1a      	ldr	r3, [pc, #104]	@ (80054ac <HAL_UART_MspDeInit+0x7c>)
 8005444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005446:	4a19      	ldr	r2, [pc, #100]	@ (80054ac <HAL_UART_MspDeInit+0x7c>)
 8005448:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800544c:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800544e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005456:	f001 ff6f 	bl	8007338 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fbc3 	bl	8005bec <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8005466:	e01a      	b.n	800549e <HAL_UART_MspDeInit+0x6e>
  else if(huart->Instance==USART2)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a10      	ldr	r2, [pc, #64]	@ (80054b0 <HAL_UART_MspDeInit+0x80>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d115      	bne.n	800549e <HAL_UART_MspDeInit+0x6e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005472:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <HAL_UART_MspDeInit+0x7c>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005476:	4a0d      	ldr	r2, [pc, #52]	@ (80054ac <HAL_UART_MspDeInit+0x7c>)
 8005478:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800547c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 800547e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005486:	f001 ff57 	bl	8007338 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 800548a:	2108      	movs	r1, #8
 800548c:	4809      	ldr	r0, [pc, #36]	@ (80054b4 <HAL_UART_MspDeInit+0x84>)
 800548e:	f001 ff53 	bl	8007338 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fba7 	bl	8005bec <HAL_DMA_DeInit>
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40013800 	.word	0x40013800
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40004400 	.word	0x40004400
 80054b4:	48000400 	.word	0x48000400

080054b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <NMI_Handler+0x4>

080054c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <HardFault_Handler+0x4>

080054c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <MemManage_Handler+0x4>

080054d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <BusFault_Handler+0x4>

080054d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <UsageFault_Handler+0x4>

080054e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054ee:	b480      	push	{r7}
 80054f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005500:	bf00      	nop
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800550e:	f000 f975 	bl	80057fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800551c:	4802      	ldr	r0, [pc, #8]	@ (8005528 <DMA1_Channel1_IRQHandler+0x10>)
 800551e:	f000 fc76 	bl	8005e0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20003614 	.word	0x20003614

0800552c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005530:	4802      	ldr	r0, [pc, #8]	@ (800553c <DMA1_Channel2_IRQHandler+0x10>)
 8005532:	f000 fc6c 	bl	8005e0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005536:	bf00      	nop
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20003674 	.word	0x20003674

08005540 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005544:	4802      	ldr	r0, [pc, #8]	@ (8005550 <FDCAN1_IT0_IRQHandler+0x10>)
 8005546:	f001 fb2a 	bl	8006b9e <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20003488 	.word	0x20003488

08005554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return 1;
 8005558:	2301      	movs	r3, #1
}
 800555a:	4618      	mov	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <_kill>:

int _kill(int pid, int sig)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800556e:	f005 fa85 	bl	800aa7c <__errno>
 8005572:	4603      	mov	r3, r0
 8005574:	2216      	movs	r2, #22
 8005576:	601a      	str	r2, [r3, #0]
  return -1;
 8005578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <_exit>:

void _exit (int status)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800558c:	f04f 31ff 	mov.w	r1, #4294967295
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ffe7 	bl	8005564 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005596:	bf00      	nop
 8005598:	e7fd      	b.n	8005596 <_exit+0x12>

0800559a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	e00a      	b.n	80055c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055ac:	f3af 8000 	nop.w
 80055b0:	4601      	mov	r1, r0
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	60ba      	str	r2, [r7, #8]
 80055b8:	b2ca      	uxtb	r2, r1
 80055ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	3301      	adds	r3, #1
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	dbf0      	blt.n	80055ac <_read+0x12>
  }

  return len;
 80055ca:	687b      	ldr	r3, [r7, #4]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e009      	b.n	80055fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	60ba      	str	r2, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3301      	adds	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	429a      	cmp	r2, r3
 8005600:	dbf1      	blt.n	80055e6 <_write+0x12>
  }
  return len;
 8005602:	687b      	ldr	r3, [r7, #4]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <_close>:

int _close(int file)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005634:	605a      	str	r2, [r3, #4]
  return 0;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <_isatty>:

int _isatty(int file)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800564c:	2301      	movs	r3, #1
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800567c:	4a14      	ldr	r2, [pc, #80]	@ (80056d0 <_sbrk+0x5c>)
 800567e:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <_sbrk+0x60>)
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005688:	4b13      	ldr	r3, [pc, #76]	@ (80056d8 <_sbrk+0x64>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005690:	4b11      	ldr	r3, [pc, #68]	@ (80056d8 <_sbrk+0x64>)
 8005692:	4a12      	ldr	r2, [pc, #72]	@ (80056dc <_sbrk+0x68>)
 8005694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005696:	4b10      	ldr	r3, [pc, #64]	@ (80056d8 <_sbrk+0x64>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d207      	bcs.n	80056b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056a4:	f005 f9ea 	bl	800aa7c <__errno>
 80056a8:	4603      	mov	r3, r0
 80056aa:	220c      	movs	r2, #12
 80056ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	e009      	b.n	80056c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056b4:	4b08      	ldr	r3, [pc, #32]	@ (80056d8 <_sbrk+0x64>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056ba:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <_sbrk+0x64>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	4a05      	ldr	r2, [pc, #20]	@ (80056d8 <_sbrk+0x64>)
 80056c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056c6:	68fb      	ldr	r3, [r7, #12]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20008000 	.word	0x20008000
 80056d4:	00000400 	.word	0x00000400
 80056d8:	200036d4 	.word	0x200036d4
 80056dc:	20003828 	.word	0x20003828

080056e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056e4:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <SystemInit+0x20>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ea:	4a05      	ldr	r2, [pc, #20]	@ (8005700 <SystemInit+0x20>)
 80056ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056f4:	bf00      	nop
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	e000ed00 	.word	0xe000ed00

08005704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005704:	480d      	ldr	r0, [pc, #52]	@ (800573c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005706:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005708:	f7ff ffea 	bl	80056e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800570c:	480c      	ldr	r0, [pc, #48]	@ (8005740 <LoopForever+0x6>)
  ldr r1, =_edata
 800570e:	490d      	ldr	r1, [pc, #52]	@ (8005744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005710:	4a0d      	ldr	r2, [pc, #52]	@ (8005748 <LoopForever+0xe>)
  movs r3, #0
 8005712:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005714:	e002      	b.n	800571c <LoopCopyDataInit>

08005716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800571a:	3304      	adds	r3, #4

0800571c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800571c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800571e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005720:	d3f9      	bcc.n	8005716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005722:	4a0a      	ldr	r2, [pc, #40]	@ (800574c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005724:	4c0a      	ldr	r4, [pc, #40]	@ (8005750 <LoopForever+0x16>)
  movs r3, #0
 8005726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005728:	e001      	b.n	800572e <LoopFillZerobss>

0800572a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800572a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800572c:	3204      	adds	r2, #4

0800572e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800572e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005730:	d3fb      	bcc.n	800572a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8005732:	f005 f9a9 	bl	800aa88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005736:	f7ff faf7 	bl	8004d28 <main>

0800573a <LoopForever>:

LoopForever:
    b LoopForever
 800573a:	e7fe      	b.n	800573a <LoopForever>
  ldr   r0, =_estack
 800573c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005744:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005748:	0800dad8 	.word	0x0800dad8
  ldr r2, =_sbss
 800574c:	20000a40 	.word	0x20000a40
  ldr r4, =_ebss
 8005750:	20003828 	.word	0x20003828

08005754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005754:	e7fe      	b.n	8005754 <ADC1_2_IRQHandler>

08005756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005760:	2003      	movs	r0, #3
 8005762:	f000 f95b 	bl	8005a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005766:	200f      	movs	r0, #15
 8005768:	f000 f80e 	bl	8005788 <HAL_InitTick>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	71fb      	strb	r3, [r7, #7]
 8005776:	e001      	b.n	800577c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005778:	f7ff fcb0 	bl	80050dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800577c:	79fb      	ldrb	r3, [r7, #7]

}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005794:	4b16      	ldr	r3, [pc, #88]	@ (80057f0 <HAL_InitTick+0x68>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d022      	beq.n	80057e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800579c:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <HAL_InitTick+0x6c>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b13      	ldr	r3, [pc, #76]	@ (80057f0 <HAL_InitTick+0x68>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80057a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f966 	bl	8005a82 <HAL_SYSTICK_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10f      	bne.n	80057dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b0f      	cmp	r3, #15
 80057c0:	d809      	bhi.n	80057d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057c2:	2200      	movs	r2, #0
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ca:	f000 f932 	bl	8005a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057ce:	4a0a      	ldr	r2, [pc, #40]	@ (80057f8 <HAL_InitTick+0x70>)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e007      	b.n	80057e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
 80057da:	e004      	b.n	80057e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
 80057e0:	e001      	b.n	80057e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	2000001c 	.word	0x2000001c
 80057f4:	20000014 	.word	0x20000014
 80057f8:	20000018 	.word	0x20000018

080057fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005800:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <HAL_IncTick+0x1c>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b05      	ldr	r3, [pc, #20]	@ (800581c <HAL_IncTick+0x20>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4413      	add	r3, r2
 800580a:	4a03      	ldr	r2, [pc, #12]	@ (8005818 <HAL_IncTick+0x1c>)
 800580c:	6013      	str	r3, [r2, #0]
}
 800580e:	bf00      	nop
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	200036d8 	.word	0x200036d8
 800581c:	2000001c 	.word	0x2000001c

08005820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return uwTick;
 8005824:	4b03      	ldr	r3, [pc, #12]	@ (8005834 <HAL_GetTick+0x14>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	200036d8 	.word	0x200036d8

08005838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005840:	f7ff ffee 	bl	8005820 <HAL_GetTick>
 8005844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005850:	d004      	beq.n	800585c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005852:	4b09      	ldr	r3, [pc, #36]	@ (8005878 <HAL_Delay+0x40>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800585c:	bf00      	nop
 800585e:	f7ff ffdf 	bl	8005820 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	429a      	cmp	r2, r3
 800586c:	d8f7      	bhi.n	800585e <HAL_Delay+0x26>
  {
  }
}
 800586e:	bf00      	nop
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	2000001c 	.word	0x2000001c

0800587c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800588c:	4b0c      	ldr	r3, [pc, #48]	@ (80058c0 <__NVIC_SetPriorityGrouping+0x44>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005898:	4013      	ands	r3, r2
 800589a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058ae:	4a04      	ldr	r2, [pc, #16]	@ (80058c0 <__NVIC_SetPriorityGrouping+0x44>)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	60d3      	str	r3, [r2, #12]
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	e000ed00 	.word	0xe000ed00

080058c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058c8:	4b04      	ldr	r3, [pc, #16]	@ (80058dc <__NVIC_GetPriorityGrouping+0x18>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	f003 0307 	and.w	r3, r3, #7
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	e000ed00 	.word	0xe000ed00

080058e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	db0b      	blt.n	800590a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	f003 021f 	and.w	r2, r3, #31
 80058f8:	4907      	ldr	r1, [pc, #28]	@ (8005918 <__NVIC_EnableIRQ+0x38>)
 80058fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	2001      	movs	r0, #1
 8005902:	fa00 f202 	lsl.w	r2, r0, r2
 8005906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	e000e100 	.word	0xe000e100

0800591c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	6039      	str	r1, [r7, #0]
 8005926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592c:	2b00      	cmp	r3, #0
 800592e:	db0a      	blt.n	8005946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	b2da      	uxtb	r2, r3
 8005934:	490c      	ldr	r1, [pc, #48]	@ (8005968 <__NVIC_SetPriority+0x4c>)
 8005936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593a:	0112      	lsls	r2, r2, #4
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	440b      	add	r3, r1
 8005940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005944:	e00a      	b.n	800595c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4908      	ldr	r1, [pc, #32]	@ (800596c <__NVIC_SetPriority+0x50>)
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	3b04      	subs	r3, #4
 8005954:	0112      	lsls	r2, r2, #4
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	440b      	add	r3, r1
 800595a:	761a      	strb	r2, [r3, #24]
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	e000e100 	.word	0xe000e100
 800596c:	e000ed00 	.word	0xe000ed00

08005970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005970:	b480      	push	{r7}
 8005972:	b089      	sub	sp, #36	@ 0x24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f1c3 0307 	rsb	r3, r3, #7
 800598a:	2b04      	cmp	r3, #4
 800598c:	bf28      	it	cs
 800598e:	2304      	movcs	r3, #4
 8005990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3304      	adds	r3, #4
 8005996:	2b06      	cmp	r3, #6
 8005998:	d902      	bls.n	80059a0 <NVIC_EncodePriority+0x30>
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3b03      	subs	r3, #3
 800599e:	e000      	b.n	80059a2 <NVIC_EncodePriority+0x32>
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43da      	mvns	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	401a      	ands	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059b8:	f04f 31ff 	mov.w	r1, #4294967295
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	43d9      	mvns	r1, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059c8:	4313      	orrs	r3, r2
         );
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3724      	adds	r7, #36	@ 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059e8:	d301      	bcc.n	80059ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059ea:	2301      	movs	r3, #1
 80059ec:	e00f      	b.n	8005a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005a18 <SysTick_Config+0x40>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059f6:	210f      	movs	r1, #15
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	f7ff ff8e 	bl	800591c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a00:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <SysTick_Config+0x40>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a06:	4b04      	ldr	r3, [pc, #16]	@ (8005a18 <SysTick_Config+0x40>)
 8005a08:	2207      	movs	r2, #7
 8005a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	e000e010 	.word	0xe000e010

08005a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7ff ff29 	bl	800587c <__NVIC_SetPriorityGrouping>
}
 8005a2a:	bf00      	nop
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	4603      	mov	r3, r0
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a40:	f7ff ff40 	bl	80058c4 <__NVIC_GetPriorityGrouping>
 8005a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	6978      	ldr	r0, [r7, #20]
 8005a4c:	f7ff ff90 	bl	8005970 <NVIC_EncodePriority>
 8005a50:	4602      	mov	r2, r0
 8005a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff ff5f 	bl	800591c <__NVIC_SetPriority>
}
 8005a5e:	bf00      	nop
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff ff33 	bl	80058e0 <__NVIC_EnableIRQ>
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff ffa4 	bl	80059d8 <SysTick_Config>
 8005a90:	4603      	mov	r3, r0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e08d      	b.n	8005bca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	4b47      	ldr	r3, [pc, #284]	@ (8005bd4 <HAL_DMA_Init+0x138>)
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d80f      	bhi.n	8005ada <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4b45      	ldr	r3, [pc, #276]	@ (8005bd8 <HAL_DMA_Init+0x13c>)
 8005ac2:	4413      	add	r3, r2
 8005ac4:	4a45      	ldr	r2, [pc, #276]	@ (8005bdc <HAL_DMA_Init+0x140>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	009a      	lsls	r2, r3, #2
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a42      	ldr	r2, [pc, #264]	@ (8005be0 <HAL_DMA_Init+0x144>)
 8005ad6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ad8:	e00e      	b.n	8005af8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4b40      	ldr	r3, [pc, #256]	@ (8005be4 <HAL_DMA_Init+0x148>)
 8005ae2:	4413      	add	r3, r2
 8005ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8005bdc <HAL_DMA_Init+0x140>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	009a      	lsls	r2, r3, #2
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a3c      	ldr	r2, [pc, #240]	@ (8005be8 <HAL_DMA_Init+0x14c>)
 8005af6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa4c 	bl	8005fe8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b58:	d102      	bne.n	8005b60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d010      	beq.n	8005ba0 <HAL_DMA_Init+0x104>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d80c      	bhi.n	8005ba0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa6c 	bl	8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	e008      	b.n	8005bb2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40020407 	.word	0x40020407
 8005bd8:	bffdfff8 	.word	0xbffdfff8
 8005bdc:	cccccccd 	.word	0xcccccccd
 8005be0:	40020000 	.word	0x40020000
 8005be4:	bffdfbf8 	.word	0xbffdfbf8
 8005be8:	40020400 	.word	0x40020400

08005bec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e07b      	b.n	8005cf6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	4b3a      	ldr	r3, [pc, #232]	@ (8005d00 <HAL_DMA_DeInit+0x114>)
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d80f      	bhi.n	8005c3a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b38      	ldr	r3, [pc, #224]	@ (8005d04 <HAL_DMA_DeInit+0x118>)
 8005c22:	4413      	add	r3, r2
 8005c24:	4a38      	ldr	r2, [pc, #224]	@ (8005d08 <HAL_DMA_DeInit+0x11c>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	009a      	lsls	r2, r3, #2
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a35      	ldr	r2, [pc, #212]	@ (8005d0c <HAL_DMA_DeInit+0x120>)
 8005c36:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c38:	e00e      	b.n	8005c58 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4b33      	ldr	r3, [pc, #204]	@ (8005d10 <HAL_DMA_DeInit+0x124>)
 8005c42:	4413      	add	r3, r2
 8005c44:	4a30      	ldr	r2, [pc, #192]	@ (8005d08 <HAL_DMA_DeInit+0x11c>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	091b      	lsrs	r3, r3, #4
 8005c4c:	009a      	lsls	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2f      	ldr	r2, [pc, #188]	@ (8005d14 <HAL_DMA_DeInit+0x128>)
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c64:	f003 021f 	and.w	r2, r3, #31
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c72:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9b7 	bl	8005fe8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00f      	beq.n	8005cb4 <HAL_DMA_DeInit+0xc8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d80b      	bhi.n	8005cb4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f9e1 	bl	8006064 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cb2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40020407 	.word	0x40020407
 8005d04:	bffdfff8 	.word	0xbffdfff8
 8005d08:	cccccccd 	.word	0xcccccccd
 8005d0c:	40020000 	.word	0x40020000
 8005d10:	bffdfbf8 	.word	0xbffdfbf8
 8005d14:	40020400 	.word	0x40020400

08005d18 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_DMA_Start_IT+0x20>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e066      	b.n	8005e06 <HAL_DMA_Start_IT+0xee>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d155      	bne.n	8005df8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f8fb 	bl	8005f6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 020e 	orr.w	r2, r2, #14
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e00f      	b.n	8005db0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 020a 	orr.w	r2, r2, #10
 8005dae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dcc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d007      	beq.n	8005de6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005de4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0201 	orr.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e005      	b.n	8005e04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e00:	2302      	movs	r3, #2
 8005e02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	2204      	movs	r2, #4
 8005e30:	409a      	lsls	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d026      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x7a>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d021      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0204 	bic.w	r2, r2, #4
 8005e60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e66:	f003 021f 	and.w	r2, r3, #31
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	2104      	movs	r1, #4
 8005e70:	fa01 f202 	lsl.w	r2, r1, r2
 8005e74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d071      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005e86:	e06c      	b.n	8005f62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	2202      	movs	r2, #2
 8005e92:	409a      	lsls	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d02e      	beq.n	8005efa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d029      	beq.n	8005efa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10b      	bne.n	8005ecc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 020a 	bic.w	r2, r2, #10
 8005ec2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed0:	f003 021f 	and.w	r2, r3, #31
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	2102      	movs	r1, #2
 8005eda:	fa01 f202 	lsl.w	r2, r1, r2
 8005ede:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d038      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ef8:	e033      	b.n	8005f62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	2208      	movs	r2, #8
 8005f04:	409a      	lsls	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d02a      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d025      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 020e 	bic.w	r2, r2, #14
 8005f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2c:	f003 021f 	and.w	r2, r3, #31
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f202 	lsl.w	r2, r1, r2
 8005f3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
}
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d004      	beq.n	8005f96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9a:	f003 021f 	and.w	r2, r3, #31
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d108      	bne.n	8005fcc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fca:	e007      	b.n	8005fdc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	60da      	str	r2, [r3, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4b16      	ldr	r3, [pc, #88]	@ (8006050 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d802      	bhi.n	8006002 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005ffc:	4b15      	ldr	r3, [pc, #84]	@ (8006054 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e001      	b.n	8006006 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006002:	4b15      	ldr	r3, [pc, #84]	@ (8006058 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006004:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	3b08      	subs	r3, #8
 8006012:	4a12      	ldr	r2, [pc, #72]	@ (800605c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006020:	089b      	lsrs	r3, r3, #2
 8006022:	009a      	lsls	r2, r3, #2
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	461a      	mov	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a0b      	ldr	r2, [pc, #44]	@ (8006060 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006032:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	2201      	movs	r2, #1
 800603c:	409a      	lsls	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006042:	bf00      	nop
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40020407 	.word	0x40020407
 8006054:	40020800 	.word	0x40020800
 8006058:	40020820 	.word	0x40020820
 800605c:	cccccccd 	.word	0xcccccccd
 8006060:	40020880 	.word	0x40020880

08006064 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4b0b      	ldr	r3, [pc, #44]	@ (80060a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a08      	ldr	r2, [pc, #32]	@ (80060a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006086:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3b01      	subs	r3, #1
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	2201      	movs	r2, #1
 8006092:	409a      	lsls	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006098:	bf00      	nop
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	1000823f 	.word	0x1000823f
 80060a8:	40020940 	.word	0x40020940

080060ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e147      	b.n	800634e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff f826 	bl	8005124 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0210 	bic.w	r2, r2, #16
 80060e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060e8:	f7ff fb9a 	bl	8005820 <HAL_GetTick>
 80060ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80060ee:	e012      	b.n	8006116 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80060f0:	f7ff fb96 	bl	8005820 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b0a      	cmp	r3, #10
 80060fc:	d90b      	bls.n	8006116 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006102:	f043 0201 	orr.w	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2203      	movs	r2, #3
 800610e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e11b      	b.n	800634e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b08      	cmp	r3, #8
 8006122:	d0e5      	beq.n	80060f0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006134:	f7ff fb74 	bl	8005820 <HAL_GetTick>
 8006138:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800613a:	e012      	b.n	8006162 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800613c:	f7ff fb70 	bl	8005820 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b0a      	cmp	r3, #10
 8006148:	d90b      	bls.n	8006162 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614e:	f043 0201 	orr.w	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2203      	movs	r2, #3
 800615a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e0f5      	b.n	800634e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0e5      	beq.n	800613c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0202 	orr.w	r2, r2, #2
 800617e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a74      	ldr	r2, [pc, #464]	@ (8006358 <HAL_FDCAN_Init+0x2ac>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d103      	bne.n	8006192 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800618a:	4a74      	ldr	r2, [pc, #464]	@ (800635c <HAL_FDCAN_Init+0x2b0>)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7c1b      	ldrb	r3, [r3, #16]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d108      	bne.n	80061ac <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a8:	619a      	str	r2, [r3, #24]
 80061aa:	e007      	b.n	80061bc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061ba:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7c5b      	ldrb	r3, [r3, #17]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d108      	bne.n	80061d6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061d2:	619a      	str	r2, [r3, #24]
 80061d4:	e007      	b.n	80061e6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	7c9b      	ldrb	r3, [r3, #18]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d108      	bne.n	8006200 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061fc:	619a      	str	r2, [r3, #24]
 80061fe:	e007      	b.n	8006210 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800620e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006234:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0210 	bic.w	r2, r2, #16
 8006244:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d108      	bne.n	8006260 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0204 	orr.w	r2, r2, #4
 800625c:	619a      	str	r2, [r3, #24]
 800625e:	e02c      	b.n	80062ba <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d028      	beq.n	80062ba <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d01c      	beq.n	80062aa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800627e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0210 	orr.w	r2, r2, #16
 800628e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d110      	bne.n	80062ba <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0220 	orr.w	r2, r2, #32
 80062a6:	619a      	str	r2, [r3, #24]
 80062a8:	e007      	b.n	80062ba <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0220 	orr.w	r2, r2, #32
 80062b8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	3b01      	subs	r3, #1
 80062c0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062ca:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80062d2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	3b01      	subs	r3, #1
 80062dc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80062e2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80062e4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062ee:	d115      	bne.n	800631c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	3b01      	subs	r3, #1
 80062fc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80062fe:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006304:	3b01      	subs	r3, #1
 8006306:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006308:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	3b01      	subs	r3, #1
 8006312:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006318:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800631a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fdac 	bl	8006e90 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40006400 	.word	0x40006400
 800635c:	40006500 	.word	0x40006500

08006360 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006370:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d002      	beq.n	800637e <HAL_FDCAN_ConfigFilter+0x1e>
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d13d      	bne.n	80063fa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d119      	bne.n	80063ba <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006392:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800639a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	e01d      	b.n	80063f6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	075a      	lsls	r2, r3, #29
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	079a      	lsls	r2, r3, #30
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3304      	adds	r3, #4
 80063ee:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e006      	b.n	8006408 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063fe:	f043 0202 	orr.w	r2, r3, #2
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
  }
}
 8006408:	4618      	mov	r0, r3
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b01      	cmp	r3, #1
 800642c:	d116      	bne.n	800645c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006436:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	011a      	lsls	r2, r3, #4
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	431a      	orrs	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	431a      	orrs	r2, r3
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	431a      	orrs	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e006      	b.n	800646a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006460:	f043 0204 	orr.w	r2, r3, #4
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b01      	cmp	r3, #1
 800648c:	d108      	bne.n	80064a0 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	0219      	lsls	r1, r3, #8
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	430a      	orrs	r2, r1
 800649a:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Return function status */
    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e006      	b.n	80064ae <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a4:	f043 0204 	orr.w	r2, r3, #4
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d109      	bne.n	80064e2 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80064dc:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e006      	b.n	80064f0 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e6:	f043 0204 	orr.w	r2, r3, #4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
  }
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d110      	bne.n	8006532 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e006      	b.n	8006540 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006536:	f043 0204 	orr.w	r2, r3, #4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d156      	bne.n	8006612 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006574:	e011      	b.n	800659a <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b0a      	cmp	r3, #10
 800657a:	d90b      	bls.n	8006594 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006580:	f043 0201 	orr.w	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2203      	movs	r2, #3
 800658c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e045      	b.n	8006620 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0e6      	beq.n	8006576 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0210 	bic.w	r2, r2, #16
 80065ba:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80065bc:	e011      	b.n	80065e2 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b0a      	cmp	r3, #10
 80065c2:	d90b      	bls.n	80065dc <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c8:	f043 0201 	orr.w	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2203      	movs	r2, #3
 80065d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e021      	b.n	8006620 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d0e6      	beq.n	80065be <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0202 	orr.w	r2, r2, #2
 80065fe:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Return function status */
    return HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	e006      	b.n	8006620 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006616:	f043 0208 	orr.w	r2, r3, #8
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d12c      	bne.n	800669e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800664c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006658:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e023      	b.n	80066ac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fc5e 	bl	8006f3c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2101      	movs	r1, #1
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	fa01 f202 	lsl.w	r2, r1, r2
 800668c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006690:	2201      	movs	r2, #1
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	409a      	lsls	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	e006      	b.n	80066ac <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a2:	f043 0208 	orr.w	r2, r3, #8
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
  }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b08b      	sub	sp, #44	@ 0x2c
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066cc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80066ce:	7efb      	ldrb	r3, [r7, #27]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	f040 80e8 	bne.w	80068a6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b40      	cmp	r3, #64	@ 0x40
 80066da:	d137      	bne.n	800674c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e4:	f003 030f 	and.w	r3, r3, #15
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d107      	bne.n	80066fc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0db      	b.n	80068b4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006704:	0e1b      	lsrs	r3, r3, #24
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b01      	cmp	r3, #1
 800670c:	d10a      	bne.n	8006724 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006716:	0a5b      	lsrs	r3, r3, #9
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006720:	2301      	movs	r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	4613      	mov	r3, r2
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	4413      	add	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	440b      	add	r3, r1
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
 800674a:	e036      	b.n	80067ba <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006760:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0a3      	b.n	80068b4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006774:	0e1b      	lsrs	r3, r3, #24
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d10a      	bne.n	8006794 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006790:	2301      	movs	r3, #1
 8006792:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800679c:	0a1b      	lsrs	r3, r3, #8
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	4413      	add	r3, r2
 80067a6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4413      	add	r3, r2
 80067b4:	00db      	lsls	r3, r3, #3
 80067b6:	440b      	add	r3, r1
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d107      	bne.n	80067de <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	0c9b      	lsrs	r3, r3, #18
 80067d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e005      	b.n	80067ea <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	3304      	adds	r3, #4
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	0c1b      	lsrs	r3, r3, #16
 8006818:	f003 020f 	and.w	r2, r3, #15
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	0e1b      	lsrs	r3, r3, #24
 800683e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	0fda      	lsrs	r2, r3, #31
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	3304      	adds	r3, #4
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800685a:	2300      	movs	r3, #0
 800685c:	623b      	str	r3, [r7, #32]
 800685e:	e00a      	b.n	8006876 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	441a      	add	r2, r3
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	440b      	add	r3, r1
 800686c:	7812      	ldrb	r2, [r2, #0]
 800686e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	3301      	adds	r3, #1
 8006874:	623b      	str	r3, [r7, #32]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	4a11      	ldr	r2, [pc, #68]	@ (80068c0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800687c:	5cd3      	ldrb	r3, [r2, r3]
 800687e:	461a      	mov	r2, r3
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	4293      	cmp	r3, r2
 8006884:	d3ec      	bcc.n	8006860 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b40      	cmp	r3, #64	@ 0x40
 800688a:	d105      	bne.n	8006898 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	69fa      	ldr	r2, [r7, #28]
 8006892:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8006896:	e004      	b.n	80068a2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e006      	b.n	80068b4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068aa:	f043 0208 	orr.w	r2, r3, #8
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
  }
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	372c      	adds	r7, #44	@ 0x2c
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	0800d6d4 	.word	0x0800d6d4

080068c4 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f003 0207 	and.w	r2, r3, #7
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	f003 0207 	and.w	r2, r3, #7
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 0218 	and.w	r2, r3, #24
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f003 0201 	and.w	r2, r3, #1
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	099b      	lsrs	r3, r3, #6
 8006906:	f003 0201 	and.w	r2, r3, #1
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	09db      	lsrs	r3, r3, #7
 8006912:	f003 0201 	and.w	r2, r3, #1
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	0adb      	lsrs	r3, r3, #11
 800691e:	f003 0201 	and.w	r2, r3, #1
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	0b1b      	lsrs	r3, r3, #12
 800692a:	f003 0201 	and.w	r2, r3, #1
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	0b5b      	lsrs	r3, r3, #13
 8006936:	f003 0201 	and.w	r2, r3, #1
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	0b9b      	lsrs	r3, r3, #14
 8006942:	f003 0201 	and.w	r2, r3, #1
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	0c1b      	lsrs	r3, r3, #16
 800694e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006974:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	b2da      	uxtb	r2, r3
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	0a1b      	lsrs	r3, r3, #8
 8006982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	0bdb      	lsrs	r3, r3, #15
 800698e:	f003 0201 	and.w	r2, r3, #1
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	0c1b      	lsrs	r3, r3, #16
 800699a:	b2da      	uxtb	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b087      	sub	sp, #28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80069e4:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d003      	beq.n	80069f4 <HAL_FDCAN_ActivateNotification+0x22>
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	f040 80c8 	bne.w	8006b84 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fa:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d004      	beq.n	8006a10 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d03b      	beq.n	8006a88 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d004      	beq.n	8006a24 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d031      	beq.n	8006a88 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d027      	beq.n	8006a88 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01d      	beq.n	8006a88 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d013      	beq.n	8006a88 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d009      	beq.n	8006a88 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d107      	bne.n	8006a98 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d13b      	bne.n	8006b24 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d131      	bne.n	8006b24 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d127      	bne.n	8006b24 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11d      	bne.n	8006b24 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d004      	beq.n	8006afc <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d113      	bne.n	8006b24 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00c      	beq.n	8006b34 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0202 	orr.w	r2, r2, #2
 8006b32:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	e006      	b.n	8006b92 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b88:	f043 0202 	orr.w	r2, r3, #2
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b08c      	sub	sp, #48	@ 0x30
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bac:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bba:	4013      	ands	r3, r2
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bea:	4013      	ands	r3, r2
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf4:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006bf8:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	4013      	ands	r3, r2
 8006c04:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006c10:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c24:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c2c:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d006      	beq.n	8006c50 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2240      	movs	r2, #64	@ 0x40
 8006c48:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f916 	bl	8006e7c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d019      	beq.n	8006c8e <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d014      	beq.n	8006c8e <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c6c:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c84:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006c86:	6939      	ldr	r1, [r7, #16]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f8d8 	bl	8006e3e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006c9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f8a2 	bl	8006de8 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cb0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7fc fab1 	bl	800321c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f897 	bl	8006dfe <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f890 	bl	8006e14 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d018      	beq.n	8006d30 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d013      	beq.n	8006d30 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d10:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2280      	movs	r2, #128	@ 0x80
 8006d26:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006d28:	68f9      	ldr	r1, [r7, #12]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f87c 	bl	8006e28 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00c      	beq.n	8006d54 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f880 	bl	8006e54 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d007      	beq.n	8006d78 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006d70:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f878 	bl	8006e68 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00f      	beq.n	8006da2 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006d94:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006db0:	69f9      	ldr	r1, [r7, #28]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fc f9f4 	bl	80031a0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6a3a      	ldr	r2, [r7, #32]
 8006dc4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7fc f9f0 	bl	80031c0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006de0:	bf00      	nop
 8006de2:	3730      	adds	r7, #48	@ 0x30
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006e98:	4b27      	ldr	r3, [pc, #156]	@ (8006f38 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006e9a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eaa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb2:	041a      	lsls	r2, r3, #16
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ed0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed8:	061a      	lsls	r2, r3, #24
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e005      	b.n	8006f1e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d3f3      	bcc.n	8006f12 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	4000a400 	.word	0x4000a400

08006f3c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b089      	sub	sp, #36	@ 0x24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006f5a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	e00a      	b.n	8006f7e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006f70:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006f76:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006f78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f7c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006f88:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006f8e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006f94:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	00db      	lsls	r3, r3, #3
 8006faa:	4413      	add	r3, r2
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	440b      	add	r3, r1
 8006fb0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e020      	b.n	8007012 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3303      	adds	r3, #3
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	3302      	adds	r3, #2
 8006fe0:	6879      	ldr	r1, [r7, #4]
 8006fe2:	440b      	add	r3, r1
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006fe8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	3301      	adds	r3, #1
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	440b      	add	r3, r1
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006ff6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007000:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	3304      	adds	r3, #4
 800700a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	3304      	adds	r3, #4
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	4a06      	ldr	r2, [pc, #24]	@ (8007030 <FDCAN_CopyMessageToRAM+0xf4>)
 8007018:	5cd3      	ldrb	r3, [r2, r3]
 800701a:	461a      	mov	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4293      	cmp	r3, r2
 8007020:	d3d6      	bcc.n	8006fd0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	3724      	adds	r7, #36	@ 0x24
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	0800d6d4 	.word	0x0800d6d4

08007034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007042:	e15a      	b.n	80072fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	2101      	movs	r1, #1
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	fa01 f303 	lsl.w	r3, r1, r3
 8007050:	4013      	ands	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 814c 	beq.w	80072f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f003 0303 	and.w	r3, r3, #3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d005      	beq.n	8007074 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007070:	2b02      	cmp	r3, #2
 8007072:	d130      	bne.n	80070d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	2203      	movs	r2, #3
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	43db      	mvns	r3, r3
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4013      	ands	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	fa02 f303 	lsl.w	r3, r2, r3
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070aa:	2201      	movs	r2, #1
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	43db      	mvns	r3, r3
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4013      	ands	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	f003 0201 	and.w	r2, r3, #1
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d017      	beq.n	8007112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	2203      	movs	r2, #3
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43db      	mvns	r3, r3
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4013      	ands	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	fa02 f303 	lsl.w	r3, r2, r3
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d123      	bne.n	8007166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	08da      	lsrs	r2, r3, #3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	3208      	adds	r2, #8
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	220f      	movs	r2, #15
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	43db      	mvns	r3, r3
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4013      	ands	r3, r2
 8007140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691a      	ldr	r2, [r3, #16]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	08da      	lsrs	r2, r3, #3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3208      	adds	r2, #8
 8007160:	6939      	ldr	r1, [r7, #16]
 8007162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	2203      	movs	r2, #3
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	43db      	mvns	r3, r3
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4013      	ands	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f003 0203 	and.w	r2, r3, #3
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	fa02 f303 	lsl.w	r3, r2, r3
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 80a6 	beq.w	80072f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071a8:	4b5b      	ldr	r3, [pc, #364]	@ (8007318 <HAL_GPIO_Init+0x2e4>)
 80071aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ac:	4a5a      	ldr	r2, [pc, #360]	@ (8007318 <HAL_GPIO_Init+0x2e4>)
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80071b4:	4b58      	ldr	r3, [pc, #352]	@ (8007318 <HAL_GPIO_Init+0x2e4>)
 80071b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071c0:	4a56      	ldr	r2, [pc, #344]	@ (800731c <HAL_GPIO_Init+0x2e8>)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	089b      	lsrs	r3, r3, #2
 80071c6:	3302      	adds	r3, #2
 80071c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	220f      	movs	r2, #15
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	43db      	mvns	r3, r3
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	4013      	ands	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80071ea:	d01f      	beq.n	800722c <HAL_GPIO_Init+0x1f8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a4c      	ldr	r2, [pc, #304]	@ (8007320 <HAL_GPIO_Init+0x2ec>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d019      	beq.n	8007228 <HAL_GPIO_Init+0x1f4>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a4b      	ldr	r2, [pc, #300]	@ (8007324 <HAL_GPIO_Init+0x2f0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d013      	beq.n	8007224 <HAL_GPIO_Init+0x1f0>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a4a      	ldr	r2, [pc, #296]	@ (8007328 <HAL_GPIO_Init+0x2f4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00d      	beq.n	8007220 <HAL_GPIO_Init+0x1ec>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a49      	ldr	r2, [pc, #292]	@ (800732c <HAL_GPIO_Init+0x2f8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d007      	beq.n	800721c <HAL_GPIO_Init+0x1e8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a48      	ldr	r2, [pc, #288]	@ (8007330 <HAL_GPIO_Init+0x2fc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d101      	bne.n	8007218 <HAL_GPIO_Init+0x1e4>
 8007214:	2305      	movs	r3, #5
 8007216:	e00a      	b.n	800722e <HAL_GPIO_Init+0x1fa>
 8007218:	2306      	movs	r3, #6
 800721a:	e008      	b.n	800722e <HAL_GPIO_Init+0x1fa>
 800721c:	2304      	movs	r3, #4
 800721e:	e006      	b.n	800722e <HAL_GPIO_Init+0x1fa>
 8007220:	2303      	movs	r3, #3
 8007222:	e004      	b.n	800722e <HAL_GPIO_Init+0x1fa>
 8007224:	2302      	movs	r3, #2
 8007226:	e002      	b.n	800722e <HAL_GPIO_Init+0x1fa>
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <HAL_GPIO_Init+0x1fa>
 800722c:	2300      	movs	r3, #0
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	f002 0203 	and.w	r2, r2, #3
 8007234:	0092      	lsls	r2, r2, #2
 8007236:	4093      	lsls	r3, r2
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	4313      	orrs	r3, r2
 800723c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800723e:	4937      	ldr	r1, [pc, #220]	@ (800731c <HAL_GPIO_Init+0x2e8>)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	089b      	lsrs	r3, r3, #2
 8007244:	3302      	adds	r3, #2
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800724c:	4b39      	ldr	r3, [pc, #228]	@ (8007334 <HAL_GPIO_Init+0x300>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	43db      	mvns	r3, r3
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4013      	ands	r3, r2
 800725a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007270:	4a30      	ldr	r2, [pc, #192]	@ (8007334 <HAL_GPIO_Init+0x300>)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007276:	4b2f      	ldr	r3, [pc, #188]	@ (8007334 <HAL_GPIO_Init+0x300>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	43db      	mvns	r3, r3
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4013      	ands	r3, r2
 8007284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800729a:	4a26      	ldr	r2, [pc, #152]	@ (8007334 <HAL_GPIO_Init+0x300>)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80072a0:	4b24      	ldr	r3, [pc, #144]	@ (8007334 <HAL_GPIO_Init+0x300>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	43db      	mvns	r3, r3
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	4013      	ands	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80072c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007334 <HAL_GPIO_Init+0x300>)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80072ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007334 <HAL_GPIO_Init+0x300>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	43db      	mvns	r3, r3
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4013      	ands	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072ee:	4a11      	ldr	r2, [pc, #68]	@ (8007334 <HAL_GPIO_Init+0x300>)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	3301      	adds	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	fa22 f303 	lsr.w	r3, r2, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	f47f ae9d 	bne.w	8007044 <HAL_GPIO_Init+0x10>
  }
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	40021000 	.word	0x40021000
 800731c:	40010000 	.word	0x40010000
 8007320:	48000400 	.word	0x48000400
 8007324:	48000800 	.word	0x48000800
 8007328:	48000c00 	.word	0x48000c00
 800732c:	48001000 	.word	0x48001000
 8007330:	48001400 	.word	0x48001400
 8007334:	40010400 	.word	0x40010400

08007338 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8007346:	e0bd      	b.n	80074c4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007348:	2201      	movs	r2, #1
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	4013      	ands	r3, r2
 8007354:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80b0 	beq.w	80074be <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800735e:	4a60      	ldr	r2, [pc, #384]	@ (80074e0 <HAL_GPIO_DeInit+0x1a8>)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	089b      	lsrs	r3, r3, #2
 8007364:	3302      	adds	r3, #2
 8007366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800736a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	220f      	movs	r2, #15
 8007376:	fa02 f303 	lsl.w	r3, r2, r3
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4013      	ands	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007386:	d01f      	beq.n	80073c8 <HAL_GPIO_DeInit+0x90>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a56      	ldr	r2, [pc, #344]	@ (80074e4 <HAL_GPIO_DeInit+0x1ac>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d019      	beq.n	80073c4 <HAL_GPIO_DeInit+0x8c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a55      	ldr	r2, [pc, #340]	@ (80074e8 <HAL_GPIO_DeInit+0x1b0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d013      	beq.n	80073c0 <HAL_GPIO_DeInit+0x88>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a54      	ldr	r2, [pc, #336]	@ (80074ec <HAL_GPIO_DeInit+0x1b4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d00d      	beq.n	80073bc <HAL_GPIO_DeInit+0x84>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a53      	ldr	r2, [pc, #332]	@ (80074f0 <HAL_GPIO_DeInit+0x1b8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d007      	beq.n	80073b8 <HAL_GPIO_DeInit+0x80>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a52      	ldr	r2, [pc, #328]	@ (80074f4 <HAL_GPIO_DeInit+0x1bc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d101      	bne.n	80073b4 <HAL_GPIO_DeInit+0x7c>
 80073b0:	2305      	movs	r3, #5
 80073b2:	e00a      	b.n	80073ca <HAL_GPIO_DeInit+0x92>
 80073b4:	2306      	movs	r3, #6
 80073b6:	e008      	b.n	80073ca <HAL_GPIO_DeInit+0x92>
 80073b8:	2304      	movs	r3, #4
 80073ba:	e006      	b.n	80073ca <HAL_GPIO_DeInit+0x92>
 80073bc:	2303      	movs	r3, #3
 80073be:	e004      	b.n	80073ca <HAL_GPIO_DeInit+0x92>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e002      	b.n	80073ca <HAL_GPIO_DeInit+0x92>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <HAL_GPIO_DeInit+0x92>
 80073c8:	2300      	movs	r3, #0
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	f002 0203 	and.w	r2, r2, #3
 80073d0:	0092      	lsls	r2, r2, #2
 80073d2:	4093      	lsls	r3, r2
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d132      	bne.n	8007440 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80073da:	4b47      	ldr	r3, [pc, #284]	@ (80074f8 <HAL_GPIO_DeInit+0x1c0>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	43db      	mvns	r3, r3
 80073e2:	4945      	ldr	r1, [pc, #276]	@ (80074f8 <HAL_GPIO_DeInit+0x1c0>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80073e8:	4b43      	ldr	r3, [pc, #268]	@ (80074f8 <HAL_GPIO_DeInit+0x1c0>)
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	43db      	mvns	r3, r3
 80073f0:	4941      	ldr	r1, [pc, #260]	@ (80074f8 <HAL_GPIO_DeInit+0x1c0>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80073f6:	4b40      	ldr	r3, [pc, #256]	@ (80074f8 <HAL_GPIO_DeInit+0x1c0>)
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	43db      	mvns	r3, r3
 80073fe:	493e      	ldr	r1, [pc, #248]	@ (80074f8 <HAL_GPIO_DeInit+0x1c0>)
 8007400:	4013      	ands	r3, r2
 8007402:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007404:	4b3c      	ldr	r3, [pc, #240]	@ (80074f8 <HAL_GPIO_DeInit+0x1c0>)
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	43db      	mvns	r3, r3
 800740c:	493a      	ldr	r1, [pc, #232]	@ (80074f8 <HAL_GPIO_DeInit+0x1c0>)
 800740e:	4013      	ands	r3, r2
 8007410:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f003 0303 	and.w	r3, r3, #3
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	220f      	movs	r2, #15
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007422:	4a2f      	ldr	r2, [pc, #188]	@ (80074e0 <HAL_GPIO_DeInit+0x1a8>)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	089b      	lsrs	r3, r3, #2
 8007428:	3302      	adds	r3, #2
 800742a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	43da      	mvns	r2, r3
 8007432:	482b      	ldr	r0, [pc, #172]	@ (80074e0 <HAL_GPIO_DeInit+0x1a8>)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	089b      	lsrs	r3, r3, #2
 8007438:	400a      	ands	r2, r1
 800743a:	3302      	adds	r3, #2
 800743c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	2103      	movs	r1, #3
 800744a:	fa01 f303 	lsl.w	r3, r1, r3
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	08da      	lsrs	r2, r3, #3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3208      	adds	r2, #8
 800745c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	220f      	movs	r2, #15
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	08d2      	lsrs	r2, r2, #3
 8007474:	4019      	ands	r1, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3208      	adds	r2, #8
 800747a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	2103      	movs	r1, #3
 8007488:	fa01 f303 	lsl.w	r3, r1, r3
 800748c:	43db      	mvns	r3, r3
 800748e:	401a      	ands	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	2101      	movs	r1, #1
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401a      	ands	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	2103      	movs	r1, #3
 80074b2:	fa01 f303 	lsl.w	r3, r1, r3
 80074b6:	43db      	mvns	r3, r3
 80074b8:	401a      	ands	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	3301      	adds	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	fa22 f303 	lsr.w	r3, r2, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f47f af3b 	bne.w	8007348 <HAL_GPIO_DeInit+0x10>
  }
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	371c      	adds	r7, #28
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	40010000 	.word	0x40010000
 80074e4:	48000400 	.word	0x48000400
 80074e8:	48000800 	.word	0x48000800
 80074ec:	48000c00 	.word	0x48000c00
 80074f0:	48001000 	.word	0x48001000
 80074f4:	48001400 	.word	0x48001400
 80074f8:	40010400 	.word	0x40010400

080074fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	887b      	ldrh	r3, [r7, #2]
 800750e:	4013      	ands	r3, r2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007514:	2301      	movs	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
 8007518:	e001      	b.n	800751e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	807b      	strh	r3, [r7, #2]
 8007538:	4613      	mov	r3, r2
 800753a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800753c:	787b      	ldrb	r3, [r7, #1]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007548:	e002      	b.n	8007550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800754a:	887a      	ldrh	r2, [r7, #2]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800756e:	887a      	ldrh	r2, [r7, #2]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4013      	ands	r3, r2
 8007574:	041a      	lsls	r2, r3, #16
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	43d9      	mvns	r1, r3
 800757a:	887b      	ldrh	r3, [r7, #2]
 800757c:	400b      	ands	r3, r1
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	619a      	str	r2, [r3, #24]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d141      	bne.n	8007622 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800759e:	4b4b      	ldr	r3, [pc, #300]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075aa:	d131      	bne.n	8007610 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075ac:	4b47      	ldr	r3, [pc, #284]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b2:	4a46      	ldr	r2, [pc, #280]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075bc:	4b43      	ldr	r3, [pc, #268]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075c4:	4a41      	ldr	r2, [pc, #260]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075cc:	4b40      	ldr	r3, [pc, #256]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2232      	movs	r2, #50	@ 0x32
 80075d2:	fb02 f303 	mul.w	r3, r2, r3
 80075d6:	4a3f      	ldr	r2, [pc, #252]	@ (80076d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80075d8:	fba2 2303 	umull	r2, r3, r2, r3
 80075dc:	0c9b      	lsrs	r3, r3, #18
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075e2:	e002      	b.n	80075ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075ea:	4b38      	ldr	r3, [pc, #224]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f6:	d102      	bne.n	80075fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f2      	bne.n	80075e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075fe:	4b33      	ldr	r3, [pc, #204]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800760a:	d158      	bne.n	80076be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e057      	b.n	80076c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007610:	4b2e      	ldr	r3, [pc, #184]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007616:	4a2d      	ldr	r2, [pc, #180]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800761c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007620:	e04d      	b.n	80076be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007628:	d141      	bne.n	80076ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800762a:	4b28      	ldr	r3, [pc, #160]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007636:	d131      	bne.n	800769c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007638:	4b24      	ldr	r3, [pc, #144]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800763a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800763e:	4a23      	ldr	r2, [pc, #140]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007644:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007648:	4b20      	ldr	r3, [pc, #128]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007650:	4a1e      	ldr	r2, [pc, #120]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007656:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007658:	4b1d      	ldr	r3, [pc, #116]	@ (80076d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2232      	movs	r2, #50	@ 0x32
 800765e:	fb02 f303 	mul.w	r3, r2, r3
 8007662:	4a1c      	ldr	r2, [pc, #112]	@ (80076d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	0c9b      	lsrs	r3, r3, #18
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800766e:	e002      	b.n	8007676 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3b01      	subs	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007676:	4b15      	ldr	r3, [pc, #84]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800767e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007682:	d102      	bne.n	800768a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f2      	bne.n	8007670 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800768a:	4b10      	ldr	r3, [pc, #64]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007696:	d112      	bne.n	80076be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e011      	b.n	80076c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800769c:	4b0b      	ldr	r3, [pc, #44]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800769e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a2:	4a0a      	ldr	r2, [pc, #40]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80076ac:	e007      	b.n	80076be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80076ae:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80076b6:	4a05      	ldr	r2, [pc, #20]	@ (80076cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	40007000 	.word	0x40007000
 80076d0:	20000014 	.word	0x20000014
 80076d4:	431bde83 	.word	0x431bde83

080076d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80076dc:	4b05      	ldr	r3, [pc, #20]	@ (80076f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	4a04      	ldr	r2, [pc, #16]	@ (80076f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80076e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80076e6:	6093      	str	r3, [r2, #8]
}
 80076e8:	bf00      	nop
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40007000 	.word	0x40007000

080076f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e2fe      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d075      	beq.n	8007802 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007716:	4b97      	ldr	r3, [pc, #604]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 030c 	and.w	r3, r3, #12
 800771e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007720:	4b94      	ldr	r3, [pc, #592]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0303 	and.w	r3, r3, #3
 8007728:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	d102      	bne.n	8007736 <HAL_RCC_OscConfig+0x3e>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b03      	cmp	r3, #3
 8007734:	d002      	beq.n	800773c <HAL_RCC_OscConfig+0x44>
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2b08      	cmp	r3, #8
 800773a:	d10b      	bne.n	8007754 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800773c:	4b8d      	ldr	r3, [pc, #564]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d05b      	beq.n	8007800 <HAL_RCC_OscConfig+0x108>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d157      	bne.n	8007800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e2d9      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800775c:	d106      	bne.n	800776c <HAL_RCC_OscConfig+0x74>
 800775e:	4b85      	ldr	r3, [pc, #532]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a84      	ldr	r2, [pc, #528]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	e01d      	b.n	80077a8 <HAL_RCC_OscConfig+0xb0>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007774:	d10c      	bne.n	8007790 <HAL_RCC_OscConfig+0x98>
 8007776:	4b7f      	ldr	r3, [pc, #508]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a7e      	ldr	r2, [pc, #504]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800777c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	4b7c      	ldr	r3, [pc, #496]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a7b      	ldr	r2, [pc, #492]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	e00b      	b.n	80077a8 <HAL_RCC_OscConfig+0xb0>
 8007790:	4b78      	ldr	r3, [pc, #480]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a77      	ldr	r2, [pc, #476]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800779a:	6013      	str	r3, [r2, #0]
 800779c:	4b75      	ldr	r3, [pc, #468]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a74      	ldr	r2, [pc, #464]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80077a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d013      	beq.n	80077d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b0:	f7fe f836 	bl	8005820 <HAL_GetTick>
 80077b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077b6:	e008      	b.n	80077ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077b8:	f7fe f832 	bl	8005820 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	2b64      	cmp	r3, #100	@ 0x64
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e29e      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ca:	4b6a      	ldr	r3, [pc, #424]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0f0      	beq.n	80077b8 <HAL_RCC_OscConfig+0xc0>
 80077d6:	e014      	b.n	8007802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d8:	f7fe f822 	bl	8005820 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077e0:	f7fe f81e 	bl	8005820 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b64      	cmp	r3, #100	@ 0x64
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e28a      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077f2:	4b60      	ldr	r3, [pc, #384]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f0      	bne.n	80077e0 <HAL_RCC_OscConfig+0xe8>
 80077fe:	e000      	b.n	8007802 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d075      	beq.n	80078fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800780e:	4b59      	ldr	r3, [pc, #356]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 030c 	and.w	r3, r3, #12
 8007816:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007818:	4b56      	ldr	r3, [pc, #344]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f003 0303 	and.w	r3, r3, #3
 8007820:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b0c      	cmp	r3, #12
 8007826:	d102      	bne.n	800782e <HAL_RCC_OscConfig+0x136>
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d002      	beq.n	8007834 <HAL_RCC_OscConfig+0x13c>
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d11f      	bne.n	8007874 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007834:	4b4f      	ldr	r3, [pc, #316]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_RCC_OscConfig+0x154>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e25d      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800784c:	4b49      	ldr	r3, [pc, #292]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	061b      	lsls	r3, r3, #24
 800785a:	4946      	ldr	r1, [pc, #280]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800785c:	4313      	orrs	r3, r2
 800785e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007860:	4b45      	ldr	r3, [pc, #276]	@ (8007978 <HAL_RCC_OscConfig+0x280>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4618      	mov	r0, r3
 8007866:	f7fd ff8f 	bl	8005788 <HAL_InitTick>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d043      	beq.n	80078f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e249      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d023      	beq.n	80078c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800787c:	4b3d      	ldr	r3, [pc, #244]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a3c      	ldr	r2, [pc, #240]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007888:	f7fd ffca 	bl	8005820 <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800788e:	e008      	b.n	80078a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007890:	f7fd ffc6 	bl	8005820 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e232      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078a2:	4b34      	ldr	r3, [pc, #208]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f0      	beq.n	8007890 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ae:	4b31      	ldr	r3, [pc, #196]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	061b      	lsls	r3, r3, #24
 80078bc:	492d      	ldr	r1, [pc, #180]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	604b      	str	r3, [r1, #4]
 80078c2:	e01a      	b.n	80078fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80078ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d0:	f7fd ffa6 	bl	8005820 <HAL_GetTick>
 80078d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078d6:	e008      	b.n	80078ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078d8:	f7fd ffa2 	bl	8005820 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e20e      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078ea:	4b22      	ldr	r3, [pc, #136]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1f0      	bne.n	80078d8 <HAL_RCC_OscConfig+0x1e0>
 80078f6:	e000      	b.n	80078fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0308 	and.w	r3, r3, #8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d041      	beq.n	800798a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01c      	beq.n	8007948 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800790e:	4b19      	ldr	r3, [pc, #100]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007914:	4a17      	ldr	r2, [pc, #92]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007916:	f043 0301 	orr.w	r3, r3, #1
 800791a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800791e:	f7fd ff7f 	bl	8005820 <HAL_GetTick>
 8007922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007924:	e008      	b.n	8007938 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007926:	f7fd ff7b 	bl	8005820 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e1e7      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007938:	4b0e      	ldr	r3, [pc, #56]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800793a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0ef      	beq.n	8007926 <HAL_RCC_OscConfig+0x22e>
 8007946:	e020      	b.n	800798a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007948:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 800794a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800794e:	4a09      	ldr	r2, [pc, #36]	@ (8007974 <HAL_RCC_OscConfig+0x27c>)
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007958:	f7fd ff62 	bl	8005820 <HAL_GetTick>
 800795c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800795e:	e00d      	b.n	800797c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007960:	f7fd ff5e 	bl	8005820 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d906      	bls.n	800797c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e1ca      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
 8007972:	bf00      	nop
 8007974:	40021000 	.word	0x40021000
 8007978:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800797c:	4b8c      	ldr	r3, [pc, #560]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 800797e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1ea      	bne.n	8007960 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80a6 	beq.w	8007ae4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007998:	2300      	movs	r3, #0
 800799a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800799c:	4b84      	ldr	r3, [pc, #528]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 800799e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d101      	bne.n	80079ac <HAL_RCC_OscConfig+0x2b4>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e000      	b.n	80079ae <HAL_RCC_OscConfig+0x2b6>
 80079ac:	2300      	movs	r3, #0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00d      	beq.n	80079ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079b2:	4b7f      	ldr	r3, [pc, #508]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 80079b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079b6:	4a7e      	ldr	r2, [pc, #504]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 80079b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80079be:	4b7c      	ldr	r3, [pc, #496]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 80079c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80079ca:	2301      	movs	r3, #1
 80079cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ce:	4b79      	ldr	r3, [pc, #484]	@ (8007bb4 <HAL_RCC_OscConfig+0x4bc>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d118      	bne.n	8007a0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079da:	4b76      	ldr	r3, [pc, #472]	@ (8007bb4 <HAL_RCC_OscConfig+0x4bc>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a75      	ldr	r2, [pc, #468]	@ (8007bb4 <HAL_RCC_OscConfig+0x4bc>)
 80079e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079e6:	f7fd ff1b 	bl	8005820 <HAL_GetTick>
 80079ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ec:	e008      	b.n	8007a00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ee:	f7fd ff17 	bl	8005820 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d901      	bls.n	8007a00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e183      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a00:	4b6c      	ldr	r3, [pc, #432]	@ (8007bb4 <HAL_RCC_OscConfig+0x4bc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0f0      	beq.n	80079ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d108      	bne.n	8007a26 <HAL_RCC_OscConfig+0x32e>
 8007a14:	4b66      	ldr	r3, [pc, #408]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1a:	4a65      	ldr	r2, [pc, #404]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a24:	e024      	b.n	8007a70 <HAL_RCC_OscConfig+0x378>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	d110      	bne.n	8007a50 <HAL_RCC_OscConfig+0x358>
 8007a2e:	4b60      	ldr	r3, [pc, #384]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a34:	4a5e      	ldr	r2, [pc, #376]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a36:	f043 0304 	orr.w	r3, r3, #4
 8007a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a44:	4a5a      	ldr	r2, [pc, #360]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a46:	f043 0301 	orr.w	r3, r3, #1
 8007a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a4e:	e00f      	b.n	8007a70 <HAL_RCC_OscConfig+0x378>
 8007a50:	4b57      	ldr	r3, [pc, #348]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a56:	4a56      	ldr	r2, [pc, #344]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a60:	4b53      	ldr	r3, [pc, #332]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a66:	4a52      	ldr	r2, [pc, #328]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a68:	f023 0304 	bic.w	r3, r3, #4
 8007a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d016      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a78:	f7fd fed2 	bl	8005820 <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a7e:	e00a      	b.n	8007a96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a80:	f7fd fece 	bl	8005820 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e138      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a96:	4b46      	ldr	r3, [pc, #280]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0ed      	beq.n	8007a80 <HAL_RCC_OscConfig+0x388>
 8007aa4:	e015      	b.n	8007ad2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa6:	f7fd febb 	bl	8005820 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007aac:	e00a      	b.n	8007ac4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aae:	f7fd feb7 	bl	8005820 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d901      	bls.n	8007ac4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e121      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1ed      	bne.n	8007aae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ad2:	7ffb      	ldrb	r3, [r7, #31]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d105      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ad8:	4b35      	ldr	r3, [pc, #212]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007adc:	4a34      	ldr	r2, [pc, #208]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ae2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d03c      	beq.n	8007b6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01c      	beq.n	8007b32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007af8:	4b2d      	ldr	r3, [pc, #180]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007afe:	4a2c      	ldr	r2, [pc, #176]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007b00:	f043 0301 	orr.w	r3, r3, #1
 8007b04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b08:	f7fd fe8a 	bl	8005820 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b10:	f7fd fe86 	bl	8005820 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e0f2      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b22:	4b23      	ldr	r3, [pc, #140]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0ef      	beq.n	8007b10 <HAL_RCC_OscConfig+0x418>
 8007b30:	e01b      	b.n	8007b6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b32:	4b1f      	ldr	r3, [pc, #124]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b38:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007b3a:	f023 0301 	bic.w	r3, r3, #1
 8007b3e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b42:	f7fd fe6d 	bl	8005820 <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b4a:	f7fd fe69 	bl	8005820 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e0d5      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b5c:	4b14      	ldr	r3, [pc, #80]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1ef      	bne.n	8007b4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 80c9 	beq.w	8007d06 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b74:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 030c 	and.w	r3, r3, #12
 8007b7c:	2b0c      	cmp	r3, #12
 8007b7e:	f000 8083 	beq.w	8007c88 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d15e      	bne.n	8007c48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8a:	4b09      	ldr	r3, [pc, #36]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a08      	ldr	r2, [pc, #32]	@ (8007bb0 <HAL_RCC_OscConfig+0x4b8>)
 8007b90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b96:	f7fd fe43 	bl	8005820 <HAL_GetTick>
 8007b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b9c:	e00c      	b.n	8007bb8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b9e:	f7fd fe3f 	bl	8005820 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d905      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e0ab      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
 8007bb0:	40021000 	.word	0x40021000
 8007bb4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bb8:	4b55      	ldr	r3, [pc, #340]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1ec      	bne.n	8007b9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bc4:	4b52      	ldr	r3, [pc, #328]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	4b52      	ldr	r3, [pc, #328]	@ (8007d14 <HAL_RCC_OscConfig+0x61c>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6a11      	ldr	r1, [r2, #32]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007bd4:	3a01      	subs	r2, #1
 8007bd6:	0112      	lsls	r2, r2, #4
 8007bd8:	4311      	orrs	r1, r2
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007bde:	0212      	lsls	r2, r2, #8
 8007be0:	4311      	orrs	r1, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007be6:	0852      	lsrs	r2, r2, #1
 8007be8:	3a01      	subs	r2, #1
 8007bea:	0552      	lsls	r2, r2, #21
 8007bec:	4311      	orrs	r1, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007bf2:	0852      	lsrs	r2, r2, #1
 8007bf4:	3a01      	subs	r2, #1
 8007bf6:	0652      	lsls	r2, r2, #25
 8007bf8:	4311      	orrs	r1, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007bfe:	06d2      	lsls	r2, r2, #27
 8007c00:	430a      	orrs	r2, r1
 8007c02:	4943      	ldr	r1, [pc, #268]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c08:	4b41      	ldr	r3, [pc, #260]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a40      	ldr	r2, [pc, #256]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c14:	4b3e      	ldr	r3, [pc, #248]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	4a3d      	ldr	r2, [pc, #244]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c20:	f7fd fdfe 	bl	8005820 <HAL_GetTick>
 8007c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c26:	e008      	b.n	8007c3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c28:	f7fd fdfa 	bl	8005820 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e066      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c3a:	4b35      	ldr	r3, [pc, #212]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0f0      	beq.n	8007c28 <HAL_RCC_OscConfig+0x530>
 8007c46:	e05e      	b.n	8007d06 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c48:	4b31      	ldr	r3, [pc, #196]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a30      	ldr	r2, [pc, #192]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c54:	f7fd fde4 	bl	8005820 <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c5c:	f7fd fde0 	bl	8005820 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e04c      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c6e:	4b28      	ldr	r3, [pc, #160]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f0      	bne.n	8007c5c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007c7a:	4b25      	ldr	r3, [pc, #148]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	4924      	ldr	r1, [pc, #144]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c80:	4b25      	ldr	r3, [pc, #148]	@ (8007d18 <HAL_RCC_OscConfig+0x620>)
 8007c82:	4013      	ands	r3, r2
 8007c84:	60cb      	str	r3, [r1, #12]
 8007c86:	e03e      	b.n	8007d06 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d101      	bne.n	8007c94 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e039      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007c94:	4b1e      	ldr	r3, [pc, #120]	@ (8007d10 <HAL_RCC_OscConfig+0x618>)
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f003 0203 	and.w	r2, r3, #3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d12c      	bne.n	8007d02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d123      	bne.n	8007d02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d11b      	bne.n	8007d02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d113      	bne.n	8007d02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d109      	bne.n	8007d02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf8:	085b      	lsrs	r3, r3, #1
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d001      	beq.n	8007d06 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e000      	b.n	8007d08 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	40021000 	.word	0x40021000
 8007d14:	019f800c 	.word	0x019f800c
 8007d18:	feeefffc 	.word	0xfeeefffc

08007d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e11e      	b.n	8007f72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d34:	4b91      	ldr	r3, [pc, #580]	@ (8007f7c <HAL_RCC_ClockConfig+0x260>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 030f 	and.w	r3, r3, #15
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d910      	bls.n	8007d64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d42:	4b8e      	ldr	r3, [pc, #568]	@ (8007f7c <HAL_RCC_ClockConfig+0x260>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f023 020f 	bic.w	r2, r3, #15
 8007d4a:	498c      	ldr	r1, [pc, #560]	@ (8007f7c <HAL_RCC_ClockConfig+0x260>)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d52:	4b8a      	ldr	r3, [pc, #552]	@ (8007f7c <HAL_RCC_ClockConfig+0x260>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d001      	beq.n	8007d64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e106      	b.n	8007f72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d073      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d129      	bne.n	8007dcc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d78:	4b81      	ldr	r3, [pc, #516]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e0f4      	b.n	8007f72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007d88:	f000 f99e 	bl	80080c8 <RCC_GetSysClockFreqFromPLLSource>
 8007d8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4a7c      	ldr	r2, [pc, #496]	@ (8007f84 <HAL_RCC_ClockConfig+0x268>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d93f      	bls.n	8007e16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d96:	4b7a      	ldr	r3, [pc, #488]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d033      	beq.n	8007e16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d12f      	bne.n	8007e16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007db6:	4b72      	ldr	r3, [pc, #456]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dbe:	4a70      	ldr	r2, [pc, #448]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007dc6:	2380      	movs	r3, #128	@ 0x80
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	e024      	b.n	8007e16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d107      	bne.n	8007de4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0c6      	b.n	8007f72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007de4:	4b66      	ldr	r3, [pc, #408]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e0be      	b.n	8007f72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007df4:	f000 f8ce 	bl	8007f94 <HAL_RCC_GetSysClockFreq>
 8007df8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	4a61      	ldr	r2, [pc, #388]	@ (8007f84 <HAL_RCC_ClockConfig+0x268>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d909      	bls.n	8007e16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e02:	4b5f      	ldr	r3, [pc, #380]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007e12:	2380      	movs	r3, #128	@ 0x80
 8007e14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e16:	4b5a      	ldr	r3, [pc, #360]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f023 0203 	bic.w	r2, r3, #3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	4957      	ldr	r1, [pc, #348]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e28:	f7fd fcfa 	bl	8005820 <HAL_GetTick>
 8007e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e2e:	e00a      	b.n	8007e46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e30:	f7fd fcf6 	bl	8005820 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e095      	b.n	8007f72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e46:	4b4e      	ldr	r3, [pc, #312]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 020c 	and.w	r2, r3, #12
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d1eb      	bne.n	8007e30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d023      	beq.n	8007eac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e70:	4b43      	ldr	r3, [pc, #268]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	4a42      	ldr	r2, [pc, #264]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007e88:	4b3d      	ldr	r3, [pc, #244]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e90:	4a3b      	ldr	r2, [pc, #236]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e98:	4b39      	ldr	r3, [pc, #228]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	4936      	ldr	r1, [pc, #216]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	608b      	str	r3, [r1, #8]
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b80      	cmp	r3, #128	@ 0x80
 8007eb0:	d105      	bne.n	8007ebe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007eb2:	4b33      	ldr	r3, [pc, #204]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	4a32      	ldr	r2, [pc, #200]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007eb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ebc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8007f7c <HAL_RCC_ClockConfig+0x260>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d21d      	bcs.n	8007f08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8007f7c <HAL_RCC_ClockConfig+0x260>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f023 020f 	bic.w	r2, r3, #15
 8007ed4:	4929      	ldr	r1, [pc, #164]	@ (8007f7c <HAL_RCC_ClockConfig+0x260>)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007edc:	f7fd fca0 	bl	8005820 <HAL_GetTick>
 8007ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee2:	e00a      	b.n	8007efa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ee4:	f7fd fc9c 	bl	8005820 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e03b      	b.n	8007f72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007efa:	4b20      	ldr	r3, [pc, #128]	@ (8007f7c <HAL_RCC_ClockConfig+0x260>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d1ed      	bne.n	8007ee4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d008      	beq.n	8007f26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f14:	4b1a      	ldr	r3, [pc, #104]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	4917      	ldr	r1, [pc, #92]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0308 	and.w	r3, r3, #8
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f32:	4b13      	ldr	r3, [pc, #76]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	490f      	ldr	r1, [pc, #60]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f46:	f000 f825 	bl	8007f94 <HAL_RCC_GetSysClockFreq>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f80 <HAL_RCC_ClockConfig+0x264>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	091b      	lsrs	r3, r3, #4
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	490c      	ldr	r1, [pc, #48]	@ (8007f88 <HAL_RCC_ClockConfig+0x26c>)
 8007f58:	5ccb      	ldrb	r3, [r1, r3]
 8007f5a:	f003 031f 	and.w	r3, r3, #31
 8007f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f62:	4a0a      	ldr	r2, [pc, #40]	@ (8007f8c <HAL_RCC_ClockConfig+0x270>)
 8007f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007f66:	4b0a      	ldr	r3, [pc, #40]	@ (8007f90 <HAL_RCC_ClockConfig+0x274>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fd fc0c 	bl	8005788 <HAL_InitTick>
 8007f70:	4603      	mov	r3, r0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	40022000 	.word	0x40022000
 8007f80:	40021000 	.word	0x40021000
 8007f84:	04c4b400 	.word	0x04c4b400
 8007f88:	0800d6bc 	.word	0x0800d6bc
 8007f8c:	20000014 	.word	0x20000014
 8007f90:	20000018 	.word	0x20000018

08007f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800804c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f003 030c 	and.w	r3, r3, #12
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d102      	bne.n	8007fac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8008050 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fa8:	613b      	str	r3, [r7, #16]
 8007faa:	e047      	b.n	800803c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007fac:	4b27      	ldr	r3, [pc, #156]	@ (800804c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f003 030c 	and.w	r3, r3, #12
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d102      	bne.n	8007fbe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007fb8:	4b26      	ldr	r3, [pc, #152]	@ (8008054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	e03e      	b.n	800803c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007fbe:	4b23      	ldr	r3, [pc, #140]	@ (800804c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 030c 	and.w	r3, r3, #12
 8007fc6:	2b0c      	cmp	r3, #12
 8007fc8:	d136      	bne.n	8008038 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007fca:	4b20      	ldr	r3, [pc, #128]	@ (800804c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800804c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	091b      	lsrs	r3, r3, #4
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d10c      	bne.n	8008002 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8008054 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff0:	4a16      	ldr	r2, [pc, #88]	@ (800804c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ff2:	68d2      	ldr	r2, [r2, #12]
 8007ff4:	0a12      	lsrs	r2, r2, #8
 8007ff6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ffa:	fb02 f303 	mul.w	r3, r2, r3
 8007ffe:	617b      	str	r3, [r7, #20]
      break;
 8008000:	e00c      	b.n	800801c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008002:	4a13      	ldr	r2, [pc, #76]	@ (8008050 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	fbb2 f3f3 	udiv	r3, r2, r3
 800800a:	4a10      	ldr	r2, [pc, #64]	@ (800804c <HAL_RCC_GetSysClockFreq+0xb8>)
 800800c:	68d2      	ldr	r2, [r2, #12]
 800800e:	0a12      	lsrs	r2, r2, #8
 8008010:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008014:	fb02 f303 	mul.w	r3, r2, r3
 8008018:	617b      	str	r3, [r7, #20]
      break;
 800801a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800801c:	4b0b      	ldr	r3, [pc, #44]	@ (800804c <HAL_RCC_GetSysClockFreq+0xb8>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	0e5b      	lsrs	r3, r3, #25
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	3301      	adds	r3, #1
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	fbb2 f3f3 	udiv	r3, r2, r3
 8008034:	613b      	str	r3, [r7, #16]
 8008036:	e001      	b.n	800803c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800803c:	693b      	ldr	r3, [r7, #16]
}
 800803e:	4618      	mov	r0, r3
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40021000 	.word	0x40021000
 8008050:	00f42400 	.word	0x00f42400
 8008054:	007a1200 	.word	0x007a1200

08008058 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800805c:	4b03      	ldr	r3, [pc, #12]	@ (800806c <HAL_RCC_GetHCLKFreq+0x14>)
 800805e:	681b      	ldr	r3, [r3, #0]
}
 8008060:	4618      	mov	r0, r3
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000014 	.word	0x20000014

08008070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008074:	f7ff fff0 	bl	8008058 <HAL_RCC_GetHCLKFreq>
 8008078:	4602      	mov	r2, r0
 800807a:	4b06      	ldr	r3, [pc, #24]	@ (8008094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	4904      	ldr	r1, [pc, #16]	@ (8008098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008086:	5ccb      	ldrb	r3, [r1, r3]
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008090:	4618      	mov	r0, r3
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40021000 	.word	0x40021000
 8008098:	0800d6cc 	.word	0x0800d6cc

0800809c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80080a0:	f7ff ffda 	bl	8008058 <HAL_RCC_GetHCLKFreq>
 80080a4:	4602      	mov	r2, r0
 80080a6:	4b06      	ldr	r3, [pc, #24]	@ (80080c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	0adb      	lsrs	r3, r3, #11
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	4904      	ldr	r1, [pc, #16]	@ (80080c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080b2:	5ccb      	ldrb	r3, [r1, r3]
 80080b4:	f003 031f 	and.w	r3, r3, #31
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080bc:	4618      	mov	r0, r3
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40021000 	.word	0x40021000
 80080c4:	0800d6cc 	.word	0x0800d6cc

080080c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	091b      	lsrs	r3, r3, #4
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	3301      	adds	r3, #1
 80080e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d10c      	bne.n	8008106 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080ec:	4a17      	ldr	r2, [pc, #92]	@ (800814c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f4:	4a14      	ldr	r2, [pc, #80]	@ (8008148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080f6:	68d2      	ldr	r2, [r2, #12]
 80080f8:	0a12      	lsrs	r2, r2, #8
 80080fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080fe:	fb02 f303 	mul.w	r3, r2, r3
 8008102:	617b      	str	r3, [r7, #20]
    break;
 8008104:	e00c      	b.n	8008120 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008106:	4a12      	ldr	r2, [pc, #72]	@ (8008150 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	fbb2 f3f3 	udiv	r3, r2, r3
 800810e:	4a0e      	ldr	r2, [pc, #56]	@ (8008148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008110:	68d2      	ldr	r2, [r2, #12]
 8008112:	0a12      	lsrs	r2, r2, #8
 8008114:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008118:	fb02 f303 	mul.w	r3, r2, r3
 800811c:	617b      	str	r3, [r7, #20]
    break;
 800811e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008120:	4b09      	ldr	r3, [pc, #36]	@ (8008148 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	0e5b      	lsrs	r3, r3, #25
 8008126:	f003 0303 	and.w	r3, r3, #3
 800812a:	3301      	adds	r3, #1
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	fbb2 f3f3 	udiv	r3, r2, r3
 8008138:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800813a:	687b      	ldr	r3, [r7, #4]
}
 800813c:	4618      	mov	r0, r3
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	40021000 	.word	0x40021000
 800814c:	007a1200 	.word	0x007a1200
 8008150:	00f42400 	.word	0x00f42400

08008154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800815c:	2300      	movs	r3, #0
 800815e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008160:	2300      	movs	r3, #0
 8008162:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8098 	beq.w	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008172:	2300      	movs	r3, #0
 8008174:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008176:	4b43      	ldr	r3, [pc, #268]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800817a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10d      	bne.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008182:	4b40      	ldr	r3, [pc, #256]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008186:	4a3f      	ldr	r2, [pc, #252]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800818c:	6593      	str	r3, [r2, #88]	@ 0x58
 800818e:	4b3d      	ldr	r3, [pc, #244]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008196:	60bb      	str	r3, [r7, #8]
 8008198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800819a:	2301      	movs	r3, #1
 800819c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800819e:	4b3a      	ldr	r3, [pc, #232]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a39      	ldr	r2, [pc, #228]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081aa:	f7fd fb39 	bl	8005820 <HAL_GetTick>
 80081ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081b0:	e009      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081b2:	f7fd fb35 	bl	8005820 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d902      	bls.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	74fb      	strb	r3, [r7, #19]
        break;
 80081c4:	e005      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081c6:	4b30      	ldr	r3, [pc, #192]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0ef      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80081d2:	7cfb      	ldrb	r3, [r7, #19]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d159      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80081d8:	4b2a      	ldr	r3, [pc, #168]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d01e      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d019      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081f4:	4b23      	ldr	r3, [pc, #140]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008200:	4b20      	ldr	r3, [pc, #128]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008206:	4a1f      	ldr	r2, [pc, #124]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800820c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008210:	4b1c      	ldr	r3, [pc, #112]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008216:	4a1b      	ldr	r2, [pc, #108]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800821c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008220:	4a18      	ldr	r2, [pc, #96]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d016      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008232:	f7fd faf5 	bl	8005820 <HAL_GetTick>
 8008236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008238:	e00b      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800823a:	f7fd faf1 	bl	8005820 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008248:	4293      	cmp	r3, r2
 800824a:	d902      	bls.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	74fb      	strb	r3, [r7, #19]
            break;
 8008250:	e006      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008252:	4b0c      	ldr	r3, [pc, #48]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0ec      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008260:	7cfb      	ldrb	r3, [r7, #19]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10b      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800826c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008274:	4903      	ldr	r1, [pc, #12]	@ (8008284 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008276:	4313      	orrs	r3, r2
 8008278:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800827c:	e008      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800827e:	7cfb      	ldrb	r3, [r7, #19]
 8008280:	74bb      	strb	r3, [r7, #18]
 8008282:	e005      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008284:	40021000 	.word	0x40021000
 8008288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	7cfb      	ldrb	r3, [r7, #19]
 800828e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008290:	7c7b      	ldrb	r3, [r7, #17]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d105      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008296:	4ba6      	ldr	r3, [pc, #664]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829a:	4aa5      	ldr	r2, [pc, #660]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800829c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082ae:	4ba0      	ldr	r3, [pc, #640]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b4:	f023 0203 	bic.w	r2, r3, #3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	499c      	ldr	r1, [pc, #624]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00a      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082d0:	4b97      	ldr	r3, [pc, #604]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d6:	f023 020c 	bic.w	r2, r3, #12
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	4994      	ldr	r1, [pc, #592]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082f2:	4b8f      	ldr	r3, [pc, #572]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	498b      	ldr	r1, [pc, #556]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008302:	4313      	orrs	r3, r2
 8008304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0308 	and.w	r3, r3, #8
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008314:	4b86      	ldr	r3, [pc, #536]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800831a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	4983      	ldr	r1, [pc, #524]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008324:	4313      	orrs	r3, r2
 8008326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008336:	4b7e      	ldr	r3, [pc, #504]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800833c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	497a      	ldr	r1, [pc, #488]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008346:	4313      	orrs	r3, r2
 8008348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008358:	4b75      	ldr	r3, [pc, #468]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800835a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800835e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	4972      	ldr	r1, [pc, #456]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008368:	4313      	orrs	r3, r2
 800836a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800837a:	4b6d      	ldr	r3, [pc, #436]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800837c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008380:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	4969      	ldr	r1, [pc, #420]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800838a:	4313      	orrs	r3, r2
 800838c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800839c:	4b64      	ldr	r3, [pc, #400]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800839e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	4961      	ldr	r1, [pc, #388]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083be:	4b5c      	ldr	r3, [pc, #368]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083cc:	4958      	ldr	r1, [pc, #352]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d015      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083e0:	4b53      	ldr	r3, [pc, #332]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ee:	4950      	ldr	r1, [pc, #320]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083fe:	d105      	bne.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008400:	4b4b      	ldr	r3, [pc, #300]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	4a4a      	ldr	r2, [pc, #296]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800840a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008414:	2b00      	cmp	r3, #0
 8008416:	d015      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008418:	4b45      	ldr	r3, [pc, #276]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800841a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800841e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008426:	4942      	ldr	r1, [pc, #264]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008428:	4313      	orrs	r3, r2
 800842a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008436:	d105      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008438:	4b3d      	ldr	r3, [pc, #244]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	4a3c      	ldr	r2, [pc, #240]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800843e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008442:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d015      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008450:	4b37      	ldr	r3, [pc, #220]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008456:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800845e:	4934      	ldr	r1, [pc, #208]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800846e:	d105      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008470:	4b2f      	ldr	r3, [pc, #188]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	4a2e      	ldr	r2, [pc, #184]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800847a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d015      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008488:	4b29      	ldr	r3, [pc, #164]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800848e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008496:	4926      	ldr	r1, [pc, #152]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008498:	4313      	orrs	r3, r2
 800849a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084a6:	d105      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084a8:	4b21      	ldr	r3, [pc, #132]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4a20      	ldr	r2, [pc, #128]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d015      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ce:	4918      	ldr	r1, [pc, #96]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084de:	d105      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084e0:	4b13      	ldr	r3, [pc, #76]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	4a12      	ldr	r2, [pc, #72]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d015      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80084f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008506:	490a      	ldr	r1, [pc, #40]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008508:	4313      	orrs	r3, r2
 800850a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008516:	d105      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008518:	4b05      	ldr	r3, [pc, #20]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	4a04      	ldr	r2, [pc, #16]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800851e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008522:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008524:	7cbb      	ldrb	r3, [r7, #18]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	40021000 	.word	0x40021000

08008534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e042      	b.n	80085cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854c:	2b00      	cmp	r3, #0
 800854e:	d106      	bne.n	800855e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7fc fe45 	bl	80051e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2224      	movs	r2, #36	@ 0x24
 8008562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0201 	bic.w	r2, r2, #1
 8008574:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fc38 	bl	8008df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f969 	bl	800885c <UART_SetConfig>
 800858a:	4603      	mov	r3, r0
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e01b      	b.n	80085cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689a      	ldr	r2, [r3, #8]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0201 	orr.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fcb7 	bl	8008f38 <UART_CheckIdleState>
 80085ca:	4603      	mov	r3, r0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e031      	b.n	800864a <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2224      	movs	r2, #36	@ 0x24
 80085ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0201 	bic.w	r2, r2, #1
 80085fc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fc ff0a 	bl	8005430 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b08a      	sub	sp, #40	@ 0x28
 8008656:	af02      	add	r7, sp, #8
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	603b      	str	r3, [r7, #0]
 800865e:	4613      	mov	r3, r2
 8008660:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008668:	2b20      	cmp	r3, #32
 800866a:	d17b      	bne.n	8008764 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <HAL_UART_Transmit+0x26>
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e074      	b.n	8008766 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2221      	movs	r2, #33	@ 0x21
 8008688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800868c:	f7fd f8c8 	bl	8005820 <HAL_GetTick>
 8008690:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	88fa      	ldrh	r2, [r7, #6]
 8008696:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086aa:	d108      	bne.n	80086be <HAL_UART_Transmit+0x6c>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d104      	bne.n	80086be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	61bb      	str	r3, [r7, #24]
 80086bc:	e003      	b.n	80086c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086c6:	e030      	b.n	800872a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	2200      	movs	r2, #0
 80086d0:	2180      	movs	r1, #128	@ 0x80
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 fcda 	bl	800908c <UART_WaitOnFlagUntilTimeout>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e03d      	b.n	8008766 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10b      	bne.n	8008708 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	3302      	adds	r3, #2
 8008704:	61bb      	str	r3, [r7, #24]
 8008706:	e007      	b.n	8008718 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	781a      	ldrb	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	3301      	adds	r3, #1
 8008716:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800871e:	b29b      	uxth	r3, r3
 8008720:	3b01      	subs	r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1c8      	bne.n	80086c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2200      	movs	r2, #0
 800873e:	2140      	movs	r1, #64	@ 0x40
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fca3 	bl	800908c <UART_WaitOnFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e006      	b.n	8008766 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2220      	movs	r2, #32
 800875c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	e000      	b.n	8008766 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008764:	2302      	movs	r3, #2
  }
}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	@ 0x28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008784:	2b20      	cmp	r3, #32
 8008786:	d137      	bne.n	80087f8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <HAL_UART_Receive_DMA+0x24>
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e030      	b.n	80087fa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a18      	ldr	r2, [pc, #96]	@ (8008804 <HAL_UART_Receive_DMA+0x94>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d01f      	beq.n	80087e8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d018      	beq.n	80087e8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	613b      	str	r3, [r7, #16]
   return(result);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	623b      	str	r3, [r7, #32]
 80087d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	69f9      	ldr	r1, [r7, #28]
 80087da:	6a3a      	ldr	r2, [r7, #32]
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e6      	bne.n	80087b6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	461a      	mov	r2, r3
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fcba 	bl	8009168 <UART_Start_Receive_DMA>
 80087f4:	4603      	mov	r3, r0
 80087f6:	e000      	b.n	80087fa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087f8:	2302      	movs	r3, #2
  }
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3728      	adds	r7, #40	@ 0x28
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	40008000 	.word	0x40008000

08008808 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800885c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008860:	b08c      	sub	sp, #48	@ 0x30
 8008862:	af00      	add	r7, sp, #0
 8008864:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	431a      	orrs	r2, r3
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	431a      	orrs	r2, r3
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	4313      	orrs	r3, r2
 8008882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	4bab      	ldr	r3, [pc, #684]	@ (8008b38 <UART_SetConfig+0x2dc>)
 800888c:	4013      	ands	r3, r2
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008894:	430b      	orrs	r3, r1
 8008896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4aa0      	ldr	r2, [pc, #640]	@ (8008b3c <UART_SetConfig+0x2e0>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c4:	4313      	orrs	r3, r2
 80088c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80088d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	6812      	ldr	r2, [r2, #0]
 80088da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088dc:	430b      	orrs	r3, r1
 80088de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e6:	f023 010f 	bic.w	r1, r3, #15
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a91      	ldr	r2, [pc, #580]	@ (8008b40 <UART_SetConfig+0x2e4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d125      	bne.n	800894c <UART_SetConfig+0xf0>
 8008900:	4b90      	ldr	r3, [pc, #576]	@ (8008b44 <UART_SetConfig+0x2e8>)
 8008902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	2b03      	cmp	r3, #3
 800890c:	d81a      	bhi.n	8008944 <UART_SetConfig+0xe8>
 800890e:	a201      	add	r2, pc, #4	@ (adr r2, 8008914 <UART_SetConfig+0xb8>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	08008925 	.word	0x08008925
 8008918:	08008935 	.word	0x08008935
 800891c:	0800892d 	.word	0x0800892d
 8008920:	0800893d 	.word	0x0800893d
 8008924:	2301      	movs	r3, #1
 8008926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892a:	e0d6      	b.n	8008ada <UART_SetConfig+0x27e>
 800892c:	2302      	movs	r3, #2
 800892e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008932:	e0d2      	b.n	8008ada <UART_SetConfig+0x27e>
 8008934:	2304      	movs	r3, #4
 8008936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893a:	e0ce      	b.n	8008ada <UART_SetConfig+0x27e>
 800893c:	2308      	movs	r3, #8
 800893e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008942:	e0ca      	b.n	8008ada <UART_SetConfig+0x27e>
 8008944:	2310      	movs	r3, #16
 8008946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894a:	e0c6      	b.n	8008ada <UART_SetConfig+0x27e>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a7d      	ldr	r2, [pc, #500]	@ (8008b48 <UART_SetConfig+0x2ec>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d138      	bne.n	80089c8 <UART_SetConfig+0x16c>
 8008956:	4b7b      	ldr	r3, [pc, #492]	@ (8008b44 <UART_SetConfig+0x2e8>)
 8008958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895c:	f003 030c 	and.w	r3, r3, #12
 8008960:	2b0c      	cmp	r3, #12
 8008962:	d82d      	bhi.n	80089c0 <UART_SetConfig+0x164>
 8008964:	a201      	add	r2, pc, #4	@ (adr r2, 800896c <UART_SetConfig+0x110>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	080089a1 	.word	0x080089a1
 8008970:	080089c1 	.word	0x080089c1
 8008974:	080089c1 	.word	0x080089c1
 8008978:	080089c1 	.word	0x080089c1
 800897c:	080089b1 	.word	0x080089b1
 8008980:	080089c1 	.word	0x080089c1
 8008984:	080089c1 	.word	0x080089c1
 8008988:	080089c1 	.word	0x080089c1
 800898c:	080089a9 	.word	0x080089a9
 8008990:	080089c1 	.word	0x080089c1
 8008994:	080089c1 	.word	0x080089c1
 8008998:	080089c1 	.word	0x080089c1
 800899c:	080089b9 	.word	0x080089b9
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089a6:	e098      	b.n	8008ada <UART_SetConfig+0x27e>
 80089a8:	2302      	movs	r3, #2
 80089aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ae:	e094      	b.n	8008ada <UART_SetConfig+0x27e>
 80089b0:	2304      	movs	r3, #4
 80089b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089b6:	e090      	b.n	8008ada <UART_SetConfig+0x27e>
 80089b8:	2308      	movs	r3, #8
 80089ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089be:	e08c      	b.n	8008ada <UART_SetConfig+0x27e>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089c6:	e088      	b.n	8008ada <UART_SetConfig+0x27e>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a5f      	ldr	r2, [pc, #380]	@ (8008b4c <UART_SetConfig+0x2f0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d125      	bne.n	8008a1e <UART_SetConfig+0x1c2>
 80089d2:	4b5c      	ldr	r3, [pc, #368]	@ (8008b44 <UART_SetConfig+0x2e8>)
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80089dc:	2b30      	cmp	r3, #48	@ 0x30
 80089de:	d016      	beq.n	8008a0e <UART_SetConfig+0x1b2>
 80089e0:	2b30      	cmp	r3, #48	@ 0x30
 80089e2:	d818      	bhi.n	8008a16 <UART_SetConfig+0x1ba>
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	d00a      	beq.n	80089fe <UART_SetConfig+0x1a2>
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d814      	bhi.n	8008a16 <UART_SetConfig+0x1ba>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <UART_SetConfig+0x19a>
 80089f0:	2b10      	cmp	r3, #16
 80089f2:	d008      	beq.n	8008a06 <UART_SetConfig+0x1aa>
 80089f4:	e00f      	b.n	8008a16 <UART_SetConfig+0x1ba>
 80089f6:	2300      	movs	r3, #0
 80089f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089fc:	e06d      	b.n	8008ada <UART_SetConfig+0x27e>
 80089fe:	2302      	movs	r3, #2
 8008a00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a04:	e069      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a06:	2304      	movs	r3, #4
 8008a08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a0c:	e065      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a0e:	2308      	movs	r3, #8
 8008a10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a14:	e061      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a16:	2310      	movs	r3, #16
 8008a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a1c:	e05d      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a4b      	ldr	r2, [pc, #300]	@ (8008b50 <UART_SetConfig+0x2f4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d125      	bne.n	8008a74 <UART_SetConfig+0x218>
 8008a28:	4b46      	ldr	r3, [pc, #280]	@ (8008b44 <UART_SetConfig+0x2e8>)
 8008a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a34:	d016      	beq.n	8008a64 <UART_SetConfig+0x208>
 8008a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a38:	d818      	bhi.n	8008a6c <UART_SetConfig+0x210>
 8008a3a:	2b80      	cmp	r3, #128	@ 0x80
 8008a3c:	d00a      	beq.n	8008a54 <UART_SetConfig+0x1f8>
 8008a3e:	2b80      	cmp	r3, #128	@ 0x80
 8008a40:	d814      	bhi.n	8008a6c <UART_SetConfig+0x210>
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d002      	beq.n	8008a4c <UART_SetConfig+0x1f0>
 8008a46:	2b40      	cmp	r3, #64	@ 0x40
 8008a48:	d008      	beq.n	8008a5c <UART_SetConfig+0x200>
 8008a4a:	e00f      	b.n	8008a6c <UART_SetConfig+0x210>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a52:	e042      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a54:	2302      	movs	r3, #2
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5a:	e03e      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a62:	e03a      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a64:	2308      	movs	r3, #8
 8008a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a6a:	e036      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a72:	e032      	b.n	8008ada <UART_SetConfig+0x27e>
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a30      	ldr	r2, [pc, #192]	@ (8008b3c <UART_SetConfig+0x2e0>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d12a      	bne.n	8008ad4 <UART_SetConfig+0x278>
 8008a7e:	4b31      	ldr	r3, [pc, #196]	@ (8008b44 <UART_SetConfig+0x2e8>)
 8008a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a8c:	d01a      	beq.n	8008ac4 <UART_SetConfig+0x268>
 8008a8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a92:	d81b      	bhi.n	8008acc <UART_SetConfig+0x270>
 8008a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a98:	d00c      	beq.n	8008ab4 <UART_SetConfig+0x258>
 8008a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a9e:	d815      	bhi.n	8008acc <UART_SetConfig+0x270>
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <UART_SetConfig+0x250>
 8008aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa8:	d008      	beq.n	8008abc <UART_SetConfig+0x260>
 8008aaa:	e00f      	b.n	8008acc <UART_SetConfig+0x270>
 8008aac:	2300      	movs	r3, #0
 8008aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab2:	e012      	b.n	8008ada <UART_SetConfig+0x27e>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aba:	e00e      	b.n	8008ada <UART_SetConfig+0x27e>
 8008abc:	2304      	movs	r3, #4
 8008abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ac2:	e00a      	b.n	8008ada <UART_SetConfig+0x27e>
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aca:	e006      	b.n	8008ada <UART_SetConfig+0x27e>
 8008acc:	2310      	movs	r3, #16
 8008ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ad2:	e002      	b.n	8008ada <UART_SetConfig+0x27e>
 8008ad4:	2310      	movs	r3, #16
 8008ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a17      	ldr	r2, [pc, #92]	@ (8008b3c <UART_SetConfig+0x2e0>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	f040 80a8 	bne.w	8008c36 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	d834      	bhi.n	8008b58 <UART_SetConfig+0x2fc>
 8008aee:	a201      	add	r2, pc, #4	@ (adr r2, 8008af4 <UART_SetConfig+0x298>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b19 	.word	0x08008b19
 8008af8:	08008b59 	.word	0x08008b59
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b59 	.word	0x08008b59
 8008b04:	08008b27 	.word	0x08008b27
 8008b08:	08008b59 	.word	0x08008b59
 8008b0c:	08008b59 	.word	0x08008b59
 8008b10:	08008b59 	.word	0x08008b59
 8008b14:	08008b2f 	.word	0x08008b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b18:	f7ff faaa 	bl	8008070 <HAL_RCC_GetPCLK1Freq>
 8008b1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b1e:	e021      	b.n	8008b64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b20:	4b0c      	ldr	r3, [pc, #48]	@ (8008b54 <UART_SetConfig+0x2f8>)
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b24:	e01e      	b.n	8008b64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b26:	f7ff fa35 	bl	8007f94 <HAL_RCC_GetSysClockFreq>
 8008b2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b2c:	e01a      	b.n	8008b64 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b34:	e016      	b.n	8008b64 <UART_SetConfig+0x308>
 8008b36:	bf00      	nop
 8008b38:	cfff69f3 	.word	0xcfff69f3
 8008b3c:	40008000 	.word	0x40008000
 8008b40:	40013800 	.word	0x40013800
 8008b44:	40021000 	.word	0x40021000
 8008b48:	40004400 	.word	0x40004400
 8008b4c:	40004800 	.word	0x40004800
 8008b50:	40004c00 	.word	0x40004c00
 8008b54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 812a 	beq.w	8008dc0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b70:	4a9e      	ldr	r2, [pc, #632]	@ (8008dec <UART_SetConfig+0x590>)
 8008b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b76:	461a      	mov	r2, r3
 8008b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b7e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	4413      	add	r3, r2
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d305      	bcc.n	8008b9c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d903      	bls.n	8008ba4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ba2:	e10d      	b.n	8008dc0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	60bb      	str	r3, [r7, #8]
 8008baa:	60fa      	str	r2, [r7, #12]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	4a8e      	ldr	r2, [pc, #568]	@ (8008dec <UART_SetConfig+0x590>)
 8008bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2200      	movs	r2, #0
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bc6:	f7f8 f867 	bl	8000c98 <__aeabi_uldivmod>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	f04f 0300 	mov.w	r3, #0
 8008bda:	020b      	lsls	r3, r1, #8
 8008bdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008be0:	0202      	lsls	r2, r0, #8
 8008be2:	6979      	ldr	r1, [r7, #20]
 8008be4:	6849      	ldr	r1, [r1, #4]
 8008be6:	0849      	lsrs	r1, r1, #1
 8008be8:	2000      	movs	r0, #0
 8008bea:	460c      	mov	r4, r1
 8008bec:	4605      	mov	r5, r0
 8008bee:	eb12 0804 	adds.w	r8, r2, r4
 8008bf2:	eb43 0905 	adc.w	r9, r3, r5
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	469a      	mov	sl, r3
 8008bfe:	4693      	mov	fp, r2
 8008c00:	4652      	mov	r2, sl
 8008c02:	465b      	mov	r3, fp
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f8 f846 	bl	8000c98 <__aeabi_uldivmod>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4613      	mov	r3, r2
 8008c12:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c1a:	d308      	bcc.n	8008c2e <UART_SetConfig+0x3d2>
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c22:	d204      	bcs.n	8008c2e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6a3a      	ldr	r2, [r7, #32]
 8008c2a:	60da      	str	r2, [r3, #12]
 8008c2c:	e0c8      	b.n	8008dc0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c34:	e0c4      	b.n	8008dc0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c3e:	d167      	bne.n	8008d10 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008c40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d828      	bhi.n	8008c9a <UART_SetConfig+0x43e>
 8008c48:	a201      	add	r2, pc, #4	@ (adr r2, 8008c50 <UART_SetConfig+0x3f4>)
 8008c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4e:	bf00      	nop
 8008c50:	08008c75 	.word	0x08008c75
 8008c54:	08008c7d 	.word	0x08008c7d
 8008c58:	08008c85 	.word	0x08008c85
 8008c5c:	08008c9b 	.word	0x08008c9b
 8008c60:	08008c8b 	.word	0x08008c8b
 8008c64:	08008c9b 	.word	0x08008c9b
 8008c68:	08008c9b 	.word	0x08008c9b
 8008c6c:	08008c9b 	.word	0x08008c9b
 8008c70:	08008c93 	.word	0x08008c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c74:	f7ff f9fc 	bl	8008070 <HAL_RCC_GetPCLK1Freq>
 8008c78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c7a:	e014      	b.n	8008ca6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c7c:	f7ff fa0e 	bl	800809c <HAL_RCC_GetPCLK2Freq>
 8008c80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c82:	e010      	b.n	8008ca6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c84:	4b5a      	ldr	r3, [pc, #360]	@ (8008df0 <UART_SetConfig+0x594>)
 8008c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c88:	e00d      	b.n	8008ca6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c8a:	f7ff f983 	bl	8007f94 <HAL_RCC_GetSysClockFreq>
 8008c8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c90:	e009      	b.n	8008ca6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c98:	e005      	b.n	8008ca6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ca4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 8089 	beq.w	8008dc0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb2:	4a4e      	ldr	r2, [pc, #312]	@ (8008dec <UART_SetConfig+0x590>)
 8008cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cc0:	005a      	lsls	r2, r3, #1
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	085b      	lsrs	r3, r3, #1
 8008cc8:	441a      	add	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	2b0f      	cmp	r3, #15
 8008cd8:	d916      	bls.n	8008d08 <UART_SetConfig+0x4ac>
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce0:	d212      	bcs.n	8008d08 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f023 030f 	bic.w	r3, r3, #15
 8008cea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	085b      	lsrs	r3, r3, #1
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	8bfb      	ldrh	r3, [r7, #30]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	8bfa      	ldrh	r2, [r7, #30]
 8008d04:	60da      	str	r2, [r3, #12]
 8008d06:	e05b      	b.n	8008dc0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d0e:	e057      	b.n	8008dc0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d828      	bhi.n	8008d6a <UART_SetConfig+0x50e>
 8008d18:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <UART_SetConfig+0x4c4>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d45 	.word	0x08008d45
 8008d24:	08008d4d 	.word	0x08008d4d
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	08008d6b 	.word	0x08008d6b
 8008d30:	08008d5b 	.word	0x08008d5b
 8008d34:	08008d6b 	.word	0x08008d6b
 8008d38:	08008d6b 	.word	0x08008d6b
 8008d3c:	08008d6b 	.word	0x08008d6b
 8008d40:	08008d63 	.word	0x08008d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d44:	f7ff f994 	bl	8008070 <HAL_RCC_GetPCLK1Freq>
 8008d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d4a:	e014      	b.n	8008d76 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d4c:	f7ff f9a6 	bl	800809c <HAL_RCC_GetPCLK2Freq>
 8008d50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d52:	e010      	b.n	8008d76 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d54:	4b26      	ldr	r3, [pc, #152]	@ (8008df0 <UART_SetConfig+0x594>)
 8008d56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d58:	e00d      	b.n	8008d76 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d5a:	f7ff f91b 	bl	8007f94 <HAL_RCC_GetSysClockFreq>
 8008d5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d60:	e009      	b.n	8008d76 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d68:	e005      	b.n	8008d76 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d74:	bf00      	nop
    }

    if (pclk != 0U)
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d021      	beq.n	8008dc0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d80:	4a1a      	ldr	r2, [pc, #104]	@ (8008dec <UART_SetConfig+0x590>)
 8008d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d86:	461a      	mov	r2, r3
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	085b      	lsrs	r3, r3, #1
 8008d94:	441a      	add	r2, r3
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	2b0f      	cmp	r3, #15
 8008da4:	d909      	bls.n	8008dba <UART_SetConfig+0x55e>
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dac:	d205      	bcs.n	8008dba <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	60da      	str	r2, [r3, #12]
 8008db8:	e002      	b.n	8008dc0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ddc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3730      	adds	r7, #48	@ 0x30
 8008de4:	46bd      	mov	sp, r7
 8008de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dea:	bf00      	nop
 8008dec:	0800d6e4 	.word	0x0800d6e4
 8008df0:	00f42400 	.word	0x00f42400

08008df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e00:	f003 0308 	and.w	r3, r3, #8
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e66:	f003 0304 	and.w	r3, r3, #4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	430a      	orrs	r2, r1
 8008e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00a      	beq.n	8008ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	430a      	orrs	r2, r1
 8008ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01a      	beq.n	8008f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ef2:	d10a      	bne.n	8008f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	605a      	str	r2, [r3, #4]
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b098      	sub	sp, #96	@ 0x60
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f48:	f7fc fc6a 	bl	8005820 <HAL_GetTick>
 8008f4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d12f      	bne.n	8008fbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f64:	2200      	movs	r2, #0
 8008f66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 f88e 	bl	800908c <UART_WaitOnFlagUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d022      	beq.n	8008fbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e6      	bne.n	8008f76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e063      	b.n	8009084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0304 	and.w	r3, r3, #4
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	d149      	bne.n	800905e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f857 	bl	800908c <UART_WaitOnFlagUntilTimeout>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d03c      	beq.n	800905e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009002:	633b      	str	r3, [r7, #48]	@ 0x30
 8009004:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e6      	bne.n	8008fe4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	60fb      	str	r3, [r7, #12]
   return(result);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009036:	61fa      	str	r2, [r7, #28]
 8009038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	69b9      	ldr	r1, [r7, #24]
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	617b      	str	r3, [r7, #20]
   return(result);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e5      	bne.n	8009016 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2220      	movs	r2, #32
 800904e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e012      	b.n	8009084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2220      	movs	r2, #32
 8009062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2220      	movs	r2, #32
 800906a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3758      	adds	r7, #88	@ 0x58
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	4613      	mov	r3, r2
 800909a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800909c:	e04f      	b.n	800913e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a4:	d04b      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090a6:	f7fc fbbb 	bl	8005820 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d302      	bcc.n	80090bc <UART_WaitOnFlagUntilTimeout+0x30>
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e04e      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0304 	and.w	r3, r3, #4
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d037      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2b80      	cmp	r3, #128	@ 0x80
 80090d2:	d034      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xb2>
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b40      	cmp	r3, #64	@ 0x40
 80090d8:	d031      	beq.n	800913e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	2b08      	cmp	r3, #8
 80090e6:	d110      	bne.n	800910a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2208      	movs	r2, #8
 80090ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f920 	bl	8009336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2208      	movs	r2, #8
 80090fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e029      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009118:	d111      	bne.n	800913e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 f906 	bl	8009336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2220      	movs	r2, #32
 800912e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e00f      	b.n	800915e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4013      	ands	r3, r2
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	429a      	cmp	r2, r3
 800914c:	bf0c      	ite	eq
 800914e:	2301      	moveq	r3, #1
 8009150:	2300      	movne	r3, #0
 8009152:	b2db      	uxtb	r3, r3
 8009154:	461a      	mov	r2, r3
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	429a      	cmp	r2, r3
 800915a:	d0a0      	beq.n	800909e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b096      	sub	sp, #88	@ 0x58
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	88fa      	ldrh	r2, [r7, #6]
 8009180:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2222      	movs	r2, #34	@ 0x22
 8009190:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800919a:	2b00      	cmp	r3, #0
 800919c:	d02d      	beq.n	80091fa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091a4:	4a40      	ldr	r2, [pc, #256]	@ (80092a8 <UART_Start_Receive_DMA+0x140>)
 80091a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ae:	4a3f      	ldr	r2, [pc, #252]	@ (80092ac <UART_Start_Receive_DMA+0x144>)
 80091b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b8:	4a3d      	ldr	r2, [pc, #244]	@ (80092b0 <UART_Start_Receive_DMA+0x148>)
 80091ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c2:	2200      	movs	r2, #0
 80091c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3324      	adds	r3, #36	@ 0x24
 80091d2:	4619      	mov	r1, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d8:	461a      	mov	r2, r3
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	f7fc fd9c 	bl	8005d18 <HAL_DMA_Start_IT>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d009      	beq.n	80091fa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2210      	movs	r2, #16
 80091ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e051      	b.n	800929e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d018      	beq.n	8009234 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009216:	657b      	str	r3, [r7, #84]	@ 0x54
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009222:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800922e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e6      	bne.n	8009202 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	653b      	str	r3, [r7, #80]	@ 0x50
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3308      	adds	r3, #8
 8009252:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009254:	637a      	str	r2, [r7, #52]	@ 0x34
 8009256:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800925a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e5      	bne.n	8009234 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3308      	adds	r3, #8
 800926e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	613b      	str	r3, [r7, #16]
   return(result);
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800927e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3308      	adds	r3, #8
 8009286:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009288:	623a      	str	r2, [r7, #32]
 800928a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	69f9      	ldr	r1, [r7, #28]
 800928e:	6a3a      	ldr	r2, [r7, #32]
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	61bb      	str	r3, [r7, #24]
   return(result);
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e5      	bne.n	8009268 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3758      	adds	r7, #88	@ 0x58
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	08009403 	.word	0x08009403
 80092ac:	0800952f 	.word	0x0800952f
 80092b0:	0800956d 	.word	0x0800956d

080092b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b08f      	sub	sp, #60	@ 0x3c
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e6      	bne.n	80092bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009304:	633b      	str	r3, [r7, #48]	@ 0x30
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	3308      	adds	r3, #8
 800930c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800930e:	61ba      	str	r2, [r7, #24]
 8009310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6979      	ldr	r1, [r7, #20]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	613b      	str	r3, [r7, #16]
   return(result);
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e5      	bne.n	80092ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800932a:	bf00      	nop
 800932c:	373c      	adds	r7, #60	@ 0x3c
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009336:	b480      	push	{r7}
 8009338:	b095      	sub	sp, #84	@ 0x54
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800935c:	643b      	str	r3, [r7, #64]	@ 0x40
 800935e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800936a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e6      	bne.n	800933e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3308      	adds	r3, #8
 8009376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009386:	f023 0301 	bic.w	r3, r3, #1
 800938a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3308      	adds	r3, #8
 8009392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009394:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009396:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800939a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e3      	bne.n	8009370 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d118      	bne.n	80093e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f023 0310 	bic.w	r3, r3, #16
 80093c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093ce:	61bb      	str	r3, [r7, #24]
 80093d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6979      	ldr	r1, [r7, #20]
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	613b      	str	r3, [r7, #16]
   return(result);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e6      	bne.n	80093b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093f6:	bf00      	nop
 80093f8:	3754      	adds	r7, #84	@ 0x54
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b09c      	sub	sp, #112	@ 0x70
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b00      	cmp	r3, #0
 800941c:	d171      	bne.n	8009502 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800941e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009420:	2200      	movs	r2, #0
 8009422:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800942e:	e853 3f00 	ldrex	r3, [r3]
 8009432:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009436:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800943a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800943c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	461a      	mov	r2, r3
 8009442:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009444:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009446:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800944a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e6      	bne.n	8009426 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3308      	adds	r3, #8
 800945e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946a:	f023 0301 	bic.w	r3, r3, #1
 800946e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3308      	adds	r3, #8
 8009476:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009478:	647a      	str	r2, [r7, #68]	@ 0x44
 800947a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800947e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e5      	bne.n	8009458 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800948c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3308      	adds	r3, #8
 8009492:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	e853 3f00 	ldrex	r3, [r3]
 800949a:	623b      	str	r3, [r7, #32]
   return(result);
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80094a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80094ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80094ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e5      	bne.n	800948c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094c2:	2220      	movs	r2, #32
 80094c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d118      	bne.n	8009502 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f023 0310 	bic.w	r3, r3, #16
 80094e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094ee:	61fb      	str	r3, [r7, #28]
 80094f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	69b9      	ldr	r1, [r7, #24]
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	617b      	str	r3, [r7, #20]
   return(result);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e6      	bne.n	80094d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009504:	2200      	movs	r2, #0
 8009506:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800950a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800950c:	2b01      	cmp	r3, #1
 800950e:	d107      	bne.n	8009520 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009512:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009516:	4619      	mov	r1, r3
 8009518:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800951a:	f7ff f993 	bl	8008844 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800951e:	e002      	b.n	8009526 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009520:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009522:	f7ff f971 	bl	8008808 <HAL_UART_RxCpltCallback>
}
 8009526:	bf00      	nop
 8009528:	3770      	adds	r7, #112	@ 0x70
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2201      	movs	r2, #1
 8009540:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009546:	2b01      	cmp	r3, #1
 8009548:	d109      	bne.n	800955e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009550:	085b      	lsrs	r3, r3, #1
 8009552:	b29b      	uxth	r3, r3
 8009554:	4619      	mov	r1, r3
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f7ff f974 	bl	8008844 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800955c:	e002      	b.n	8009564 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7ff f95c 	bl	800881c <HAL_UART_RxHalfCpltCallback>
}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009578:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009580:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009588:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009594:	2b80      	cmp	r3, #128	@ 0x80
 8009596:	d109      	bne.n	80095ac <UART_DMAError+0x40>
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2b21      	cmp	r3, #33	@ 0x21
 800959c:	d106      	bne.n	80095ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	f7ff fe84 	bl	80092b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b6:	2b40      	cmp	r3, #64	@ 0x40
 80095b8:	d109      	bne.n	80095ce <UART_DMAError+0x62>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2b22      	cmp	r3, #34	@ 0x22
 80095be:	d106      	bne.n	80095ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80095c8:	6978      	ldr	r0, [r7, #20]
 80095ca:	f7ff feb4 	bl	8009336 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d4:	f043 0210 	orr.w	r2, r3, #16
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095de:	6978      	ldr	r0, [r7, #20]
 80095e0:	f7ff f926 	bl	8008830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095e4:	bf00      	nop
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e058      	b.n	80096b6 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7fb fde6 	bl	80051e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2224      	movs	r2, #36	@ 0x24
 8009620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0201 	bic.w	r2, r2, #1
 8009632:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff fbd9 	bl	8008df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f7ff f90a 	bl	800885c <UART_SetConfig>
 8009648:	4603      	mov	r3, r0
 800964a:	2b01      	cmp	r3, #1
 800964c:	d101      	bne.n	8009652 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e031      	b.n	80096b6 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009660:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	430a      	orrs	r2, r1
 8009674:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	055b      	lsls	r3, r3, #21
 800967a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	041b      	lsls	r3, r3, #16
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	4313      	orrs	r3, r2
 8009684:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8009690:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	6812      	ldr	r2, [r2, #0]
 8009698:	6979      	ldr	r1, [r7, #20]
 800969a:	430b      	orrs	r3, r1
 800969c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f042 0201 	orr.w	r2, r2, #1
 80096ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff fc42 	bl	8008f38 <UART_CheckIdleState>
 80096b4:	4603      	mov	r3, r0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096be:	b480      	push	{r7}
 80096c0:	b085      	sub	sp, #20
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d101      	bne.n	80096d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80096d0:	2302      	movs	r3, #2
 80096d2:	e027      	b.n	8009724 <HAL_UARTEx_DisableFifoMode+0x66>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2224      	movs	r2, #36	@ 0x24
 80096e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0201 	bic.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009702:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009740:	2b01      	cmp	r3, #1
 8009742:	d101      	bne.n	8009748 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009744:	2302      	movs	r3, #2
 8009746:	e02d      	b.n	80097a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2224      	movs	r2, #36	@ 0x24
 8009754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0201 	bic.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f84f 	bl	8009828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2220      	movs	r2, #32
 8009796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e02d      	b.n	8009820 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2224      	movs	r2, #36	@ 0x24
 80097d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 0201 	bic.w	r2, r2, #1
 80097ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f811 	bl	8009828 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2220      	movs	r2, #32
 8009812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009834:	2b00      	cmp	r3, #0
 8009836:	d108      	bne.n	800984a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009848:	e031      	b.n	80098ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800984a:	2308      	movs	r3, #8
 800984c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800984e:	2308      	movs	r3, #8
 8009850:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	0e5b      	lsrs	r3, r3, #25
 800985a:	b2db      	uxtb	r3, r3
 800985c:	f003 0307 	and.w	r3, r3, #7
 8009860:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	0f5b      	lsrs	r3, r3, #29
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f003 0307 	and.w	r3, r3, #7
 8009870:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	7b3a      	ldrb	r2, [r7, #12]
 8009876:	4911      	ldr	r1, [pc, #68]	@ (80098bc <UARTEx_SetNbDataToProcess+0x94>)
 8009878:	5c8a      	ldrb	r2, [r1, r2]
 800987a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800987e:	7b3a      	ldrb	r2, [r7, #12]
 8009880:	490f      	ldr	r1, [pc, #60]	@ (80098c0 <UARTEx_SetNbDataToProcess+0x98>)
 8009882:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009884:	fb93 f3f2 	sdiv	r3, r3, r2
 8009888:	b29a      	uxth	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	7b7a      	ldrb	r2, [r7, #13]
 8009894:	4909      	ldr	r1, [pc, #36]	@ (80098bc <UARTEx_SetNbDataToProcess+0x94>)
 8009896:	5c8a      	ldrb	r2, [r1, r2]
 8009898:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800989c:	7b7a      	ldrb	r2, [r7, #13]
 800989e:	4908      	ldr	r1, [pc, #32]	@ (80098c0 <UARTEx_SetNbDataToProcess+0x98>)
 80098a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80098ae:	bf00      	nop
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	0800d6fc 	.word	0x0800d6fc
 80098c0:	0800d704 	.word	0x0800d704

080098c4 <sulp>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	4604      	mov	r4, r0
 80098c8:	460d      	mov	r5, r1
 80098ca:	ec45 4b10 	vmov	d0, r4, r5
 80098ce:	4616      	mov	r6, r2
 80098d0:	f002 f8e0 	bl	800ba94 <__ulp>
 80098d4:	ec51 0b10 	vmov	r0, r1, d0
 80098d8:	b17e      	cbz	r6, 80098fa <sulp+0x36>
 80098da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80098de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dd09      	ble.n	80098fa <sulp+0x36>
 80098e6:	051b      	lsls	r3, r3, #20
 80098e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80098ec:	2400      	movs	r4, #0
 80098ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80098f2:	4622      	mov	r2, r4
 80098f4:	462b      	mov	r3, r5
 80098f6:	f7f6 feaf 	bl	8000658 <__aeabi_dmul>
 80098fa:	ec41 0b10 	vmov	d0, r0, r1
 80098fe:	bd70      	pop	{r4, r5, r6, pc}

08009900 <_strtod_l>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	b09f      	sub	sp, #124	@ 0x7c
 8009906:	460c      	mov	r4, r1
 8009908:	9217      	str	r2, [sp, #92]	@ 0x5c
 800990a:	2200      	movs	r2, #0
 800990c:	921a      	str	r2, [sp, #104]	@ 0x68
 800990e:	9005      	str	r0, [sp, #20]
 8009910:	f04f 0a00 	mov.w	sl, #0
 8009914:	f04f 0b00 	mov.w	fp, #0
 8009918:	460a      	mov	r2, r1
 800991a:	9219      	str	r2, [sp, #100]	@ 0x64
 800991c:	7811      	ldrb	r1, [r2, #0]
 800991e:	292b      	cmp	r1, #43	@ 0x2b
 8009920:	d04a      	beq.n	80099b8 <_strtod_l+0xb8>
 8009922:	d838      	bhi.n	8009996 <_strtod_l+0x96>
 8009924:	290d      	cmp	r1, #13
 8009926:	d832      	bhi.n	800998e <_strtod_l+0x8e>
 8009928:	2908      	cmp	r1, #8
 800992a:	d832      	bhi.n	8009992 <_strtod_l+0x92>
 800992c:	2900      	cmp	r1, #0
 800992e:	d03b      	beq.n	80099a8 <_strtod_l+0xa8>
 8009930:	2200      	movs	r2, #0
 8009932:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009934:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009936:	782a      	ldrb	r2, [r5, #0]
 8009938:	2a30      	cmp	r2, #48	@ 0x30
 800993a:	f040 80b3 	bne.w	8009aa4 <_strtod_l+0x1a4>
 800993e:	786a      	ldrb	r2, [r5, #1]
 8009940:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009944:	2a58      	cmp	r2, #88	@ 0x58
 8009946:	d16e      	bne.n	8009a26 <_strtod_l+0x126>
 8009948:	9302      	str	r3, [sp, #8]
 800994a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	4a8e      	ldr	r2, [pc, #568]	@ (8009b8c <_strtod_l+0x28c>)
 8009954:	9805      	ldr	r0, [sp, #20]
 8009956:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009958:	a919      	add	r1, sp, #100	@ 0x64
 800995a:	f001 f995 	bl	800ac88 <__gethex>
 800995e:	f010 060f 	ands.w	r6, r0, #15
 8009962:	4604      	mov	r4, r0
 8009964:	d005      	beq.n	8009972 <_strtod_l+0x72>
 8009966:	2e06      	cmp	r6, #6
 8009968:	d128      	bne.n	80099bc <_strtod_l+0xbc>
 800996a:	3501      	adds	r5, #1
 800996c:	2300      	movs	r3, #0
 800996e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009974:	2b00      	cmp	r3, #0
 8009976:	f040 858e 	bne.w	800a496 <_strtod_l+0xb96>
 800997a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800997c:	b1cb      	cbz	r3, 80099b2 <_strtod_l+0xb2>
 800997e:	4652      	mov	r2, sl
 8009980:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009984:	ec43 2b10 	vmov	d0, r2, r3
 8009988:	b01f      	add	sp, #124	@ 0x7c
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998e:	2920      	cmp	r1, #32
 8009990:	d1ce      	bne.n	8009930 <_strtod_l+0x30>
 8009992:	3201      	adds	r2, #1
 8009994:	e7c1      	b.n	800991a <_strtod_l+0x1a>
 8009996:	292d      	cmp	r1, #45	@ 0x2d
 8009998:	d1ca      	bne.n	8009930 <_strtod_l+0x30>
 800999a:	2101      	movs	r1, #1
 800999c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800999e:	1c51      	adds	r1, r2, #1
 80099a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80099a2:	7852      	ldrb	r2, [r2, #1]
 80099a4:	2a00      	cmp	r2, #0
 80099a6:	d1c5      	bne.n	8009934 <_strtod_l+0x34>
 80099a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80099aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 8570 	bne.w	800a492 <_strtod_l+0xb92>
 80099b2:	4652      	mov	r2, sl
 80099b4:	465b      	mov	r3, fp
 80099b6:	e7e5      	b.n	8009984 <_strtod_l+0x84>
 80099b8:	2100      	movs	r1, #0
 80099ba:	e7ef      	b.n	800999c <_strtod_l+0x9c>
 80099bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80099be:	b13a      	cbz	r2, 80099d0 <_strtod_l+0xd0>
 80099c0:	2135      	movs	r1, #53	@ 0x35
 80099c2:	a81c      	add	r0, sp, #112	@ 0x70
 80099c4:	f002 f960 	bl	800bc88 <__copybits>
 80099c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ca:	9805      	ldr	r0, [sp, #20]
 80099cc:	f001 fd2e 	bl	800b42c <_Bfree>
 80099d0:	3e01      	subs	r6, #1
 80099d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80099d4:	2e04      	cmp	r6, #4
 80099d6:	d806      	bhi.n	80099e6 <_strtod_l+0xe6>
 80099d8:	e8df f006 	tbb	[pc, r6]
 80099dc:	201d0314 	.word	0x201d0314
 80099e0:	14          	.byte	0x14
 80099e1:	00          	.byte	0x00
 80099e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80099e6:	05e1      	lsls	r1, r4, #23
 80099e8:	bf48      	it	mi
 80099ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80099ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099f2:	0d1b      	lsrs	r3, r3, #20
 80099f4:	051b      	lsls	r3, r3, #20
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1bb      	bne.n	8009972 <_strtod_l+0x72>
 80099fa:	f001 f83f 	bl	800aa7c <__errno>
 80099fe:	2322      	movs	r3, #34	@ 0x22
 8009a00:	6003      	str	r3, [r0, #0]
 8009a02:	e7b6      	b.n	8009972 <_strtod_l+0x72>
 8009a04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009a08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009a0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009a10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a14:	e7e7      	b.n	80099e6 <_strtod_l+0xe6>
 8009a16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009b94 <_strtod_l+0x294>
 8009a1a:	e7e4      	b.n	80099e6 <_strtod_l+0xe6>
 8009a1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009a20:	f04f 3aff 	mov.w	sl, #4294967295
 8009a24:	e7df      	b.n	80099e6 <_strtod_l+0xe6>
 8009a26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a2c:	785b      	ldrb	r3, [r3, #1]
 8009a2e:	2b30      	cmp	r3, #48	@ 0x30
 8009a30:	d0f9      	beq.n	8009a26 <_strtod_l+0x126>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d09d      	beq.n	8009972 <_strtod_l+0x72>
 8009a36:	2301      	movs	r3, #1
 8009a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9308      	str	r3, [sp, #32]
 8009a42:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a44:	461f      	mov	r7, r3
 8009a46:	220a      	movs	r2, #10
 8009a48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009a4a:	7805      	ldrb	r5, [r0, #0]
 8009a4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009a50:	b2d9      	uxtb	r1, r3
 8009a52:	2909      	cmp	r1, #9
 8009a54:	d928      	bls.n	8009aa8 <_strtod_l+0x1a8>
 8009a56:	494e      	ldr	r1, [pc, #312]	@ (8009b90 <_strtod_l+0x290>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f000 ff8b 	bl	800a974 <strncmp>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d032      	beq.n	8009ac8 <_strtod_l+0x1c8>
 8009a62:	2000      	movs	r0, #0
 8009a64:	462a      	mov	r2, r5
 8009a66:	4681      	mov	r9, r0
 8009a68:	463d      	mov	r5, r7
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2a65      	cmp	r2, #101	@ 0x65
 8009a6e:	d001      	beq.n	8009a74 <_strtod_l+0x174>
 8009a70:	2a45      	cmp	r2, #69	@ 0x45
 8009a72:	d114      	bne.n	8009a9e <_strtod_l+0x19e>
 8009a74:	b91d      	cbnz	r5, 8009a7e <_strtod_l+0x17e>
 8009a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a78:	4302      	orrs	r2, r0
 8009a7a:	d095      	beq.n	80099a8 <_strtod_l+0xa8>
 8009a7c:	2500      	movs	r5, #0
 8009a7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009a80:	1c62      	adds	r2, r4, #1
 8009a82:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a84:	7862      	ldrb	r2, [r4, #1]
 8009a86:	2a2b      	cmp	r2, #43	@ 0x2b
 8009a88:	d077      	beq.n	8009b7a <_strtod_l+0x27a>
 8009a8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009a8c:	d07b      	beq.n	8009b86 <_strtod_l+0x286>
 8009a8e:	f04f 0c00 	mov.w	ip, #0
 8009a92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009a96:	2909      	cmp	r1, #9
 8009a98:	f240 8082 	bls.w	8009ba0 <_strtod_l+0x2a0>
 8009a9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a9e:	f04f 0800 	mov.w	r8, #0
 8009aa2:	e0a2      	b.n	8009bea <_strtod_l+0x2ea>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e7c7      	b.n	8009a38 <_strtod_l+0x138>
 8009aa8:	2f08      	cmp	r7, #8
 8009aaa:	bfd5      	itete	le
 8009aac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009aae:	9908      	ldrgt	r1, [sp, #32]
 8009ab0:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ab4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009ab8:	f100 0001 	add.w	r0, r0, #1
 8009abc:	bfd4      	ite	le
 8009abe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ac0:	9308      	strgt	r3, [sp, #32]
 8009ac2:	3701      	adds	r7, #1
 8009ac4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ac6:	e7bf      	b.n	8009a48 <_strtod_l+0x148>
 8009ac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ace:	785a      	ldrb	r2, [r3, #1]
 8009ad0:	b37f      	cbz	r7, 8009b32 <_strtod_l+0x232>
 8009ad2:	4681      	mov	r9, r0
 8009ad4:	463d      	mov	r5, r7
 8009ad6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	d912      	bls.n	8009b04 <_strtod_l+0x204>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e7c4      	b.n	8009a6c <_strtod_l+0x16c>
 8009ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ae8:	785a      	ldrb	r2, [r3, #1]
 8009aea:	3001      	adds	r0, #1
 8009aec:	2a30      	cmp	r2, #48	@ 0x30
 8009aee:	d0f8      	beq.n	8009ae2 <_strtod_l+0x1e2>
 8009af0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	f200 84d3 	bhi.w	800a4a0 <_strtod_l+0xba0>
 8009afa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009afc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009afe:	4681      	mov	r9, r0
 8009b00:	2000      	movs	r0, #0
 8009b02:	4605      	mov	r5, r0
 8009b04:	3a30      	subs	r2, #48	@ 0x30
 8009b06:	f100 0301 	add.w	r3, r0, #1
 8009b0a:	d02a      	beq.n	8009b62 <_strtod_l+0x262>
 8009b0c:	4499      	add	r9, r3
 8009b0e:	eb00 0c05 	add.w	ip, r0, r5
 8009b12:	462b      	mov	r3, r5
 8009b14:	210a      	movs	r1, #10
 8009b16:	4563      	cmp	r3, ip
 8009b18:	d10d      	bne.n	8009b36 <_strtod_l+0x236>
 8009b1a:	1c69      	adds	r1, r5, #1
 8009b1c:	4401      	add	r1, r0
 8009b1e:	4428      	add	r0, r5
 8009b20:	2808      	cmp	r0, #8
 8009b22:	dc16      	bgt.n	8009b52 <_strtod_l+0x252>
 8009b24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009b26:	230a      	movs	r3, #10
 8009b28:	fb03 2300 	mla	r3, r3, r0, r2
 8009b2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e018      	b.n	8009b64 <_strtod_l+0x264>
 8009b32:	4638      	mov	r0, r7
 8009b34:	e7da      	b.n	8009aec <_strtod_l+0x1ec>
 8009b36:	2b08      	cmp	r3, #8
 8009b38:	f103 0301 	add.w	r3, r3, #1
 8009b3c:	dc03      	bgt.n	8009b46 <_strtod_l+0x246>
 8009b3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009b40:	434e      	muls	r6, r1
 8009b42:	960a      	str	r6, [sp, #40]	@ 0x28
 8009b44:	e7e7      	b.n	8009b16 <_strtod_l+0x216>
 8009b46:	2b10      	cmp	r3, #16
 8009b48:	bfde      	ittt	le
 8009b4a:	9e08      	ldrle	r6, [sp, #32]
 8009b4c:	434e      	mulle	r6, r1
 8009b4e:	9608      	strle	r6, [sp, #32]
 8009b50:	e7e1      	b.n	8009b16 <_strtod_l+0x216>
 8009b52:	280f      	cmp	r0, #15
 8009b54:	dceb      	bgt.n	8009b2e <_strtod_l+0x22e>
 8009b56:	9808      	ldr	r0, [sp, #32]
 8009b58:	230a      	movs	r3, #10
 8009b5a:	fb03 2300 	mla	r3, r3, r0, r2
 8009b5e:	9308      	str	r3, [sp, #32]
 8009b60:	e7e5      	b.n	8009b2e <_strtod_l+0x22e>
 8009b62:	4629      	mov	r1, r5
 8009b64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b66:	1c50      	adds	r0, r2, #1
 8009b68:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b6a:	7852      	ldrb	r2, [r2, #1]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	460d      	mov	r5, r1
 8009b70:	e7b1      	b.n	8009ad6 <_strtod_l+0x1d6>
 8009b72:	f04f 0900 	mov.w	r9, #0
 8009b76:	2301      	movs	r3, #1
 8009b78:	e77d      	b.n	8009a76 <_strtod_l+0x176>
 8009b7a:	f04f 0c00 	mov.w	ip, #0
 8009b7e:	1ca2      	adds	r2, r4, #2
 8009b80:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b82:	78a2      	ldrb	r2, [r4, #2]
 8009b84:	e785      	b.n	8009a92 <_strtod_l+0x192>
 8009b86:	f04f 0c01 	mov.w	ip, #1
 8009b8a:	e7f8      	b.n	8009b7e <_strtod_l+0x27e>
 8009b8c:	0800d730 	.word	0x0800d730
 8009b90:	0800d70c 	.word	0x0800d70c
 8009b94:	7ff00000 	.word	0x7ff00000
 8009b98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009b9a:	1c51      	adds	r1, r2, #1
 8009b9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b9e:	7852      	ldrb	r2, [r2, #1]
 8009ba0:	2a30      	cmp	r2, #48	@ 0x30
 8009ba2:	d0f9      	beq.n	8009b98 <_strtod_l+0x298>
 8009ba4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009ba8:	2908      	cmp	r1, #8
 8009baa:	f63f af78 	bhi.w	8009a9e <_strtod_l+0x19e>
 8009bae:	3a30      	subs	r2, #48	@ 0x30
 8009bb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009bb6:	f04f 080a 	mov.w	r8, #10
 8009bba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bbc:	1c56      	adds	r6, r2, #1
 8009bbe:	9619      	str	r6, [sp, #100]	@ 0x64
 8009bc0:	7852      	ldrb	r2, [r2, #1]
 8009bc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009bc6:	f1be 0f09 	cmp.w	lr, #9
 8009bca:	d939      	bls.n	8009c40 <_strtod_l+0x340>
 8009bcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009bce:	1a76      	subs	r6, r6, r1
 8009bd0:	2e08      	cmp	r6, #8
 8009bd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009bd6:	dc03      	bgt.n	8009be0 <_strtod_l+0x2e0>
 8009bd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009bda:	4588      	cmp	r8, r1
 8009bdc:	bfa8      	it	ge
 8009bde:	4688      	movge	r8, r1
 8009be0:	f1bc 0f00 	cmp.w	ip, #0
 8009be4:	d001      	beq.n	8009bea <_strtod_l+0x2ea>
 8009be6:	f1c8 0800 	rsb	r8, r8, #0
 8009bea:	2d00      	cmp	r5, #0
 8009bec:	d14e      	bne.n	8009c8c <_strtod_l+0x38c>
 8009bee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bf0:	4308      	orrs	r0, r1
 8009bf2:	f47f aebe 	bne.w	8009972 <_strtod_l+0x72>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f47f aed6 	bne.w	80099a8 <_strtod_l+0xa8>
 8009bfc:	2a69      	cmp	r2, #105	@ 0x69
 8009bfe:	d028      	beq.n	8009c52 <_strtod_l+0x352>
 8009c00:	dc25      	bgt.n	8009c4e <_strtod_l+0x34e>
 8009c02:	2a49      	cmp	r2, #73	@ 0x49
 8009c04:	d025      	beq.n	8009c52 <_strtod_l+0x352>
 8009c06:	2a4e      	cmp	r2, #78	@ 0x4e
 8009c08:	f47f aece 	bne.w	80099a8 <_strtod_l+0xa8>
 8009c0c:	499b      	ldr	r1, [pc, #620]	@ (8009e7c <_strtod_l+0x57c>)
 8009c0e:	a819      	add	r0, sp, #100	@ 0x64
 8009c10:	f001 fa5c 	bl	800b0cc <__match>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	f43f aec7 	beq.w	80099a8 <_strtod_l+0xa8>
 8009c1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b28      	cmp	r3, #40	@ 0x28
 8009c20:	d12e      	bne.n	8009c80 <_strtod_l+0x380>
 8009c22:	4997      	ldr	r1, [pc, #604]	@ (8009e80 <_strtod_l+0x580>)
 8009c24:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c26:	a819      	add	r0, sp, #100	@ 0x64
 8009c28:	f001 fa64 	bl	800b0f4 <__hexnan>
 8009c2c:	2805      	cmp	r0, #5
 8009c2e:	d127      	bne.n	8009c80 <_strtod_l+0x380>
 8009c30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009c36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009c3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009c3e:	e698      	b.n	8009972 <_strtod_l+0x72>
 8009c40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c42:	fb08 2101 	mla	r1, r8, r1, r2
 8009c46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009c4a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c4c:	e7b5      	b.n	8009bba <_strtod_l+0x2ba>
 8009c4e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009c50:	e7da      	b.n	8009c08 <_strtod_l+0x308>
 8009c52:	498c      	ldr	r1, [pc, #560]	@ (8009e84 <_strtod_l+0x584>)
 8009c54:	a819      	add	r0, sp, #100	@ 0x64
 8009c56:	f001 fa39 	bl	800b0cc <__match>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f43f aea4 	beq.w	80099a8 <_strtod_l+0xa8>
 8009c60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c62:	4989      	ldr	r1, [pc, #548]	@ (8009e88 <_strtod_l+0x588>)
 8009c64:	3b01      	subs	r3, #1
 8009c66:	a819      	add	r0, sp, #100	@ 0x64
 8009c68:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c6a:	f001 fa2f 	bl	800b0cc <__match>
 8009c6e:	b910      	cbnz	r0, 8009c76 <_strtod_l+0x376>
 8009c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c72:	3301      	adds	r3, #1
 8009c74:	9319      	str	r3, [sp, #100]	@ 0x64
 8009c76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009e98 <_strtod_l+0x598>
 8009c7a:	f04f 0a00 	mov.w	sl, #0
 8009c7e:	e678      	b.n	8009972 <_strtod_l+0x72>
 8009c80:	4882      	ldr	r0, [pc, #520]	@ (8009e8c <_strtod_l+0x58c>)
 8009c82:	f000 ff41 	bl	800ab08 <nan>
 8009c86:	ec5b ab10 	vmov	sl, fp, d0
 8009c8a:	e672      	b.n	8009972 <_strtod_l+0x72>
 8009c8c:	eba8 0309 	sub.w	r3, r8, r9
 8009c90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c94:	2f00      	cmp	r7, #0
 8009c96:	bf08      	it	eq
 8009c98:	462f      	moveq	r7, r5
 8009c9a:	2d10      	cmp	r5, #16
 8009c9c:	462c      	mov	r4, r5
 8009c9e:	bfa8      	it	ge
 8009ca0:	2410      	movge	r4, #16
 8009ca2:	f7f6 fc5f 	bl	8000564 <__aeabi_ui2d>
 8009ca6:	2d09      	cmp	r5, #9
 8009ca8:	4682      	mov	sl, r0
 8009caa:	468b      	mov	fp, r1
 8009cac:	dc13      	bgt.n	8009cd6 <_strtod_l+0x3d6>
 8009cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f43f ae5e 	beq.w	8009972 <_strtod_l+0x72>
 8009cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb8:	dd78      	ble.n	8009dac <_strtod_l+0x4ac>
 8009cba:	2b16      	cmp	r3, #22
 8009cbc:	dc5f      	bgt.n	8009d7e <_strtod_l+0x47e>
 8009cbe:	4974      	ldr	r1, [pc, #464]	@ (8009e90 <_strtod_l+0x590>)
 8009cc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cc8:	4652      	mov	r2, sl
 8009cca:	465b      	mov	r3, fp
 8009ccc:	f7f6 fcc4 	bl	8000658 <__aeabi_dmul>
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	468b      	mov	fp, r1
 8009cd4:	e64d      	b.n	8009972 <_strtod_l+0x72>
 8009cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8009e90 <_strtod_l+0x590>)
 8009cd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009ce0:	f7f6 fcba 	bl	8000658 <__aeabi_dmul>
 8009ce4:	4682      	mov	sl, r0
 8009ce6:	9808      	ldr	r0, [sp, #32]
 8009ce8:	468b      	mov	fp, r1
 8009cea:	f7f6 fc3b 	bl	8000564 <__aeabi_ui2d>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	4650      	mov	r0, sl
 8009cf4:	4659      	mov	r1, fp
 8009cf6:	f7f6 faf9 	bl	80002ec <__adddf3>
 8009cfa:	2d0f      	cmp	r5, #15
 8009cfc:	4682      	mov	sl, r0
 8009cfe:	468b      	mov	fp, r1
 8009d00:	ddd5      	ble.n	8009cae <_strtod_l+0x3ae>
 8009d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d04:	1b2c      	subs	r4, r5, r4
 8009d06:	441c      	add	r4, r3
 8009d08:	2c00      	cmp	r4, #0
 8009d0a:	f340 8096 	ble.w	8009e3a <_strtod_l+0x53a>
 8009d0e:	f014 030f 	ands.w	r3, r4, #15
 8009d12:	d00a      	beq.n	8009d2a <_strtod_l+0x42a>
 8009d14:	495e      	ldr	r1, [pc, #376]	@ (8009e90 <_strtod_l+0x590>)
 8009d16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d1a:	4652      	mov	r2, sl
 8009d1c:	465b      	mov	r3, fp
 8009d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d22:	f7f6 fc99 	bl	8000658 <__aeabi_dmul>
 8009d26:	4682      	mov	sl, r0
 8009d28:	468b      	mov	fp, r1
 8009d2a:	f034 040f 	bics.w	r4, r4, #15
 8009d2e:	d073      	beq.n	8009e18 <_strtod_l+0x518>
 8009d30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009d34:	dd48      	ble.n	8009dc8 <_strtod_l+0x4c8>
 8009d36:	2400      	movs	r4, #0
 8009d38:	46a0      	mov	r8, r4
 8009d3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d3c:	46a1      	mov	r9, r4
 8009d3e:	9a05      	ldr	r2, [sp, #20]
 8009d40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009e98 <_strtod_l+0x598>
 8009d44:	2322      	movs	r3, #34	@ 0x22
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	f04f 0a00 	mov.w	sl, #0
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f43f ae0f 	beq.w	8009972 <_strtod_l+0x72>
 8009d54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d56:	9805      	ldr	r0, [sp, #20]
 8009d58:	f001 fb68 	bl	800b42c <_Bfree>
 8009d5c:	9805      	ldr	r0, [sp, #20]
 8009d5e:	4649      	mov	r1, r9
 8009d60:	f001 fb64 	bl	800b42c <_Bfree>
 8009d64:	9805      	ldr	r0, [sp, #20]
 8009d66:	4641      	mov	r1, r8
 8009d68:	f001 fb60 	bl	800b42c <_Bfree>
 8009d6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d6e:	9805      	ldr	r0, [sp, #20]
 8009d70:	f001 fb5c 	bl	800b42c <_Bfree>
 8009d74:	9805      	ldr	r0, [sp, #20]
 8009d76:	4621      	mov	r1, r4
 8009d78:	f001 fb58 	bl	800b42c <_Bfree>
 8009d7c:	e5f9      	b.n	8009972 <_strtod_l+0x72>
 8009d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009d84:	4293      	cmp	r3, r2
 8009d86:	dbbc      	blt.n	8009d02 <_strtod_l+0x402>
 8009d88:	4c41      	ldr	r4, [pc, #260]	@ (8009e90 <_strtod_l+0x590>)
 8009d8a:	f1c5 050f 	rsb	r5, r5, #15
 8009d8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d92:	4652      	mov	r2, sl
 8009d94:	465b      	mov	r3, fp
 8009d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d9a:	f7f6 fc5d 	bl	8000658 <__aeabi_dmul>
 8009d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da0:	1b5d      	subs	r5, r3, r5
 8009da2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009da6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009daa:	e78f      	b.n	8009ccc <_strtod_l+0x3cc>
 8009dac:	3316      	adds	r3, #22
 8009dae:	dba8      	blt.n	8009d02 <_strtod_l+0x402>
 8009db0:	4b37      	ldr	r3, [pc, #220]	@ (8009e90 <_strtod_l+0x590>)
 8009db2:	eba9 0808 	sub.w	r8, r9, r8
 8009db6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009dba:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009dbe:	4650      	mov	r0, sl
 8009dc0:	4659      	mov	r1, fp
 8009dc2:	f7f6 fd73 	bl	80008ac <__aeabi_ddiv>
 8009dc6:	e783      	b.n	8009cd0 <_strtod_l+0x3d0>
 8009dc8:	4b32      	ldr	r3, [pc, #200]	@ (8009e94 <_strtod_l+0x594>)
 8009dca:	9308      	str	r3, [sp, #32]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	1124      	asrs	r4, r4, #4
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	4659      	mov	r1, fp
 8009dd4:	461e      	mov	r6, r3
 8009dd6:	2c01      	cmp	r4, #1
 8009dd8:	dc21      	bgt.n	8009e1e <_strtod_l+0x51e>
 8009dda:	b10b      	cbz	r3, 8009de0 <_strtod_l+0x4e0>
 8009ddc:	4682      	mov	sl, r0
 8009dde:	468b      	mov	fp, r1
 8009de0:	492c      	ldr	r1, [pc, #176]	@ (8009e94 <_strtod_l+0x594>)
 8009de2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009de6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009dea:	4652      	mov	r2, sl
 8009dec:	465b      	mov	r3, fp
 8009dee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df2:	f7f6 fc31 	bl	8000658 <__aeabi_dmul>
 8009df6:	4b28      	ldr	r3, [pc, #160]	@ (8009e98 <_strtod_l+0x598>)
 8009df8:	460a      	mov	r2, r1
 8009dfa:	400b      	ands	r3, r1
 8009dfc:	4927      	ldr	r1, [pc, #156]	@ (8009e9c <_strtod_l+0x59c>)
 8009dfe:	428b      	cmp	r3, r1
 8009e00:	4682      	mov	sl, r0
 8009e02:	d898      	bhi.n	8009d36 <_strtod_l+0x436>
 8009e04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009e08:	428b      	cmp	r3, r1
 8009e0a:	bf86      	itte	hi
 8009e0c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009ea0 <_strtod_l+0x5a0>
 8009e10:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9308      	str	r3, [sp, #32]
 8009e1c:	e07a      	b.n	8009f14 <_strtod_l+0x614>
 8009e1e:	07e2      	lsls	r2, r4, #31
 8009e20:	d505      	bpl.n	8009e2e <_strtod_l+0x52e>
 8009e22:	9b08      	ldr	r3, [sp, #32]
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	f7f6 fc16 	bl	8000658 <__aeabi_dmul>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	9a08      	ldr	r2, [sp, #32]
 8009e30:	3208      	adds	r2, #8
 8009e32:	3601      	adds	r6, #1
 8009e34:	1064      	asrs	r4, r4, #1
 8009e36:	9208      	str	r2, [sp, #32]
 8009e38:	e7cd      	b.n	8009dd6 <_strtod_l+0x4d6>
 8009e3a:	d0ed      	beq.n	8009e18 <_strtod_l+0x518>
 8009e3c:	4264      	negs	r4, r4
 8009e3e:	f014 020f 	ands.w	r2, r4, #15
 8009e42:	d00a      	beq.n	8009e5a <_strtod_l+0x55a>
 8009e44:	4b12      	ldr	r3, [pc, #72]	@ (8009e90 <_strtod_l+0x590>)
 8009e46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	4659      	mov	r1, fp
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 fd2b 	bl	80008ac <__aeabi_ddiv>
 8009e56:	4682      	mov	sl, r0
 8009e58:	468b      	mov	fp, r1
 8009e5a:	1124      	asrs	r4, r4, #4
 8009e5c:	d0dc      	beq.n	8009e18 <_strtod_l+0x518>
 8009e5e:	2c1f      	cmp	r4, #31
 8009e60:	dd20      	ble.n	8009ea4 <_strtod_l+0x5a4>
 8009e62:	2400      	movs	r4, #0
 8009e64:	46a0      	mov	r8, r4
 8009e66:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e68:	46a1      	mov	r9, r4
 8009e6a:	9a05      	ldr	r2, [sp, #20]
 8009e6c:	2322      	movs	r3, #34	@ 0x22
 8009e6e:	f04f 0a00 	mov.w	sl, #0
 8009e72:	f04f 0b00 	mov.w	fp, #0
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	e768      	b.n	8009d4c <_strtod_l+0x44c>
 8009e7a:	bf00      	nop
 8009e7c:	0800d717 	.word	0x0800d717
 8009e80:	0800d71c 	.word	0x0800d71c
 8009e84:	0800d70e 	.word	0x0800d70e
 8009e88:	0800d711 	.word	0x0800d711
 8009e8c:	0800dac6 	.word	0x0800dac6
 8009e90:	0800d990 	.word	0x0800d990
 8009e94:	0800d968 	.word	0x0800d968
 8009e98:	7ff00000 	.word	0x7ff00000
 8009e9c:	7ca00000 	.word	0x7ca00000
 8009ea0:	7fefffff 	.word	0x7fefffff
 8009ea4:	f014 0310 	ands.w	r3, r4, #16
 8009ea8:	bf18      	it	ne
 8009eaa:	236a      	movne	r3, #106	@ 0x6a
 8009eac:	4ea9      	ldr	r6, [pc, #676]	@ (800a154 <_strtod_l+0x854>)
 8009eae:	9308      	str	r3, [sp, #32]
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	4659      	mov	r1, fp
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	07e2      	lsls	r2, r4, #31
 8009eb8:	d504      	bpl.n	8009ec4 <_strtod_l+0x5c4>
 8009eba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ebe:	f7f6 fbcb 	bl	8000658 <__aeabi_dmul>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	1064      	asrs	r4, r4, #1
 8009ec6:	f106 0608 	add.w	r6, r6, #8
 8009eca:	d1f4      	bne.n	8009eb6 <_strtod_l+0x5b6>
 8009ecc:	b10b      	cbz	r3, 8009ed2 <_strtod_l+0x5d2>
 8009ece:	4682      	mov	sl, r0
 8009ed0:	468b      	mov	fp, r1
 8009ed2:	9b08      	ldr	r3, [sp, #32]
 8009ed4:	b1b3      	cbz	r3, 8009f04 <_strtod_l+0x604>
 8009ed6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009eda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	4659      	mov	r1, fp
 8009ee2:	dd0f      	ble.n	8009f04 <_strtod_l+0x604>
 8009ee4:	2b1f      	cmp	r3, #31
 8009ee6:	dd55      	ble.n	8009f94 <_strtod_l+0x694>
 8009ee8:	2b34      	cmp	r3, #52	@ 0x34
 8009eea:	bfde      	ittt	le
 8009eec:	f04f 33ff 	movle.w	r3, #4294967295
 8009ef0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009ef4:	4093      	lslle	r3, r2
 8009ef6:	f04f 0a00 	mov.w	sl, #0
 8009efa:	bfcc      	ite	gt
 8009efc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f00:	ea03 0b01 	andle.w	fp, r3, r1
 8009f04:	2200      	movs	r2, #0
 8009f06:	2300      	movs	r3, #0
 8009f08:	4650      	mov	r0, sl
 8009f0a:	4659      	mov	r1, fp
 8009f0c:	f7f6 fe0c 	bl	8000b28 <__aeabi_dcmpeq>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d1a6      	bne.n	8009e62 <_strtod_l+0x562>
 8009f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f1a:	9805      	ldr	r0, [sp, #20]
 8009f1c:	462b      	mov	r3, r5
 8009f1e:	463a      	mov	r2, r7
 8009f20:	f001 faec 	bl	800b4fc <__s2b>
 8009f24:	900a      	str	r0, [sp, #40]	@ 0x28
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f43f af05 	beq.w	8009d36 <_strtod_l+0x436>
 8009f2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f2e:	2a00      	cmp	r2, #0
 8009f30:	eba9 0308 	sub.w	r3, r9, r8
 8009f34:	bfa8      	it	ge
 8009f36:	2300      	movge	r3, #0
 8009f38:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f3a:	2400      	movs	r4, #0
 8009f3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f40:	9316      	str	r3, [sp, #88]	@ 0x58
 8009f42:	46a0      	mov	r8, r4
 8009f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f46:	9805      	ldr	r0, [sp, #20]
 8009f48:	6859      	ldr	r1, [r3, #4]
 8009f4a:	f001 fa2f 	bl	800b3ac <_Balloc>
 8009f4e:	4681      	mov	r9, r0
 8009f50:	2800      	cmp	r0, #0
 8009f52:	f43f aef4 	beq.w	8009d3e <_strtod_l+0x43e>
 8009f56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f58:	691a      	ldr	r2, [r3, #16]
 8009f5a:	3202      	adds	r2, #2
 8009f5c:	f103 010c 	add.w	r1, r3, #12
 8009f60:	0092      	lsls	r2, r2, #2
 8009f62:	300c      	adds	r0, #12
 8009f64:	f000 fdbf 	bl	800aae6 <memcpy>
 8009f68:	ec4b ab10 	vmov	d0, sl, fp
 8009f6c:	9805      	ldr	r0, [sp, #20]
 8009f6e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009f70:	a91b      	add	r1, sp, #108	@ 0x6c
 8009f72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009f76:	f001 fdfd 	bl	800bb74 <__d2b>
 8009f7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	f43f aede 	beq.w	8009d3e <_strtod_l+0x43e>
 8009f82:	9805      	ldr	r0, [sp, #20]
 8009f84:	2101      	movs	r1, #1
 8009f86:	f001 fb4f 	bl	800b628 <__i2b>
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	b948      	cbnz	r0, 8009fa2 <_strtod_l+0x6a2>
 8009f8e:	f04f 0800 	mov.w	r8, #0
 8009f92:	e6d4      	b.n	8009d3e <_strtod_l+0x43e>
 8009f94:	f04f 32ff 	mov.w	r2, #4294967295
 8009f98:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9c:	ea03 0a0a 	and.w	sl, r3, sl
 8009fa0:	e7b0      	b.n	8009f04 <_strtod_l+0x604>
 8009fa2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009fa4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009fa6:	2d00      	cmp	r5, #0
 8009fa8:	bfab      	itete	ge
 8009faa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009fac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009fae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009fb0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009fb2:	bfac      	ite	ge
 8009fb4:	18ef      	addge	r7, r5, r3
 8009fb6:	1b5e      	sublt	r6, r3, r5
 8009fb8:	9b08      	ldr	r3, [sp, #32]
 8009fba:	1aed      	subs	r5, r5, r3
 8009fbc:	4415      	add	r5, r2
 8009fbe:	4b66      	ldr	r3, [pc, #408]	@ (800a158 <_strtod_l+0x858>)
 8009fc0:	3d01      	subs	r5, #1
 8009fc2:	429d      	cmp	r5, r3
 8009fc4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009fc8:	da50      	bge.n	800a06c <_strtod_l+0x76c>
 8009fca:	1b5b      	subs	r3, r3, r5
 8009fcc:	2b1f      	cmp	r3, #31
 8009fce:	eba2 0203 	sub.w	r2, r2, r3
 8009fd2:	f04f 0101 	mov.w	r1, #1
 8009fd6:	dc3d      	bgt.n	800a054 <_strtod_l+0x754>
 8009fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009fde:	2300      	movs	r3, #0
 8009fe0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009fe2:	18bd      	adds	r5, r7, r2
 8009fe4:	9b08      	ldr	r3, [sp, #32]
 8009fe6:	42af      	cmp	r7, r5
 8009fe8:	4416      	add	r6, r2
 8009fea:	441e      	add	r6, r3
 8009fec:	463b      	mov	r3, r7
 8009fee:	bfa8      	it	ge
 8009ff0:	462b      	movge	r3, r5
 8009ff2:	42b3      	cmp	r3, r6
 8009ff4:	bfa8      	it	ge
 8009ff6:	4633      	movge	r3, r6
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfc2      	ittt	gt
 8009ffc:	1aed      	subgt	r5, r5, r3
 8009ffe:	1af6      	subgt	r6, r6, r3
 800a000:	1aff      	subgt	r7, r7, r3
 800a002:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a004:	2b00      	cmp	r3, #0
 800a006:	dd16      	ble.n	800a036 <_strtod_l+0x736>
 800a008:	4641      	mov	r1, r8
 800a00a:	9805      	ldr	r0, [sp, #20]
 800a00c:	461a      	mov	r2, r3
 800a00e:	f001 fbcb 	bl	800b7a8 <__pow5mult>
 800a012:	4680      	mov	r8, r0
 800a014:	2800      	cmp	r0, #0
 800a016:	d0ba      	beq.n	8009f8e <_strtod_l+0x68e>
 800a018:	4601      	mov	r1, r0
 800a01a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a01c:	9805      	ldr	r0, [sp, #20]
 800a01e:	f001 fb19 	bl	800b654 <__multiply>
 800a022:	900e      	str	r0, [sp, #56]	@ 0x38
 800a024:	2800      	cmp	r0, #0
 800a026:	f43f ae8a 	beq.w	8009d3e <_strtod_l+0x43e>
 800a02a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a02c:	9805      	ldr	r0, [sp, #20]
 800a02e:	f001 f9fd 	bl	800b42c <_Bfree>
 800a032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a034:	931a      	str	r3, [sp, #104]	@ 0x68
 800a036:	2d00      	cmp	r5, #0
 800a038:	dc1d      	bgt.n	800a076 <_strtod_l+0x776>
 800a03a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd23      	ble.n	800a088 <_strtod_l+0x788>
 800a040:	4649      	mov	r1, r9
 800a042:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a044:	9805      	ldr	r0, [sp, #20]
 800a046:	f001 fbaf 	bl	800b7a8 <__pow5mult>
 800a04a:	4681      	mov	r9, r0
 800a04c:	b9e0      	cbnz	r0, 800a088 <_strtod_l+0x788>
 800a04e:	f04f 0900 	mov.w	r9, #0
 800a052:	e674      	b.n	8009d3e <_strtod_l+0x43e>
 800a054:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a058:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a05c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a060:	35e2      	adds	r5, #226	@ 0xe2
 800a062:	fa01 f305 	lsl.w	r3, r1, r5
 800a066:	9310      	str	r3, [sp, #64]	@ 0x40
 800a068:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a06a:	e7ba      	b.n	8009fe2 <_strtod_l+0x6e2>
 800a06c:	2300      	movs	r3, #0
 800a06e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a070:	2301      	movs	r3, #1
 800a072:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a074:	e7b5      	b.n	8009fe2 <_strtod_l+0x6e2>
 800a076:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a078:	9805      	ldr	r0, [sp, #20]
 800a07a:	462a      	mov	r2, r5
 800a07c:	f001 fbee 	bl	800b85c <__lshift>
 800a080:	901a      	str	r0, [sp, #104]	@ 0x68
 800a082:	2800      	cmp	r0, #0
 800a084:	d1d9      	bne.n	800a03a <_strtod_l+0x73a>
 800a086:	e65a      	b.n	8009d3e <_strtod_l+0x43e>
 800a088:	2e00      	cmp	r6, #0
 800a08a:	dd07      	ble.n	800a09c <_strtod_l+0x79c>
 800a08c:	4649      	mov	r1, r9
 800a08e:	9805      	ldr	r0, [sp, #20]
 800a090:	4632      	mov	r2, r6
 800a092:	f001 fbe3 	bl	800b85c <__lshift>
 800a096:	4681      	mov	r9, r0
 800a098:	2800      	cmp	r0, #0
 800a09a:	d0d8      	beq.n	800a04e <_strtod_l+0x74e>
 800a09c:	2f00      	cmp	r7, #0
 800a09e:	dd08      	ble.n	800a0b2 <_strtod_l+0x7b2>
 800a0a0:	4641      	mov	r1, r8
 800a0a2:	9805      	ldr	r0, [sp, #20]
 800a0a4:	463a      	mov	r2, r7
 800a0a6:	f001 fbd9 	bl	800b85c <__lshift>
 800a0aa:	4680      	mov	r8, r0
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	f43f ae46 	beq.w	8009d3e <_strtod_l+0x43e>
 800a0b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0b4:	9805      	ldr	r0, [sp, #20]
 800a0b6:	464a      	mov	r2, r9
 800a0b8:	f001 fc58 	bl	800b96c <__mdiff>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	f43f ae3d 	beq.w	8009d3e <_strtod_l+0x43e>
 800a0c4:	68c3      	ldr	r3, [r0, #12]
 800a0c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	60c3      	str	r3, [r0, #12]
 800a0cc:	4641      	mov	r1, r8
 800a0ce:	f001 fc31 	bl	800b934 <__mcmp>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	da46      	bge.n	800a164 <_strtod_l+0x864>
 800a0d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0d8:	ea53 030a 	orrs.w	r3, r3, sl
 800a0dc:	d16c      	bne.n	800a1b8 <_strtod_l+0x8b8>
 800a0de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d168      	bne.n	800a1b8 <_strtod_l+0x8b8>
 800a0e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a0ea:	0d1b      	lsrs	r3, r3, #20
 800a0ec:	051b      	lsls	r3, r3, #20
 800a0ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a0f2:	d961      	bls.n	800a1b8 <_strtod_l+0x8b8>
 800a0f4:	6963      	ldr	r3, [r4, #20]
 800a0f6:	b913      	cbnz	r3, 800a0fe <_strtod_l+0x7fe>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	dd5c      	ble.n	800a1b8 <_strtod_l+0x8b8>
 800a0fe:	4621      	mov	r1, r4
 800a100:	2201      	movs	r2, #1
 800a102:	9805      	ldr	r0, [sp, #20]
 800a104:	f001 fbaa 	bl	800b85c <__lshift>
 800a108:	4641      	mov	r1, r8
 800a10a:	4604      	mov	r4, r0
 800a10c:	f001 fc12 	bl	800b934 <__mcmp>
 800a110:	2800      	cmp	r0, #0
 800a112:	dd51      	ble.n	800a1b8 <_strtod_l+0x8b8>
 800a114:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a118:	9a08      	ldr	r2, [sp, #32]
 800a11a:	0d1b      	lsrs	r3, r3, #20
 800a11c:	051b      	lsls	r3, r3, #20
 800a11e:	2a00      	cmp	r2, #0
 800a120:	d06b      	beq.n	800a1fa <_strtod_l+0x8fa>
 800a122:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a126:	d868      	bhi.n	800a1fa <_strtod_l+0x8fa>
 800a128:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a12c:	f67f ae9d 	bls.w	8009e6a <_strtod_l+0x56a>
 800a130:	4b0a      	ldr	r3, [pc, #40]	@ (800a15c <_strtod_l+0x85c>)
 800a132:	4650      	mov	r0, sl
 800a134:	4659      	mov	r1, fp
 800a136:	2200      	movs	r2, #0
 800a138:	f7f6 fa8e 	bl	8000658 <__aeabi_dmul>
 800a13c:	4b08      	ldr	r3, [pc, #32]	@ (800a160 <_strtod_l+0x860>)
 800a13e:	400b      	ands	r3, r1
 800a140:	4682      	mov	sl, r0
 800a142:	468b      	mov	fp, r1
 800a144:	2b00      	cmp	r3, #0
 800a146:	f47f ae05 	bne.w	8009d54 <_strtod_l+0x454>
 800a14a:	9a05      	ldr	r2, [sp, #20]
 800a14c:	2322      	movs	r3, #34	@ 0x22
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e600      	b.n	8009d54 <_strtod_l+0x454>
 800a152:	bf00      	nop
 800a154:	0800d748 	.word	0x0800d748
 800a158:	fffffc02 	.word	0xfffffc02
 800a15c:	39500000 	.word	0x39500000
 800a160:	7ff00000 	.word	0x7ff00000
 800a164:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a168:	d165      	bne.n	800a236 <_strtod_l+0x936>
 800a16a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a16c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a170:	b35a      	cbz	r2, 800a1ca <_strtod_l+0x8ca>
 800a172:	4a9f      	ldr	r2, [pc, #636]	@ (800a3f0 <_strtod_l+0xaf0>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d12b      	bne.n	800a1d0 <_strtod_l+0x8d0>
 800a178:	9b08      	ldr	r3, [sp, #32]
 800a17a:	4651      	mov	r1, sl
 800a17c:	b303      	cbz	r3, 800a1c0 <_strtod_l+0x8c0>
 800a17e:	4b9d      	ldr	r3, [pc, #628]	@ (800a3f4 <_strtod_l+0xaf4>)
 800a180:	465a      	mov	r2, fp
 800a182:	4013      	ands	r3, r2
 800a184:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a188:	f04f 32ff 	mov.w	r2, #4294967295
 800a18c:	d81b      	bhi.n	800a1c6 <_strtod_l+0x8c6>
 800a18e:	0d1b      	lsrs	r3, r3, #20
 800a190:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	4299      	cmp	r1, r3
 800a19a:	d119      	bne.n	800a1d0 <_strtod_l+0x8d0>
 800a19c:	4b96      	ldr	r3, [pc, #600]	@ (800a3f8 <_strtod_l+0xaf8>)
 800a19e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d102      	bne.n	800a1aa <_strtod_l+0x8aa>
 800a1a4:	3101      	adds	r1, #1
 800a1a6:	f43f adca 	beq.w	8009d3e <_strtod_l+0x43e>
 800a1aa:	4b92      	ldr	r3, [pc, #584]	@ (800a3f4 <_strtod_l+0xaf4>)
 800a1ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ae:	401a      	ands	r2, r3
 800a1b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a1b4:	f04f 0a00 	mov.w	sl, #0
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1b8      	bne.n	800a130 <_strtod_l+0x830>
 800a1be:	e5c9      	b.n	8009d54 <_strtod_l+0x454>
 800a1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c4:	e7e8      	b.n	800a198 <_strtod_l+0x898>
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	e7e6      	b.n	800a198 <_strtod_l+0x898>
 800a1ca:	ea53 030a 	orrs.w	r3, r3, sl
 800a1ce:	d0a1      	beq.n	800a114 <_strtod_l+0x814>
 800a1d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1d2:	b1db      	cbz	r3, 800a20c <_strtod_l+0x90c>
 800a1d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1d6:	4213      	tst	r3, r2
 800a1d8:	d0ee      	beq.n	800a1b8 <_strtod_l+0x8b8>
 800a1da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1dc:	9a08      	ldr	r2, [sp, #32]
 800a1de:	4650      	mov	r0, sl
 800a1e0:	4659      	mov	r1, fp
 800a1e2:	b1bb      	cbz	r3, 800a214 <_strtod_l+0x914>
 800a1e4:	f7ff fb6e 	bl	80098c4 <sulp>
 800a1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1ec:	ec53 2b10 	vmov	r2, r3, d0
 800a1f0:	f7f6 f87c 	bl	80002ec <__adddf3>
 800a1f4:	4682      	mov	sl, r0
 800a1f6:	468b      	mov	fp, r1
 800a1f8:	e7de      	b.n	800a1b8 <_strtod_l+0x8b8>
 800a1fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a1fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a202:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a206:	f04f 3aff 	mov.w	sl, #4294967295
 800a20a:	e7d5      	b.n	800a1b8 <_strtod_l+0x8b8>
 800a20c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a20e:	ea13 0f0a 	tst.w	r3, sl
 800a212:	e7e1      	b.n	800a1d8 <_strtod_l+0x8d8>
 800a214:	f7ff fb56 	bl	80098c4 <sulp>
 800a218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a21c:	ec53 2b10 	vmov	r2, r3, d0
 800a220:	f7f6 f862 	bl	80002e8 <__aeabi_dsub>
 800a224:	2200      	movs	r2, #0
 800a226:	2300      	movs	r3, #0
 800a228:	4682      	mov	sl, r0
 800a22a:	468b      	mov	fp, r1
 800a22c:	f7f6 fc7c 	bl	8000b28 <__aeabi_dcmpeq>
 800a230:	2800      	cmp	r0, #0
 800a232:	d0c1      	beq.n	800a1b8 <_strtod_l+0x8b8>
 800a234:	e619      	b.n	8009e6a <_strtod_l+0x56a>
 800a236:	4641      	mov	r1, r8
 800a238:	4620      	mov	r0, r4
 800a23a:	f001 fcf3 	bl	800bc24 <__ratio>
 800a23e:	ec57 6b10 	vmov	r6, r7, d0
 800a242:	2200      	movs	r2, #0
 800a244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a248:	4630      	mov	r0, r6
 800a24a:	4639      	mov	r1, r7
 800a24c:	f7f6 fc80 	bl	8000b50 <__aeabi_dcmple>
 800a250:	2800      	cmp	r0, #0
 800a252:	d06f      	beq.n	800a334 <_strtod_l+0xa34>
 800a254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d17a      	bne.n	800a350 <_strtod_l+0xa50>
 800a25a:	f1ba 0f00 	cmp.w	sl, #0
 800a25e:	d158      	bne.n	800a312 <_strtod_l+0xa12>
 800a260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a266:	2b00      	cmp	r3, #0
 800a268:	d15a      	bne.n	800a320 <_strtod_l+0xa20>
 800a26a:	4b64      	ldr	r3, [pc, #400]	@ (800a3fc <_strtod_l+0xafc>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	4630      	mov	r0, r6
 800a270:	4639      	mov	r1, r7
 800a272:	f7f6 fc63 	bl	8000b3c <__aeabi_dcmplt>
 800a276:	2800      	cmp	r0, #0
 800a278:	d159      	bne.n	800a32e <_strtod_l+0xa2e>
 800a27a:	4630      	mov	r0, r6
 800a27c:	4639      	mov	r1, r7
 800a27e:	4b60      	ldr	r3, [pc, #384]	@ (800a400 <_strtod_l+0xb00>)
 800a280:	2200      	movs	r2, #0
 800a282:	f7f6 f9e9 	bl	8000658 <__aeabi_dmul>
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a28e:	9606      	str	r6, [sp, #24]
 800a290:	9307      	str	r3, [sp, #28]
 800a292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a296:	4d57      	ldr	r5, [pc, #348]	@ (800a3f4 <_strtod_l+0xaf4>)
 800a298:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a29c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a29e:	401d      	ands	r5, r3
 800a2a0:	4b58      	ldr	r3, [pc, #352]	@ (800a404 <_strtod_l+0xb04>)
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	f040 80b2 	bne.w	800a40c <_strtod_l+0xb0c>
 800a2a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a2ae:	ec4b ab10 	vmov	d0, sl, fp
 800a2b2:	f001 fbef 	bl	800ba94 <__ulp>
 800a2b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2ba:	ec51 0b10 	vmov	r0, r1, d0
 800a2be:	f7f6 f9cb 	bl	8000658 <__aeabi_dmul>
 800a2c2:	4652      	mov	r2, sl
 800a2c4:	465b      	mov	r3, fp
 800a2c6:	f7f6 f811 	bl	80002ec <__adddf3>
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4949      	ldr	r1, [pc, #292]	@ (800a3f4 <_strtod_l+0xaf4>)
 800a2ce:	4a4e      	ldr	r2, [pc, #312]	@ (800a408 <_strtod_l+0xb08>)
 800a2d0:	4019      	ands	r1, r3
 800a2d2:	4291      	cmp	r1, r2
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	d942      	bls.n	800a35e <_strtod_l+0xa5e>
 800a2d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a2da:	4b47      	ldr	r3, [pc, #284]	@ (800a3f8 <_strtod_l+0xaf8>)
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d103      	bne.n	800a2e8 <_strtod_l+0x9e8>
 800a2e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	f43f ad2b 	beq.w	8009d3e <_strtod_l+0x43e>
 800a2e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a3f8 <_strtod_l+0xaf8>
 800a2ec:	f04f 3aff 	mov.w	sl, #4294967295
 800a2f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2f2:	9805      	ldr	r0, [sp, #20]
 800a2f4:	f001 f89a 	bl	800b42c <_Bfree>
 800a2f8:	9805      	ldr	r0, [sp, #20]
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	f001 f896 	bl	800b42c <_Bfree>
 800a300:	9805      	ldr	r0, [sp, #20]
 800a302:	4641      	mov	r1, r8
 800a304:	f001 f892 	bl	800b42c <_Bfree>
 800a308:	9805      	ldr	r0, [sp, #20]
 800a30a:	4621      	mov	r1, r4
 800a30c:	f001 f88e 	bl	800b42c <_Bfree>
 800a310:	e618      	b.n	8009f44 <_strtod_l+0x644>
 800a312:	f1ba 0f01 	cmp.w	sl, #1
 800a316:	d103      	bne.n	800a320 <_strtod_l+0xa20>
 800a318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f43f ada5 	beq.w	8009e6a <_strtod_l+0x56a>
 800a320:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a3d0 <_strtod_l+0xad0>
 800a324:	4f35      	ldr	r7, [pc, #212]	@ (800a3fc <_strtod_l+0xafc>)
 800a326:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a32a:	2600      	movs	r6, #0
 800a32c:	e7b1      	b.n	800a292 <_strtod_l+0x992>
 800a32e:	4f34      	ldr	r7, [pc, #208]	@ (800a400 <_strtod_l+0xb00>)
 800a330:	2600      	movs	r6, #0
 800a332:	e7aa      	b.n	800a28a <_strtod_l+0x98a>
 800a334:	4b32      	ldr	r3, [pc, #200]	@ (800a400 <_strtod_l+0xb00>)
 800a336:	4630      	mov	r0, r6
 800a338:	4639      	mov	r1, r7
 800a33a:	2200      	movs	r2, #0
 800a33c:	f7f6 f98c 	bl	8000658 <__aeabi_dmul>
 800a340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a342:	4606      	mov	r6, r0
 800a344:	460f      	mov	r7, r1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d09f      	beq.n	800a28a <_strtod_l+0x98a>
 800a34a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a34e:	e7a0      	b.n	800a292 <_strtod_l+0x992>
 800a350:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a3d8 <_strtod_l+0xad8>
 800a354:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a358:	ec57 6b17 	vmov	r6, r7, d7
 800a35c:	e799      	b.n	800a292 <_strtod_l+0x992>
 800a35e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a362:	9b08      	ldr	r3, [sp, #32]
 800a364:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1c1      	bne.n	800a2f0 <_strtod_l+0x9f0>
 800a36c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a370:	0d1b      	lsrs	r3, r3, #20
 800a372:	051b      	lsls	r3, r3, #20
 800a374:	429d      	cmp	r5, r3
 800a376:	d1bb      	bne.n	800a2f0 <_strtod_l+0x9f0>
 800a378:	4630      	mov	r0, r6
 800a37a:	4639      	mov	r1, r7
 800a37c:	f7f6 fca4 	bl	8000cc8 <__aeabi_d2lz>
 800a380:	f7f6 f93c 	bl	80005fc <__aeabi_l2d>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4630      	mov	r0, r6
 800a38a:	4639      	mov	r1, r7
 800a38c:	f7f5 ffac 	bl	80002e8 <__aeabi_dsub>
 800a390:	460b      	mov	r3, r1
 800a392:	4602      	mov	r2, r0
 800a394:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a398:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a39e:	ea46 060a 	orr.w	r6, r6, sl
 800a3a2:	431e      	orrs	r6, r3
 800a3a4:	d06f      	beq.n	800a486 <_strtod_l+0xb86>
 800a3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3e0 <_strtod_l+0xae0>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f7f6 fbc6 	bl	8000b3c <__aeabi_dcmplt>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	f47f accf 	bne.w	8009d54 <_strtod_l+0x454>
 800a3b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a3e8 <_strtod_l+0xae8>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3c0:	f7f6 fbda 	bl	8000b78 <__aeabi_dcmpgt>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d093      	beq.n	800a2f0 <_strtod_l+0x9f0>
 800a3c8:	e4c4      	b.n	8009d54 <_strtod_l+0x454>
 800a3ca:	bf00      	nop
 800a3cc:	f3af 8000 	nop.w
 800a3d0:	00000000 	.word	0x00000000
 800a3d4:	bff00000 	.word	0xbff00000
 800a3d8:	00000000 	.word	0x00000000
 800a3dc:	3ff00000 	.word	0x3ff00000
 800a3e0:	94a03595 	.word	0x94a03595
 800a3e4:	3fdfffff 	.word	0x3fdfffff
 800a3e8:	35afe535 	.word	0x35afe535
 800a3ec:	3fe00000 	.word	0x3fe00000
 800a3f0:	000fffff 	.word	0x000fffff
 800a3f4:	7ff00000 	.word	0x7ff00000
 800a3f8:	7fefffff 	.word	0x7fefffff
 800a3fc:	3ff00000 	.word	0x3ff00000
 800a400:	3fe00000 	.word	0x3fe00000
 800a404:	7fe00000 	.word	0x7fe00000
 800a408:	7c9fffff 	.word	0x7c9fffff
 800a40c:	9b08      	ldr	r3, [sp, #32]
 800a40e:	b323      	cbz	r3, 800a45a <_strtod_l+0xb5a>
 800a410:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a414:	d821      	bhi.n	800a45a <_strtod_l+0xb5a>
 800a416:	a328      	add	r3, pc, #160	@ (adr r3, 800a4b8 <_strtod_l+0xbb8>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	4630      	mov	r0, r6
 800a41e:	4639      	mov	r1, r7
 800a420:	f7f6 fb96 	bl	8000b50 <__aeabi_dcmple>
 800a424:	b1a0      	cbz	r0, 800a450 <_strtod_l+0xb50>
 800a426:	4639      	mov	r1, r7
 800a428:	4630      	mov	r0, r6
 800a42a:	f7f6 fbc5 	bl	8000bb8 <__aeabi_d2uiz>
 800a42e:	2801      	cmp	r0, #1
 800a430:	bf38      	it	cc
 800a432:	2001      	movcc	r0, #1
 800a434:	f7f6 f896 	bl	8000564 <__aeabi_ui2d>
 800a438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a43a:	4606      	mov	r6, r0
 800a43c:	460f      	mov	r7, r1
 800a43e:	b9fb      	cbnz	r3, 800a480 <_strtod_l+0xb80>
 800a440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a444:	9014      	str	r0, [sp, #80]	@ 0x50
 800a446:	9315      	str	r3, [sp, #84]	@ 0x54
 800a448:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a44c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a452:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a456:	1b5b      	subs	r3, r3, r5
 800a458:	9311      	str	r3, [sp, #68]	@ 0x44
 800a45a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a45e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a462:	f001 fb17 	bl	800ba94 <__ulp>
 800a466:	4650      	mov	r0, sl
 800a468:	ec53 2b10 	vmov	r2, r3, d0
 800a46c:	4659      	mov	r1, fp
 800a46e:	f7f6 f8f3 	bl	8000658 <__aeabi_dmul>
 800a472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a476:	f7f5 ff39 	bl	80002ec <__adddf3>
 800a47a:	4682      	mov	sl, r0
 800a47c:	468b      	mov	fp, r1
 800a47e:	e770      	b.n	800a362 <_strtod_l+0xa62>
 800a480:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a484:	e7e0      	b.n	800a448 <_strtod_l+0xb48>
 800a486:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4c0 <_strtod_l+0xbc0>)
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	f7f6 fb56 	bl	8000b3c <__aeabi_dcmplt>
 800a490:	e798      	b.n	800a3c4 <_strtod_l+0xac4>
 800a492:	2300      	movs	r3, #0
 800a494:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a496:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	f7ff ba6d 	b.w	800997a <_strtod_l+0x7a>
 800a4a0:	2a65      	cmp	r2, #101	@ 0x65
 800a4a2:	f43f ab66 	beq.w	8009b72 <_strtod_l+0x272>
 800a4a6:	2a45      	cmp	r2, #69	@ 0x45
 800a4a8:	f43f ab63 	beq.w	8009b72 <_strtod_l+0x272>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f7ff bb9e 	b.w	8009bee <_strtod_l+0x2ee>
 800a4b2:	bf00      	nop
 800a4b4:	f3af 8000 	nop.w
 800a4b8:	ffc00000 	.word	0xffc00000
 800a4bc:	41dfffff 	.word	0x41dfffff
 800a4c0:	94a03595 	.word	0x94a03595
 800a4c4:	3fcfffff 	.word	0x3fcfffff

0800a4c8 <strtof>:
 800a4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4cc:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800a58c <strtof+0xc4>
 800a4d0:	4b29      	ldr	r3, [pc, #164]	@ (800a578 <strtof+0xb0>)
 800a4d2:	460a      	mov	r2, r1
 800a4d4:	ed2d 8b02 	vpush	{d8}
 800a4d8:	4601      	mov	r1, r0
 800a4da:	f8d8 0000 	ldr.w	r0, [r8]
 800a4de:	f7ff fa0f 	bl	8009900 <_strtod_l>
 800a4e2:	ec55 4b10 	vmov	r4, r5, d0
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f7f6 fb4d 	bl	8000b8c <__aeabi_dcmpun>
 800a4f2:	b190      	cbz	r0, 800a51a <strtof+0x52>
 800a4f4:	2d00      	cmp	r5, #0
 800a4f6:	4821      	ldr	r0, [pc, #132]	@ (800a57c <strtof+0xb4>)
 800a4f8:	da09      	bge.n	800a50e <strtof+0x46>
 800a4fa:	f000 fb0d 	bl	800ab18 <nanf>
 800a4fe:	eeb1 8a40 	vneg.f32	s16, s0
 800a502:	eeb0 0a48 	vmov.f32	s0, s16
 800a506:	ecbd 8b02 	vpop	{d8}
 800a50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a50e:	ecbd 8b02 	vpop	{d8}
 800a512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a516:	f000 baff 	b.w	800ab18 <nanf>
 800a51a:	4620      	mov	r0, r4
 800a51c:	4629      	mov	r1, r5
 800a51e:	f7f6 fb6b 	bl	8000bf8 <__aeabi_d2f>
 800a522:	ee08 0a10 	vmov	s16, r0
 800a526:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a580 <strtof+0xb8>
 800a52a:	eeb0 7ac8 	vabs.f32	s14, s16
 800a52e:	eeb4 7a67 	vcmp.f32	s14, s15
 800a532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a536:	dd11      	ble.n	800a55c <strtof+0x94>
 800a538:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800a53c:	4b11      	ldr	r3, [pc, #68]	@ (800a584 <strtof+0xbc>)
 800a53e:	f04f 32ff 	mov.w	r2, #4294967295
 800a542:	4620      	mov	r0, r4
 800a544:	4639      	mov	r1, r7
 800a546:	f7f6 fb21 	bl	8000b8c <__aeabi_dcmpun>
 800a54a:	b980      	cbnz	r0, 800a56e <strtof+0xa6>
 800a54c:	4b0d      	ldr	r3, [pc, #52]	@ (800a584 <strtof+0xbc>)
 800a54e:	f04f 32ff 	mov.w	r2, #4294967295
 800a552:	4620      	mov	r0, r4
 800a554:	4639      	mov	r1, r7
 800a556:	f7f6 fafb 	bl	8000b50 <__aeabi_dcmple>
 800a55a:	b940      	cbnz	r0, 800a56e <strtof+0xa6>
 800a55c:	ee18 3a10 	vmov	r3, s16
 800a560:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a564:	d1cd      	bne.n	800a502 <strtof+0x3a>
 800a566:	4b08      	ldr	r3, [pc, #32]	@ (800a588 <strtof+0xc0>)
 800a568:	402b      	ands	r3, r5
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0c9      	beq.n	800a502 <strtof+0x3a>
 800a56e:	f8d8 3000 	ldr.w	r3, [r8]
 800a572:	2222      	movs	r2, #34	@ 0x22
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	e7c4      	b.n	800a502 <strtof+0x3a>
 800a578:	2000002c 	.word	0x2000002c
 800a57c:	0800dac6 	.word	0x0800dac6
 800a580:	7f7fffff 	.word	0x7f7fffff
 800a584:	7fefffff 	.word	0x7fefffff
 800a588:	7ff00000 	.word	0x7ff00000
 800a58c:	20000198 	.word	0x20000198

0800a590 <_strtoul_l.constprop.0>:
 800a590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a594:	4e34      	ldr	r6, [pc, #208]	@ (800a668 <_strtoul_l.constprop.0+0xd8>)
 800a596:	4686      	mov	lr, r0
 800a598:	460d      	mov	r5, r1
 800a59a:	4628      	mov	r0, r5
 800a59c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5a0:	5d37      	ldrb	r7, [r6, r4]
 800a5a2:	f017 0708 	ands.w	r7, r7, #8
 800a5a6:	d1f8      	bne.n	800a59a <_strtoul_l.constprop.0+0xa>
 800a5a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a5aa:	d12f      	bne.n	800a60c <_strtoul_l.constprop.0+0x7c>
 800a5ac:	782c      	ldrb	r4, [r5, #0]
 800a5ae:	2701      	movs	r7, #1
 800a5b0:	1c85      	adds	r5, r0, #2
 800a5b2:	f033 0010 	bics.w	r0, r3, #16
 800a5b6:	d109      	bne.n	800a5cc <_strtoul_l.constprop.0+0x3c>
 800a5b8:	2c30      	cmp	r4, #48	@ 0x30
 800a5ba:	d12c      	bne.n	800a616 <_strtoul_l.constprop.0+0x86>
 800a5bc:	7828      	ldrb	r0, [r5, #0]
 800a5be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a5c2:	2858      	cmp	r0, #88	@ 0x58
 800a5c4:	d127      	bne.n	800a616 <_strtoul_l.constprop.0+0x86>
 800a5c6:	786c      	ldrb	r4, [r5, #1]
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	3502      	adds	r5, #2
 800a5cc:	f04f 38ff 	mov.w	r8, #4294967295
 800a5d0:	2600      	movs	r6, #0
 800a5d2:	fbb8 f8f3 	udiv	r8, r8, r3
 800a5d6:	fb03 f908 	mul.w	r9, r3, r8
 800a5da:	ea6f 0909 	mvn.w	r9, r9
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a5e4:	f1bc 0f09 	cmp.w	ip, #9
 800a5e8:	d81c      	bhi.n	800a624 <_strtoul_l.constprop.0+0x94>
 800a5ea:	4664      	mov	r4, ip
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	dd2a      	ble.n	800a646 <_strtoul_l.constprop.0+0xb6>
 800a5f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a5f4:	d007      	beq.n	800a606 <_strtoul_l.constprop.0+0x76>
 800a5f6:	4580      	cmp	r8, r0
 800a5f8:	d322      	bcc.n	800a640 <_strtoul_l.constprop.0+0xb0>
 800a5fa:	d101      	bne.n	800a600 <_strtoul_l.constprop.0+0x70>
 800a5fc:	45a1      	cmp	r9, r4
 800a5fe:	db1f      	blt.n	800a640 <_strtoul_l.constprop.0+0xb0>
 800a600:	fb00 4003 	mla	r0, r0, r3, r4
 800a604:	2601      	movs	r6, #1
 800a606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a60a:	e7e9      	b.n	800a5e0 <_strtoul_l.constprop.0+0x50>
 800a60c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a60e:	bf04      	itt	eq
 800a610:	782c      	ldrbeq	r4, [r5, #0]
 800a612:	1c85      	addeq	r5, r0, #2
 800a614:	e7cd      	b.n	800a5b2 <_strtoul_l.constprop.0+0x22>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1d8      	bne.n	800a5cc <_strtoul_l.constprop.0+0x3c>
 800a61a:	2c30      	cmp	r4, #48	@ 0x30
 800a61c:	bf0c      	ite	eq
 800a61e:	2308      	moveq	r3, #8
 800a620:	230a      	movne	r3, #10
 800a622:	e7d3      	b.n	800a5cc <_strtoul_l.constprop.0+0x3c>
 800a624:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a628:	f1bc 0f19 	cmp.w	ip, #25
 800a62c:	d801      	bhi.n	800a632 <_strtoul_l.constprop.0+0xa2>
 800a62e:	3c37      	subs	r4, #55	@ 0x37
 800a630:	e7dc      	b.n	800a5ec <_strtoul_l.constprop.0+0x5c>
 800a632:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a636:	f1bc 0f19 	cmp.w	ip, #25
 800a63a:	d804      	bhi.n	800a646 <_strtoul_l.constprop.0+0xb6>
 800a63c:	3c57      	subs	r4, #87	@ 0x57
 800a63e:	e7d5      	b.n	800a5ec <_strtoul_l.constprop.0+0x5c>
 800a640:	f04f 36ff 	mov.w	r6, #4294967295
 800a644:	e7df      	b.n	800a606 <_strtoul_l.constprop.0+0x76>
 800a646:	1c73      	adds	r3, r6, #1
 800a648:	d106      	bne.n	800a658 <_strtoul_l.constprop.0+0xc8>
 800a64a:	2322      	movs	r3, #34	@ 0x22
 800a64c:	f8ce 3000 	str.w	r3, [lr]
 800a650:	4630      	mov	r0, r6
 800a652:	b932      	cbnz	r2, 800a662 <_strtoul_l.constprop.0+0xd2>
 800a654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a658:	b107      	cbz	r7, 800a65c <_strtoul_l.constprop.0+0xcc>
 800a65a:	4240      	negs	r0, r0
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d0f9      	beq.n	800a654 <_strtoul_l.constprop.0+0xc4>
 800a660:	b106      	cbz	r6, 800a664 <_strtoul_l.constprop.0+0xd4>
 800a662:	1e69      	subs	r1, r5, #1
 800a664:	6011      	str	r1, [r2, #0]
 800a666:	e7f5      	b.n	800a654 <_strtoul_l.constprop.0+0xc4>
 800a668:	0800d771 	.word	0x0800d771

0800a66c <strtoul>:
 800a66c:	4613      	mov	r3, r2
 800a66e:	460a      	mov	r2, r1
 800a670:	4601      	mov	r1, r0
 800a672:	4802      	ldr	r0, [pc, #8]	@ (800a67c <strtoul+0x10>)
 800a674:	6800      	ldr	r0, [r0, #0]
 800a676:	f7ff bf8b 	b.w	800a590 <_strtoul_l.constprop.0>
 800a67a:	bf00      	nop
 800a67c:	20000198 	.word	0x20000198

0800a680 <std>:
 800a680:	2300      	movs	r3, #0
 800a682:	b510      	push	{r4, lr}
 800a684:	4604      	mov	r4, r0
 800a686:	e9c0 3300 	strd	r3, r3, [r0]
 800a68a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a68e:	6083      	str	r3, [r0, #8]
 800a690:	8181      	strh	r1, [r0, #12]
 800a692:	6643      	str	r3, [r0, #100]	@ 0x64
 800a694:	81c2      	strh	r2, [r0, #14]
 800a696:	6183      	str	r3, [r0, #24]
 800a698:	4619      	mov	r1, r3
 800a69a:	2208      	movs	r2, #8
 800a69c:	305c      	adds	r0, #92	@ 0x5c
 800a69e:	f000 f961 	bl	800a964 <memset>
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d8 <std+0x58>)
 800a6a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6dc <std+0x5c>)
 800a6a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e0 <std+0x60>)
 800a6ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <std+0x64>)
 800a6b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e8 <std+0x68>)
 800a6b4:	6224      	str	r4, [r4, #32]
 800a6b6:	429c      	cmp	r4, r3
 800a6b8:	d006      	beq.n	800a6c8 <std+0x48>
 800a6ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6be:	4294      	cmp	r4, r2
 800a6c0:	d002      	beq.n	800a6c8 <std+0x48>
 800a6c2:	33d0      	adds	r3, #208	@ 0xd0
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	d105      	bne.n	800a6d4 <std+0x54>
 800a6c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d0:	f000 b9fe 	b.w	800aad0 <__retarget_lock_init_recursive>
 800a6d4:	bd10      	pop	{r4, pc}
 800a6d6:	bf00      	nop
 800a6d8:	0800a86d 	.word	0x0800a86d
 800a6dc:	0800a88f 	.word	0x0800a88f
 800a6e0:	0800a8c7 	.word	0x0800a8c7
 800a6e4:	0800a8eb 	.word	0x0800a8eb
 800a6e8:	200036dc 	.word	0x200036dc

0800a6ec <stdio_exit_handler>:
 800a6ec:	4a02      	ldr	r2, [pc, #8]	@ (800a6f8 <stdio_exit_handler+0xc>)
 800a6ee:	4903      	ldr	r1, [pc, #12]	@ (800a6fc <stdio_exit_handler+0x10>)
 800a6f0:	4803      	ldr	r0, [pc, #12]	@ (800a700 <stdio_exit_handler+0x14>)
 800a6f2:	f000 b869 	b.w	800a7c8 <_fwalk_sglue>
 800a6f6:	bf00      	nop
 800a6f8:	20000020 	.word	0x20000020
 800a6fc:	0800c3fd 	.word	0x0800c3fd
 800a700:	2000019c 	.word	0x2000019c

0800a704 <cleanup_stdio>:
 800a704:	6841      	ldr	r1, [r0, #4]
 800a706:	4b0c      	ldr	r3, [pc, #48]	@ (800a738 <cleanup_stdio+0x34>)
 800a708:	4299      	cmp	r1, r3
 800a70a:	b510      	push	{r4, lr}
 800a70c:	4604      	mov	r4, r0
 800a70e:	d001      	beq.n	800a714 <cleanup_stdio+0x10>
 800a710:	f001 fe74 	bl	800c3fc <_fflush_r>
 800a714:	68a1      	ldr	r1, [r4, #8]
 800a716:	4b09      	ldr	r3, [pc, #36]	@ (800a73c <cleanup_stdio+0x38>)
 800a718:	4299      	cmp	r1, r3
 800a71a:	d002      	beq.n	800a722 <cleanup_stdio+0x1e>
 800a71c:	4620      	mov	r0, r4
 800a71e:	f001 fe6d 	bl	800c3fc <_fflush_r>
 800a722:	68e1      	ldr	r1, [r4, #12]
 800a724:	4b06      	ldr	r3, [pc, #24]	@ (800a740 <cleanup_stdio+0x3c>)
 800a726:	4299      	cmp	r1, r3
 800a728:	d004      	beq.n	800a734 <cleanup_stdio+0x30>
 800a72a:	4620      	mov	r0, r4
 800a72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a730:	f001 be64 	b.w	800c3fc <_fflush_r>
 800a734:	bd10      	pop	{r4, pc}
 800a736:	bf00      	nop
 800a738:	200036dc 	.word	0x200036dc
 800a73c:	20003744 	.word	0x20003744
 800a740:	200037ac 	.word	0x200037ac

0800a744 <global_stdio_init.part.0>:
 800a744:	b510      	push	{r4, lr}
 800a746:	4b0b      	ldr	r3, [pc, #44]	@ (800a774 <global_stdio_init.part.0+0x30>)
 800a748:	4c0b      	ldr	r4, [pc, #44]	@ (800a778 <global_stdio_init.part.0+0x34>)
 800a74a:	4a0c      	ldr	r2, [pc, #48]	@ (800a77c <global_stdio_init.part.0+0x38>)
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	4620      	mov	r0, r4
 800a750:	2200      	movs	r2, #0
 800a752:	2104      	movs	r1, #4
 800a754:	f7ff ff94 	bl	800a680 <std>
 800a758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a75c:	2201      	movs	r2, #1
 800a75e:	2109      	movs	r1, #9
 800a760:	f7ff ff8e 	bl	800a680 <std>
 800a764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a768:	2202      	movs	r2, #2
 800a76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a76e:	2112      	movs	r1, #18
 800a770:	f7ff bf86 	b.w	800a680 <std>
 800a774:	20003814 	.word	0x20003814
 800a778:	200036dc 	.word	0x200036dc
 800a77c:	0800a6ed 	.word	0x0800a6ed

0800a780 <__sfp_lock_acquire>:
 800a780:	4801      	ldr	r0, [pc, #4]	@ (800a788 <__sfp_lock_acquire+0x8>)
 800a782:	f000 b9a6 	b.w	800aad2 <__retarget_lock_acquire_recursive>
 800a786:	bf00      	nop
 800a788:	2000381d 	.word	0x2000381d

0800a78c <__sfp_lock_release>:
 800a78c:	4801      	ldr	r0, [pc, #4]	@ (800a794 <__sfp_lock_release+0x8>)
 800a78e:	f000 b9a1 	b.w	800aad4 <__retarget_lock_release_recursive>
 800a792:	bf00      	nop
 800a794:	2000381d 	.word	0x2000381d

0800a798 <__sinit>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	4604      	mov	r4, r0
 800a79c:	f7ff fff0 	bl	800a780 <__sfp_lock_acquire>
 800a7a0:	6a23      	ldr	r3, [r4, #32]
 800a7a2:	b11b      	cbz	r3, 800a7ac <__sinit+0x14>
 800a7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a8:	f7ff bff0 	b.w	800a78c <__sfp_lock_release>
 800a7ac:	4b04      	ldr	r3, [pc, #16]	@ (800a7c0 <__sinit+0x28>)
 800a7ae:	6223      	str	r3, [r4, #32]
 800a7b0:	4b04      	ldr	r3, [pc, #16]	@ (800a7c4 <__sinit+0x2c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1f5      	bne.n	800a7a4 <__sinit+0xc>
 800a7b8:	f7ff ffc4 	bl	800a744 <global_stdio_init.part.0>
 800a7bc:	e7f2      	b.n	800a7a4 <__sinit+0xc>
 800a7be:	bf00      	nop
 800a7c0:	0800a705 	.word	0x0800a705
 800a7c4:	20003814 	.word	0x20003814

0800a7c8 <_fwalk_sglue>:
 800a7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7cc:	4607      	mov	r7, r0
 800a7ce:	4688      	mov	r8, r1
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	2600      	movs	r6, #0
 800a7d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7d8:	f1b9 0901 	subs.w	r9, r9, #1
 800a7dc:	d505      	bpl.n	800a7ea <_fwalk_sglue+0x22>
 800a7de:	6824      	ldr	r4, [r4, #0]
 800a7e0:	2c00      	cmp	r4, #0
 800a7e2:	d1f7      	bne.n	800a7d4 <_fwalk_sglue+0xc>
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ea:	89ab      	ldrh	r3, [r5, #12]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d907      	bls.n	800a800 <_fwalk_sglue+0x38>
 800a7f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	d003      	beq.n	800a800 <_fwalk_sglue+0x38>
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	47c0      	blx	r8
 800a7fe:	4306      	orrs	r6, r0
 800a800:	3568      	adds	r5, #104	@ 0x68
 800a802:	e7e9      	b.n	800a7d8 <_fwalk_sglue+0x10>

0800a804 <sniprintf>:
 800a804:	b40c      	push	{r2, r3}
 800a806:	b530      	push	{r4, r5, lr}
 800a808:	4b17      	ldr	r3, [pc, #92]	@ (800a868 <sniprintf+0x64>)
 800a80a:	1e0c      	subs	r4, r1, #0
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	b09d      	sub	sp, #116	@ 0x74
 800a810:	da08      	bge.n	800a824 <sniprintf+0x20>
 800a812:	238b      	movs	r3, #139	@ 0x8b
 800a814:	602b      	str	r3, [r5, #0]
 800a816:	f04f 30ff 	mov.w	r0, #4294967295
 800a81a:	b01d      	add	sp, #116	@ 0x74
 800a81c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a820:	b002      	add	sp, #8
 800a822:	4770      	bx	lr
 800a824:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a828:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a82c:	bf14      	ite	ne
 800a82e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a832:	4623      	moveq	r3, r4
 800a834:	9304      	str	r3, [sp, #16]
 800a836:	9307      	str	r3, [sp, #28]
 800a838:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a83c:	9002      	str	r0, [sp, #8]
 800a83e:	9006      	str	r0, [sp, #24]
 800a840:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a844:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a846:	ab21      	add	r3, sp, #132	@ 0x84
 800a848:	a902      	add	r1, sp, #8
 800a84a:	4628      	mov	r0, r5
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	f001 fac7 	bl	800bde0 <_svfiprintf_r>
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	bfbc      	itt	lt
 800a856:	238b      	movlt	r3, #139	@ 0x8b
 800a858:	602b      	strlt	r3, [r5, #0]
 800a85a:	2c00      	cmp	r4, #0
 800a85c:	d0dd      	beq.n	800a81a <sniprintf+0x16>
 800a85e:	9b02      	ldr	r3, [sp, #8]
 800a860:	2200      	movs	r2, #0
 800a862:	701a      	strb	r2, [r3, #0]
 800a864:	e7d9      	b.n	800a81a <sniprintf+0x16>
 800a866:	bf00      	nop
 800a868:	20000198 	.word	0x20000198

0800a86c <__sread>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	460c      	mov	r4, r1
 800a870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a874:	f000 f8de 	bl	800aa34 <_read_r>
 800a878:	2800      	cmp	r0, #0
 800a87a:	bfab      	itete	ge
 800a87c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a87e:	89a3      	ldrhlt	r3, [r4, #12]
 800a880:	181b      	addge	r3, r3, r0
 800a882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a886:	bfac      	ite	ge
 800a888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a88a:	81a3      	strhlt	r3, [r4, #12]
 800a88c:	bd10      	pop	{r4, pc}

0800a88e <__swrite>:
 800a88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a892:	461f      	mov	r7, r3
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	05db      	lsls	r3, r3, #23
 800a898:	4605      	mov	r5, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	4616      	mov	r6, r2
 800a89e:	d505      	bpl.n	800a8ac <__swrite+0x1e>
 800a8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f000 f8b2 	bl	800aa10 <_lseek_r>
 800a8ac:	89a3      	ldrh	r3, [r4, #12]
 800a8ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	4628      	mov	r0, r5
 800a8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c2:	f000 b8c9 	b.w	800aa58 <_write_r>

0800a8c6 <__sseek>:
 800a8c6:	b510      	push	{r4, lr}
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ce:	f000 f89f 	bl	800aa10 <_lseek_r>
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	bf15      	itete	ne
 800a8d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8e2:	81a3      	strheq	r3, [r4, #12]
 800a8e4:	bf18      	it	ne
 800a8e6:	81a3      	strhne	r3, [r4, #12]
 800a8e8:	bd10      	pop	{r4, pc}

0800a8ea <__sclose>:
 800a8ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ee:	f000 b87f 	b.w	800a9f0 <_close_r>

0800a8f2 <_vsniprintf_r>:
 800a8f2:	b530      	push	{r4, r5, lr}
 800a8f4:	4614      	mov	r4, r2
 800a8f6:	2c00      	cmp	r4, #0
 800a8f8:	b09b      	sub	sp, #108	@ 0x6c
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	da05      	bge.n	800a90c <_vsniprintf_r+0x1a>
 800a900:	238b      	movs	r3, #139	@ 0x8b
 800a902:	6003      	str	r3, [r0, #0]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	b01b      	add	sp, #108	@ 0x6c
 800a90a:	bd30      	pop	{r4, r5, pc}
 800a90c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a910:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a914:	bf14      	ite	ne
 800a916:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a91a:	4623      	moveq	r3, r4
 800a91c:	9302      	str	r3, [sp, #8]
 800a91e:	9305      	str	r3, [sp, #20]
 800a920:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a924:	9100      	str	r1, [sp, #0]
 800a926:	9104      	str	r1, [sp, #16]
 800a928:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a92c:	4669      	mov	r1, sp
 800a92e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a930:	f001 fa56 	bl	800bde0 <_svfiprintf_r>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	bfbc      	itt	lt
 800a938:	238b      	movlt	r3, #139	@ 0x8b
 800a93a:	602b      	strlt	r3, [r5, #0]
 800a93c:	2c00      	cmp	r4, #0
 800a93e:	d0e3      	beq.n	800a908 <_vsniprintf_r+0x16>
 800a940:	9b00      	ldr	r3, [sp, #0]
 800a942:	2200      	movs	r2, #0
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	e7df      	b.n	800a908 <_vsniprintf_r+0x16>

0800a948 <vsniprintf>:
 800a948:	b507      	push	{r0, r1, r2, lr}
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	4613      	mov	r3, r2
 800a94e:	460a      	mov	r2, r1
 800a950:	4601      	mov	r1, r0
 800a952:	4803      	ldr	r0, [pc, #12]	@ (800a960 <vsniprintf+0x18>)
 800a954:	6800      	ldr	r0, [r0, #0]
 800a956:	f7ff ffcc 	bl	800a8f2 <_vsniprintf_r>
 800a95a:	b003      	add	sp, #12
 800a95c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a960:	20000198 	.word	0x20000198

0800a964 <memset>:
 800a964:	4402      	add	r2, r0
 800a966:	4603      	mov	r3, r0
 800a968:	4293      	cmp	r3, r2
 800a96a:	d100      	bne.n	800a96e <memset+0xa>
 800a96c:	4770      	bx	lr
 800a96e:	f803 1b01 	strb.w	r1, [r3], #1
 800a972:	e7f9      	b.n	800a968 <memset+0x4>

0800a974 <strncmp>:
 800a974:	b510      	push	{r4, lr}
 800a976:	b16a      	cbz	r2, 800a994 <strncmp+0x20>
 800a978:	3901      	subs	r1, #1
 800a97a:	1884      	adds	r4, r0, r2
 800a97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a980:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a984:	429a      	cmp	r2, r3
 800a986:	d103      	bne.n	800a990 <strncmp+0x1c>
 800a988:	42a0      	cmp	r0, r4
 800a98a:	d001      	beq.n	800a990 <strncmp+0x1c>
 800a98c:	2a00      	cmp	r2, #0
 800a98e:	d1f5      	bne.n	800a97c <strncmp+0x8>
 800a990:	1ad0      	subs	r0, r2, r3
 800a992:	bd10      	pop	{r4, pc}
 800a994:	4610      	mov	r0, r2
 800a996:	e7fc      	b.n	800a992 <strncmp+0x1e>

0800a998 <__strtok_r>:
 800a998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a99a:	4604      	mov	r4, r0
 800a99c:	b908      	cbnz	r0, 800a9a2 <__strtok_r+0xa>
 800a99e:	6814      	ldr	r4, [r2, #0]
 800a9a0:	b144      	cbz	r4, 800a9b4 <__strtok_r+0x1c>
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a9ae:	b91e      	cbnz	r6, 800a9b8 <__strtok_r+0x20>
 800a9b0:	b965      	cbnz	r5, 800a9cc <__strtok_r+0x34>
 800a9b2:	6015      	str	r5, [r2, #0]
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	e005      	b.n	800a9c4 <__strtok_r+0x2c>
 800a9b8:	42b5      	cmp	r5, r6
 800a9ba:	d1f6      	bne.n	800a9aa <__strtok_r+0x12>
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1f0      	bne.n	800a9a2 <__strtok_r+0xa>
 800a9c0:	6014      	str	r4, [r2, #0]
 800a9c2:	7003      	strb	r3, [r0, #0]
 800a9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c6:	461c      	mov	r4, r3
 800a9c8:	e00c      	b.n	800a9e4 <__strtok_r+0x4c>
 800a9ca:	b915      	cbnz	r5, 800a9d2 <__strtok_r+0x3a>
 800a9cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9d0:	460e      	mov	r6, r1
 800a9d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a9d6:	42ab      	cmp	r3, r5
 800a9d8:	d1f7      	bne.n	800a9ca <__strtok_r+0x32>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0f3      	beq.n	800a9c6 <__strtok_r+0x2e>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a9e4:	6014      	str	r4, [r2, #0]
 800a9e6:	e7ed      	b.n	800a9c4 <__strtok_r+0x2c>

0800a9e8 <strtok_r>:
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f7ff bfd5 	b.w	800a998 <__strtok_r>
	...

0800a9f0 <_close_r>:
 800a9f0:	b538      	push	{r3, r4, r5, lr}
 800a9f2:	4d06      	ldr	r5, [pc, #24]	@ (800aa0c <_close_r+0x1c>)
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	4608      	mov	r0, r1
 800a9fa:	602b      	str	r3, [r5, #0]
 800a9fc:	f7fa fe06 	bl	800560c <_close>
 800aa00:	1c43      	adds	r3, r0, #1
 800aa02:	d102      	bne.n	800aa0a <_close_r+0x1a>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	b103      	cbz	r3, 800aa0a <_close_r+0x1a>
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
 800aa0c:	20003818 	.word	0x20003818

0800aa10 <_lseek_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d07      	ldr	r5, [pc, #28]	@ (800aa30 <_lseek_r+0x20>)
 800aa14:	4604      	mov	r4, r0
 800aa16:	4608      	mov	r0, r1
 800aa18:	4611      	mov	r1, r2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	602a      	str	r2, [r5, #0]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f7fa fe1b 	bl	800565a <_lseek>
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	d102      	bne.n	800aa2e <_lseek_r+0x1e>
 800aa28:	682b      	ldr	r3, [r5, #0]
 800aa2a:	b103      	cbz	r3, 800aa2e <_lseek_r+0x1e>
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	20003818 	.word	0x20003818

0800aa34 <_read_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	@ (800aa54 <_read_r+0x20>)
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	2200      	movs	r2, #0
 800aa40:	602a      	str	r2, [r5, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	f7fa fda9 	bl	800559a <_read>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_read_r+0x1e>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_read_r+0x1e>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20003818 	.word	0x20003818

0800aa58 <_write_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4d07      	ldr	r5, [pc, #28]	@ (800aa78 <_write_r+0x20>)
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	4608      	mov	r0, r1
 800aa60:	4611      	mov	r1, r2
 800aa62:	2200      	movs	r2, #0
 800aa64:	602a      	str	r2, [r5, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	f7fa fdb4 	bl	80055d4 <_write>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_write_r+0x1e>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_write_r+0x1e>
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	20003818 	.word	0x20003818

0800aa7c <__errno>:
 800aa7c:	4b01      	ldr	r3, [pc, #4]	@ (800aa84 <__errno+0x8>)
 800aa7e:	6818      	ldr	r0, [r3, #0]
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	20000198 	.word	0x20000198

0800aa88 <__libc_init_array>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	4d0d      	ldr	r5, [pc, #52]	@ (800aac0 <__libc_init_array+0x38>)
 800aa8c:	4c0d      	ldr	r4, [pc, #52]	@ (800aac4 <__libc_init_array+0x3c>)
 800aa8e:	1b64      	subs	r4, r4, r5
 800aa90:	10a4      	asrs	r4, r4, #2
 800aa92:	2600      	movs	r6, #0
 800aa94:	42a6      	cmp	r6, r4
 800aa96:	d109      	bne.n	800aaac <__libc_init_array+0x24>
 800aa98:	4d0b      	ldr	r5, [pc, #44]	@ (800aac8 <__libc_init_array+0x40>)
 800aa9a:	4c0c      	ldr	r4, [pc, #48]	@ (800aacc <__libc_init_array+0x44>)
 800aa9c:	f002 f826 	bl	800caec <_init>
 800aaa0:	1b64      	subs	r4, r4, r5
 800aaa2:	10a4      	asrs	r4, r4, #2
 800aaa4:	2600      	movs	r6, #0
 800aaa6:	42a6      	cmp	r6, r4
 800aaa8:	d105      	bne.n	800aab6 <__libc_init_array+0x2e>
 800aaaa:	bd70      	pop	{r4, r5, r6, pc}
 800aaac:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab0:	4798      	blx	r3
 800aab2:	3601      	adds	r6, #1
 800aab4:	e7ee      	b.n	800aa94 <__libc_init_array+0xc>
 800aab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaba:	4798      	blx	r3
 800aabc:	3601      	adds	r6, #1
 800aabe:	e7f2      	b.n	800aaa6 <__libc_init_array+0x1e>
 800aac0:	0800dad0 	.word	0x0800dad0
 800aac4:	0800dad0 	.word	0x0800dad0
 800aac8:	0800dad0 	.word	0x0800dad0
 800aacc:	0800dad4 	.word	0x0800dad4

0800aad0 <__retarget_lock_init_recursive>:
 800aad0:	4770      	bx	lr

0800aad2 <__retarget_lock_acquire_recursive>:
 800aad2:	4770      	bx	lr

0800aad4 <__retarget_lock_release_recursive>:
 800aad4:	4770      	bx	lr

0800aad6 <strcpy>:
 800aad6:	4603      	mov	r3, r0
 800aad8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aadc:	f803 2b01 	strb.w	r2, [r3], #1
 800aae0:	2a00      	cmp	r2, #0
 800aae2:	d1f9      	bne.n	800aad8 <strcpy+0x2>
 800aae4:	4770      	bx	lr

0800aae6 <memcpy>:
 800aae6:	440a      	add	r2, r1
 800aae8:	4291      	cmp	r1, r2
 800aaea:	f100 33ff 	add.w	r3, r0, #4294967295
 800aaee:	d100      	bne.n	800aaf2 <memcpy+0xc>
 800aaf0:	4770      	bx	lr
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aafc:	4291      	cmp	r1, r2
 800aafe:	d1f9      	bne.n	800aaf4 <memcpy+0xe>
 800ab00:	bd10      	pop	{r4, pc}
 800ab02:	0000      	movs	r0, r0
 800ab04:	0000      	movs	r0, r0
	...

0800ab08 <nan>:
 800ab08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab10 <nan+0x8>
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	00000000 	.word	0x00000000
 800ab14:	7ff80000 	.word	0x7ff80000

0800ab18 <nanf>:
 800ab18:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ab20 <nanf+0x8>
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	7fc00000 	.word	0x7fc00000

0800ab24 <_free_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4605      	mov	r5, r0
 800ab28:	2900      	cmp	r1, #0
 800ab2a:	d041      	beq.n	800abb0 <_free_r+0x8c>
 800ab2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab30:	1f0c      	subs	r4, r1, #4
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	bfb8      	it	lt
 800ab36:	18e4      	addlt	r4, r4, r3
 800ab38:	f000 fc2c 	bl	800b394 <__malloc_lock>
 800ab3c:	4a1d      	ldr	r2, [pc, #116]	@ (800abb4 <_free_r+0x90>)
 800ab3e:	6813      	ldr	r3, [r2, #0]
 800ab40:	b933      	cbnz	r3, 800ab50 <_free_r+0x2c>
 800ab42:	6063      	str	r3, [r4, #4]
 800ab44:	6014      	str	r4, [r2, #0]
 800ab46:	4628      	mov	r0, r5
 800ab48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab4c:	f000 bc28 	b.w	800b3a0 <__malloc_unlock>
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	d908      	bls.n	800ab66 <_free_r+0x42>
 800ab54:	6820      	ldr	r0, [r4, #0]
 800ab56:	1821      	adds	r1, r4, r0
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	bf01      	itttt	eq
 800ab5c:	6819      	ldreq	r1, [r3, #0]
 800ab5e:	685b      	ldreq	r3, [r3, #4]
 800ab60:	1809      	addeq	r1, r1, r0
 800ab62:	6021      	streq	r1, [r4, #0]
 800ab64:	e7ed      	b.n	800ab42 <_free_r+0x1e>
 800ab66:	461a      	mov	r2, r3
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	b10b      	cbz	r3, 800ab70 <_free_r+0x4c>
 800ab6c:	42a3      	cmp	r3, r4
 800ab6e:	d9fa      	bls.n	800ab66 <_free_r+0x42>
 800ab70:	6811      	ldr	r1, [r2, #0]
 800ab72:	1850      	adds	r0, r2, r1
 800ab74:	42a0      	cmp	r0, r4
 800ab76:	d10b      	bne.n	800ab90 <_free_r+0x6c>
 800ab78:	6820      	ldr	r0, [r4, #0]
 800ab7a:	4401      	add	r1, r0
 800ab7c:	1850      	adds	r0, r2, r1
 800ab7e:	4283      	cmp	r3, r0
 800ab80:	6011      	str	r1, [r2, #0]
 800ab82:	d1e0      	bne.n	800ab46 <_free_r+0x22>
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	6053      	str	r3, [r2, #4]
 800ab8a:	4408      	add	r0, r1
 800ab8c:	6010      	str	r0, [r2, #0]
 800ab8e:	e7da      	b.n	800ab46 <_free_r+0x22>
 800ab90:	d902      	bls.n	800ab98 <_free_r+0x74>
 800ab92:	230c      	movs	r3, #12
 800ab94:	602b      	str	r3, [r5, #0]
 800ab96:	e7d6      	b.n	800ab46 <_free_r+0x22>
 800ab98:	6820      	ldr	r0, [r4, #0]
 800ab9a:	1821      	adds	r1, r4, r0
 800ab9c:	428b      	cmp	r3, r1
 800ab9e:	bf04      	itt	eq
 800aba0:	6819      	ldreq	r1, [r3, #0]
 800aba2:	685b      	ldreq	r3, [r3, #4]
 800aba4:	6063      	str	r3, [r4, #4]
 800aba6:	bf04      	itt	eq
 800aba8:	1809      	addeq	r1, r1, r0
 800abaa:	6021      	streq	r1, [r4, #0]
 800abac:	6054      	str	r4, [r2, #4]
 800abae:	e7ca      	b.n	800ab46 <_free_r+0x22>
 800abb0:	bd38      	pop	{r3, r4, r5, pc}
 800abb2:	bf00      	nop
 800abb4:	20003824 	.word	0x20003824

0800abb8 <rshift>:
 800abb8:	6903      	ldr	r3, [r0, #16]
 800abba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abc6:	f100 0414 	add.w	r4, r0, #20
 800abca:	dd45      	ble.n	800ac58 <rshift+0xa0>
 800abcc:	f011 011f 	ands.w	r1, r1, #31
 800abd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800abd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800abd8:	d10c      	bne.n	800abf4 <rshift+0x3c>
 800abda:	f100 0710 	add.w	r7, r0, #16
 800abde:	4629      	mov	r1, r5
 800abe0:	42b1      	cmp	r1, r6
 800abe2:	d334      	bcc.n	800ac4e <rshift+0x96>
 800abe4:	1a9b      	subs	r3, r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	1eea      	subs	r2, r5, #3
 800abea:	4296      	cmp	r6, r2
 800abec:	bf38      	it	cc
 800abee:	2300      	movcc	r3, #0
 800abf0:	4423      	add	r3, r4
 800abf2:	e015      	b.n	800ac20 <rshift+0x68>
 800abf4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abf8:	f1c1 0820 	rsb	r8, r1, #32
 800abfc:	40cf      	lsrs	r7, r1
 800abfe:	f105 0e04 	add.w	lr, r5, #4
 800ac02:	46a1      	mov	r9, r4
 800ac04:	4576      	cmp	r6, lr
 800ac06:	46f4      	mov	ip, lr
 800ac08:	d815      	bhi.n	800ac36 <rshift+0x7e>
 800ac0a:	1a9a      	subs	r2, r3, r2
 800ac0c:	0092      	lsls	r2, r2, #2
 800ac0e:	3a04      	subs	r2, #4
 800ac10:	3501      	adds	r5, #1
 800ac12:	42ae      	cmp	r6, r5
 800ac14:	bf38      	it	cc
 800ac16:	2200      	movcc	r2, #0
 800ac18:	18a3      	adds	r3, r4, r2
 800ac1a:	50a7      	str	r7, [r4, r2]
 800ac1c:	b107      	cbz	r7, 800ac20 <rshift+0x68>
 800ac1e:	3304      	adds	r3, #4
 800ac20:	1b1a      	subs	r2, r3, r4
 800ac22:	42a3      	cmp	r3, r4
 800ac24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac28:	bf08      	it	eq
 800ac2a:	2300      	moveq	r3, #0
 800ac2c:	6102      	str	r2, [r0, #16]
 800ac2e:	bf08      	it	eq
 800ac30:	6143      	streq	r3, [r0, #20]
 800ac32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac36:	f8dc c000 	ldr.w	ip, [ip]
 800ac3a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac3e:	ea4c 0707 	orr.w	r7, ip, r7
 800ac42:	f849 7b04 	str.w	r7, [r9], #4
 800ac46:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac4a:	40cf      	lsrs	r7, r1
 800ac4c:	e7da      	b.n	800ac04 <rshift+0x4c>
 800ac4e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac52:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac56:	e7c3      	b.n	800abe0 <rshift+0x28>
 800ac58:	4623      	mov	r3, r4
 800ac5a:	e7e1      	b.n	800ac20 <rshift+0x68>

0800ac5c <__hexdig_fun>:
 800ac5c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac60:	2b09      	cmp	r3, #9
 800ac62:	d802      	bhi.n	800ac6a <__hexdig_fun+0xe>
 800ac64:	3820      	subs	r0, #32
 800ac66:	b2c0      	uxtb	r0, r0
 800ac68:	4770      	bx	lr
 800ac6a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac6e:	2b05      	cmp	r3, #5
 800ac70:	d801      	bhi.n	800ac76 <__hexdig_fun+0x1a>
 800ac72:	3847      	subs	r0, #71	@ 0x47
 800ac74:	e7f7      	b.n	800ac66 <__hexdig_fun+0xa>
 800ac76:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac7a:	2b05      	cmp	r3, #5
 800ac7c:	d801      	bhi.n	800ac82 <__hexdig_fun+0x26>
 800ac7e:	3827      	subs	r0, #39	@ 0x27
 800ac80:	e7f1      	b.n	800ac66 <__hexdig_fun+0xa>
 800ac82:	2000      	movs	r0, #0
 800ac84:	4770      	bx	lr
	...

0800ac88 <__gethex>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	468a      	mov	sl, r1
 800ac90:	9302      	str	r3, [sp, #8]
 800ac92:	680b      	ldr	r3, [r1, #0]
 800ac94:	9001      	str	r0, [sp, #4]
 800ac96:	4690      	mov	r8, r2
 800ac98:	1c9c      	adds	r4, r3, #2
 800ac9a:	46a1      	mov	r9, r4
 800ac9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aca0:	2830      	cmp	r0, #48	@ 0x30
 800aca2:	d0fa      	beq.n	800ac9a <__gethex+0x12>
 800aca4:	eba9 0303 	sub.w	r3, r9, r3
 800aca8:	f1a3 0b02 	sub.w	fp, r3, #2
 800acac:	f7ff ffd6 	bl	800ac5c <__hexdig_fun>
 800acb0:	4605      	mov	r5, r0
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d168      	bne.n	800ad88 <__gethex+0x100>
 800acb6:	49a0      	ldr	r1, [pc, #640]	@ (800af38 <__gethex+0x2b0>)
 800acb8:	2201      	movs	r2, #1
 800acba:	4648      	mov	r0, r9
 800acbc:	f7ff fe5a 	bl	800a974 <strncmp>
 800acc0:	4607      	mov	r7, r0
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d167      	bne.n	800ad96 <__gethex+0x10e>
 800acc6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800acca:	4626      	mov	r6, r4
 800accc:	f7ff ffc6 	bl	800ac5c <__hexdig_fun>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	d062      	beq.n	800ad9a <__gethex+0x112>
 800acd4:	4623      	mov	r3, r4
 800acd6:	7818      	ldrb	r0, [r3, #0]
 800acd8:	2830      	cmp	r0, #48	@ 0x30
 800acda:	4699      	mov	r9, r3
 800acdc:	f103 0301 	add.w	r3, r3, #1
 800ace0:	d0f9      	beq.n	800acd6 <__gethex+0x4e>
 800ace2:	f7ff ffbb 	bl	800ac5c <__hexdig_fun>
 800ace6:	fab0 f580 	clz	r5, r0
 800acea:	096d      	lsrs	r5, r5, #5
 800acec:	f04f 0b01 	mov.w	fp, #1
 800acf0:	464a      	mov	r2, r9
 800acf2:	4616      	mov	r6, r2
 800acf4:	3201      	adds	r2, #1
 800acf6:	7830      	ldrb	r0, [r6, #0]
 800acf8:	f7ff ffb0 	bl	800ac5c <__hexdig_fun>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d1f8      	bne.n	800acf2 <__gethex+0x6a>
 800ad00:	498d      	ldr	r1, [pc, #564]	@ (800af38 <__gethex+0x2b0>)
 800ad02:	2201      	movs	r2, #1
 800ad04:	4630      	mov	r0, r6
 800ad06:	f7ff fe35 	bl	800a974 <strncmp>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d13f      	bne.n	800ad8e <__gethex+0x106>
 800ad0e:	b944      	cbnz	r4, 800ad22 <__gethex+0x9a>
 800ad10:	1c74      	adds	r4, r6, #1
 800ad12:	4622      	mov	r2, r4
 800ad14:	4616      	mov	r6, r2
 800ad16:	3201      	adds	r2, #1
 800ad18:	7830      	ldrb	r0, [r6, #0]
 800ad1a:	f7ff ff9f 	bl	800ac5c <__hexdig_fun>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d1f8      	bne.n	800ad14 <__gethex+0x8c>
 800ad22:	1ba4      	subs	r4, r4, r6
 800ad24:	00a7      	lsls	r7, r4, #2
 800ad26:	7833      	ldrb	r3, [r6, #0]
 800ad28:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ad2c:	2b50      	cmp	r3, #80	@ 0x50
 800ad2e:	d13e      	bne.n	800adae <__gethex+0x126>
 800ad30:	7873      	ldrb	r3, [r6, #1]
 800ad32:	2b2b      	cmp	r3, #43	@ 0x2b
 800ad34:	d033      	beq.n	800ad9e <__gethex+0x116>
 800ad36:	2b2d      	cmp	r3, #45	@ 0x2d
 800ad38:	d034      	beq.n	800ada4 <__gethex+0x11c>
 800ad3a:	1c71      	adds	r1, r6, #1
 800ad3c:	2400      	movs	r4, #0
 800ad3e:	7808      	ldrb	r0, [r1, #0]
 800ad40:	f7ff ff8c 	bl	800ac5c <__hexdig_fun>
 800ad44:	1e43      	subs	r3, r0, #1
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b18      	cmp	r3, #24
 800ad4a:	d830      	bhi.n	800adae <__gethex+0x126>
 800ad4c:	f1a0 0210 	sub.w	r2, r0, #16
 800ad50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad54:	f7ff ff82 	bl	800ac5c <__hexdig_fun>
 800ad58:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad5c:	fa5f fc8c 	uxtb.w	ip, ip
 800ad60:	f1bc 0f18 	cmp.w	ip, #24
 800ad64:	f04f 030a 	mov.w	r3, #10
 800ad68:	d91e      	bls.n	800ada8 <__gethex+0x120>
 800ad6a:	b104      	cbz	r4, 800ad6e <__gethex+0xe6>
 800ad6c:	4252      	negs	r2, r2
 800ad6e:	4417      	add	r7, r2
 800ad70:	f8ca 1000 	str.w	r1, [sl]
 800ad74:	b1ed      	cbz	r5, 800adb2 <__gethex+0x12a>
 800ad76:	f1bb 0f00 	cmp.w	fp, #0
 800ad7a:	bf0c      	ite	eq
 800ad7c:	2506      	moveq	r5, #6
 800ad7e:	2500      	movne	r5, #0
 800ad80:	4628      	mov	r0, r5
 800ad82:	b005      	add	sp, #20
 800ad84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad88:	2500      	movs	r5, #0
 800ad8a:	462c      	mov	r4, r5
 800ad8c:	e7b0      	b.n	800acf0 <__gethex+0x68>
 800ad8e:	2c00      	cmp	r4, #0
 800ad90:	d1c7      	bne.n	800ad22 <__gethex+0x9a>
 800ad92:	4627      	mov	r7, r4
 800ad94:	e7c7      	b.n	800ad26 <__gethex+0x9e>
 800ad96:	464e      	mov	r6, r9
 800ad98:	462f      	mov	r7, r5
 800ad9a:	2501      	movs	r5, #1
 800ad9c:	e7c3      	b.n	800ad26 <__gethex+0x9e>
 800ad9e:	2400      	movs	r4, #0
 800ada0:	1cb1      	adds	r1, r6, #2
 800ada2:	e7cc      	b.n	800ad3e <__gethex+0xb6>
 800ada4:	2401      	movs	r4, #1
 800ada6:	e7fb      	b.n	800ada0 <__gethex+0x118>
 800ada8:	fb03 0002 	mla	r0, r3, r2, r0
 800adac:	e7ce      	b.n	800ad4c <__gethex+0xc4>
 800adae:	4631      	mov	r1, r6
 800adb0:	e7de      	b.n	800ad70 <__gethex+0xe8>
 800adb2:	eba6 0309 	sub.w	r3, r6, r9
 800adb6:	3b01      	subs	r3, #1
 800adb8:	4629      	mov	r1, r5
 800adba:	2b07      	cmp	r3, #7
 800adbc:	dc0a      	bgt.n	800add4 <__gethex+0x14c>
 800adbe:	9801      	ldr	r0, [sp, #4]
 800adc0:	f000 faf4 	bl	800b3ac <_Balloc>
 800adc4:	4604      	mov	r4, r0
 800adc6:	b940      	cbnz	r0, 800adda <__gethex+0x152>
 800adc8:	4b5c      	ldr	r3, [pc, #368]	@ (800af3c <__gethex+0x2b4>)
 800adca:	4602      	mov	r2, r0
 800adcc:	21e4      	movs	r1, #228	@ 0xe4
 800adce:	485c      	ldr	r0, [pc, #368]	@ (800af40 <__gethex+0x2b8>)
 800add0:	f001 fb66 	bl	800c4a0 <__assert_func>
 800add4:	3101      	adds	r1, #1
 800add6:	105b      	asrs	r3, r3, #1
 800add8:	e7ef      	b.n	800adba <__gethex+0x132>
 800adda:	f100 0a14 	add.w	sl, r0, #20
 800adde:	2300      	movs	r3, #0
 800ade0:	4655      	mov	r5, sl
 800ade2:	469b      	mov	fp, r3
 800ade4:	45b1      	cmp	r9, r6
 800ade6:	d337      	bcc.n	800ae58 <__gethex+0x1d0>
 800ade8:	f845 bb04 	str.w	fp, [r5], #4
 800adec:	eba5 050a 	sub.w	r5, r5, sl
 800adf0:	10ad      	asrs	r5, r5, #2
 800adf2:	6125      	str	r5, [r4, #16]
 800adf4:	4658      	mov	r0, fp
 800adf6:	f000 fbcb 	bl	800b590 <__hi0bits>
 800adfa:	016d      	lsls	r5, r5, #5
 800adfc:	f8d8 6000 	ldr.w	r6, [r8]
 800ae00:	1a2d      	subs	r5, r5, r0
 800ae02:	42b5      	cmp	r5, r6
 800ae04:	dd54      	ble.n	800aeb0 <__gethex+0x228>
 800ae06:	1bad      	subs	r5, r5, r6
 800ae08:	4629      	mov	r1, r5
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 ff5f 	bl	800bcce <__any_on>
 800ae10:	4681      	mov	r9, r0
 800ae12:	b178      	cbz	r0, 800ae34 <__gethex+0x1ac>
 800ae14:	1e6b      	subs	r3, r5, #1
 800ae16:	1159      	asrs	r1, r3, #5
 800ae18:	f003 021f 	and.w	r2, r3, #31
 800ae1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ae20:	f04f 0901 	mov.w	r9, #1
 800ae24:	fa09 f202 	lsl.w	r2, r9, r2
 800ae28:	420a      	tst	r2, r1
 800ae2a:	d003      	beq.n	800ae34 <__gethex+0x1ac>
 800ae2c:	454b      	cmp	r3, r9
 800ae2e:	dc36      	bgt.n	800ae9e <__gethex+0x216>
 800ae30:	f04f 0902 	mov.w	r9, #2
 800ae34:	4629      	mov	r1, r5
 800ae36:	4620      	mov	r0, r4
 800ae38:	f7ff febe 	bl	800abb8 <rshift>
 800ae3c:	442f      	add	r7, r5
 800ae3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae42:	42bb      	cmp	r3, r7
 800ae44:	da42      	bge.n	800aecc <__gethex+0x244>
 800ae46:	9801      	ldr	r0, [sp, #4]
 800ae48:	4621      	mov	r1, r4
 800ae4a:	f000 faef 	bl	800b42c <_Bfree>
 800ae4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae50:	2300      	movs	r3, #0
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	25a3      	movs	r5, #163	@ 0xa3
 800ae56:	e793      	b.n	800ad80 <__gethex+0xf8>
 800ae58:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae5c:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae5e:	d012      	beq.n	800ae86 <__gethex+0x1fe>
 800ae60:	2b20      	cmp	r3, #32
 800ae62:	d104      	bne.n	800ae6e <__gethex+0x1e6>
 800ae64:	f845 bb04 	str.w	fp, [r5], #4
 800ae68:	f04f 0b00 	mov.w	fp, #0
 800ae6c:	465b      	mov	r3, fp
 800ae6e:	7830      	ldrb	r0, [r6, #0]
 800ae70:	9303      	str	r3, [sp, #12]
 800ae72:	f7ff fef3 	bl	800ac5c <__hexdig_fun>
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	f000 000f 	and.w	r0, r0, #15
 800ae7c:	4098      	lsls	r0, r3
 800ae7e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae82:	3304      	adds	r3, #4
 800ae84:	e7ae      	b.n	800ade4 <__gethex+0x15c>
 800ae86:	45b1      	cmp	r9, r6
 800ae88:	d8ea      	bhi.n	800ae60 <__gethex+0x1d8>
 800ae8a:	492b      	ldr	r1, [pc, #172]	@ (800af38 <__gethex+0x2b0>)
 800ae8c:	9303      	str	r3, [sp, #12]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	4630      	mov	r0, r6
 800ae92:	f7ff fd6f 	bl	800a974 <strncmp>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d1e1      	bne.n	800ae60 <__gethex+0x1d8>
 800ae9c:	e7a2      	b.n	800ade4 <__gethex+0x15c>
 800ae9e:	1ea9      	subs	r1, r5, #2
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 ff14 	bl	800bcce <__any_on>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d0c2      	beq.n	800ae30 <__gethex+0x1a8>
 800aeaa:	f04f 0903 	mov.w	r9, #3
 800aeae:	e7c1      	b.n	800ae34 <__gethex+0x1ac>
 800aeb0:	da09      	bge.n	800aec6 <__gethex+0x23e>
 800aeb2:	1b75      	subs	r5, r6, r5
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	9801      	ldr	r0, [sp, #4]
 800aeb8:	462a      	mov	r2, r5
 800aeba:	f000 fccf 	bl	800b85c <__lshift>
 800aebe:	1b7f      	subs	r7, r7, r5
 800aec0:	4604      	mov	r4, r0
 800aec2:	f100 0a14 	add.w	sl, r0, #20
 800aec6:	f04f 0900 	mov.w	r9, #0
 800aeca:	e7b8      	b.n	800ae3e <__gethex+0x1b6>
 800aecc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aed0:	42bd      	cmp	r5, r7
 800aed2:	dd6f      	ble.n	800afb4 <__gethex+0x32c>
 800aed4:	1bed      	subs	r5, r5, r7
 800aed6:	42ae      	cmp	r6, r5
 800aed8:	dc34      	bgt.n	800af44 <__gethex+0x2bc>
 800aeda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	d022      	beq.n	800af28 <__gethex+0x2a0>
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	d024      	beq.n	800af30 <__gethex+0x2a8>
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d115      	bne.n	800af16 <__gethex+0x28e>
 800aeea:	42ae      	cmp	r6, r5
 800aeec:	d113      	bne.n	800af16 <__gethex+0x28e>
 800aeee:	2e01      	cmp	r6, #1
 800aef0:	d10b      	bne.n	800af0a <__gethex+0x282>
 800aef2:	9a02      	ldr	r2, [sp, #8]
 800aef4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	2301      	movs	r3, #1
 800aefc:	6123      	str	r3, [r4, #16]
 800aefe:	f8ca 3000 	str.w	r3, [sl]
 800af02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af04:	2562      	movs	r5, #98	@ 0x62
 800af06:	601c      	str	r4, [r3, #0]
 800af08:	e73a      	b.n	800ad80 <__gethex+0xf8>
 800af0a:	1e71      	subs	r1, r6, #1
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fede 	bl	800bcce <__any_on>
 800af12:	2800      	cmp	r0, #0
 800af14:	d1ed      	bne.n	800aef2 <__gethex+0x26a>
 800af16:	9801      	ldr	r0, [sp, #4]
 800af18:	4621      	mov	r1, r4
 800af1a:	f000 fa87 	bl	800b42c <_Bfree>
 800af1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af20:	2300      	movs	r3, #0
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	2550      	movs	r5, #80	@ 0x50
 800af26:	e72b      	b.n	800ad80 <__gethex+0xf8>
 800af28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f3      	bne.n	800af16 <__gethex+0x28e>
 800af2e:	e7e0      	b.n	800aef2 <__gethex+0x26a>
 800af30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1dd      	bne.n	800aef2 <__gethex+0x26a>
 800af36:	e7ee      	b.n	800af16 <__gethex+0x28e>
 800af38:	0800d70c 	.word	0x0800d70c
 800af3c:	0800d879 	.word	0x0800d879
 800af40:	0800d88a 	.word	0x0800d88a
 800af44:	1e6f      	subs	r7, r5, #1
 800af46:	f1b9 0f00 	cmp.w	r9, #0
 800af4a:	d130      	bne.n	800afae <__gethex+0x326>
 800af4c:	b127      	cbz	r7, 800af58 <__gethex+0x2d0>
 800af4e:	4639      	mov	r1, r7
 800af50:	4620      	mov	r0, r4
 800af52:	f000 febc 	bl	800bcce <__any_on>
 800af56:	4681      	mov	r9, r0
 800af58:	117a      	asrs	r2, r7, #5
 800af5a:	2301      	movs	r3, #1
 800af5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af60:	f007 071f 	and.w	r7, r7, #31
 800af64:	40bb      	lsls	r3, r7
 800af66:	4213      	tst	r3, r2
 800af68:	4629      	mov	r1, r5
 800af6a:	4620      	mov	r0, r4
 800af6c:	bf18      	it	ne
 800af6e:	f049 0902 	orrne.w	r9, r9, #2
 800af72:	f7ff fe21 	bl	800abb8 <rshift>
 800af76:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af7a:	1b76      	subs	r6, r6, r5
 800af7c:	2502      	movs	r5, #2
 800af7e:	f1b9 0f00 	cmp.w	r9, #0
 800af82:	d047      	beq.n	800b014 <__gethex+0x38c>
 800af84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d015      	beq.n	800afb8 <__gethex+0x330>
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d017      	beq.n	800afc0 <__gethex+0x338>
 800af90:	2b01      	cmp	r3, #1
 800af92:	d109      	bne.n	800afa8 <__gethex+0x320>
 800af94:	f019 0f02 	tst.w	r9, #2
 800af98:	d006      	beq.n	800afa8 <__gethex+0x320>
 800af9a:	f8da 3000 	ldr.w	r3, [sl]
 800af9e:	ea49 0903 	orr.w	r9, r9, r3
 800afa2:	f019 0f01 	tst.w	r9, #1
 800afa6:	d10e      	bne.n	800afc6 <__gethex+0x33e>
 800afa8:	f045 0510 	orr.w	r5, r5, #16
 800afac:	e032      	b.n	800b014 <__gethex+0x38c>
 800afae:	f04f 0901 	mov.w	r9, #1
 800afb2:	e7d1      	b.n	800af58 <__gethex+0x2d0>
 800afb4:	2501      	movs	r5, #1
 800afb6:	e7e2      	b.n	800af7e <__gethex+0x2f6>
 800afb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afba:	f1c3 0301 	rsb	r3, r3, #1
 800afbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800afc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0f0      	beq.n	800afa8 <__gethex+0x320>
 800afc6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800afca:	f104 0314 	add.w	r3, r4, #20
 800afce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800afd2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800afd6:	f04f 0c00 	mov.w	ip, #0
 800afda:	4618      	mov	r0, r3
 800afdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afe4:	d01b      	beq.n	800b01e <__gethex+0x396>
 800afe6:	3201      	adds	r2, #1
 800afe8:	6002      	str	r2, [r0, #0]
 800afea:	2d02      	cmp	r5, #2
 800afec:	f104 0314 	add.w	r3, r4, #20
 800aff0:	d13c      	bne.n	800b06c <__gethex+0x3e4>
 800aff2:	f8d8 2000 	ldr.w	r2, [r8]
 800aff6:	3a01      	subs	r2, #1
 800aff8:	42b2      	cmp	r2, r6
 800affa:	d109      	bne.n	800b010 <__gethex+0x388>
 800affc:	1171      	asrs	r1, r6, #5
 800affe:	2201      	movs	r2, #1
 800b000:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b004:	f006 061f 	and.w	r6, r6, #31
 800b008:	fa02 f606 	lsl.w	r6, r2, r6
 800b00c:	421e      	tst	r6, r3
 800b00e:	d13a      	bne.n	800b086 <__gethex+0x3fe>
 800b010:	f045 0520 	orr.w	r5, r5, #32
 800b014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b016:	601c      	str	r4, [r3, #0]
 800b018:	9b02      	ldr	r3, [sp, #8]
 800b01a:	601f      	str	r7, [r3, #0]
 800b01c:	e6b0      	b.n	800ad80 <__gethex+0xf8>
 800b01e:	4299      	cmp	r1, r3
 800b020:	f843 cc04 	str.w	ip, [r3, #-4]
 800b024:	d8d9      	bhi.n	800afda <__gethex+0x352>
 800b026:	68a3      	ldr	r3, [r4, #8]
 800b028:	459b      	cmp	fp, r3
 800b02a:	db17      	blt.n	800b05c <__gethex+0x3d4>
 800b02c:	6861      	ldr	r1, [r4, #4]
 800b02e:	9801      	ldr	r0, [sp, #4]
 800b030:	3101      	adds	r1, #1
 800b032:	f000 f9bb 	bl	800b3ac <_Balloc>
 800b036:	4681      	mov	r9, r0
 800b038:	b918      	cbnz	r0, 800b042 <__gethex+0x3ba>
 800b03a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a4 <__gethex+0x41c>)
 800b03c:	4602      	mov	r2, r0
 800b03e:	2184      	movs	r1, #132	@ 0x84
 800b040:	e6c5      	b.n	800adce <__gethex+0x146>
 800b042:	6922      	ldr	r2, [r4, #16]
 800b044:	3202      	adds	r2, #2
 800b046:	f104 010c 	add.w	r1, r4, #12
 800b04a:	0092      	lsls	r2, r2, #2
 800b04c:	300c      	adds	r0, #12
 800b04e:	f7ff fd4a 	bl	800aae6 <memcpy>
 800b052:	4621      	mov	r1, r4
 800b054:	9801      	ldr	r0, [sp, #4]
 800b056:	f000 f9e9 	bl	800b42c <_Bfree>
 800b05a:	464c      	mov	r4, r9
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b064:	6122      	str	r2, [r4, #16]
 800b066:	2201      	movs	r2, #1
 800b068:	615a      	str	r2, [r3, #20]
 800b06a:	e7be      	b.n	800afea <__gethex+0x362>
 800b06c:	6922      	ldr	r2, [r4, #16]
 800b06e:	455a      	cmp	r2, fp
 800b070:	dd0b      	ble.n	800b08a <__gethex+0x402>
 800b072:	2101      	movs	r1, #1
 800b074:	4620      	mov	r0, r4
 800b076:	f7ff fd9f 	bl	800abb8 <rshift>
 800b07a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b07e:	3701      	adds	r7, #1
 800b080:	42bb      	cmp	r3, r7
 800b082:	f6ff aee0 	blt.w	800ae46 <__gethex+0x1be>
 800b086:	2501      	movs	r5, #1
 800b088:	e7c2      	b.n	800b010 <__gethex+0x388>
 800b08a:	f016 061f 	ands.w	r6, r6, #31
 800b08e:	d0fa      	beq.n	800b086 <__gethex+0x3fe>
 800b090:	4453      	add	r3, sl
 800b092:	f1c6 0620 	rsb	r6, r6, #32
 800b096:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b09a:	f000 fa79 	bl	800b590 <__hi0bits>
 800b09e:	42b0      	cmp	r0, r6
 800b0a0:	dbe7      	blt.n	800b072 <__gethex+0x3ea>
 800b0a2:	e7f0      	b.n	800b086 <__gethex+0x3fe>
 800b0a4:	0800d879 	.word	0x0800d879

0800b0a8 <L_shift>:
 800b0a8:	f1c2 0208 	rsb	r2, r2, #8
 800b0ac:	0092      	lsls	r2, r2, #2
 800b0ae:	b570      	push	{r4, r5, r6, lr}
 800b0b0:	f1c2 0620 	rsb	r6, r2, #32
 800b0b4:	6843      	ldr	r3, [r0, #4]
 800b0b6:	6804      	ldr	r4, [r0, #0]
 800b0b8:	fa03 f506 	lsl.w	r5, r3, r6
 800b0bc:	432c      	orrs	r4, r5
 800b0be:	40d3      	lsrs	r3, r2
 800b0c0:	6004      	str	r4, [r0, #0]
 800b0c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0c6:	4288      	cmp	r0, r1
 800b0c8:	d3f4      	bcc.n	800b0b4 <L_shift+0xc>
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}

0800b0cc <__match>:
 800b0cc:	b530      	push	{r4, r5, lr}
 800b0ce:	6803      	ldr	r3, [r0, #0]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0d6:	b914      	cbnz	r4, 800b0de <__match+0x12>
 800b0d8:	6003      	str	r3, [r0, #0]
 800b0da:	2001      	movs	r0, #1
 800b0dc:	bd30      	pop	{r4, r5, pc}
 800b0de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b0e6:	2d19      	cmp	r5, #25
 800b0e8:	bf98      	it	ls
 800b0ea:	3220      	addls	r2, #32
 800b0ec:	42a2      	cmp	r2, r4
 800b0ee:	d0f0      	beq.n	800b0d2 <__match+0x6>
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	e7f3      	b.n	800b0dc <__match+0x10>

0800b0f4 <__hexnan>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	680b      	ldr	r3, [r1, #0]
 800b0fa:	6801      	ldr	r1, [r0, #0]
 800b0fc:	115e      	asrs	r6, r3, #5
 800b0fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b102:	f013 031f 	ands.w	r3, r3, #31
 800b106:	b087      	sub	sp, #28
 800b108:	bf18      	it	ne
 800b10a:	3604      	addne	r6, #4
 800b10c:	2500      	movs	r5, #0
 800b10e:	1f37      	subs	r7, r6, #4
 800b110:	4682      	mov	sl, r0
 800b112:	4690      	mov	r8, r2
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	f846 5c04 	str.w	r5, [r6, #-4]
 800b11a:	46b9      	mov	r9, r7
 800b11c:	463c      	mov	r4, r7
 800b11e:	9502      	str	r5, [sp, #8]
 800b120:	46ab      	mov	fp, r5
 800b122:	784a      	ldrb	r2, [r1, #1]
 800b124:	1c4b      	adds	r3, r1, #1
 800b126:	9303      	str	r3, [sp, #12]
 800b128:	b342      	cbz	r2, 800b17c <__hexnan+0x88>
 800b12a:	4610      	mov	r0, r2
 800b12c:	9105      	str	r1, [sp, #20]
 800b12e:	9204      	str	r2, [sp, #16]
 800b130:	f7ff fd94 	bl	800ac5c <__hexdig_fun>
 800b134:	2800      	cmp	r0, #0
 800b136:	d151      	bne.n	800b1dc <__hexnan+0xe8>
 800b138:	9a04      	ldr	r2, [sp, #16]
 800b13a:	9905      	ldr	r1, [sp, #20]
 800b13c:	2a20      	cmp	r2, #32
 800b13e:	d818      	bhi.n	800b172 <__hexnan+0x7e>
 800b140:	9b02      	ldr	r3, [sp, #8]
 800b142:	459b      	cmp	fp, r3
 800b144:	dd13      	ble.n	800b16e <__hexnan+0x7a>
 800b146:	454c      	cmp	r4, r9
 800b148:	d206      	bcs.n	800b158 <__hexnan+0x64>
 800b14a:	2d07      	cmp	r5, #7
 800b14c:	dc04      	bgt.n	800b158 <__hexnan+0x64>
 800b14e:	462a      	mov	r2, r5
 800b150:	4649      	mov	r1, r9
 800b152:	4620      	mov	r0, r4
 800b154:	f7ff ffa8 	bl	800b0a8 <L_shift>
 800b158:	4544      	cmp	r4, r8
 800b15a:	d952      	bls.n	800b202 <__hexnan+0x10e>
 800b15c:	2300      	movs	r3, #0
 800b15e:	f1a4 0904 	sub.w	r9, r4, #4
 800b162:	f844 3c04 	str.w	r3, [r4, #-4]
 800b166:	f8cd b008 	str.w	fp, [sp, #8]
 800b16a:	464c      	mov	r4, r9
 800b16c:	461d      	mov	r5, r3
 800b16e:	9903      	ldr	r1, [sp, #12]
 800b170:	e7d7      	b.n	800b122 <__hexnan+0x2e>
 800b172:	2a29      	cmp	r2, #41	@ 0x29
 800b174:	d157      	bne.n	800b226 <__hexnan+0x132>
 800b176:	3102      	adds	r1, #2
 800b178:	f8ca 1000 	str.w	r1, [sl]
 800b17c:	f1bb 0f00 	cmp.w	fp, #0
 800b180:	d051      	beq.n	800b226 <__hexnan+0x132>
 800b182:	454c      	cmp	r4, r9
 800b184:	d206      	bcs.n	800b194 <__hexnan+0xa0>
 800b186:	2d07      	cmp	r5, #7
 800b188:	dc04      	bgt.n	800b194 <__hexnan+0xa0>
 800b18a:	462a      	mov	r2, r5
 800b18c:	4649      	mov	r1, r9
 800b18e:	4620      	mov	r0, r4
 800b190:	f7ff ff8a 	bl	800b0a8 <L_shift>
 800b194:	4544      	cmp	r4, r8
 800b196:	d936      	bls.n	800b206 <__hexnan+0x112>
 800b198:	f1a8 0204 	sub.w	r2, r8, #4
 800b19c:	4623      	mov	r3, r4
 800b19e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b1a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800b1a6:	429f      	cmp	r7, r3
 800b1a8:	d2f9      	bcs.n	800b19e <__hexnan+0xaa>
 800b1aa:	1b3b      	subs	r3, r7, r4
 800b1ac:	f023 0303 	bic.w	r3, r3, #3
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	3401      	adds	r4, #1
 800b1b4:	3e03      	subs	r6, #3
 800b1b6:	42b4      	cmp	r4, r6
 800b1b8:	bf88      	it	hi
 800b1ba:	2304      	movhi	r3, #4
 800b1bc:	4443      	add	r3, r8
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f843 2b04 	str.w	r2, [r3], #4
 800b1c4:	429f      	cmp	r7, r3
 800b1c6:	d2fb      	bcs.n	800b1c0 <__hexnan+0xcc>
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	b91b      	cbnz	r3, 800b1d4 <__hexnan+0xe0>
 800b1cc:	4547      	cmp	r7, r8
 800b1ce:	d128      	bne.n	800b222 <__hexnan+0x12e>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	603b      	str	r3, [r7, #0]
 800b1d4:	2005      	movs	r0, #5
 800b1d6:	b007      	add	sp, #28
 800b1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	3501      	adds	r5, #1
 800b1de:	2d08      	cmp	r5, #8
 800b1e0:	f10b 0b01 	add.w	fp, fp, #1
 800b1e4:	dd06      	ble.n	800b1f4 <__hexnan+0x100>
 800b1e6:	4544      	cmp	r4, r8
 800b1e8:	d9c1      	bls.n	800b16e <__hexnan+0x7a>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1f0:	2501      	movs	r5, #1
 800b1f2:	3c04      	subs	r4, #4
 800b1f4:	6822      	ldr	r2, [r4, #0]
 800b1f6:	f000 000f 	and.w	r0, r0, #15
 800b1fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1fe:	6020      	str	r0, [r4, #0]
 800b200:	e7b5      	b.n	800b16e <__hexnan+0x7a>
 800b202:	2508      	movs	r5, #8
 800b204:	e7b3      	b.n	800b16e <__hexnan+0x7a>
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0dd      	beq.n	800b1c8 <__hexnan+0xd4>
 800b20c:	f1c3 0320 	rsb	r3, r3, #32
 800b210:	f04f 32ff 	mov.w	r2, #4294967295
 800b214:	40da      	lsrs	r2, r3
 800b216:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b21a:	4013      	ands	r3, r2
 800b21c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b220:	e7d2      	b.n	800b1c8 <__hexnan+0xd4>
 800b222:	3f04      	subs	r7, #4
 800b224:	e7d0      	b.n	800b1c8 <__hexnan+0xd4>
 800b226:	2004      	movs	r0, #4
 800b228:	e7d5      	b.n	800b1d6 <__hexnan+0xe2>
	...

0800b22c <sbrk_aligned>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	4e0f      	ldr	r6, [pc, #60]	@ (800b26c <sbrk_aligned+0x40>)
 800b230:	460c      	mov	r4, r1
 800b232:	6831      	ldr	r1, [r6, #0]
 800b234:	4605      	mov	r5, r0
 800b236:	b911      	cbnz	r1, 800b23e <sbrk_aligned+0x12>
 800b238:	f001 f922 	bl	800c480 <_sbrk_r>
 800b23c:	6030      	str	r0, [r6, #0]
 800b23e:	4621      	mov	r1, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f001 f91d 	bl	800c480 <_sbrk_r>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d103      	bne.n	800b252 <sbrk_aligned+0x26>
 800b24a:	f04f 34ff 	mov.w	r4, #4294967295
 800b24e:	4620      	mov	r0, r4
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	1cc4      	adds	r4, r0, #3
 800b254:	f024 0403 	bic.w	r4, r4, #3
 800b258:	42a0      	cmp	r0, r4
 800b25a:	d0f8      	beq.n	800b24e <sbrk_aligned+0x22>
 800b25c:	1a21      	subs	r1, r4, r0
 800b25e:	4628      	mov	r0, r5
 800b260:	f001 f90e 	bl	800c480 <_sbrk_r>
 800b264:	3001      	adds	r0, #1
 800b266:	d1f2      	bne.n	800b24e <sbrk_aligned+0x22>
 800b268:	e7ef      	b.n	800b24a <sbrk_aligned+0x1e>
 800b26a:	bf00      	nop
 800b26c:	20003820 	.word	0x20003820

0800b270 <_malloc_r>:
 800b270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b274:	1ccd      	adds	r5, r1, #3
 800b276:	f025 0503 	bic.w	r5, r5, #3
 800b27a:	3508      	adds	r5, #8
 800b27c:	2d0c      	cmp	r5, #12
 800b27e:	bf38      	it	cc
 800b280:	250c      	movcc	r5, #12
 800b282:	2d00      	cmp	r5, #0
 800b284:	4606      	mov	r6, r0
 800b286:	db01      	blt.n	800b28c <_malloc_r+0x1c>
 800b288:	42a9      	cmp	r1, r5
 800b28a:	d904      	bls.n	800b296 <_malloc_r+0x26>
 800b28c:	230c      	movs	r3, #12
 800b28e:	6033      	str	r3, [r6, #0]
 800b290:	2000      	movs	r0, #0
 800b292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b36c <_malloc_r+0xfc>
 800b29a:	f000 f87b 	bl	800b394 <__malloc_lock>
 800b29e:	f8d8 3000 	ldr.w	r3, [r8]
 800b2a2:	461c      	mov	r4, r3
 800b2a4:	bb44      	cbnz	r4, 800b2f8 <_malloc_r+0x88>
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f7ff ffbf 	bl	800b22c <sbrk_aligned>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	d158      	bne.n	800b366 <_malloc_r+0xf6>
 800b2b4:	f8d8 4000 	ldr.w	r4, [r8]
 800b2b8:	4627      	mov	r7, r4
 800b2ba:	2f00      	cmp	r7, #0
 800b2bc:	d143      	bne.n	800b346 <_malloc_r+0xd6>
 800b2be:	2c00      	cmp	r4, #0
 800b2c0:	d04b      	beq.n	800b35a <_malloc_r+0xea>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	eb04 0903 	add.w	r9, r4, r3
 800b2cc:	f001 f8d8 	bl	800c480 <_sbrk_r>
 800b2d0:	4581      	cmp	r9, r0
 800b2d2:	d142      	bne.n	800b35a <_malloc_r+0xea>
 800b2d4:	6821      	ldr	r1, [r4, #0]
 800b2d6:	1a6d      	subs	r5, r5, r1
 800b2d8:	4629      	mov	r1, r5
 800b2da:	4630      	mov	r0, r6
 800b2dc:	f7ff ffa6 	bl	800b22c <sbrk_aligned>
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d03a      	beq.n	800b35a <_malloc_r+0xea>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	442b      	add	r3, r5
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ee:	685a      	ldr	r2, [r3, #4]
 800b2f0:	bb62      	cbnz	r2, 800b34c <_malloc_r+0xdc>
 800b2f2:	f8c8 7000 	str.w	r7, [r8]
 800b2f6:	e00f      	b.n	800b318 <_malloc_r+0xa8>
 800b2f8:	6822      	ldr	r2, [r4, #0]
 800b2fa:	1b52      	subs	r2, r2, r5
 800b2fc:	d420      	bmi.n	800b340 <_malloc_r+0xd0>
 800b2fe:	2a0b      	cmp	r2, #11
 800b300:	d917      	bls.n	800b332 <_malloc_r+0xc2>
 800b302:	1961      	adds	r1, r4, r5
 800b304:	42a3      	cmp	r3, r4
 800b306:	6025      	str	r5, [r4, #0]
 800b308:	bf18      	it	ne
 800b30a:	6059      	strne	r1, [r3, #4]
 800b30c:	6863      	ldr	r3, [r4, #4]
 800b30e:	bf08      	it	eq
 800b310:	f8c8 1000 	streq.w	r1, [r8]
 800b314:	5162      	str	r2, [r4, r5]
 800b316:	604b      	str	r3, [r1, #4]
 800b318:	4630      	mov	r0, r6
 800b31a:	f000 f841 	bl	800b3a0 <__malloc_unlock>
 800b31e:	f104 000b 	add.w	r0, r4, #11
 800b322:	1d23      	adds	r3, r4, #4
 800b324:	f020 0007 	bic.w	r0, r0, #7
 800b328:	1ac2      	subs	r2, r0, r3
 800b32a:	bf1c      	itt	ne
 800b32c:	1a1b      	subne	r3, r3, r0
 800b32e:	50a3      	strne	r3, [r4, r2]
 800b330:	e7af      	b.n	800b292 <_malloc_r+0x22>
 800b332:	6862      	ldr	r2, [r4, #4]
 800b334:	42a3      	cmp	r3, r4
 800b336:	bf0c      	ite	eq
 800b338:	f8c8 2000 	streq.w	r2, [r8]
 800b33c:	605a      	strne	r2, [r3, #4]
 800b33e:	e7eb      	b.n	800b318 <_malloc_r+0xa8>
 800b340:	4623      	mov	r3, r4
 800b342:	6864      	ldr	r4, [r4, #4]
 800b344:	e7ae      	b.n	800b2a4 <_malloc_r+0x34>
 800b346:	463c      	mov	r4, r7
 800b348:	687f      	ldr	r7, [r7, #4]
 800b34a:	e7b6      	b.n	800b2ba <_malloc_r+0x4a>
 800b34c:	461a      	mov	r2, r3
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	42a3      	cmp	r3, r4
 800b352:	d1fb      	bne.n	800b34c <_malloc_r+0xdc>
 800b354:	2300      	movs	r3, #0
 800b356:	6053      	str	r3, [r2, #4]
 800b358:	e7de      	b.n	800b318 <_malloc_r+0xa8>
 800b35a:	230c      	movs	r3, #12
 800b35c:	6033      	str	r3, [r6, #0]
 800b35e:	4630      	mov	r0, r6
 800b360:	f000 f81e 	bl	800b3a0 <__malloc_unlock>
 800b364:	e794      	b.n	800b290 <_malloc_r+0x20>
 800b366:	6005      	str	r5, [r0, #0]
 800b368:	e7d6      	b.n	800b318 <_malloc_r+0xa8>
 800b36a:	bf00      	nop
 800b36c:	20003824 	.word	0x20003824

0800b370 <__ascii_mbtowc>:
 800b370:	b082      	sub	sp, #8
 800b372:	b901      	cbnz	r1, 800b376 <__ascii_mbtowc+0x6>
 800b374:	a901      	add	r1, sp, #4
 800b376:	b142      	cbz	r2, 800b38a <__ascii_mbtowc+0x1a>
 800b378:	b14b      	cbz	r3, 800b38e <__ascii_mbtowc+0x1e>
 800b37a:	7813      	ldrb	r3, [r2, #0]
 800b37c:	600b      	str	r3, [r1, #0]
 800b37e:	7812      	ldrb	r2, [r2, #0]
 800b380:	1e10      	subs	r0, r2, #0
 800b382:	bf18      	it	ne
 800b384:	2001      	movne	r0, #1
 800b386:	b002      	add	sp, #8
 800b388:	4770      	bx	lr
 800b38a:	4610      	mov	r0, r2
 800b38c:	e7fb      	b.n	800b386 <__ascii_mbtowc+0x16>
 800b38e:	f06f 0001 	mvn.w	r0, #1
 800b392:	e7f8      	b.n	800b386 <__ascii_mbtowc+0x16>

0800b394 <__malloc_lock>:
 800b394:	4801      	ldr	r0, [pc, #4]	@ (800b39c <__malloc_lock+0x8>)
 800b396:	f7ff bb9c 	b.w	800aad2 <__retarget_lock_acquire_recursive>
 800b39a:	bf00      	nop
 800b39c:	2000381c 	.word	0x2000381c

0800b3a0 <__malloc_unlock>:
 800b3a0:	4801      	ldr	r0, [pc, #4]	@ (800b3a8 <__malloc_unlock+0x8>)
 800b3a2:	f7ff bb97 	b.w	800aad4 <__retarget_lock_release_recursive>
 800b3a6:	bf00      	nop
 800b3a8:	2000381c 	.word	0x2000381c

0800b3ac <_Balloc>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	69c6      	ldr	r6, [r0, #28]
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	b976      	cbnz	r6, 800b3d4 <_Balloc+0x28>
 800b3b6:	2010      	movs	r0, #16
 800b3b8:	f001 f8a4 	bl	800c504 <malloc>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	61e0      	str	r0, [r4, #28]
 800b3c0:	b920      	cbnz	r0, 800b3cc <_Balloc+0x20>
 800b3c2:	4b18      	ldr	r3, [pc, #96]	@ (800b424 <_Balloc+0x78>)
 800b3c4:	4818      	ldr	r0, [pc, #96]	@ (800b428 <_Balloc+0x7c>)
 800b3c6:	216b      	movs	r1, #107	@ 0x6b
 800b3c8:	f001 f86a 	bl	800c4a0 <__assert_func>
 800b3cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d0:	6006      	str	r6, [r0, #0]
 800b3d2:	60c6      	str	r6, [r0, #12]
 800b3d4:	69e6      	ldr	r6, [r4, #28]
 800b3d6:	68f3      	ldr	r3, [r6, #12]
 800b3d8:	b183      	cbz	r3, 800b3fc <_Balloc+0x50>
 800b3da:	69e3      	ldr	r3, [r4, #28]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3e2:	b9b8      	cbnz	r0, 800b414 <_Balloc+0x68>
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	fa01 f605 	lsl.w	r6, r1, r5
 800b3ea:	1d72      	adds	r2, r6, #5
 800b3ec:	0092      	lsls	r2, r2, #2
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f001 f874 	bl	800c4dc <_calloc_r>
 800b3f4:	b160      	cbz	r0, 800b410 <_Balloc+0x64>
 800b3f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3fa:	e00e      	b.n	800b41a <_Balloc+0x6e>
 800b3fc:	2221      	movs	r2, #33	@ 0x21
 800b3fe:	2104      	movs	r1, #4
 800b400:	4620      	mov	r0, r4
 800b402:	f001 f86b 	bl	800c4dc <_calloc_r>
 800b406:	69e3      	ldr	r3, [r4, #28]
 800b408:	60f0      	str	r0, [r6, #12]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1e4      	bne.n	800b3da <_Balloc+0x2e>
 800b410:	2000      	movs	r0, #0
 800b412:	bd70      	pop	{r4, r5, r6, pc}
 800b414:	6802      	ldr	r2, [r0, #0]
 800b416:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b41a:	2300      	movs	r3, #0
 800b41c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b420:	e7f7      	b.n	800b412 <_Balloc+0x66>
 800b422:	bf00      	nop
 800b424:	0800d8ea 	.word	0x0800d8ea
 800b428:	0800d901 	.word	0x0800d901

0800b42c <_Bfree>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	69c6      	ldr	r6, [r0, #28]
 800b430:	4605      	mov	r5, r0
 800b432:	460c      	mov	r4, r1
 800b434:	b976      	cbnz	r6, 800b454 <_Bfree+0x28>
 800b436:	2010      	movs	r0, #16
 800b438:	f001 f864 	bl	800c504 <malloc>
 800b43c:	4602      	mov	r2, r0
 800b43e:	61e8      	str	r0, [r5, #28]
 800b440:	b920      	cbnz	r0, 800b44c <_Bfree+0x20>
 800b442:	4b09      	ldr	r3, [pc, #36]	@ (800b468 <_Bfree+0x3c>)
 800b444:	4809      	ldr	r0, [pc, #36]	@ (800b46c <_Bfree+0x40>)
 800b446:	218f      	movs	r1, #143	@ 0x8f
 800b448:	f001 f82a 	bl	800c4a0 <__assert_func>
 800b44c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b450:	6006      	str	r6, [r0, #0]
 800b452:	60c6      	str	r6, [r0, #12]
 800b454:	b13c      	cbz	r4, 800b466 <_Bfree+0x3a>
 800b456:	69eb      	ldr	r3, [r5, #28]
 800b458:	6862      	ldr	r2, [r4, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b460:	6021      	str	r1, [r4, #0]
 800b462:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	0800d8ea 	.word	0x0800d8ea
 800b46c:	0800d901 	.word	0x0800d901

0800b470 <__multadd>:
 800b470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b474:	690d      	ldr	r5, [r1, #16]
 800b476:	4607      	mov	r7, r0
 800b478:	460c      	mov	r4, r1
 800b47a:	461e      	mov	r6, r3
 800b47c:	f101 0c14 	add.w	ip, r1, #20
 800b480:	2000      	movs	r0, #0
 800b482:	f8dc 3000 	ldr.w	r3, [ip]
 800b486:	b299      	uxth	r1, r3
 800b488:	fb02 6101 	mla	r1, r2, r1, r6
 800b48c:	0c1e      	lsrs	r6, r3, #16
 800b48e:	0c0b      	lsrs	r3, r1, #16
 800b490:	fb02 3306 	mla	r3, r2, r6, r3
 800b494:	b289      	uxth	r1, r1
 800b496:	3001      	adds	r0, #1
 800b498:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b49c:	4285      	cmp	r5, r0
 800b49e:	f84c 1b04 	str.w	r1, [ip], #4
 800b4a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4a6:	dcec      	bgt.n	800b482 <__multadd+0x12>
 800b4a8:	b30e      	cbz	r6, 800b4ee <__multadd+0x7e>
 800b4aa:	68a3      	ldr	r3, [r4, #8]
 800b4ac:	42ab      	cmp	r3, r5
 800b4ae:	dc19      	bgt.n	800b4e4 <__multadd+0x74>
 800b4b0:	6861      	ldr	r1, [r4, #4]
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	3101      	adds	r1, #1
 800b4b6:	f7ff ff79 	bl	800b3ac <_Balloc>
 800b4ba:	4680      	mov	r8, r0
 800b4bc:	b928      	cbnz	r0, 800b4ca <__multadd+0x5a>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b4f4 <__multadd+0x84>)
 800b4c2:	480d      	ldr	r0, [pc, #52]	@ (800b4f8 <__multadd+0x88>)
 800b4c4:	21ba      	movs	r1, #186	@ 0xba
 800b4c6:	f000 ffeb 	bl	800c4a0 <__assert_func>
 800b4ca:	6922      	ldr	r2, [r4, #16]
 800b4cc:	3202      	adds	r2, #2
 800b4ce:	f104 010c 	add.w	r1, r4, #12
 800b4d2:	0092      	lsls	r2, r2, #2
 800b4d4:	300c      	adds	r0, #12
 800b4d6:	f7ff fb06 	bl	800aae6 <memcpy>
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4638      	mov	r0, r7
 800b4de:	f7ff ffa5 	bl	800b42c <_Bfree>
 800b4e2:	4644      	mov	r4, r8
 800b4e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4e8:	3501      	adds	r5, #1
 800b4ea:	615e      	str	r6, [r3, #20]
 800b4ec:	6125      	str	r5, [r4, #16]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f4:	0800d879 	.word	0x0800d879
 800b4f8:	0800d901 	.word	0x0800d901

0800b4fc <__s2b>:
 800b4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b500:	460c      	mov	r4, r1
 800b502:	4615      	mov	r5, r2
 800b504:	461f      	mov	r7, r3
 800b506:	2209      	movs	r2, #9
 800b508:	3308      	adds	r3, #8
 800b50a:	4606      	mov	r6, r0
 800b50c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b510:	2100      	movs	r1, #0
 800b512:	2201      	movs	r2, #1
 800b514:	429a      	cmp	r2, r3
 800b516:	db09      	blt.n	800b52c <__s2b+0x30>
 800b518:	4630      	mov	r0, r6
 800b51a:	f7ff ff47 	bl	800b3ac <_Balloc>
 800b51e:	b940      	cbnz	r0, 800b532 <__s2b+0x36>
 800b520:	4602      	mov	r2, r0
 800b522:	4b19      	ldr	r3, [pc, #100]	@ (800b588 <__s2b+0x8c>)
 800b524:	4819      	ldr	r0, [pc, #100]	@ (800b58c <__s2b+0x90>)
 800b526:	21d3      	movs	r1, #211	@ 0xd3
 800b528:	f000 ffba 	bl	800c4a0 <__assert_func>
 800b52c:	0052      	lsls	r2, r2, #1
 800b52e:	3101      	adds	r1, #1
 800b530:	e7f0      	b.n	800b514 <__s2b+0x18>
 800b532:	9b08      	ldr	r3, [sp, #32]
 800b534:	6143      	str	r3, [r0, #20]
 800b536:	2d09      	cmp	r5, #9
 800b538:	f04f 0301 	mov.w	r3, #1
 800b53c:	6103      	str	r3, [r0, #16]
 800b53e:	dd16      	ble.n	800b56e <__s2b+0x72>
 800b540:	f104 0909 	add.w	r9, r4, #9
 800b544:	46c8      	mov	r8, r9
 800b546:	442c      	add	r4, r5
 800b548:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b54c:	4601      	mov	r1, r0
 800b54e:	3b30      	subs	r3, #48	@ 0x30
 800b550:	220a      	movs	r2, #10
 800b552:	4630      	mov	r0, r6
 800b554:	f7ff ff8c 	bl	800b470 <__multadd>
 800b558:	45a0      	cmp	r8, r4
 800b55a:	d1f5      	bne.n	800b548 <__s2b+0x4c>
 800b55c:	f1a5 0408 	sub.w	r4, r5, #8
 800b560:	444c      	add	r4, r9
 800b562:	1b2d      	subs	r5, r5, r4
 800b564:	1963      	adds	r3, r4, r5
 800b566:	42bb      	cmp	r3, r7
 800b568:	db04      	blt.n	800b574 <__s2b+0x78>
 800b56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56e:	340a      	adds	r4, #10
 800b570:	2509      	movs	r5, #9
 800b572:	e7f6      	b.n	800b562 <__s2b+0x66>
 800b574:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b578:	4601      	mov	r1, r0
 800b57a:	3b30      	subs	r3, #48	@ 0x30
 800b57c:	220a      	movs	r2, #10
 800b57e:	4630      	mov	r0, r6
 800b580:	f7ff ff76 	bl	800b470 <__multadd>
 800b584:	e7ee      	b.n	800b564 <__s2b+0x68>
 800b586:	bf00      	nop
 800b588:	0800d879 	.word	0x0800d879
 800b58c:	0800d901 	.word	0x0800d901

0800b590 <__hi0bits>:
 800b590:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b594:	4603      	mov	r3, r0
 800b596:	bf36      	itet	cc
 800b598:	0403      	lslcc	r3, r0, #16
 800b59a:	2000      	movcs	r0, #0
 800b59c:	2010      	movcc	r0, #16
 800b59e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5a2:	bf3c      	itt	cc
 800b5a4:	021b      	lslcc	r3, r3, #8
 800b5a6:	3008      	addcc	r0, #8
 800b5a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5ac:	bf3c      	itt	cc
 800b5ae:	011b      	lslcc	r3, r3, #4
 800b5b0:	3004      	addcc	r0, #4
 800b5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5b6:	bf3c      	itt	cc
 800b5b8:	009b      	lslcc	r3, r3, #2
 800b5ba:	3002      	addcc	r0, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	db05      	blt.n	800b5cc <__hi0bits+0x3c>
 800b5c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5c4:	f100 0001 	add.w	r0, r0, #1
 800b5c8:	bf08      	it	eq
 800b5ca:	2020      	moveq	r0, #32
 800b5cc:	4770      	bx	lr

0800b5ce <__lo0bits>:
 800b5ce:	6803      	ldr	r3, [r0, #0]
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	f013 0007 	ands.w	r0, r3, #7
 800b5d6:	d00b      	beq.n	800b5f0 <__lo0bits+0x22>
 800b5d8:	07d9      	lsls	r1, r3, #31
 800b5da:	d421      	bmi.n	800b620 <__lo0bits+0x52>
 800b5dc:	0798      	lsls	r0, r3, #30
 800b5de:	bf49      	itett	mi
 800b5e0:	085b      	lsrmi	r3, r3, #1
 800b5e2:	089b      	lsrpl	r3, r3, #2
 800b5e4:	2001      	movmi	r0, #1
 800b5e6:	6013      	strmi	r3, [r2, #0]
 800b5e8:	bf5c      	itt	pl
 800b5ea:	6013      	strpl	r3, [r2, #0]
 800b5ec:	2002      	movpl	r0, #2
 800b5ee:	4770      	bx	lr
 800b5f0:	b299      	uxth	r1, r3
 800b5f2:	b909      	cbnz	r1, 800b5f8 <__lo0bits+0x2a>
 800b5f4:	0c1b      	lsrs	r3, r3, #16
 800b5f6:	2010      	movs	r0, #16
 800b5f8:	b2d9      	uxtb	r1, r3
 800b5fa:	b909      	cbnz	r1, 800b600 <__lo0bits+0x32>
 800b5fc:	3008      	adds	r0, #8
 800b5fe:	0a1b      	lsrs	r3, r3, #8
 800b600:	0719      	lsls	r1, r3, #28
 800b602:	bf04      	itt	eq
 800b604:	091b      	lsreq	r3, r3, #4
 800b606:	3004      	addeq	r0, #4
 800b608:	0799      	lsls	r1, r3, #30
 800b60a:	bf04      	itt	eq
 800b60c:	089b      	lsreq	r3, r3, #2
 800b60e:	3002      	addeq	r0, #2
 800b610:	07d9      	lsls	r1, r3, #31
 800b612:	d403      	bmi.n	800b61c <__lo0bits+0x4e>
 800b614:	085b      	lsrs	r3, r3, #1
 800b616:	f100 0001 	add.w	r0, r0, #1
 800b61a:	d003      	beq.n	800b624 <__lo0bits+0x56>
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	4770      	bx	lr
 800b620:	2000      	movs	r0, #0
 800b622:	4770      	bx	lr
 800b624:	2020      	movs	r0, #32
 800b626:	4770      	bx	lr

0800b628 <__i2b>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	460c      	mov	r4, r1
 800b62c:	2101      	movs	r1, #1
 800b62e:	f7ff febd 	bl	800b3ac <_Balloc>
 800b632:	4602      	mov	r2, r0
 800b634:	b928      	cbnz	r0, 800b642 <__i2b+0x1a>
 800b636:	4b05      	ldr	r3, [pc, #20]	@ (800b64c <__i2b+0x24>)
 800b638:	4805      	ldr	r0, [pc, #20]	@ (800b650 <__i2b+0x28>)
 800b63a:	f240 1145 	movw	r1, #325	@ 0x145
 800b63e:	f000 ff2f 	bl	800c4a0 <__assert_func>
 800b642:	2301      	movs	r3, #1
 800b644:	6144      	str	r4, [r0, #20]
 800b646:	6103      	str	r3, [r0, #16]
 800b648:	bd10      	pop	{r4, pc}
 800b64a:	bf00      	nop
 800b64c:	0800d879 	.word	0x0800d879
 800b650:	0800d901 	.word	0x0800d901

0800b654 <__multiply>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	4614      	mov	r4, r2
 800b65a:	690a      	ldr	r2, [r1, #16]
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	429a      	cmp	r2, r3
 800b660:	bfa8      	it	ge
 800b662:	4623      	movge	r3, r4
 800b664:	460f      	mov	r7, r1
 800b666:	bfa4      	itt	ge
 800b668:	460c      	movge	r4, r1
 800b66a:	461f      	movge	r7, r3
 800b66c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b670:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b674:	68a3      	ldr	r3, [r4, #8]
 800b676:	6861      	ldr	r1, [r4, #4]
 800b678:	eb0a 0609 	add.w	r6, sl, r9
 800b67c:	42b3      	cmp	r3, r6
 800b67e:	b085      	sub	sp, #20
 800b680:	bfb8      	it	lt
 800b682:	3101      	addlt	r1, #1
 800b684:	f7ff fe92 	bl	800b3ac <_Balloc>
 800b688:	b930      	cbnz	r0, 800b698 <__multiply+0x44>
 800b68a:	4602      	mov	r2, r0
 800b68c:	4b44      	ldr	r3, [pc, #272]	@ (800b7a0 <__multiply+0x14c>)
 800b68e:	4845      	ldr	r0, [pc, #276]	@ (800b7a4 <__multiply+0x150>)
 800b690:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b694:	f000 ff04 	bl	800c4a0 <__assert_func>
 800b698:	f100 0514 	add.w	r5, r0, #20
 800b69c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6a0:	462b      	mov	r3, r5
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	4543      	cmp	r3, r8
 800b6a6:	d321      	bcc.n	800b6ec <__multiply+0x98>
 800b6a8:	f107 0114 	add.w	r1, r7, #20
 800b6ac:	f104 0214 	add.w	r2, r4, #20
 800b6b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b6b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b6b8:	9302      	str	r3, [sp, #8]
 800b6ba:	1b13      	subs	r3, r2, r4
 800b6bc:	3b15      	subs	r3, #21
 800b6be:	f023 0303 	bic.w	r3, r3, #3
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	f104 0715 	add.w	r7, r4, #21
 800b6c8:	42ba      	cmp	r2, r7
 800b6ca:	bf38      	it	cc
 800b6cc:	2304      	movcc	r3, #4
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	9b02      	ldr	r3, [sp, #8]
 800b6d2:	9103      	str	r1, [sp, #12]
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	d80c      	bhi.n	800b6f2 <__multiply+0x9e>
 800b6d8:	2e00      	cmp	r6, #0
 800b6da:	dd03      	ble.n	800b6e4 <__multiply+0x90>
 800b6dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d05b      	beq.n	800b79c <__multiply+0x148>
 800b6e4:	6106      	str	r6, [r0, #16]
 800b6e6:	b005      	add	sp, #20
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	f843 2b04 	str.w	r2, [r3], #4
 800b6f0:	e7d8      	b.n	800b6a4 <__multiply+0x50>
 800b6f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b6f6:	f1ba 0f00 	cmp.w	sl, #0
 800b6fa:	d024      	beq.n	800b746 <__multiply+0xf2>
 800b6fc:	f104 0e14 	add.w	lr, r4, #20
 800b700:	46a9      	mov	r9, r5
 800b702:	f04f 0c00 	mov.w	ip, #0
 800b706:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b70a:	f8d9 3000 	ldr.w	r3, [r9]
 800b70e:	fa1f fb87 	uxth.w	fp, r7
 800b712:	b29b      	uxth	r3, r3
 800b714:	fb0a 330b 	mla	r3, sl, fp, r3
 800b718:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b71c:	f8d9 7000 	ldr.w	r7, [r9]
 800b720:	4463      	add	r3, ip
 800b722:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b726:	fb0a c70b 	mla	r7, sl, fp, ip
 800b72a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b72e:	b29b      	uxth	r3, r3
 800b730:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b734:	4572      	cmp	r2, lr
 800b736:	f849 3b04 	str.w	r3, [r9], #4
 800b73a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b73e:	d8e2      	bhi.n	800b706 <__multiply+0xb2>
 800b740:	9b01      	ldr	r3, [sp, #4]
 800b742:	f845 c003 	str.w	ip, [r5, r3]
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b74c:	3104      	adds	r1, #4
 800b74e:	f1b9 0f00 	cmp.w	r9, #0
 800b752:	d021      	beq.n	800b798 <__multiply+0x144>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	f104 0c14 	add.w	ip, r4, #20
 800b75a:	46ae      	mov	lr, r5
 800b75c:	f04f 0a00 	mov.w	sl, #0
 800b760:	f8bc b000 	ldrh.w	fp, [ip]
 800b764:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b768:	fb09 770b 	mla	r7, r9, fp, r7
 800b76c:	4457      	add	r7, sl
 800b76e:	b29b      	uxth	r3, r3
 800b770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b774:	f84e 3b04 	str.w	r3, [lr], #4
 800b778:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b77c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b780:	f8be 3000 	ldrh.w	r3, [lr]
 800b784:	fb09 330a 	mla	r3, r9, sl, r3
 800b788:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b78c:	4562      	cmp	r2, ip
 800b78e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b792:	d8e5      	bhi.n	800b760 <__multiply+0x10c>
 800b794:	9f01      	ldr	r7, [sp, #4]
 800b796:	51eb      	str	r3, [r5, r7]
 800b798:	3504      	adds	r5, #4
 800b79a:	e799      	b.n	800b6d0 <__multiply+0x7c>
 800b79c:	3e01      	subs	r6, #1
 800b79e:	e79b      	b.n	800b6d8 <__multiply+0x84>
 800b7a0:	0800d879 	.word	0x0800d879
 800b7a4:	0800d901 	.word	0x0800d901

0800b7a8 <__pow5mult>:
 800b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ac:	4615      	mov	r5, r2
 800b7ae:	f012 0203 	ands.w	r2, r2, #3
 800b7b2:	4607      	mov	r7, r0
 800b7b4:	460e      	mov	r6, r1
 800b7b6:	d007      	beq.n	800b7c8 <__pow5mult+0x20>
 800b7b8:	4c25      	ldr	r4, [pc, #148]	@ (800b850 <__pow5mult+0xa8>)
 800b7ba:	3a01      	subs	r2, #1
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7c2:	f7ff fe55 	bl	800b470 <__multadd>
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	10ad      	asrs	r5, r5, #2
 800b7ca:	d03d      	beq.n	800b848 <__pow5mult+0xa0>
 800b7cc:	69fc      	ldr	r4, [r7, #28]
 800b7ce:	b97c      	cbnz	r4, 800b7f0 <__pow5mult+0x48>
 800b7d0:	2010      	movs	r0, #16
 800b7d2:	f000 fe97 	bl	800c504 <malloc>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	61f8      	str	r0, [r7, #28]
 800b7da:	b928      	cbnz	r0, 800b7e8 <__pow5mult+0x40>
 800b7dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b854 <__pow5mult+0xac>)
 800b7de:	481e      	ldr	r0, [pc, #120]	@ (800b858 <__pow5mult+0xb0>)
 800b7e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7e4:	f000 fe5c 	bl	800c4a0 <__assert_func>
 800b7e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7ec:	6004      	str	r4, [r0, #0]
 800b7ee:	60c4      	str	r4, [r0, #12]
 800b7f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7f8:	b94c      	cbnz	r4, 800b80e <__pow5mult+0x66>
 800b7fa:	f240 2171 	movw	r1, #625	@ 0x271
 800b7fe:	4638      	mov	r0, r7
 800b800:	f7ff ff12 	bl	800b628 <__i2b>
 800b804:	2300      	movs	r3, #0
 800b806:	f8c8 0008 	str.w	r0, [r8, #8]
 800b80a:	4604      	mov	r4, r0
 800b80c:	6003      	str	r3, [r0, #0]
 800b80e:	f04f 0900 	mov.w	r9, #0
 800b812:	07eb      	lsls	r3, r5, #31
 800b814:	d50a      	bpl.n	800b82c <__pow5mult+0x84>
 800b816:	4631      	mov	r1, r6
 800b818:	4622      	mov	r2, r4
 800b81a:	4638      	mov	r0, r7
 800b81c:	f7ff ff1a 	bl	800b654 <__multiply>
 800b820:	4631      	mov	r1, r6
 800b822:	4680      	mov	r8, r0
 800b824:	4638      	mov	r0, r7
 800b826:	f7ff fe01 	bl	800b42c <_Bfree>
 800b82a:	4646      	mov	r6, r8
 800b82c:	106d      	asrs	r5, r5, #1
 800b82e:	d00b      	beq.n	800b848 <__pow5mult+0xa0>
 800b830:	6820      	ldr	r0, [r4, #0]
 800b832:	b938      	cbnz	r0, 800b844 <__pow5mult+0x9c>
 800b834:	4622      	mov	r2, r4
 800b836:	4621      	mov	r1, r4
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ff0b 	bl	800b654 <__multiply>
 800b83e:	6020      	str	r0, [r4, #0]
 800b840:	f8c0 9000 	str.w	r9, [r0]
 800b844:	4604      	mov	r4, r0
 800b846:	e7e4      	b.n	800b812 <__pow5mult+0x6a>
 800b848:	4630      	mov	r0, r6
 800b84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b84e:	bf00      	nop
 800b850:	0800d95c 	.word	0x0800d95c
 800b854:	0800d8ea 	.word	0x0800d8ea
 800b858:	0800d901 	.word	0x0800d901

0800b85c <__lshift>:
 800b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	460c      	mov	r4, r1
 800b862:	6849      	ldr	r1, [r1, #4]
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	4607      	mov	r7, r0
 800b86e:	4691      	mov	r9, r2
 800b870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b874:	f108 0601 	add.w	r6, r8, #1
 800b878:	42b3      	cmp	r3, r6
 800b87a:	db0b      	blt.n	800b894 <__lshift+0x38>
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff fd95 	bl	800b3ac <_Balloc>
 800b882:	4605      	mov	r5, r0
 800b884:	b948      	cbnz	r0, 800b89a <__lshift+0x3e>
 800b886:	4602      	mov	r2, r0
 800b888:	4b28      	ldr	r3, [pc, #160]	@ (800b92c <__lshift+0xd0>)
 800b88a:	4829      	ldr	r0, [pc, #164]	@ (800b930 <__lshift+0xd4>)
 800b88c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b890:	f000 fe06 	bl	800c4a0 <__assert_func>
 800b894:	3101      	adds	r1, #1
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	e7ee      	b.n	800b878 <__lshift+0x1c>
 800b89a:	2300      	movs	r3, #0
 800b89c:	f100 0114 	add.w	r1, r0, #20
 800b8a0:	f100 0210 	add.w	r2, r0, #16
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	4553      	cmp	r3, sl
 800b8a8:	db33      	blt.n	800b912 <__lshift+0xb6>
 800b8aa:	6920      	ldr	r0, [r4, #16]
 800b8ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b0:	f104 0314 	add.w	r3, r4, #20
 800b8b4:	f019 091f 	ands.w	r9, r9, #31
 800b8b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c0:	d02b      	beq.n	800b91a <__lshift+0xbe>
 800b8c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b8c6:	468a      	mov	sl, r1
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	6818      	ldr	r0, [r3, #0]
 800b8cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b8d0:	4310      	orrs	r0, r2
 800b8d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8da:	459c      	cmp	ip, r3
 800b8dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8e0:	d8f3      	bhi.n	800b8ca <__lshift+0x6e>
 800b8e2:	ebac 0304 	sub.w	r3, ip, r4
 800b8e6:	3b15      	subs	r3, #21
 800b8e8:	f023 0303 	bic.w	r3, r3, #3
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	f104 0015 	add.w	r0, r4, #21
 800b8f2:	4584      	cmp	ip, r0
 800b8f4:	bf38      	it	cc
 800b8f6:	2304      	movcc	r3, #4
 800b8f8:	50ca      	str	r2, [r1, r3]
 800b8fa:	b10a      	cbz	r2, 800b900 <__lshift+0xa4>
 800b8fc:	f108 0602 	add.w	r6, r8, #2
 800b900:	3e01      	subs	r6, #1
 800b902:	4638      	mov	r0, r7
 800b904:	612e      	str	r6, [r5, #16]
 800b906:	4621      	mov	r1, r4
 800b908:	f7ff fd90 	bl	800b42c <_Bfree>
 800b90c:	4628      	mov	r0, r5
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	f842 0f04 	str.w	r0, [r2, #4]!
 800b916:	3301      	adds	r3, #1
 800b918:	e7c5      	b.n	800b8a6 <__lshift+0x4a>
 800b91a:	3904      	subs	r1, #4
 800b91c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b920:	f841 2f04 	str.w	r2, [r1, #4]!
 800b924:	459c      	cmp	ip, r3
 800b926:	d8f9      	bhi.n	800b91c <__lshift+0xc0>
 800b928:	e7ea      	b.n	800b900 <__lshift+0xa4>
 800b92a:	bf00      	nop
 800b92c:	0800d879 	.word	0x0800d879
 800b930:	0800d901 	.word	0x0800d901

0800b934 <__mcmp>:
 800b934:	690a      	ldr	r2, [r1, #16]
 800b936:	4603      	mov	r3, r0
 800b938:	6900      	ldr	r0, [r0, #16]
 800b93a:	1a80      	subs	r0, r0, r2
 800b93c:	b530      	push	{r4, r5, lr}
 800b93e:	d10e      	bne.n	800b95e <__mcmp+0x2a>
 800b940:	3314      	adds	r3, #20
 800b942:	3114      	adds	r1, #20
 800b944:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b948:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b94c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b950:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b954:	4295      	cmp	r5, r2
 800b956:	d003      	beq.n	800b960 <__mcmp+0x2c>
 800b958:	d205      	bcs.n	800b966 <__mcmp+0x32>
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	bd30      	pop	{r4, r5, pc}
 800b960:	42a3      	cmp	r3, r4
 800b962:	d3f3      	bcc.n	800b94c <__mcmp+0x18>
 800b964:	e7fb      	b.n	800b95e <__mcmp+0x2a>
 800b966:	2001      	movs	r0, #1
 800b968:	e7f9      	b.n	800b95e <__mcmp+0x2a>
	...

0800b96c <__mdiff>:
 800b96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b970:	4689      	mov	r9, r1
 800b972:	4606      	mov	r6, r0
 800b974:	4611      	mov	r1, r2
 800b976:	4648      	mov	r0, r9
 800b978:	4614      	mov	r4, r2
 800b97a:	f7ff ffdb 	bl	800b934 <__mcmp>
 800b97e:	1e05      	subs	r5, r0, #0
 800b980:	d112      	bne.n	800b9a8 <__mdiff+0x3c>
 800b982:	4629      	mov	r1, r5
 800b984:	4630      	mov	r0, r6
 800b986:	f7ff fd11 	bl	800b3ac <_Balloc>
 800b98a:	4602      	mov	r2, r0
 800b98c:	b928      	cbnz	r0, 800b99a <__mdiff+0x2e>
 800b98e:	4b3f      	ldr	r3, [pc, #252]	@ (800ba8c <__mdiff+0x120>)
 800b990:	f240 2137 	movw	r1, #567	@ 0x237
 800b994:	483e      	ldr	r0, [pc, #248]	@ (800ba90 <__mdiff+0x124>)
 800b996:	f000 fd83 	bl	800c4a0 <__assert_func>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	b003      	add	sp, #12
 800b9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a8:	bfbc      	itt	lt
 800b9aa:	464b      	movlt	r3, r9
 800b9ac:	46a1      	movlt	r9, r4
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9b4:	bfba      	itte	lt
 800b9b6:	461c      	movlt	r4, r3
 800b9b8:	2501      	movlt	r5, #1
 800b9ba:	2500      	movge	r5, #0
 800b9bc:	f7ff fcf6 	bl	800b3ac <_Balloc>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	b918      	cbnz	r0, 800b9cc <__mdiff+0x60>
 800b9c4:	4b31      	ldr	r3, [pc, #196]	@ (800ba8c <__mdiff+0x120>)
 800b9c6:	f240 2145 	movw	r1, #581	@ 0x245
 800b9ca:	e7e3      	b.n	800b994 <__mdiff+0x28>
 800b9cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9d0:	6926      	ldr	r6, [r4, #16]
 800b9d2:	60c5      	str	r5, [r0, #12]
 800b9d4:	f109 0310 	add.w	r3, r9, #16
 800b9d8:	f109 0514 	add.w	r5, r9, #20
 800b9dc:	f104 0e14 	add.w	lr, r4, #20
 800b9e0:	f100 0b14 	add.w	fp, r0, #20
 800b9e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	46d9      	mov	r9, fp
 800b9f0:	f04f 0c00 	mov.w	ip, #0
 800b9f4:	9b01      	ldr	r3, [sp, #4]
 800b9f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	fa1f f38a 	uxth.w	r3, sl
 800ba04:	4619      	mov	r1, r3
 800ba06:	b283      	uxth	r3, r0
 800ba08:	1acb      	subs	r3, r1, r3
 800ba0a:	0c00      	lsrs	r0, r0, #16
 800ba0c:	4463      	add	r3, ip
 800ba0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba1c:	4576      	cmp	r6, lr
 800ba1e:	f849 3b04 	str.w	r3, [r9], #4
 800ba22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba26:	d8e5      	bhi.n	800b9f4 <__mdiff+0x88>
 800ba28:	1b33      	subs	r3, r6, r4
 800ba2a:	3b15      	subs	r3, #21
 800ba2c:	f023 0303 	bic.w	r3, r3, #3
 800ba30:	3415      	adds	r4, #21
 800ba32:	3304      	adds	r3, #4
 800ba34:	42a6      	cmp	r6, r4
 800ba36:	bf38      	it	cc
 800ba38:	2304      	movcc	r3, #4
 800ba3a:	441d      	add	r5, r3
 800ba3c:	445b      	add	r3, fp
 800ba3e:	461e      	mov	r6, r3
 800ba40:	462c      	mov	r4, r5
 800ba42:	4544      	cmp	r4, r8
 800ba44:	d30e      	bcc.n	800ba64 <__mdiff+0xf8>
 800ba46:	f108 0103 	add.w	r1, r8, #3
 800ba4a:	1b49      	subs	r1, r1, r5
 800ba4c:	f021 0103 	bic.w	r1, r1, #3
 800ba50:	3d03      	subs	r5, #3
 800ba52:	45a8      	cmp	r8, r5
 800ba54:	bf38      	it	cc
 800ba56:	2100      	movcc	r1, #0
 800ba58:	440b      	add	r3, r1
 800ba5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba5e:	b191      	cbz	r1, 800ba86 <__mdiff+0x11a>
 800ba60:	6117      	str	r7, [r2, #16]
 800ba62:	e79d      	b.n	800b9a0 <__mdiff+0x34>
 800ba64:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba68:	46e6      	mov	lr, ip
 800ba6a:	0c08      	lsrs	r0, r1, #16
 800ba6c:	fa1c fc81 	uxtah	ip, ip, r1
 800ba70:	4471      	add	r1, lr
 800ba72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba76:	b289      	uxth	r1, r1
 800ba78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba7c:	f846 1b04 	str.w	r1, [r6], #4
 800ba80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba84:	e7dd      	b.n	800ba42 <__mdiff+0xd6>
 800ba86:	3f01      	subs	r7, #1
 800ba88:	e7e7      	b.n	800ba5a <__mdiff+0xee>
 800ba8a:	bf00      	nop
 800ba8c:	0800d879 	.word	0x0800d879
 800ba90:	0800d901 	.word	0x0800d901

0800ba94 <__ulp>:
 800ba94:	b082      	sub	sp, #8
 800ba96:	ed8d 0b00 	vstr	d0, [sp]
 800ba9a:	9a01      	ldr	r2, [sp, #4]
 800ba9c:	4b0f      	ldr	r3, [pc, #60]	@ (800badc <__ulp+0x48>)
 800ba9e:	4013      	ands	r3, r2
 800baa0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	dc08      	bgt.n	800baba <__ulp+0x26>
 800baa8:	425b      	negs	r3, r3
 800baaa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800baae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bab2:	da04      	bge.n	800babe <__ulp+0x2a>
 800bab4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bab8:	4113      	asrs	r3, r2
 800baba:	2200      	movs	r2, #0
 800babc:	e008      	b.n	800bad0 <__ulp+0x3c>
 800babe:	f1a2 0314 	sub.w	r3, r2, #20
 800bac2:	2b1e      	cmp	r3, #30
 800bac4:	bfda      	itte	le
 800bac6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800baca:	40da      	lsrle	r2, r3
 800bacc:	2201      	movgt	r2, #1
 800bace:	2300      	movs	r3, #0
 800bad0:	4619      	mov	r1, r3
 800bad2:	4610      	mov	r0, r2
 800bad4:	ec41 0b10 	vmov	d0, r0, r1
 800bad8:	b002      	add	sp, #8
 800bada:	4770      	bx	lr
 800badc:	7ff00000 	.word	0x7ff00000

0800bae0 <__b2d>:
 800bae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae4:	6906      	ldr	r6, [r0, #16]
 800bae6:	f100 0814 	add.w	r8, r0, #20
 800baea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800baee:	1f37      	subs	r7, r6, #4
 800baf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7ff fd4b 	bl	800b590 <__hi0bits>
 800bafa:	f1c0 0320 	rsb	r3, r0, #32
 800bafe:	280a      	cmp	r0, #10
 800bb00:	600b      	str	r3, [r1, #0]
 800bb02:	491b      	ldr	r1, [pc, #108]	@ (800bb70 <__b2d+0x90>)
 800bb04:	dc15      	bgt.n	800bb32 <__b2d+0x52>
 800bb06:	f1c0 0c0b 	rsb	ip, r0, #11
 800bb0a:	fa22 f30c 	lsr.w	r3, r2, ip
 800bb0e:	45b8      	cmp	r8, r7
 800bb10:	ea43 0501 	orr.w	r5, r3, r1
 800bb14:	bf34      	ite	cc
 800bb16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb1a:	2300      	movcs	r3, #0
 800bb1c:	3015      	adds	r0, #21
 800bb1e:	fa02 f000 	lsl.w	r0, r2, r0
 800bb22:	fa23 f30c 	lsr.w	r3, r3, ip
 800bb26:	4303      	orrs	r3, r0
 800bb28:	461c      	mov	r4, r3
 800bb2a:	ec45 4b10 	vmov	d0, r4, r5
 800bb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb32:	45b8      	cmp	r8, r7
 800bb34:	bf3a      	itte	cc
 800bb36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb3a:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb3e:	2300      	movcs	r3, #0
 800bb40:	380b      	subs	r0, #11
 800bb42:	d012      	beq.n	800bb6a <__b2d+0x8a>
 800bb44:	f1c0 0120 	rsb	r1, r0, #32
 800bb48:	fa23 f401 	lsr.w	r4, r3, r1
 800bb4c:	4082      	lsls	r2, r0
 800bb4e:	4322      	orrs	r2, r4
 800bb50:	4547      	cmp	r7, r8
 800bb52:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bb56:	bf8c      	ite	hi
 800bb58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb5c:	2200      	movls	r2, #0
 800bb5e:	4083      	lsls	r3, r0
 800bb60:	40ca      	lsrs	r2, r1
 800bb62:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb66:	4313      	orrs	r3, r2
 800bb68:	e7de      	b.n	800bb28 <__b2d+0x48>
 800bb6a:	ea42 0501 	orr.w	r5, r2, r1
 800bb6e:	e7db      	b.n	800bb28 <__b2d+0x48>
 800bb70:	3ff00000 	.word	0x3ff00000

0800bb74 <__d2b>:
 800bb74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb78:	460f      	mov	r7, r1
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	ec59 8b10 	vmov	r8, r9, d0
 800bb80:	4616      	mov	r6, r2
 800bb82:	f7ff fc13 	bl	800b3ac <_Balloc>
 800bb86:	4604      	mov	r4, r0
 800bb88:	b930      	cbnz	r0, 800bb98 <__d2b+0x24>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	4b23      	ldr	r3, [pc, #140]	@ (800bc1c <__d2b+0xa8>)
 800bb8e:	4824      	ldr	r0, [pc, #144]	@ (800bc20 <__d2b+0xac>)
 800bb90:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb94:	f000 fc84 	bl	800c4a0 <__assert_func>
 800bb98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bba0:	b10d      	cbz	r5, 800bba6 <__d2b+0x32>
 800bba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bba6:	9301      	str	r3, [sp, #4]
 800bba8:	f1b8 0300 	subs.w	r3, r8, #0
 800bbac:	d023      	beq.n	800bbf6 <__d2b+0x82>
 800bbae:	4668      	mov	r0, sp
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	f7ff fd0c 	bl	800b5ce <__lo0bits>
 800bbb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbba:	b1d0      	cbz	r0, 800bbf2 <__d2b+0x7e>
 800bbbc:	f1c0 0320 	rsb	r3, r0, #32
 800bbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	40c2      	lsrs	r2, r0
 800bbc8:	6163      	str	r3, [r4, #20]
 800bbca:	9201      	str	r2, [sp, #4]
 800bbcc:	9b01      	ldr	r3, [sp, #4]
 800bbce:	61a3      	str	r3, [r4, #24]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	bf0c      	ite	eq
 800bbd4:	2201      	moveq	r2, #1
 800bbd6:	2202      	movne	r2, #2
 800bbd8:	6122      	str	r2, [r4, #16]
 800bbda:	b1a5      	cbz	r5, 800bc06 <__d2b+0x92>
 800bbdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bbe0:	4405      	add	r5, r0
 800bbe2:	603d      	str	r5, [r7, #0]
 800bbe4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbe8:	6030      	str	r0, [r6, #0]
 800bbea:	4620      	mov	r0, r4
 800bbec:	b003      	add	sp, #12
 800bbee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	6161      	str	r1, [r4, #20]
 800bbf4:	e7ea      	b.n	800bbcc <__d2b+0x58>
 800bbf6:	a801      	add	r0, sp, #4
 800bbf8:	f7ff fce9 	bl	800b5ce <__lo0bits>
 800bbfc:	9b01      	ldr	r3, [sp, #4]
 800bbfe:	6163      	str	r3, [r4, #20]
 800bc00:	3020      	adds	r0, #32
 800bc02:	2201      	movs	r2, #1
 800bc04:	e7e8      	b.n	800bbd8 <__d2b+0x64>
 800bc06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc0e:	6038      	str	r0, [r7, #0]
 800bc10:	6918      	ldr	r0, [r3, #16]
 800bc12:	f7ff fcbd 	bl	800b590 <__hi0bits>
 800bc16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc1a:	e7e5      	b.n	800bbe8 <__d2b+0x74>
 800bc1c:	0800d879 	.word	0x0800d879
 800bc20:	0800d901 	.word	0x0800d901

0800bc24 <__ratio>:
 800bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc28:	b085      	sub	sp, #20
 800bc2a:	e9cd 1000 	strd	r1, r0, [sp]
 800bc2e:	a902      	add	r1, sp, #8
 800bc30:	f7ff ff56 	bl	800bae0 <__b2d>
 800bc34:	9800      	ldr	r0, [sp, #0]
 800bc36:	a903      	add	r1, sp, #12
 800bc38:	ec55 4b10 	vmov	r4, r5, d0
 800bc3c:	f7ff ff50 	bl	800bae0 <__b2d>
 800bc40:	9b01      	ldr	r3, [sp, #4]
 800bc42:	6919      	ldr	r1, [r3, #16]
 800bc44:	9b00      	ldr	r3, [sp, #0]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	1ac9      	subs	r1, r1, r3
 800bc4a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bc4e:	1a9b      	subs	r3, r3, r2
 800bc50:	ec5b ab10 	vmov	sl, fp, d0
 800bc54:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	bfce      	itee	gt
 800bc5c:	462a      	movgt	r2, r5
 800bc5e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc62:	465a      	movle	r2, fp
 800bc64:	462f      	mov	r7, r5
 800bc66:	46d9      	mov	r9, fp
 800bc68:	bfcc      	ite	gt
 800bc6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc6e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bc72:	464b      	mov	r3, r9
 800bc74:	4652      	mov	r2, sl
 800bc76:	4620      	mov	r0, r4
 800bc78:	4639      	mov	r1, r7
 800bc7a:	f7f4 fe17 	bl	80008ac <__aeabi_ddiv>
 800bc7e:	ec41 0b10 	vmov	d0, r0, r1
 800bc82:	b005      	add	sp, #20
 800bc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc88 <__copybits>:
 800bc88:	3901      	subs	r1, #1
 800bc8a:	b570      	push	{r4, r5, r6, lr}
 800bc8c:	1149      	asrs	r1, r1, #5
 800bc8e:	6914      	ldr	r4, [r2, #16]
 800bc90:	3101      	adds	r1, #1
 800bc92:	f102 0314 	add.w	r3, r2, #20
 800bc96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc9e:	1f05      	subs	r5, r0, #4
 800bca0:	42a3      	cmp	r3, r4
 800bca2:	d30c      	bcc.n	800bcbe <__copybits+0x36>
 800bca4:	1aa3      	subs	r3, r4, r2
 800bca6:	3b11      	subs	r3, #17
 800bca8:	f023 0303 	bic.w	r3, r3, #3
 800bcac:	3211      	adds	r2, #17
 800bcae:	42a2      	cmp	r2, r4
 800bcb0:	bf88      	it	hi
 800bcb2:	2300      	movhi	r3, #0
 800bcb4:	4418      	add	r0, r3
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	4288      	cmp	r0, r1
 800bcba:	d305      	bcc.n	800bcc8 <__copybits+0x40>
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	f853 6b04 	ldr.w	r6, [r3], #4
 800bcc2:	f845 6f04 	str.w	r6, [r5, #4]!
 800bcc6:	e7eb      	b.n	800bca0 <__copybits+0x18>
 800bcc8:	f840 3b04 	str.w	r3, [r0], #4
 800bccc:	e7f4      	b.n	800bcb8 <__copybits+0x30>

0800bcce <__any_on>:
 800bcce:	f100 0214 	add.w	r2, r0, #20
 800bcd2:	6900      	ldr	r0, [r0, #16]
 800bcd4:	114b      	asrs	r3, r1, #5
 800bcd6:	4298      	cmp	r0, r3
 800bcd8:	b510      	push	{r4, lr}
 800bcda:	db11      	blt.n	800bd00 <__any_on+0x32>
 800bcdc:	dd0a      	ble.n	800bcf4 <__any_on+0x26>
 800bcde:	f011 011f 	ands.w	r1, r1, #31
 800bce2:	d007      	beq.n	800bcf4 <__any_on+0x26>
 800bce4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bce8:	fa24 f001 	lsr.w	r0, r4, r1
 800bcec:	fa00 f101 	lsl.w	r1, r0, r1
 800bcf0:	428c      	cmp	r4, r1
 800bcf2:	d10b      	bne.n	800bd0c <__any_on+0x3e>
 800bcf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d803      	bhi.n	800bd04 <__any_on+0x36>
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	bd10      	pop	{r4, pc}
 800bd00:	4603      	mov	r3, r0
 800bd02:	e7f7      	b.n	800bcf4 <__any_on+0x26>
 800bd04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd08:	2900      	cmp	r1, #0
 800bd0a:	d0f5      	beq.n	800bcf8 <__any_on+0x2a>
 800bd0c:	2001      	movs	r0, #1
 800bd0e:	e7f6      	b.n	800bcfe <__any_on+0x30>

0800bd10 <__ascii_wctomb>:
 800bd10:	4603      	mov	r3, r0
 800bd12:	4608      	mov	r0, r1
 800bd14:	b141      	cbz	r1, 800bd28 <__ascii_wctomb+0x18>
 800bd16:	2aff      	cmp	r2, #255	@ 0xff
 800bd18:	d904      	bls.n	800bd24 <__ascii_wctomb+0x14>
 800bd1a:	228a      	movs	r2, #138	@ 0x8a
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd22:	4770      	bx	lr
 800bd24:	700a      	strb	r2, [r1, #0]
 800bd26:	2001      	movs	r0, #1
 800bd28:	4770      	bx	lr

0800bd2a <__ssputs_r>:
 800bd2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd2e:	688e      	ldr	r6, [r1, #8]
 800bd30:	461f      	mov	r7, r3
 800bd32:	42be      	cmp	r6, r7
 800bd34:	680b      	ldr	r3, [r1, #0]
 800bd36:	4682      	mov	sl, r0
 800bd38:	460c      	mov	r4, r1
 800bd3a:	4690      	mov	r8, r2
 800bd3c:	d82d      	bhi.n	800bd9a <__ssputs_r+0x70>
 800bd3e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd42:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd46:	d026      	beq.n	800bd96 <__ssputs_r+0x6c>
 800bd48:	6965      	ldr	r5, [r4, #20]
 800bd4a:	6909      	ldr	r1, [r1, #16]
 800bd4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd50:	eba3 0901 	sub.w	r9, r3, r1
 800bd54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd58:	1c7b      	adds	r3, r7, #1
 800bd5a:	444b      	add	r3, r9
 800bd5c:	106d      	asrs	r5, r5, #1
 800bd5e:	429d      	cmp	r5, r3
 800bd60:	bf38      	it	cc
 800bd62:	461d      	movcc	r5, r3
 800bd64:	0553      	lsls	r3, r2, #21
 800bd66:	d527      	bpl.n	800bdb8 <__ssputs_r+0x8e>
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f7ff fa81 	bl	800b270 <_malloc_r>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	b360      	cbz	r0, 800bdcc <__ssputs_r+0xa2>
 800bd72:	6921      	ldr	r1, [r4, #16]
 800bd74:	464a      	mov	r2, r9
 800bd76:	f7fe feb6 	bl	800aae6 <memcpy>
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bd80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	6126      	str	r6, [r4, #16]
 800bd88:	6165      	str	r5, [r4, #20]
 800bd8a:	444e      	add	r6, r9
 800bd8c:	eba5 0509 	sub.w	r5, r5, r9
 800bd90:	6026      	str	r6, [r4, #0]
 800bd92:	60a5      	str	r5, [r4, #8]
 800bd94:	463e      	mov	r6, r7
 800bd96:	42be      	cmp	r6, r7
 800bd98:	d900      	bls.n	800bd9c <__ssputs_r+0x72>
 800bd9a:	463e      	mov	r6, r7
 800bd9c:	6820      	ldr	r0, [r4, #0]
 800bd9e:	4632      	mov	r2, r6
 800bda0:	4641      	mov	r1, r8
 800bda2:	f000 fb53 	bl	800c44c <memmove>
 800bda6:	68a3      	ldr	r3, [r4, #8]
 800bda8:	1b9b      	subs	r3, r3, r6
 800bdaa:	60a3      	str	r3, [r4, #8]
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	4433      	add	r3, r6
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb8:	462a      	mov	r2, r5
 800bdba:	f000 fbab 	bl	800c514 <_realloc_r>
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d1e0      	bne.n	800bd86 <__ssputs_r+0x5c>
 800bdc4:	6921      	ldr	r1, [r4, #16]
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	f7fe feac 	bl	800ab24 <_free_r>
 800bdcc:	230c      	movs	r3, #12
 800bdce:	f8ca 3000 	str.w	r3, [sl]
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295
 800bdde:	e7e9      	b.n	800bdb4 <__ssputs_r+0x8a>

0800bde0 <_svfiprintf_r>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	4698      	mov	r8, r3
 800bde6:	898b      	ldrh	r3, [r1, #12]
 800bde8:	061b      	lsls	r3, r3, #24
 800bdea:	b09d      	sub	sp, #116	@ 0x74
 800bdec:	4607      	mov	r7, r0
 800bdee:	460d      	mov	r5, r1
 800bdf0:	4614      	mov	r4, r2
 800bdf2:	d510      	bpl.n	800be16 <_svfiprintf_r+0x36>
 800bdf4:	690b      	ldr	r3, [r1, #16]
 800bdf6:	b973      	cbnz	r3, 800be16 <_svfiprintf_r+0x36>
 800bdf8:	2140      	movs	r1, #64	@ 0x40
 800bdfa:	f7ff fa39 	bl	800b270 <_malloc_r>
 800bdfe:	6028      	str	r0, [r5, #0]
 800be00:	6128      	str	r0, [r5, #16]
 800be02:	b930      	cbnz	r0, 800be12 <_svfiprintf_r+0x32>
 800be04:	230c      	movs	r3, #12
 800be06:	603b      	str	r3, [r7, #0]
 800be08:	f04f 30ff 	mov.w	r0, #4294967295
 800be0c:	b01d      	add	sp, #116	@ 0x74
 800be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be12:	2340      	movs	r3, #64	@ 0x40
 800be14:	616b      	str	r3, [r5, #20]
 800be16:	2300      	movs	r3, #0
 800be18:	9309      	str	r3, [sp, #36]	@ 0x24
 800be1a:	2320      	movs	r3, #32
 800be1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be20:	f8cd 800c 	str.w	r8, [sp, #12]
 800be24:	2330      	movs	r3, #48	@ 0x30
 800be26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bfc4 <_svfiprintf_r+0x1e4>
 800be2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be2e:	f04f 0901 	mov.w	r9, #1
 800be32:	4623      	mov	r3, r4
 800be34:	469a      	mov	sl, r3
 800be36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be3a:	b10a      	cbz	r2, 800be40 <_svfiprintf_r+0x60>
 800be3c:	2a25      	cmp	r2, #37	@ 0x25
 800be3e:	d1f9      	bne.n	800be34 <_svfiprintf_r+0x54>
 800be40:	ebba 0b04 	subs.w	fp, sl, r4
 800be44:	d00b      	beq.n	800be5e <_svfiprintf_r+0x7e>
 800be46:	465b      	mov	r3, fp
 800be48:	4622      	mov	r2, r4
 800be4a:	4629      	mov	r1, r5
 800be4c:	4638      	mov	r0, r7
 800be4e:	f7ff ff6c 	bl	800bd2a <__ssputs_r>
 800be52:	3001      	adds	r0, #1
 800be54:	f000 80a7 	beq.w	800bfa6 <_svfiprintf_r+0x1c6>
 800be58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be5a:	445a      	add	r2, fp
 800be5c:	9209      	str	r2, [sp, #36]	@ 0x24
 800be5e:	f89a 3000 	ldrb.w	r3, [sl]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 809f 	beq.w	800bfa6 <_svfiprintf_r+0x1c6>
 800be68:	2300      	movs	r3, #0
 800be6a:	f04f 32ff 	mov.w	r2, #4294967295
 800be6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be72:	f10a 0a01 	add.w	sl, sl, #1
 800be76:	9304      	str	r3, [sp, #16]
 800be78:	9307      	str	r3, [sp, #28]
 800be7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800be80:	4654      	mov	r4, sl
 800be82:	2205      	movs	r2, #5
 800be84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be88:	484e      	ldr	r0, [pc, #312]	@ (800bfc4 <_svfiprintf_r+0x1e4>)
 800be8a:	f7f4 f9d9 	bl	8000240 <memchr>
 800be8e:	9a04      	ldr	r2, [sp, #16]
 800be90:	b9d8      	cbnz	r0, 800beca <_svfiprintf_r+0xea>
 800be92:	06d0      	lsls	r0, r2, #27
 800be94:	bf44      	itt	mi
 800be96:	2320      	movmi	r3, #32
 800be98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be9c:	0711      	lsls	r1, r2, #28
 800be9e:	bf44      	itt	mi
 800bea0:	232b      	movmi	r3, #43	@ 0x2b
 800bea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bea6:	f89a 3000 	ldrb.w	r3, [sl]
 800beaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800beac:	d015      	beq.n	800beda <_svfiprintf_r+0xfa>
 800beae:	9a07      	ldr	r2, [sp, #28]
 800beb0:	4654      	mov	r4, sl
 800beb2:	2000      	movs	r0, #0
 800beb4:	f04f 0c0a 	mov.w	ip, #10
 800beb8:	4621      	mov	r1, r4
 800beba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bebe:	3b30      	subs	r3, #48	@ 0x30
 800bec0:	2b09      	cmp	r3, #9
 800bec2:	d94b      	bls.n	800bf5c <_svfiprintf_r+0x17c>
 800bec4:	b1b0      	cbz	r0, 800bef4 <_svfiprintf_r+0x114>
 800bec6:	9207      	str	r2, [sp, #28]
 800bec8:	e014      	b.n	800bef4 <_svfiprintf_r+0x114>
 800beca:	eba0 0308 	sub.w	r3, r0, r8
 800bece:	fa09 f303 	lsl.w	r3, r9, r3
 800bed2:	4313      	orrs	r3, r2
 800bed4:	9304      	str	r3, [sp, #16]
 800bed6:	46a2      	mov	sl, r4
 800bed8:	e7d2      	b.n	800be80 <_svfiprintf_r+0xa0>
 800beda:	9b03      	ldr	r3, [sp, #12]
 800bedc:	1d19      	adds	r1, r3, #4
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	9103      	str	r1, [sp, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	bfbb      	ittet	lt
 800bee6:	425b      	neglt	r3, r3
 800bee8:	f042 0202 	orrlt.w	r2, r2, #2
 800beec:	9307      	strge	r3, [sp, #28]
 800beee:	9307      	strlt	r3, [sp, #28]
 800bef0:	bfb8      	it	lt
 800bef2:	9204      	strlt	r2, [sp, #16]
 800bef4:	7823      	ldrb	r3, [r4, #0]
 800bef6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bef8:	d10a      	bne.n	800bf10 <_svfiprintf_r+0x130>
 800befa:	7863      	ldrb	r3, [r4, #1]
 800befc:	2b2a      	cmp	r3, #42	@ 0x2a
 800befe:	d132      	bne.n	800bf66 <_svfiprintf_r+0x186>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9203      	str	r2, [sp, #12]
 800bf08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf0c:	3402      	adds	r4, #2
 800bf0e:	9305      	str	r3, [sp, #20]
 800bf10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bfd4 <_svfiprintf_r+0x1f4>
 800bf14:	7821      	ldrb	r1, [r4, #0]
 800bf16:	2203      	movs	r2, #3
 800bf18:	4650      	mov	r0, sl
 800bf1a:	f7f4 f991 	bl	8000240 <memchr>
 800bf1e:	b138      	cbz	r0, 800bf30 <_svfiprintf_r+0x150>
 800bf20:	9b04      	ldr	r3, [sp, #16]
 800bf22:	eba0 000a 	sub.w	r0, r0, sl
 800bf26:	2240      	movs	r2, #64	@ 0x40
 800bf28:	4082      	lsls	r2, r0
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	3401      	adds	r4, #1
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf34:	4824      	ldr	r0, [pc, #144]	@ (800bfc8 <_svfiprintf_r+0x1e8>)
 800bf36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf3a:	2206      	movs	r2, #6
 800bf3c:	f7f4 f980 	bl	8000240 <memchr>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d036      	beq.n	800bfb2 <_svfiprintf_r+0x1d2>
 800bf44:	4b21      	ldr	r3, [pc, #132]	@ (800bfcc <_svfiprintf_r+0x1ec>)
 800bf46:	bb1b      	cbnz	r3, 800bf90 <_svfiprintf_r+0x1b0>
 800bf48:	9b03      	ldr	r3, [sp, #12]
 800bf4a:	3307      	adds	r3, #7
 800bf4c:	f023 0307 	bic.w	r3, r3, #7
 800bf50:	3308      	adds	r3, #8
 800bf52:	9303      	str	r3, [sp, #12]
 800bf54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf56:	4433      	add	r3, r6
 800bf58:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf5a:	e76a      	b.n	800be32 <_svfiprintf_r+0x52>
 800bf5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf60:	460c      	mov	r4, r1
 800bf62:	2001      	movs	r0, #1
 800bf64:	e7a8      	b.n	800beb8 <_svfiprintf_r+0xd8>
 800bf66:	2300      	movs	r3, #0
 800bf68:	3401      	adds	r4, #1
 800bf6a:	9305      	str	r3, [sp, #20]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	f04f 0c0a 	mov.w	ip, #10
 800bf72:	4620      	mov	r0, r4
 800bf74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf78:	3a30      	subs	r2, #48	@ 0x30
 800bf7a:	2a09      	cmp	r2, #9
 800bf7c:	d903      	bls.n	800bf86 <_svfiprintf_r+0x1a6>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0c6      	beq.n	800bf10 <_svfiprintf_r+0x130>
 800bf82:	9105      	str	r1, [sp, #20]
 800bf84:	e7c4      	b.n	800bf10 <_svfiprintf_r+0x130>
 800bf86:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e7f0      	b.n	800bf72 <_svfiprintf_r+0x192>
 800bf90:	ab03      	add	r3, sp, #12
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	462a      	mov	r2, r5
 800bf96:	4b0e      	ldr	r3, [pc, #56]	@ (800bfd0 <_svfiprintf_r+0x1f0>)
 800bf98:	a904      	add	r1, sp, #16
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f3af 8000 	nop.w
 800bfa0:	1c42      	adds	r2, r0, #1
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	d1d6      	bne.n	800bf54 <_svfiprintf_r+0x174>
 800bfa6:	89ab      	ldrh	r3, [r5, #12]
 800bfa8:	065b      	lsls	r3, r3, #25
 800bfaa:	f53f af2d 	bmi.w	800be08 <_svfiprintf_r+0x28>
 800bfae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfb0:	e72c      	b.n	800be0c <_svfiprintf_r+0x2c>
 800bfb2:	ab03      	add	r3, sp, #12
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	4b05      	ldr	r3, [pc, #20]	@ (800bfd0 <_svfiprintf_r+0x1f0>)
 800bfba:	a904      	add	r1, sp, #16
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	f000 f879 	bl	800c0b4 <_printf_i>
 800bfc2:	e7ed      	b.n	800bfa0 <_svfiprintf_r+0x1c0>
 800bfc4:	0800da58 	.word	0x0800da58
 800bfc8:	0800da62 	.word	0x0800da62
 800bfcc:	00000000 	.word	0x00000000
 800bfd0:	0800bd2b 	.word	0x0800bd2b
 800bfd4:	0800da5e 	.word	0x0800da5e

0800bfd8 <_printf_common>:
 800bfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfdc:	4616      	mov	r6, r2
 800bfde:	4698      	mov	r8, r3
 800bfe0:	688a      	ldr	r2, [r1, #8]
 800bfe2:	690b      	ldr	r3, [r1, #16]
 800bfe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	bfb8      	it	lt
 800bfec:	4613      	movlt	r3, r2
 800bfee:	6033      	str	r3, [r6, #0]
 800bff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bff4:	4607      	mov	r7, r0
 800bff6:	460c      	mov	r4, r1
 800bff8:	b10a      	cbz	r2, 800bffe <_printf_common+0x26>
 800bffa:	3301      	adds	r3, #1
 800bffc:	6033      	str	r3, [r6, #0]
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	0699      	lsls	r1, r3, #26
 800c002:	bf42      	ittt	mi
 800c004:	6833      	ldrmi	r3, [r6, #0]
 800c006:	3302      	addmi	r3, #2
 800c008:	6033      	strmi	r3, [r6, #0]
 800c00a:	6825      	ldr	r5, [r4, #0]
 800c00c:	f015 0506 	ands.w	r5, r5, #6
 800c010:	d106      	bne.n	800c020 <_printf_common+0x48>
 800c012:	f104 0a19 	add.w	sl, r4, #25
 800c016:	68e3      	ldr	r3, [r4, #12]
 800c018:	6832      	ldr	r2, [r6, #0]
 800c01a:	1a9b      	subs	r3, r3, r2
 800c01c:	42ab      	cmp	r3, r5
 800c01e:	dc26      	bgt.n	800c06e <_printf_common+0x96>
 800c020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c024:	6822      	ldr	r2, [r4, #0]
 800c026:	3b00      	subs	r3, #0
 800c028:	bf18      	it	ne
 800c02a:	2301      	movne	r3, #1
 800c02c:	0692      	lsls	r2, r2, #26
 800c02e:	d42b      	bmi.n	800c088 <_printf_common+0xb0>
 800c030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c034:	4641      	mov	r1, r8
 800c036:	4638      	mov	r0, r7
 800c038:	47c8      	blx	r9
 800c03a:	3001      	adds	r0, #1
 800c03c:	d01e      	beq.n	800c07c <_printf_common+0xa4>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	6922      	ldr	r2, [r4, #16]
 800c042:	f003 0306 	and.w	r3, r3, #6
 800c046:	2b04      	cmp	r3, #4
 800c048:	bf02      	ittt	eq
 800c04a:	68e5      	ldreq	r5, [r4, #12]
 800c04c:	6833      	ldreq	r3, [r6, #0]
 800c04e:	1aed      	subeq	r5, r5, r3
 800c050:	68a3      	ldr	r3, [r4, #8]
 800c052:	bf0c      	ite	eq
 800c054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c058:	2500      	movne	r5, #0
 800c05a:	4293      	cmp	r3, r2
 800c05c:	bfc4      	itt	gt
 800c05e:	1a9b      	subgt	r3, r3, r2
 800c060:	18ed      	addgt	r5, r5, r3
 800c062:	2600      	movs	r6, #0
 800c064:	341a      	adds	r4, #26
 800c066:	42b5      	cmp	r5, r6
 800c068:	d11a      	bne.n	800c0a0 <_printf_common+0xc8>
 800c06a:	2000      	movs	r0, #0
 800c06c:	e008      	b.n	800c080 <_printf_common+0xa8>
 800c06e:	2301      	movs	r3, #1
 800c070:	4652      	mov	r2, sl
 800c072:	4641      	mov	r1, r8
 800c074:	4638      	mov	r0, r7
 800c076:	47c8      	blx	r9
 800c078:	3001      	adds	r0, #1
 800c07a:	d103      	bne.n	800c084 <_printf_common+0xac>
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295
 800c080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c084:	3501      	adds	r5, #1
 800c086:	e7c6      	b.n	800c016 <_printf_common+0x3e>
 800c088:	18e1      	adds	r1, r4, r3
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	2030      	movs	r0, #48	@ 0x30
 800c08e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c092:	4422      	add	r2, r4
 800c094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c09c:	3302      	adds	r3, #2
 800c09e:	e7c7      	b.n	800c030 <_printf_common+0x58>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	4641      	mov	r1, r8
 800c0a6:	4638      	mov	r0, r7
 800c0a8:	47c8      	blx	r9
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	d0e6      	beq.n	800c07c <_printf_common+0xa4>
 800c0ae:	3601      	adds	r6, #1
 800c0b0:	e7d9      	b.n	800c066 <_printf_common+0x8e>
	...

0800c0b4 <_printf_i>:
 800c0b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b8:	7e0f      	ldrb	r7, [r1, #24]
 800c0ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c0bc:	2f78      	cmp	r7, #120	@ 0x78
 800c0be:	4691      	mov	r9, r2
 800c0c0:	4680      	mov	r8, r0
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	469a      	mov	sl, r3
 800c0c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c0ca:	d807      	bhi.n	800c0dc <_printf_i+0x28>
 800c0cc:	2f62      	cmp	r7, #98	@ 0x62
 800c0ce:	d80a      	bhi.n	800c0e6 <_printf_i+0x32>
 800c0d0:	2f00      	cmp	r7, #0
 800c0d2:	f000 80d2 	beq.w	800c27a <_printf_i+0x1c6>
 800c0d6:	2f58      	cmp	r7, #88	@ 0x58
 800c0d8:	f000 80b9 	beq.w	800c24e <_printf_i+0x19a>
 800c0dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0e4:	e03a      	b.n	800c15c <_printf_i+0xa8>
 800c0e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0ea:	2b15      	cmp	r3, #21
 800c0ec:	d8f6      	bhi.n	800c0dc <_printf_i+0x28>
 800c0ee:	a101      	add	r1, pc, #4	@ (adr r1, 800c0f4 <_printf_i+0x40>)
 800c0f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0f4:	0800c14d 	.word	0x0800c14d
 800c0f8:	0800c161 	.word	0x0800c161
 800c0fc:	0800c0dd 	.word	0x0800c0dd
 800c100:	0800c0dd 	.word	0x0800c0dd
 800c104:	0800c0dd 	.word	0x0800c0dd
 800c108:	0800c0dd 	.word	0x0800c0dd
 800c10c:	0800c161 	.word	0x0800c161
 800c110:	0800c0dd 	.word	0x0800c0dd
 800c114:	0800c0dd 	.word	0x0800c0dd
 800c118:	0800c0dd 	.word	0x0800c0dd
 800c11c:	0800c0dd 	.word	0x0800c0dd
 800c120:	0800c261 	.word	0x0800c261
 800c124:	0800c18b 	.word	0x0800c18b
 800c128:	0800c21b 	.word	0x0800c21b
 800c12c:	0800c0dd 	.word	0x0800c0dd
 800c130:	0800c0dd 	.word	0x0800c0dd
 800c134:	0800c283 	.word	0x0800c283
 800c138:	0800c0dd 	.word	0x0800c0dd
 800c13c:	0800c18b 	.word	0x0800c18b
 800c140:	0800c0dd 	.word	0x0800c0dd
 800c144:	0800c0dd 	.word	0x0800c0dd
 800c148:	0800c223 	.word	0x0800c223
 800c14c:	6833      	ldr	r3, [r6, #0]
 800c14e:	1d1a      	adds	r2, r3, #4
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6032      	str	r2, [r6, #0]
 800c154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c15c:	2301      	movs	r3, #1
 800c15e:	e09d      	b.n	800c29c <_printf_i+0x1e8>
 800c160:	6833      	ldr	r3, [r6, #0]
 800c162:	6820      	ldr	r0, [r4, #0]
 800c164:	1d19      	adds	r1, r3, #4
 800c166:	6031      	str	r1, [r6, #0]
 800c168:	0606      	lsls	r6, r0, #24
 800c16a:	d501      	bpl.n	800c170 <_printf_i+0xbc>
 800c16c:	681d      	ldr	r5, [r3, #0]
 800c16e:	e003      	b.n	800c178 <_printf_i+0xc4>
 800c170:	0645      	lsls	r5, r0, #25
 800c172:	d5fb      	bpl.n	800c16c <_printf_i+0xb8>
 800c174:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c178:	2d00      	cmp	r5, #0
 800c17a:	da03      	bge.n	800c184 <_printf_i+0xd0>
 800c17c:	232d      	movs	r3, #45	@ 0x2d
 800c17e:	426d      	negs	r5, r5
 800c180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c184:	4859      	ldr	r0, [pc, #356]	@ (800c2ec <_printf_i+0x238>)
 800c186:	230a      	movs	r3, #10
 800c188:	e011      	b.n	800c1ae <_printf_i+0xfa>
 800c18a:	6821      	ldr	r1, [r4, #0]
 800c18c:	6833      	ldr	r3, [r6, #0]
 800c18e:	0608      	lsls	r0, r1, #24
 800c190:	f853 5b04 	ldr.w	r5, [r3], #4
 800c194:	d402      	bmi.n	800c19c <_printf_i+0xe8>
 800c196:	0649      	lsls	r1, r1, #25
 800c198:	bf48      	it	mi
 800c19a:	b2ad      	uxthmi	r5, r5
 800c19c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c19e:	4853      	ldr	r0, [pc, #332]	@ (800c2ec <_printf_i+0x238>)
 800c1a0:	6033      	str	r3, [r6, #0]
 800c1a2:	bf14      	ite	ne
 800c1a4:	230a      	movne	r3, #10
 800c1a6:	2308      	moveq	r3, #8
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c1ae:	6866      	ldr	r6, [r4, #4]
 800c1b0:	60a6      	str	r6, [r4, #8]
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	bfa2      	ittt	ge
 800c1b6:	6821      	ldrge	r1, [r4, #0]
 800c1b8:	f021 0104 	bicge.w	r1, r1, #4
 800c1bc:	6021      	strge	r1, [r4, #0]
 800c1be:	b90d      	cbnz	r5, 800c1c4 <_printf_i+0x110>
 800c1c0:	2e00      	cmp	r6, #0
 800c1c2:	d04b      	beq.n	800c25c <_printf_i+0x1a8>
 800c1c4:	4616      	mov	r6, r2
 800c1c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1ca:	fb03 5711 	mls	r7, r3, r1, r5
 800c1ce:	5dc7      	ldrb	r7, [r0, r7]
 800c1d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1d4:	462f      	mov	r7, r5
 800c1d6:	42bb      	cmp	r3, r7
 800c1d8:	460d      	mov	r5, r1
 800c1da:	d9f4      	bls.n	800c1c6 <_printf_i+0x112>
 800c1dc:	2b08      	cmp	r3, #8
 800c1de:	d10b      	bne.n	800c1f8 <_printf_i+0x144>
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	07df      	lsls	r7, r3, #31
 800c1e4:	d508      	bpl.n	800c1f8 <_printf_i+0x144>
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	6861      	ldr	r1, [r4, #4]
 800c1ea:	4299      	cmp	r1, r3
 800c1ec:	bfde      	ittt	le
 800c1ee:	2330      	movle	r3, #48	@ 0x30
 800c1f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1f8:	1b92      	subs	r2, r2, r6
 800c1fa:	6122      	str	r2, [r4, #16]
 800c1fc:	f8cd a000 	str.w	sl, [sp]
 800c200:	464b      	mov	r3, r9
 800c202:	aa03      	add	r2, sp, #12
 800c204:	4621      	mov	r1, r4
 800c206:	4640      	mov	r0, r8
 800c208:	f7ff fee6 	bl	800bfd8 <_printf_common>
 800c20c:	3001      	adds	r0, #1
 800c20e:	d14a      	bne.n	800c2a6 <_printf_i+0x1f2>
 800c210:	f04f 30ff 	mov.w	r0, #4294967295
 800c214:	b004      	add	sp, #16
 800c216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	f043 0320 	orr.w	r3, r3, #32
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	4833      	ldr	r0, [pc, #204]	@ (800c2f0 <_printf_i+0x23c>)
 800c224:	2778      	movs	r7, #120	@ 0x78
 800c226:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	6831      	ldr	r1, [r6, #0]
 800c22e:	061f      	lsls	r7, r3, #24
 800c230:	f851 5b04 	ldr.w	r5, [r1], #4
 800c234:	d402      	bmi.n	800c23c <_printf_i+0x188>
 800c236:	065f      	lsls	r7, r3, #25
 800c238:	bf48      	it	mi
 800c23a:	b2ad      	uxthmi	r5, r5
 800c23c:	6031      	str	r1, [r6, #0]
 800c23e:	07d9      	lsls	r1, r3, #31
 800c240:	bf44      	itt	mi
 800c242:	f043 0320 	orrmi.w	r3, r3, #32
 800c246:	6023      	strmi	r3, [r4, #0]
 800c248:	b11d      	cbz	r5, 800c252 <_printf_i+0x19e>
 800c24a:	2310      	movs	r3, #16
 800c24c:	e7ac      	b.n	800c1a8 <_printf_i+0xf4>
 800c24e:	4827      	ldr	r0, [pc, #156]	@ (800c2ec <_printf_i+0x238>)
 800c250:	e7e9      	b.n	800c226 <_printf_i+0x172>
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	f023 0320 	bic.w	r3, r3, #32
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	e7f6      	b.n	800c24a <_printf_i+0x196>
 800c25c:	4616      	mov	r6, r2
 800c25e:	e7bd      	b.n	800c1dc <_printf_i+0x128>
 800c260:	6833      	ldr	r3, [r6, #0]
 800c262:	6825      	ldr	r5, [r4, #0]
 800c264:	6961      	ldr	r1, [r4, #20]
 800c266:	1d18      	adds	r0, r3, #4
 800c268:	6030      	str	r0, [r6, #0]
 800c26a:	062e      	lsls	r6, r5, #24
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	d501      	bpl.n	800c274 <_printf_i+0x1c0>
 800c270:	6019      	str	r1, [r3, #0]
 800c272:	e002      	b.n	800c27a <_printf_i+0x1c6>
 800c274:	0668      	lsls	r0, r5, #25
 800c276:	d5fb      	bpl.n	800c270 <_printf_i+0x1bc>
 800c278:	8019      	strh	r1, [r3, #0]
 800c27a:	2300      	movs	r3, #0
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	4616      	mov	r6, r2
 800c280:	e7bc      	b.n	800c1fc <_printf_i+0x148>
 800c282:	6833      	ldr	r3, [r6, #0]
 800c284:	1d1a      	adds	r2, r3, #4
 800c286:	6032      	str	r2, [r6, #0]
 800c288:	681e      	ldr	r6, [r3, #0]
 800c28a:	6862      	ldr	r2, [r4, #4]
 800c28c:	2100      	movs	r1, #0
 800c28e:	4630      	mov	r0, r6
 800c290:	f7f3 ffd6 	bl	8000240 <memchr>
 800c294:	b108      	cbz	r0, 800c29a <_printf_i+0x1e6>
 800c296:	1b80      	subs	r0, r0, r6
 800c298:	6060      	str	r0, [r4, #4]
 800c29a:	6863      	ldr	r3, [r4, #4]
 800c29c:	6123      	str	r3, [r4, #16]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2a4:	e7aa      	b.n	800c1fc <_printf_i+0x148>
 800c2a6:	6923      	ldr	r3, [r4, #16]
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	47d0      	blx	sl
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	d0ad      	beq.n	800c210 <_printf_i+0x15c>
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	079b      	lsls	r3, r3, #30
 800c2b8:	d413      	bmi.n	800c2e2 <_printf_i+0x22e>
 800c2ba:	68e0      	ldr	r0, [r4, #12]
 800c2bc:	9b03      	ldr	r3, [sp, #12]
 800c2be:	4298      	cmp	r0, r3
 800c2c0:	bfb8      	it	lt
 800c2c2:	4618      	movlt	r0, r3
 800c2c4:	e7a6      	b.n	800c214 <_printf_i+0x160>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	4649      	mov	r1, r9
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	47d0      	blx	sl
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d09d      	beq.n	800c210 <_printf_i+0x15c>
 800c2d4:	3501      	adds	r5, #1
 800c2d6:	68e3      	ldr	r3, [r4, #12]
 800c2d8:	9903      	ldr	r1, [sp, #12]
 800c2da:	1a5b      	subs	r3, r3, r1
 800c2dc:	42ab      	cmp	r3, r5
 800c2de:	dcf2      	bgt.n	800c2c6 <_printf_i+0x212>
 800c2e0:	e7eb      	b.n	800c2ba <_printf_i+0x206>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	f104 0619 	add.w	r6, r4, #25
 800c2e8:	e7f5      	b.n	800c2d6 <_printf_i+0x222>
 800c2ea:	bf00      	nop
 800c2ec:	0800da69 	.word	0x0800da69
 800c2f0:	0800da7a 	.word	0x0800da7a

0800c2f4 <__sflush_r>:
 800c2f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2fc:	0716      	lsls	r6, r2, #28
 800c2fe:	4605      	mov	r5, r0
 800c300:	460c      	mov	r4, r1
 800c302:	d454      	bmi.n	800c3ae <__sflush_r+0xba>
 800c304:	684b      	ldr	r3, [r1, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	dc02      	bgt.n	800c310 <__sflush_r+0x1c>
 800c30a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	dd48      	ble.n	800c3a2 <__sflush_r+0xae>
 800c310:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c312:	2e00      	cmp	r6, #0
 800c314:	d045      	beq.n	800c3a2 <__sflush_r+0xae>
 800c316:	2300      	movs	r3, #0
 800c318:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c31c:	682f      	ldr	r7, [r5, #0]
 800c31e:	6a21      	ldr	r1, [r4, #32]
 800c320:	602b      	str	r3, [r5, #0]
 800c322:	d030      	beq.n	800c386 <__sflush_r+0x92>
 800c324:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	0759      	lsls	r1, r3, #29
 800c32a:	d505      	bpl.n	800c338 <__sflush_r+0x44>
 800c32c:	6863      	ldr	r3, [r4, #4]
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c332:	b10b      	cbz	r3, 800c338 <__sflush_r+0x44>
 800c334:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	2300      	movs	r3, #0
 800c33a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c33c:	6a21      	ldr	r1, [r4, #32]
 800c33e:	4628      	mov	r0, r5
 800c340:	47b0      	blx	r6
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	d106      	bne.n	800c356 <__sflush_r+0x62>
 800c348:	6829      	ldr	r1, [r5, #0]
 800c34a:	291d      	cmp	r1, #29
 800c34c:	d82b      	bhi.n	800c3a6 <__sflush_r+0xb2>
 800c34e:	4a2a      	ldr	r2, [pc, #168]	@ (800c3f8 <__sflush_r+0x104>)
 800c350:	410a      	asrs	r2, r1
 800c352:	07d6      	lsls	r6, r2, #31
 800c354:	d427      	bmi.n	800c3a6 <__sflush_r+0xb2>
 800c356:	2200      	movs	r2, #0
 800c358:	6062      	str	r2, [r4, #4]
 800c35a:	04d9      	lsls	r1, r3, #19
 800c35c:	6922      	ldr	r2, [r4, #16]
 800c35e:	6022      	str	r2, [r4, #0]
 800c360:	d504      	bpl.n	800c36c <__sflush_r+0x78>
 800c362:	1c42      	adds	r2, r0, #1
 800c364:	d101      	bne.n	800c36a <__sflush_r+0x76>
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	b903      	cbnz	r3, 800c36c <__sflush_r+0x78>
 800c36a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c36c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c36e:	602f      	str	r7, [r5, #0]
 800c370:	b1b9      	cbz	r1, 800c3a2 <__sflush_r+0xae>
 800c372:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c376:	4299      	cmp	r1, r3
 800c378:	d002      	beq.n	800c380 <__sflush_r+0x8c>
 800c37a:	4628      	mov	r0, r5
 800c37c:	f7fe fbd2 	bl	800ab24 <_free_r>
 800c380:	2300      	movs	r3, #0
 800c382:	6363      	str	r3, [r4, #52]	@ 0x34
 800c384:	e00d      	b.n	800c3a2 <__sflush_r+0xae>
 800c386:	2301      	movs	r3, #1
 800c388:	4628      	mov	r0, r5
 800c38a:	47b0      	blx	r6
 800c38c:	4602      	mov	r2, r0
 800c38e:	1c50      	adds	r0, r2, #1
 800c390:	d1c9      	bne.n	800c326 <__sflush_r+0x32>
 800c392:	682b      	ldr	r3, [r5, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0c6      	beq.n	800c326 <__sflush_r+0x32>
 800c398:	2b1d      	cmp	r3, #29
 800c39a:	d001      	beq.n	800c3a0 <__sflush_r+0xac>
 800c39c:	2b16      	cmp	r3, #22
 800c39e:	d11e      	bne.n	800c3de <__sflush_r+0xea>
 800c3a0:	602f      	str	r7, [r5, #0]
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e022      	b.n	800c3ec <__sflush_r+0xf8>
 800c3a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3aa:	b21b      	sxth	r3, r3
 800c3ac:	e01b      	b.n	800c3e6 <__sflush_r+0xf2>
 800c3ae:	690f      	ldr	r7, [r1, #16]
 800c3b0:	2f00      	cmp	r7, #0
 800c3b2:	d0f6      	beq.n	800c3a2 <__sflush_r+0xae>
 800c3b4:	0793      	lsls	r3, r2, #30
 800c3b6:	680e      	ldr	r6, [r1, #0]
 800c3b8:	bf08      	it	eq
 800c3ba:	694b      	ldreq	r3, [r1, #20]
 800c3bc:	600f      	str	r7, [r1, #0]
 800c3be:	bf18      	it	ne
 800c3c0:	2300      	movne	r3, #0
 800c3c2:	eba6 0807 	sub.w	r8, r6, r7
 800c3c6:	608b      	str	r3, [r1, #8]
 800c3c8:	f1b8 0f00 	cmp.w	r8, #0
 800c3cc:	dde9      	ble.n	800c3a2 <__sflush_r+0xae>
 800c3ce:	6a21      	ldr	r1, [r4, #32]
 800c3d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3d2:	4643      	mov	r3, r8
 800c3d4:	463a      	mov	r2, r7
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	47b0      	blx	r6
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	dc08      	bgt.n	800c3f0 <__sflush_r+0xfc>
 800c3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f0:	4407      	add	r7, r0
 800c3f2:	eba8 0800 	sub.w	r8, r8, r0
 800c3f6:	e7e7      	b.n	800c3c8 <__sflush_r+0xd4>
 800c3f8:	dfbffffe 	.word	0xdfbffffe

0800c3fc <_fflush_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	690b      	ldr	r3, [r1, #16]
 800c400:	4605      	mov	r5, r0
 800c402:	460c      	mov	r4, r1
 800c404:	b913      	cbnz	r3, 800c40c <_fflush_r+0x10>
 800c406:	2500      	movs	r5, #0
 800c408:	4628      	mov	r0, r5
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	b118      	cbz	r0, 800c416 <_fflush_r+0x1a>
 800c40e:	6a03      	ldr	r3, [r0, #32]
 800c410:	b90b      	cbnz	r3, 800c416 <_fflush_r+0x1a>
 800c412:	f7fe f9c1 	bl	800a798 <__sinit>
 800c416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d0f3      	beq.n	800c406 <_fflush_r+0xa>
 800c41e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c420:	07d0      	lsls	r0, r2, #31
 800c422:	d404      	bmi.n	800c42e <_fflush_r+0x32>
 800c424:	0599      	lsls	r1, r3, #22
 800c426:	d402      	bmi.n	800c42e <_fflush_r+0x32>
 800c428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c42a:	f7fe fb52 	bl	800aad2 <__retarget_lock_acquire_recursive>
 800c42e:	4628      	mov	r0, r5
 800c430:	4621      	mov	r1, r4
 800c432:	f7ff ff5f 	bl	800c2f4 <__sflush_r>
 800c436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c438:	07da      	lsls	r2, r3, #31
 800c43a:	4605      	mov	r5, r0
 800c43c:	d4e4      	bmi.n	800c408 <_fflush_r+0xc>
 800c43e:	89a3      	ldrh	r3, [r4, #12]
 800c440:	059b      	lsls	r3, r3, #22
 800c442:	d4e1      	bmi.n	800c408 <_fflush_r+0xc>
 800c444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c446:	f7fe fb45 	bl	800aad4 <__retarget_lock_release_recursive>
 800c44a:	e7dd      	b.n	800c408 <_fflush_r+0xc>

0800c44c <memmove>:
 800c44c:	4288      	cmp	r0, r1
 800c44e:	b510      	push	{r4, lr}
 800c450:	eb01 0402 	add.w	r4, r1, r2
 800c454:	d902      	bls.n	800c45c <memmove+0x10>
 800c456:	4284      	cmp	r4, r0
 800c458:	4623      	mov	r3, r4
 800c45a:	d807      	bhi.n	800c46c <memmove+0x20>
 800c45c:	1e43      	subs	r3, r0, #1
 800c45e:	42a1      	cmp	r1, r4
 800c460:	d008      	beq.n	800c474 <memmove+0x28>
 800c462:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c46a:	e7f8      	b.n	800c45e <memmove+0x12>
 800c46c:	4402      	add	r2, r0
 800c46e:	4601      	mov	r1, r0
 800c470:	428a      	cmp	r2, r1
 800c472:	d100      	bne.n	800c476 <memmove+0x2a>
 800c474:	bd10      	pop	{r4, pc}
 800c476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c47a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c47e:	e7f7      	b.n	800c470 <memmove+0x24>

0800c480 <_sbrk_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4d06      	ldr	r5, [pc, #24]	@ (800c49c <_sbrk_r+0x1c>)
 800c484:	2300      	movs	r3, #0
 800c486:	4604      	mov	r4, r0
 800c488:	4608      	mov	r0, r1
 800c48a:	602b      	str	r3, [r5, #0]
 800c48c:	f7f9 f8f2 	bl	8005674 <_sbrk>
 800c490:	1c43      	adds	r3, r0, #1
 800c492:	d102      	bne.n	800c49a <_sbrk_r+0x1a>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	b103      	cbz	r3, 800c49a <_sbrk_r+0x1a>
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	bd38      	pop	{r3, r4, r5, pc}
 800c49c:	20003818 	.word	0x20003818

0800c4a0 <__assert_func>:
 800c4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4a2:	4614      	mov	r4, r2
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b09      	ldr	r3, [pc, #36]	@ (800c4cc <__assert_func+0x2c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	68d8      	ldr	r0, [r3, #12]
 800c4ae:	b954      	cbnz	r4, 800c4c6 <__assert_func+0x26>
 800c4b0:	4b07      	ldr	r3, [pc, #28]	@ (800c4d0 <__assert_func+0x30>)
 800c4b2:	461c      	mov	r4, r3
 800c4b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4b8:	9100      	str	r1, [sp, #0]
 800c4ba:	462b      	mov	r3, r5
 800c4bc:	4905      	ldr	r1, [pc, #20]	@ (800c4d4 <__assert_func+0x34>)
 800c4be:	f000 f857 	bl	800c570 <fiprintf>
 800c4c2:	f000 f867 	bl	800c594 <abort>
 800c4c6:	4b04      	ldr	r3, [pc, #16]	@ (800c4d8 <__assert_func+0x38>)
 800c4c8:	e7f4      	b.n	800c4b4 <__assert_func+0x14>
 800c4ca:	bf00      	nop
 800c4cc:	20000198 	.word	0x20000198
 800c4d0:	0800dac6 	.word	0x0800dac6
 800c4d4:	0800da98 	.word	0x0800da98
 800c4d8:	0800da8b 	.word	0x0800da8b

0800c4dc <_calloc_r>:
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	fba1 5402 	umull	r5, r4, r1, r2
 800c4e2:	b93c      	cbnz	r4, 800c4f4 <_calloc_r+0x18>
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	f7fe fec3 	bl	800b270 <_malloc_r>
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	b928      	cbnz	r0, 800c4fa <_calloc_r+0x1e>
 800c4ee:	2600      	movs	r6, #0
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	bd70      	pop	{r4, r5, r6, pc}
 800c4f4:	220c      	movs	r2, #12
 800c4f6:	6002      	str	r2, [r0, #0]
 800c4f8:	e7f9      	b.n	800c4ee <_calloc_r+0x12>
 800c4fa:	462a      	mov	r2, r5
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	f7fe fa31 	bl	800a964 <memset>
 800c502:	e7f5      	b.n	800c4f0 <_calloc_r+0x14>

0800c504 <malloc>:
 800c504:	4b02      	ldr	r3, [pc, #8]	@ (800c510 <malloc+0xc>)
 800c506:	4601      	mov	r1, r0
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f7fe beb1 	b.w	800b270 <_malloc_r>
 800c50e:	bf00      	nop
 800c510:	20000198 	.word	0x20000198

0800c514 <_realloc_r>:
 800c514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c518:	4680      	mov	r8, r0
 800c51a:	4615      	mov	r5, r2
 800c51c:	460c      	mov	r4, r1
 800c51e:	b921      	cbnz	r1, 800c52a <_realloc_r+0x16>
 800c520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	4611      	mov	r1, r2
 800c526:	f7fe bea3 	b.w	800b270 <_malloc_r>
 800c52a:	b92a      	cbnz	r2, 800c538 <_realloc_r+0x24>
 800c52c:	f7fe fafa 	bl	800ab24 <_free_r>
 800c530:	2400      	movs	r4, #0
 800c532:	4620      	mov	r0, r4
 800c534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c538:	f000 f833 	bl	800c5a2 <_malloc_usable_size_r>
 800c53c:	4285      	cmp	r5, r0
 800c53e:	4606      	mov	r6, r0
 800c540:	d802      	bhi.n	800c548 <_realloc_r+0x34>
 800c542:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c546:	d8f4      	bhi.n	800c532 <_realloc_r+0x1e>
 800c548:	4629      	mov	r1, r5
 800c54a:	4640      	mov	r0, r8
 800c54c:	f7fe fe90 	bl	800b270 <_malloc_r>
 800c550:	4607      	mov	r7, r0
 800c552:	2800      	cmp	r0, #0
 800c554:	d0ec      	beq.n	800c530 <_realloc_r+0x1c>
 800c556:	42b5      	cmp	r5, r6
 800c558:	462a      	mov	r2, r5
 800c55a:	4621      	mov	r1, r4
 800c55c:	bf28      	it	cs
 800c55e:	4632      	movcs	r2, r6
 800c560:	f7fe fac1 	bl	800aae6 <memcpy>
 800c564:	4621      	mov	r1, r4
 800c566:	4640      	mov	r0, r8
 800c568:	f7fe fadc 	bl	800ab24 <_free_r>
 800c56c:	463c      	mov	r4, r7
 800c56e:	e7e0      	b.n	800c532 <_realloc_r+0x1e>

0800c570 <fiprintf>:
 800c570:	b40e      	push	{r1, r2, r3}
 800c572:	b503      	push	{r0, r1, lr}
 800c574:	4601      	mov	r1, r0
 800c576:	ab03      	add	r3, sp, #12
 800c578:	4805      	ldr	r0, [pc, #20]	@ (800c590 <fiprintf+0x20>)
 800c57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c57e:	6800      	ldr	r0, [r0, #0]
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	f000 f83f 	bl	800c604 <_vfiprintf_r>
 800c586:	b002      	add	sp, #8
 800c588:	f85d eb04 	ldr.w	lr, [sp], #4
 800c58c:	b003      	add	sp, #12
 800c58e:	4770      	bx	lr
 800c590:	20000198 	.word	0x20000198

0800c594 <abort>:
 800c594:	b508      	push	{r3, lr}
 800c596:	2006      	movs	r0, #6
 800c598:	f000 fa08 	bl	800c9ac <raise>
 800c59c:	2001      	movs	r0, #1
 800c59e:	f7f8 fff1 	bl	8005584 <_exit>

0800c5a2 <_malloc_usable_size_r>:
 800c5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5a6:	1f18      	subs	r0, r3, #4
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	bfbc      	itt	lt
 800c5ac:	580b      	ldrlt	r3, [r1, r0]
 800c5ae:	18c0      	addlt	r0, r0, r3
 800c5b0:	4770      	bx	lr

0800c5b2 <__sfputc_r>:
 800c5b2:	6893      	ldr	r3, [r2, #8]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	b410      	push	{r4}
 800c5ba:	6093      	str	r3, [r2, #8]
 800c5bc:	da08      	bge.n	800c5d0 <__sfputc_r+0x1e>
 800c5be:	6994      	ldr	r4, [r2, #24]
 800c5c0:	42a3      	cmp	r3, r4
 800c5c2:	db01      	blt.n	800c5c8 <__sfputc_r+0x16>
 800c5c4:	290a      	cmp	r1, #10
 800c5c6:	d103      	bne.n	800c5d0 <__sfputc_r+0x1e>
 800c5c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5cc:	f000 b932 	b.w	800c834 <__swbuf_r>
 800c5d0:	6813      	ldr	r3, [r2, #0]
 800c5d2:	1c58      	adds	r0, r3, #1
 800c5d4:	6010      	str	r0, [r2, #0]
 800c5d6:	7019      	strb	r1, [r3, #0]
 800c5d8:	4608      	mov	r0, r1
 800c5da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <__sfputs_r>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	460f      	mov	r7, r1
 800c5e6:	4614      	mov	r4, r2
 800c5e8:	18d5      	adds	r5, r2, r3
 800c5ea:	42ac      	cmp	r4, r5
 800c5ec:	d101      	bne.n	800c5f2 <__sfputs_r+0x12>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e007      	b.n	800c602 <__sfputs_r+0x22>
 800c5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f6:	463a      	mov	r2, r7
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7ff ffda 	bl	800c5b2 <__sfputc_r>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d1f3      	bne.n	800c5ea <__sfputs_r+0xa>
 800c602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c604 <_vfiprintf_r>:
 800c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c608:	460d      	mov	r5, r1
 800c60a:	b09d      	sub	sp, #116	@ 0x74
 800c60c:	4614      	mov	r4, r2
 800c60e:	4698      	mov	r8, r3
 800c610:	4606      	mov	r6, r0
 800c612:	b118      	cbz	r0, 800c61c <_vfiprintf_r+0x18>
 800c614:	6a03      	ldr	r3, [r0, #32]
 800c616:	b90b      	cbnz	r3, 800c61c <_vfiprintf_r+0x18>
 800c618:	f7fe f8be 	bl	800a798 <__sinit>
 800c61c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c61e:	07d9      	lsls	r1, r3, #31
 800c620:	d405      	bmi.n	800c62e <_vfiprintf_r+0x2a>
 800c622:	89ab      	ldrh	r3, [r5, #12]
 800c624:	059a      	lsls	r2, r3, #22
 800c626:	d402      	bmi.n	800c62e <_vfiprintf_r+0x2a>
 800c628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c62a:	f7fe fa52 	bl	800aad2 <__retarget_lock_acquire_recursive>
 800c62e:	89ab      	ldrh	r3, [r5, #12]
 800c630:	071b      	lsls	r3, r3, #28
 800c632:	d501      	bpl.n	800c638 <_vfiprintf_r+0x34>
 800c634:	692b      	ldr	r3, [r5, #16]
 800c636:	b99b      	cbnz	r3, 800c660 <_vfiprintf_r+0x5c>
 800c638:	4629      	mov	r1, r5
 800c63a:	4630      	mov	r0, r6
 800c63c:	f000 f938 	bl	800c8b0 <__swsetup_r>
 800c640:	b170      	cbz	r0, 800c660 <_vfiprintf_r+0x5c>
 800c642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c644:	07dc      	lsls	r4, r3, #31
 800c646:	d504      	bpl.n	800c652 <_vfiprintf_r+0x4e>
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	b01d      	add	sp, #116	@ 0x74
 800c64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c652:	89ab      	ldrh	r3, [r5, #12]
 800c654:	0598      	lsls	r0, r3, #22
 800c656:	d4f7      	bmi.n	800c648 <_vfiprintf_r+0x44>
 800c658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c65a:	f7fe fa3b 	bl	800aad4 <__retarget_lock_release_recursive>
 800c65e:	e7f3      	b.n	800c648 <_vfiprintf_r+0x44>
 800c660:	2300      	movs	r3, #0
 800c662:	9309      	str	r3, [sp, #36]	@ 0x24
 800c664:	2320      	movs	r3, #32
 800c666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c66a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c66e:	2330      	movs	r3, #48	@ 0x30
 800c670:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c820 <_vfiprintf_r+0x21c>
 800c674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c678:	f04f 0901 	mov.w	r9, #1
 800c67c:	4623      	mov	r3, r4
 800c67e:	469a      	mov	sl, r3
 800c680:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c684:	b10a      	cbz	r2, 800c68a <_vfiprintf_r+0x86>
 800c686:	2a25      	cmp	r2, #37	@ 0x25
 800c688:	d1f9      	bne.n	800c67e <_vfiprintf_r+0x7a>
 800c68a:	ebba 0b04 	subs.w	fp, sl, r4
 800c68e:	d00b      	beq.n	800c6a8 <_vfiprintf_r+0xa4>
 800c690:	465b      	mov	r3, fp
 800c692:	4622      	mov	r2, r4
 800c694:	4629      	mov	r1, r5
 800c696:	4630      	mov	r0, r6
 800c698:	f7ff ffa2 	bl	800c5e0 <__sfputs_r>
 800c69c:	3001      	adds	r0, #1
 800c69e:	f000 80a7 	beq.w	800c7f0 <_vfiprintf_r+0x1ec>
 800c6a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a4:	445a      	add	r2, fp
 800c6a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 809f 	beq.w	800c7f0 <_vfiprintf_r+0x1ec>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6bc:	f10a 0a01 	add.w	sl, sl, #1
 800c6c0:	9304      	str	r3, [sp, #16]
 800c6c2:	9307      	str	r3, [sp, #28]
 800c6c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6ca:	4654      	mov	r4, sl
 800c6cc:	2205      	movs	r2, #5
 800c6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d2:	4853      	ldr	r0, [pc, #332]	@ (800c820 <_vfiprintf_r+0x21c>)
 800c6d4:	f7f3 fdb4 	bl	8000240 <memchr>
 800c6d8:	9a04      	ldr	r2, [sp, #16]
 800c6da:	b9d8      	cbnz	r0, 800c714 <_vfiprintf_r+0x110>
 800c6dc:	06d1      	lsls	r1, r2, #27
 800c6de:	bf44      	itt	mi
 800c6e0:	2320      	movmi	r3, #32
 800c6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6e6:	0713      	lsls	r3, r2, #28
 800c6e8:	bf44      	itt	mi
 800c6ea:	232b      	movmi	r3, #43	@ 0x2b
 800c6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6f6:	d015      	beq.n	800c724 <_vfiprintf_r+0x120>
 800c6f8:	9a07      	ldr	r2, [sp, #28]
 800c6fa:	4654      	mov	r4, sl
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f04f 0c0a 	mov.w	ip, #10
 800c702:	4621      	mov	r1, r4
 800c704:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c708:	3b30      	subs	r3, #48	@ 0x30
 800c70a:	2b09      	cmp	r3, #9
 800c70c:	d94b      	bls.n	800c7a6 <_vfiprintf_r+0x1a2>
 800c70e:	b1b0      	cbz	r0, 800c73e <_vfiprintf_r+0x13a>
 800c710:	9207      	str	r2, [sp, #28]
 800c712:	e014      	b.n	800c73e <_vfiprintf_r+0x13a>
 800c714:	eba0 0308 	sub.w	r3, r0, r8
 800c718:	fa09 f303 	lsl.w	r3, r9, r3
 800c71c:	4313      	orrs	r3, r2
 800c71e:	9304      	str	r3, [sp, #16]
 800c720:	46a2      	mov	sl, r4
 800c722:	e7d2      	b.n	800c6ca <_vfiprintf_r+0xc6>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	1d19      	adds	r1, r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	9103      	str	r1, [sp, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bfbb      	ittet	lt
 800c730:	425b      	neglt	r3, r3
 800c732:	f042 0202 	orrlt.w	r2, r2, #2
 800c736:	9307      	strge	r3, [sp, #28]
 800c738:	9307      	strlt	r3, [sp, #28]
 800c73a:	bfb8      	it	lt
 800c73c:	9204      	strlt	r2, [sp, #16]
 800c73e:	7823      	ldrb	r3, [r4, #0]
 800c740:	2b2e      	cmp	r3, #46	@ 0x2e
 800c742:	d10a      	bne.n	800c75a <_vfiprintf_r+0x156>
 800c744:	7863      	ldrb	r3, [r4, #1]
 800c746:	2b2a      	cmp	r3, #42	@ 0x2a
 800c748:	d132      	bne.n	800c7b0 <_vfiprintf_r+0x1ac>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	1d1a      	adds	r2, r3, #4
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	9203      	str	r2, [sp, #12]
 800c752:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c756:	3402      	adds	r4, #2
 800c758:	9305      	str	r3, [sp, #20]
 800c75a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c830 <_vfiprintf_r+0x22c>
 800c75e:	7821      	ldrb	r1, [r4, #0]
 800c760:	2203      	movs	r2, #3
 800c762:	4650      	mov	r0, sl
 800c764:	f7f3 fd6c 	bl	8000240 <memchr>
 800c768:	b138      	cbz	r0, 800c77a <_vfiprintf_r+0x176>
 800c76a:	9b04      	ldr	r3, [sp, #16]
 800c76c:	eba0 000a 	sub.w	r0, r0, sl
 800c770:	2240      	movs	r2, #64	@ 0x40
 800c772:	4082      	lsls	r2, r0
 800c774:	4313      	orrs	r3, r2
 800c776:	3401      	adds	r4, #1
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77e:	4829      	ldr	r0, [pc, #164]	@ (800c824 <_vfiprintf_r+0x220>)
 800c780:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c784:	2206      	movs	r2, #6
 800c786:	f7f3 fd5b 	bl	8000240 <memchr>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d03f      	beq.n	800c80e <_vfiprintf_r+0x20a>
 800c78e:	4b26      	ldr	r3, [pc, #152]	@ (800c828 <_vfiprintf_r+0x224>)
 800c790:	bb1b      	cbnz	r3, 800c7da <_vfiprintf_r+0x1d6>
 800c792:	9b03      	ldr	r3, [sp, #12]
 800c794:	3307      	adds	r3, #7
 800c796:	f023 0307 	bic.w	r3, r3, #7
 800c79a:	3308      	adds	r3, #8
 800c79c:	9303      	str	r3, [sp, #12]
 800c79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7a0:	443b      	add	r3, r7
 800c7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a4:	e76a      	b.n	800c67c <_vfiprintf_r+0x78>
 800c7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	e7a8      	b.n	800c702 <_vfiprintf_r+0xfe>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	3401      	adds	r4, #1
 800c7b4:	9305      	str	r3, [sp, #20]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	f04f 0c0a 	mov.w	ip, #10
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7c2:	3a30      	subs	r2, #48	@ 0x30
 800c7c4:	2a09      	cmp	r2, #9
 800c7c6:	d903      	bls.n	800c7d0 <_vfiprintf_r+0x1cc>
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d0c6      	beq.n	800c75a <_vfiprintf_r+0x156>
 800c7cc:	9105      	str	r1, [sp, #20]
 800c7ce:	e7c4      	b.n	800c75a <_vfiprintf_r+0x156>
 800c7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e7f0      	b.n	800c7bc <_vfiprintf_r+0x1b8>
 800c7da:	ab03      	add	r3, sp, #12
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	462a      	mov	r2, r5
 800c7e0:	4b12      	ldr	r3, [pc, #72]	@ (800c82c <_vfiprintf_r+0x228>)
 800c7e2:	a904      	add	r1, sp, #16
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f3af 8000 	nop.w
 800c7ea:	4607      	mov	r7, r0
 800c7ec:	1c78      	adds	r0, r7, #1
 800c7ee:	d1d6      	bne.n	800c79e <_vfiprintf_r+0x19a>
 800c7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7f2:	07d9      	lsls	r1, r3, #31
 800c7f4:	d405      	bmi.n	800c802 <_vfiprintf_r+0x1fe>
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	059a      	lsls	r2, r3, #22
 800c7fa:	d402      	bmi.n	800c802 <_vfiprintf_r+0x1fe>
 800c7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7fe:	f7fe f969 	bl	800aad4 <__retarget_lock_release_recursive>
 800c802:	89ab      	ldrh	r3, [r5, #12]
 800c804:	065b      	lsls	r3, r3, #25
 800c806:	f53f af1f 	bmi.w	800c648 <_vfiprintf_r+0x44>
 800c80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c80c:	e71e      	b.n	800c64c <_vfiprintf_r+0x48>
 800c80e:	ab03      	add	r3, sp, #12
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	462a      	mov	r2, r5
 800c814:	4b05      	ldr	r3, [pc, #20]	@ (800c82c <_vfiprintf_r+0x228>)
 800c816:	a904      	add	r1, sp, #16
 800c818:	4630      	mov	r0, r6
 800c81a:	f7ff fc4b 	bl	800c0b4 <_printf_i>
 800c81e:	e7e4      	b.n	800c7ea <_vfiprintf_r+0x1e6>
 800c820:	0800da58 	.word	0x0800da58
 800c824:	0800da62 	.word	0x0800da62
 800c828:	00000000 	.word	0x00000000
 800c82c:	0800c5e1 	.word	0x0800c5e1
 800c830:	0800da5e 	.word	0x0800da5e

0800c834 <__swbuf_r>:
 800c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c836:	460e      	mov	r6, r1
 800c838:	4614      	mov	r4, r2
 800c83a:	4605      	mov	r5, r0
 800c83c:	b118      	cbz	r0, 800c846 <__swbuf_r+0x12>
 800c83e:	6a03      	ldr	r3, [r0, #32]
 800c840:	b90b      	cbnz	r3, 800c846 <__swbuf_r+0x12>
 800c842:	f7fd ffa9 	bl	800a798 <__sinit>
 800c846:	69a3      	ldr	r3, [r4, #24]
 800c848:	60a3      	str	r3, [r4, #8]
 800c84a:	89a3      	ldrh	r3, [r4, #12]
 800c84c:	071a      	lsls	r2, r3, #28
 800c84e:	d501      	bpl.n	800c854 <__swbuf_r+0x20>
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	b943      	cbnz	r3, 800c866 <__swbuf_r+0x32>
 800c854:	4621      	mov	r1, r4
 800c856:	4628      	mov	r0, r5
 800c858:	f000 f82a 	bl	800c8b0 <__swsetup_r>
 800c85c:	b118      	cbz	r0, 800c866 <__swbuf_r+0x32>
 800c85e:	f04f 37ff 	mov.w	r7, #4294967295
 800c862:	4638      	mov	r0, r7
 800c864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	6922      	ldr	r2, [r4, #16]
 800c86a:	1a98      	subs	r0, r3, r2
 800c86c:	6963      	ldr	r3, [r4, #20]
 800c86e:	b2f6      	uxtb	r6, r6
 800c870:	4283      	cmp	r3, r0
 800c872:	4637      	mov	r7, r6
 800c874:	dc05      	bgt.n	800c882 <__swbuf_r+0x4e>
 800c876:	4621      	mov	r1, r4
 800c878:	4628      	mov	r0, r5
 800c87a:	f7ff fdbf 	bl	800c3fc <_fflush_r>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d1ed      	bne.n	800c85e <__swbuf_r+0x2a>
 800c882:	68a3      	ldr	r3, [r4, #8]
 800c884:	3b01      	subs	r3, #1
 800c886:	60a3      	str	r3, [r4, #8]
 800c888:	6823      	ldr	r3, [r4, #0]
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	6022      	str	r2, [r4, #0]
 800c88e:	701e      	strb	r6, [r3, #0]
 800c890:	6962      	ldr	r2, [r4, #20]
 800c892:	1c43      	adds	r3, r0, #1
 800c894:	429a      	cmp	r2, r3
 800c896:	d004      	beq.n	800c8a2 <__swbuf_r+0x6e>
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	07db      	lsls	r3, r3, #31
 800c89c:	d5e1      	bpl.n	800c862 <__swbuf_r+0x2e>
 800c89e:	2e0a      	cmp	r6, #10
 800c8a0:	d1df      	bne.n	800c862 <__swbuf_r+0x2e>
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f7ff fda9 	bl	800c3fc <_fflush_r>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d0d9      	beq.n	800c862 <__swbuf_r+0x2e>
 800c8ae:	e7d6      	b.n	800c85e <__swbuf_r+0x2a>

0800c8b0 <__swsetup_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4b29      	ldr	r3, [pc, #164]	@ (800c958 <__swsetup_r+0xa8>)
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	6818      	ldr	r0, [r3, #0]
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	b118      	cbz	r0, 800c8c4 <__swsetup_r+0x14>
 800c8bc:	6a03      	ldr	r3, [r0, #32]
 800c8be:	b90b      	cbnz	r3, 800c8c4 <__swsetup_r+0x14>
 800c8c0:	f7fd ff6a 	bl	800a798 <__sinit>
 800c8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c8:	0719      	lsls	r1, r3, #28
 800c8ca:	d422      	bmi.n	800c912 <__swsetup_r+0x62>
 800c8cc:	06da      	lsls	r2, r3, #27
 800c8ce:	d407      	bmi.n	800c8e0 <__swsetup_r+0x30>
 800c8d0:	2209      	movs	r2, #9
 800c8d2:	602a      	str	r2, [r5, #0]
 800c8d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8d8:	81a3      	strh	r3, [r4, #12]
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295
 800c8de:	e033      	b.n	800c948 <__swsetup_r+0x98>
 800c8e0:	0758      	lsls	r0, r3, #29
 800c8e2:	d512      	bpl.n	800c90a <__swsetup_r+0x5a>
 800c8e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8e6:	b141      	cbz	r1, 800c8fa <__swsetup_r+0x4a>
 800c8e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8ec:	4299      	cmp	r1, r3
 800c8ee:	d002      	beq.n	800c8f6 <__swsetup_r+0x46>
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	f7fe f917 	bl	800ab24 <_free_r>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	2300      	movs	r3, #0
 800c904:	6063      	str	r3, [r4, #4]
 800c906:	6923      	ldr	r3, [r4, #16]
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f043 0308 	orr.w	r3, r3, #8
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	6923      	ldr	r3, [r4, #16]
 800c914:	b94b      	cbnz	r3, 800c92a <__swsetup_r+0x7a>
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c91c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c920:	d003      	beq.n	800c92a <__swsetup_r+0x7a>
 800c922:	4621      	mov	r1, r4
 800c924:	4628      	mov	r0, r5
 800c926:	f000 f883 	bl	800ca30 <__smakebuf_r>
 800c92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92e:	f013 0201 	ands.w	r2, r3, #1
 800c932:	d00a      	beq.n	800c94a <__swsetup_r+0x9a>
 800c934:	2200      	movs	r2, #0
 800c936:	60a2      	str	r2, [r4, #8]
 800c938:	6962      	ldr	r2, [r4, #20]
 800c93a:	4252      	negs	r2, r2
 800c93c:	61a2      	str	r2, [r4, #24]
 800c93e:	6922      	ldr	r2, [r4, #16]
 800c940:	b942      	cbnz	r2, 800c954 <__swsetup_r+0xa4>
 800c942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c946:	d1c5      	bne.n	800c8d4 <__swsetup_r+0x24>
 800c948:	bd38      	pop	{r3, r4, r5, pc}
 800c94a:	0799      	lsls	r1, r3, #30
 800c94c:	bf58      	it	pl
 800c94e:	6962      	ldrpl	r2, [r4, #20]
 800c950:	60a2      	str	r2, [r4, #8]
 800c952:	e7f4      	b.n	800c93e <__swsetup_r+0x8e>
 800c954:	2000      	movs	r0, #0
 800c956:	e7f7      	b.n	800c948 <__swsetup_r+0x98>
 800c958:	20000198 	.word	0x20000198

0800c95c <_raise_r>:
 800c95c:	291f      	cmp	r1, #31
 800c95e:	b538      	push	{r3, r4, r5, lr}
 800c960:	4605      	mov	r5, r0
 800c962:	460c      	mov	r4, r1
 800c964:	d904      	bls.n	800c970 <_raise_r+0x14>
 800c966:	2316      	movs	r3, #22
 800c968:	6003      	str	r3, [r0, #0]
 800c96a:	f04f 30ff 	mov.w	r0, #4294967295
 800c96e:	bd38      	pop	{r3, r4, r5, pc}
 800c970:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c972:	b112      	cbz	r2, 800c97a <_raise_r+0x1e>
 800c974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c978:	b94b      	cbnz	r3, 800c98e <_raise_r+0x32>
 800c97a:	4628      	mov	r0, r5
 800c97c:	f000 f830 	bl	800c9e0 <_getpid_r>
 800c980:	4622      	mov	r2, r4
 800c982:	4601      	mov	r1, r0
 800c984:	4628      	mov	r0, r5
 800c986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c98a:	f000 b817 	b.w	800c9bc <_kill_r>
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d00a      	beq.n	800c9a8 <_raise_r+0x4c>
 800c992:	1c59      	adds	r1, r3, #1
 800c994:	d103      	bne.n	800c99e <_raise_r+0x42>
 800c996:	2316      	movs	r3, #22
 800c998:	6003      	str	r3, [r0, #0]
 800c99a:	2001      	movs	r0, #1
 800c99c:	e7e7      	b.n	800c96e <_raise_r+0x12>
 800c99e:	2100      	movs	r1, #0
 800c9a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	4798      	blx	r3
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e7e0      	b.n	800c96e <_raise_r+0x12>

0800c9ac <raise>:
 800c9ac:	4b02      	ldr	r3, [pc, #8]	@ (800c9b8 <raise+0xc>)
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	6818      	ldr	r0, [r3, #0]
 800c9b2:	f7ff bfd3 	b.w	800c95c <_raise_r>
 800c9b6:	bf00      	nop
 800c9b8:	20000198 	.word	0x20000198

0800c9bc <_kill_r>:
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	4d07      	ldr	r5, [pc, #28]	@ (800c9dc <_kill_r+0x20>)
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	4608      	mov	r0, r1
 800c9c6:	4611      	mov	r1, r2
 800c9c8:	602b      	str	r3, [r5, #0]
 800c9ca:	f7f8 fdcb 	bl	8005564 <_kill>
 800c9ce:	1c43      	adds	r3, r0, #1
 800c9d0:	d102      	bne.n	800c9d8 <_kill_r+0x1c>
 800c9d2:	682b      	ldr	r3, [r5, #0]
 800c9d4:	b103      	cbz	r3, 800c9d8 <_kill_r+0x1c>
 800c9d6:	6023      	str	r3, [r4, #0]
 800c9d8:	bd38      	pop	{r3, r4, r5, pc}
 800c9da:	bf00      	nop
 800c9dc:	20003818 	.word	0x20003818

0800c9e0 <_getpid_r>:
 800c9e0:	f7f8 bdb8 	b.w	8005554 <_getpid>

0800c9e4 <__swhatbuf_r>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ec:	2900      	cmp	r1, #0
 800c9ee:	b096      	sub	sp, #88	@ 0x58
 800c9f0:	4615      	mov	r5, r2
 800c9f2:	461e      	mov	r6, r3
 800c9f4:	da0d      	bge.n	800ca12 <__swhatbuf_r+0x2e>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9fc:	f04f 0100 	mov.w	r1, #0
 800ca00:	bf14      	ite	ne
 800ca02:	2340      	movne	r3, #64	@ 0x40
 800ca04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca08:	2000      	movs	r0, #0
 800ca0a:	6031      	str	r1, [r6, #0]
 800ca0c:	602b      	str	r3, [r5, #0]
 800ca0e:	b016      	add	sp, #88	@ 0x58
 800ca10:	bd70      	pop	{r4, r5, r6, pc}
 800ca12:	466a      	mov	r2, sp
 800ca14:	f000 f848 	bl	800caa8 <_fstat_r>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	dbec      	blt.n	800c9f6 <__swhatbuf_r+0x12>
 800ca1c:	9901      	ldr	r1, [sp, #4]
 800ca1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca26:	4259      	negs	r1, r3
 800ca28:	4159      	adcs	r1, r3
 800ca2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca2e:	e7eb      	b.n	800ca08 <__swhatbuf_r+0x24>

0800ca30 <__smakebuf_r>:
 800ca30:	898b      	ldrh	r3, [r1, #12]
 800ca32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca34:	079d      	lsls	r5, r3, #30
 800ca36:	4606      	mov	r6, r0
 800ca38:	460c      	mov	r4, r1
 800ca3a:	d507      	bpl.n	800ca4c <__smakebuf_r+0x1c>
 800ca3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	6123      	str	r3, [r4, #16]
 800ca44:	2301      	movs	r3, #1
 800ca46:	6163      	str	r3, [r4, #20]
 800ca48:	b003      	add	sp, #12
 800ca4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca4c:	ab01      	add	r3, sp, #4
 800ca4e:	466a      	mov	r2, sp
 800ca50:	f7ff ffc8 	bl	800c9e4 <__swhatbuf_r>
 800ca54:	9f00      	ldr	r7, [sp, #0]
 800ca56:	4605      	mov	r5, r0
 800ca58:	4639      	mov	r1, r7
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7fe fc08 	bl	800b270 <_malloc_r>
 800ca60:	b948      	cbnz	r0, 800ca76 <__smakebuf_r+0x46>
 800ca62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca66:	059a      	lsls	r2, r3, #22
 800ca68:	d4ee      	bmi.n	800ca48 <__smakebuf_r+0x18>
 800ca6a:	f023 0303 	bic.w	r3, r3, #3
 800ca6e:	f043 0302 	orr.w	r3, r3, #2
 800ca72:	81a3      	strh	r3, [r4, #12]
 800ca74:	e7e2      	b.n	800ca3c <__smakebuf_r+0xc>
 800ca76:	89a3      	ldrh	r3, [r4, #12]
 800ca78:	6020      	str	r0, [r4, #0]
 800ca7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca7e:	81a3      	strh	r3, [r4, #12]
 800ca80:	9b01      	ldr	r3, [sp, #4]
 800ca82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca86:	b15b      	cbz	r3, 800caa0 <__smakebuf_r+0x70>
 800ca88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f000 f81d 	bl	800cacc <_isatty_r>
 800ca92:	b128      	cbz	r0, 800caa0 <__smakebuf_r+0x70>
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	f023 0303 	bic.w	r3, r3, #3
 800ca9a:	f043 0301 	orr.w	r3, r3, #1
 800ca9e:	81a3      	strh	r3, [r4, #12]
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	431d      	orrs	r5, r3
 800caa4:	81a5      	strh	r5, [r4, #12]
 800caa6:	e7cf      	b.n	800ca48 <__smakebuf_r+0x18>

0800caa8 <_fstat_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4d07      	ldr	r5, [pc, #28]	@ (800cac8 <_fstat_r+0x20>)
 800caac:	2300      	movs	r3, #0
 800caae:	4604      	mov	r4, r0
 800cab0:	4608      	mov	r0, r1
 800cab2:	4611      	mov	r1, r2
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	f7f8 fdb5 	bl	8005624 <_fstat>
 800caba:	1c43      	adds	r3, r0, #1
 800cabc:	d102      	bne.n	800cac4 <_fstat_r+0x1c>
 800cabe:	682b      	ldr	r3, [r5, #0]
 800cac0:	b103      	cbz	r3, 800cac4 <_fstat_r+0x1c>
 800cac2:	6023      	str	r3, [r4, #0]
 800cac4:	bd38      	pop	{r3, r4, r5, pc}
 800cac6:	bf00      	nop
 800cac8:	20003818 	.word	0x20003818

0800cacc <_isatty_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	4d06      	ldr	r5, [pc, #24]	@ (800cae8 <_isatty_r+0x1c>)
 800cad0:	2300      	movs	r3, #0
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	602b      	str	r3, [r5, #0]
 800cad8:	f7f8 fdb4 	bl	8005644 <_isatty>
 800cadc:	1c43      	adds	r3, r0, #1
 800cade:	d102      	bne.n	800cae6 <_isatty_r+0x1a>
 800cae0:	682b      	ldr	r3, [r5, #0]
 800cae2:	b103      	cbz	r3, 800cae6 <_isatty_r+0x1a>
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	bd38      	pop	{r3, r4, r5, pc}
 800cae8:	20003818 	.word	0x20003818

0800caec <_init>:
 800caec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caee:	bf00      	nop
 800caf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caf2:	bc08      	pop	{r3}
 800caf4:	469e      	mov	lr, r3
 800caf6:	4770      	bx	lr

0800caf8 <_fini>:
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafa:	bf00      	nop
 800cafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cafe:	bc08      	pop	{r3}
 800cb00:	469e      	mov	lr, r3
 800cb02:	4770      	bx	lr
